
MemsDemo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  08012228  08012228  00022228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ae8  08012ae8  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08012ae8  08012ae8  00022ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012af0  08012af0  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012af0  08012af0  00022af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012af4  08012af4  00022af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08012af8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b40  20000094  08012b8c  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bd4  08012b8c  00032bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000455a6  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007281  00000000  00000000  0007566a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003908  00000000  00000000  0007c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000035c8  00000000  00000000  000801f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030bf4  00000000  00000000  000837c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039ecf  00000000  00000000  000b43b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118ce4  00000000  00000000  000ee283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00206f67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ff90  00000000  00000000  00206fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012210 	.word	0x08012210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08012210 	.word	0x08012210

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0080 	ldr.w	r0, [pc, #128]	; 8000258 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d32e      	bcc.n	800024a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d312      	bcc.n	800021c <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000214:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000216:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021a:	4770      	bx	lr

0800021c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800021c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800021e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000220:	d317      	bcc.n	8000252 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000222:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000224:	1b12      	subs	r2, r2, r4

08000226 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000226:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800022e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000230:	d1f9      	bne.n	8000226 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000232:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000234:	d005      	beq.n	8000242 <_No2ChunkNeeded>

08000236 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000236:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023a:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800023e:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000240:	d1f9      	bne.n	8000236 <_LoopCopyAfterWrapAround>

08000242 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000242:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000244:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000248:	4770      	bx	lr

0800024a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800024a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800024c:	3801      	subs	r0, #1
        CMP      R0,R2
 800024e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000250:	d2d1      	bcs.n	80001f6 <_Case4>

08000252 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000252:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000254:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000256:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000258:	20001a80 	.word	0x20001a80

0800025c <strlen>:
 800025c:	4603      	mov	r3, r0
 800025e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000262:	2a00      	cmp	r2, #0
 8000264:	d1fb      	bne.n	800025e <strlen+0x2>
 8000266:	1a18      	subs	r0, r3, r0
 8000268:	3801      	subs	r0, #1
 800026a:	4770      	bx	lr
 800026c:	0000      	movs	r0, r0
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <bsp_lis3mdl_init>:
#include <lis3mdl_reg.h>
#include <b_l475e_iot01a1_bus.h>

static LIS3MDL_Object_t bsp_lis3mdl_Obj = { 0 };

int32_t bsp_lis3mdl_init() {
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
	LIS3MDL_IO_t mag_io_ctx;
	lis3mdl_ctrl_reg2_t ctrl2_c;
	uint8_t id;

	mag_io_ctx.BusType = LIS3MDL_I2C_BUS;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
	mag_io_ctx.Address = LIS3MDL_I2C_ADD_H;
 800061e:	233d      	movs	r3, #61	; 0x3d
 8000620:	763b      	strb	r3, [r7, #24]
	mag_io_ctx.Init = BSP_I2C2_Init;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <bsp_lis3mdl_init+0x8c>)
 8000624:	60fb      	str	r3, [r7, #12]
	mag_io_ctx.DeInit = BSP_I2C2_DeInit;
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <bsp_lis3mdl_init+0x90>)
 8000628:	613b      	str	r3, [r7, #16]
	mag_io_ctx.ReadReg = BSP_I2C2_ReadReg;
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <bsp_lis3mdl_init+0x94>)
 800062c:	623b      	str	r3, [r7, #32]
	mag_io_ctx.WriteReg = BSP_I2C2_WriteReg;
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <bsp_lis3mdl_init+0x98>)
 8000630:	61fb      	str	r3, [r7, #28]
	mag_io_ctx.GetTick = BSP_GetTick;
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <bsp_lis3mdl_init+0x9c>)
 8000634:	627b      	str	r3, [r7, #36]	; 0x24

	if (LIS3MDL_RegisterBusIO(&bsp_lis3mdl_Obj,	&mag_io_ctx) != LIS3MDL_OK) {
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	481d      	ldr	r0, [pc, #116]	; (80006b4 <bsp_lis3mdl_init+0xa0>)
 800063e:	f001 fe29 	bl	8002294 <LIS3MDL_RegisterBusIO>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <bsp_lis3mdl_init+0x3a>
		return LIS3MDL_ERROR;
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	e024      	b.n	8000698 <bsp_lis3mdl_init+0x84>
	}

	// Vefify we're connected to correct sensor
	if (LIS3MDL_ReadID(&bsp_lis3mdl_Obj, &id) != LIS3MDL_OK) {
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	4619      	mov	r1, r3
 8000652:	4818      	ldr	r0, [pc, #96]	; (80006b4 <bsp_lis3mdl_init+0xa0>)
 8000654:	f001 fec0 	bl	80023d8 <LIS3MDL_ReadID>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <bsp_lis3mdl_init+0x50>
		return LIS3MDL_ERROR;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	e019      	b.n	8000698 <bsp_lis3mdl_init+0x84>
	} else {
		if (id != LIS3MDL_ID) {
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b3d      	cmp	r3, #61	; 0x3d
 8000668:	d002      	beq.n	8000670 <bsp_lis3mdl_init+0x5c>
			return LIS3MDL_ERROR;
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	e013      	b.n	8000698 <bsp_lis3mdl_init+0x84>
		}
	}

	// ************** TEST CODE REMOVE! *******
	LIS3MDL_Init(&bsp_lis3mdl_Obj);
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <bsp_lis3mdl_init+0xa0>)
 8000672:	f001 fe75 	bl	8002360 <LIS3MDL_Init>

	// Setup interrupt on data ready
	if (lis3mdl_int_generation_set(&(bsp_lis3mdl_Obj.Ctx),1) != LIS3MDL_OK) {
 8000676:	2101      	movs	r1, #1
 8000678:	480f      	ldr	r0, [pc, #60]	; (80006b8 <bsp_lis3mdl_init+0xa4>)
 800067a:	f002 f95a 	bl	8002932 <lis3mdl_int_generation_set>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <bsp_lis3mdl_init+0x76>
		return LIS3MDL_ERROR;
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	e006      	b.n	8000698 <bsp_lis3mdl_init+0x84>
	}

	bsp_lis3mdl_enable();
 800068a:	f000 f817 	bl	80006bc <bsp_lis3mdl_enable>
	bsp_lis3mdl_Obj.is_initialized = 1;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <bsp_lis3mdl_init+0xa0>)
 8000690:	2201      	movs	r2, #1
 8000692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	return LIS3MDL_OK;
 8000696:	2300      	movs	r3, #0


	bsp_lis3mdl_Obj.is_initialized = 1;

	return LIS3MDL_OK;
}
 8000698:	4618      	mov	r0, r3
 800069a:	3728      	adds	r7, #40	; 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	08001e8d 	.word	0x08001e8d
 80006a4:	08001f09 	.word	0x08001f09
 80006a8:	08001fbd 	.word	0x08001fbd
 80006ac:	08001f59 	.word	0x08001f59
 80006b0:	08002021 	.word	0x08002021
 80006b4:	200000b0 	.word	0x200000b0
 80006b8:	200000cc 	.word	0x200000cc

080006bc <bsp_lis3mdl_enable>:


int32_t bsp_lis3mdl_enable(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

	// Clear any pending data
	while (HAL_GPIO_ReadPin(LSM3DSL_DRDY_EXTI8_GPIO_Port, LSM3DSL_DRDY_EXTI8_Pin) == GPIO_PIN_SET) {
 80006c2:	e00a      	b.n	80006da <bsp_lis3mdl_enable+0x1e>
		LIS3MDL_AxesRaw_t Value;

		if (LIS3MDL_MAG_GetAxesRaw(&bsp_lis3mdl_Obj, &Value) != LIS3MDL_OK) {
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	480f      	ldr	r0, [pc, #60]	; (8000708 <bsp_lis3mdl_enable+0x4c>)
 80006ca:	f001 ff4d 	bl	8002568 <LIS3MDL_MAG_GetAxesRaw>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d002      	beq.n	80006da <bsp_lis3mdl_enable+0x1e>
			return LIS3MDL_ERROR;
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	e011      	b.n	80006fe <bsp_lis3mdl_enable+0x42>
	while (HAL_GPIO_ReadPin(LSM3DSL_DRDY_EXTI8_GPIO_Port, LSM3DSL_DRDY_EXTI8_Pin) == GPIO_PIN_SET) {
 80006da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <bsp_lis3mdl_enable+0x50>)
 80006e0:	f004 f804 	bl	80046ec <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d0ec      	beq.n	80006c4 <bsp_lis3mdl_enable+0x8>
		}
	}

	// Start up mag
	if (LIS3MDL_MAG_Enable(&bsp_lis3mdl_Obj) != LIS3MDL_OK) {
 80006ea:	4807      	ldr	r0, [pc, #28]	; (8000708 <bsp_lis3mdl_enable+0x4c>)
 80006ec:	f001 fe8a 	bl	8002404 <LIS3MDL_MAG_Enable>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <bsp_lis3mdl_enable+0x40>
		return LIS3MDL_ERROR;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	e000      	b.n	80006fe <bsp_lis3mdl_enable+0x42>
	}

	return LIS3MDL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000b0 	.word	0x200000b0
 800070c:	48000800 	.word	0x48000800

08000710 <bsp_lsm6dsl_init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */

int32_t bsp_lsm6dsl_init() {
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
	LSM6DSL_IO_t io_ctx;
	lsm6dsl_ctrl3_c_t ctrl3_c;
	uint8_t id;

	io_ctx.BusType = LSM6DSL_I2C_BUS;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
	io_ctx.Address = LSM6DSL_I2C_ADD_L;
 800071a:	23d5      	movs	r3, #213	; 0xd5
 800071c:	763b      	strb	r3, [r7, #24]
	io_ctx.Init = BSP_I2C2_Init;
 800071e:	4b52      	ldr	r3, [pc, #328]	; (8000868 <bsp_lsm6dsl_init+0x158>)
 8000720:	60fb      	str	r3, [r7, #12]
	io_ctx.DeInit = BSP_I2C2_DeInit;
 8000722:	4b52      	ldr	r3, [pc, #328]	; (800086c <bsp_lsm6dsl_init+0x15c>)
 8000724:	613b      	str	r3, [r7, #16]
	io_ctx.ReadReg = BSP_I2C2_ReadReg;
 8000726:	4b52      	ldr	r3, [pc, #328]	; (8000870 <bsp_lsm6dsl_init+0x160>)
 8000728:	623b      	str	r3, [r7, #32]
	io_ctx.WriteReg = BSP_I2C2_WriteReg;
 800072a:	4b52      	ldr	r3, [pc, #328]	; (8000874 <bsp_lsm6dsl_init+0x164>)
 800072c:	61fb      	str	r3, [r7, #28]
	io_ctx.GetTick = BSP_GetTick;
 800072e:	4b52      	ldr	r3, [pc, #328]	; (8000878 <bsp_lsm6dsl_init+0x168>)
 8000730:	627b      	str	r3, [r7, #36]	; 0x24

	if (LSM6DSL_RegisterBusIO(&bsp_lsm6dsl_Obj, &io_ctx) != LSM6DSL_OK) {
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	4850      	ldr	r0, [pc, #320]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 800073a:	f002 f921 	bl	8002980 <LSM6DSL_RegisterBusIO>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <bsp_lsm6dsl_init+0x3a>
		return LSM6DSL_ERROR;
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	e089      	b.n	800085e <bsp_lsm6dsl_init+0x14e>
	}

	// Vefify sensor ID
	if (LSM6DSL_ReadID(&bsp_lsm6dsl_Obj, &id) != LSM6DSL_OK) {
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	4619      	mov	r1, r3
 800074e:	484b      	ldr	r0, [pc, #300]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 8000750:	f002 f9e5 	bl	8002b1e <LSM6DSL_ReadID>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <bsp_lsm6dsl_init+0x50>
		return LSM6DSL_ERROR;
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	e07e      	b.n	800085e <bsp_lsm6dsl_init+0x14e>
	}

	if (id != LSM6DSL_ID) {
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b6a      	cmp	r3, #106	; 0x6a
 8000764:	d002      	beq.n	800076c <bsp_lsm6dsl_init+0x5c>
		return LSM6DSL_ERROR;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	e078      	b.n	800085e <bsp_lsm6dsl_init+0x14e>
	}

	// Reset device
	if (lsm6dsl_reset_set(&bsp_lsm6dsl_Obj.Ctx, 1) != LSM6DSL_OK) {
 800076c:	2101      	movs	r1, #1
 800076e:	4844      	ldr	r0, [pc, #272]	; (8000880 <bsp_lsm6dsl_init+0x170>)
 8000770:	f002 fd4d 	bl	800320e <lsm6dsl_reset_set>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <bsp_lsm6dsl_init+0x70>
		return LSM6DSL_ERROR;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	e06e      	b.n	800085e <bsp_lsm6dsl_init+0x14e>
	}

	// Wait for reset to complete
	do {
		if (lsm6dsl_read_reg(&bsp_lsm6dsl_Obj.Ctx, LSM6DSL_CTRL3_C,
 8000780:	f107 0208 	add.w	r2, r7, #8
 8000784:	2301      	movs	r3, #1
 8000786:	2112      	movs	r1, #18
 8000788:	483d      	ldr	r0, [pc, #244]	; (8000880 <bsp_lsm6dsl_init+0x170>)
 800078a:	f002 fb76 	bl	8002e7a <lsm6dsl_read_reg>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <bsp_lsm6dsl_init+0x8a>
				(uint8_t*) &ctrl3_c, 1) != LSM6DSL_OK) {
			return LSM6DSL_ERROR;
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	e061      	b.n	800085e <bsp_lsm6dsl_init+0x14e>
		}
	} while (ctrl3_c.sw_reset == 1);
 800079a:	7a3b      	ldrb	r3, [r7, #8]
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1ec      	bne.n	8000780 <bsp_lsm6dsl_init+0x70>


	// Init using default settings
	if (LSM6DSL_Init(&bsp_lsm6dsl_Obj) != LSM6DSL_OK) {
 80007a6:	4835      	ldr	r0, [pc, #212]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 80007a8:	f002 f950 	bl	8002a4c <LSM6DSL_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <bsp_lsm6dsl_init+0xa8>
		return LSM6DSL_ERROR;
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	e052      	b.n	800085e <bsp_lsm6dsl_init+0x14e>
	}

	// Override default data rate for acc and gyro
	bsp_lsm6dsl_Obj.acc_odr = (lsm6dsl_odr_xl_t) GYRO_ACC_RATE;
 80007b8:	4b30      	ldr	r3, [pc, #192]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 80007ba:	2206      	movs	r2, #6
 80007bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	bsp_lsm6dsl_Obj.gyro_odr = (lsm6dsl_odr_g_t) GYRO_ACC_RATE;
 80007c0:	4b2e      	ldr	r3, [pc, #184]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 80007c2:	2206      	movs	r2, #6
 80007c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	LSM6DSL_ACC_Disable(&bsp_lsm6dsl_Obj);
 80007c8:	482c      	ldr	r0, [pc, #176]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 80007ca:	f002 f9e2 	bl	8002b92 <LSM6DSL_ACC_Disable>
	LSM6DSL_GYRO_Disable(&bsp_lsm6dsl_Obj);
 80007ce:	482b      	ldr	r0, [pc, #172]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 80007d0:	f002 fa32 	bl	8002c38 <LSM6DSL_GYRO_Disable>

	if (lsm6dsl_fifo_data_rate_set(&(bsp_lsm6dsl_Obj.Ctx),
 80007d4:	2106      	movs	r1, #6
 80007d6:	482a      	ldr	r0, [pc, #168]	; (8000880 <bsp_lsm6dsl_init+0x170>)
 80007d8:	f002 ff70 	bl	80036bc <lsm6dsl_fifo_data_rate_set>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <bsp_lsm6dsl_init+0xd8>
			(lsm6dsl_odr_fifo_t) GYRO_ACC_RATE) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e03a      	b.n	800085e <bsp_lsm6dsl_init+0x14e>
	}

	if (LSM6DSL_FIFO_ACC_Set_Decimation(&bsp_lsm6dsl_Obj,
 80007e8:	2101      	movs	r1, #1
 80007ea:	4824      	ldr	r0, [pc, #144]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 80007ec:	f002 fabf 	bl	8002d6e <LSM6DSL_FIFO_ACC_Set_Decimation>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <bsp_lsm6dsl_init+0xec>
			LSM6DSL_FIFO_XL_NO_DEC) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	e030      	b.n	800085e <bsp_lsm6dsl_init+0x14e>
	}

	if (LSM6DSL_FIFO_GYRO_Set_Decimation(&bsp_lsm6dsl_Obj,
 80007fc:	2101      	movs	r1, #1
 80007fe:	481f      	ldr	r0, [pc, #124]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 8000800:	f002 fadd 	bl	8002dbe <LSM6DSL_FIFO_GYRO_Set_Decimation>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <bsp_lsm6dsl_init+0x100>
			LSM6DSL_FIFO_GY_NO_DEC) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	e026      	b.n	800085e <bsp_lsm6dsl_init+0x14e>
	}

	if (LSM6DSL_FIFO_Set_Mode(&bsp_lsm6dsl_Obj,
 8000810:	2106      	movs	r1, #6
 8000812:	481a      	ldr	r0, [pc, #104]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 8000814:	f002 fa72 	bl	8002cfc <LSM6DSL_FIFO_Set_Mode>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d002      	beq.n	8000824 <bsp_lsm6dsl_init+0x114>
			LSM6DSL_STREAM_MODE) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	e01c      	b.n	800085e <bsp_lsm6dsl_init+0x14e>
	}

	if (LSM6DSL_FIFO_Set_Watermark_Level(&bsp_lsm6dsl_Obj,
 8000824:	213c      	movs	r1, #60	; 0x3c
 8000826:	4815      	ldr	r0, [pc, #84]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 8000828:	f002 fa50 	bl	8002ccc <LSM6DSL_FIFO_Set_Watermark_Level>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <bsp_lsm6dsl_init+0x128>
			GYRO_ACC_WATERMARK) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	e012      	b.n	800085e <bsp_lsm6dsl_init+0x14e>
	}

	// Setup watermark interrupt
	lsm6dsl_int1_route_t fth_route = { 0 };
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2100      	movs	r1, #0
 800083c:	460a      	mov	r2, r1
 800083e:	801a      	strh	r2, [r3, #0]
 8000840:	460a      	mov	r2, r1
 8000842:	709a      	strb	r2, [r3, #2]
	fth_route.int1_fth = 1;
 8000844:	793b      	ldrb	r3, [r7, #4]
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&(bsp_lsm6dsl_Obj.Ctx), fth_route);
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <bsp_lsm6dsl_init+0x170>)
 8000850:	f002 fd29 	bl	80032a6 <lsm6dsl_pin_int1_route_set>

	bsp_lsm6dsl_Obj.is_initialized = 1;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <bsp_lsm6dsl_init+0x16c>)
 8000856:	2201      	movs	r2, #1
 8000858:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	return LSM6DSL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3728      	adds	r7, #40	; 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	08001e8d 	.word	0x08001e8d
 800086c:	08001f09 	.word	0x08001f09
 8000870:	08001fbd 	.word	0x08001fbd
 8000874:	08001f59 	.word	0x08001f59
 8000878:	08002021 	.word	0x08002021
 800087c:	200000dc 	.word	0x200000dc
 8000880:	200000f8 	.word	0x200000f8

08000884 <bsp_lsm6dsl_enable>:

void bsp_lsm6dsl_enable(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	LSM6DSL_ACC_Enable(&bsp_lsm6dsl_Obj);
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <bsp_lsm6dsl_enable+0x14>)
 800088a:	f002 f95e 	bl	8002b4a <LSM6DSL_ACC_Enable>
	LSM6DSL_GYRO_Enable(&bsp_lsm6dsl_Obj);
 800088e:	4802      	ldr	r0, [pc, #8]	; (8000898 <bsp_lsm6dsl_enable+0x14>)
 8000890:	f002 f9ae 	bl	8002bf0 <LSM6DSL_GYRO_Enable>
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000dc 	.word	0x200000dc

0800089c <DebugExtAnalyzerPulse1>:

#include "debug_analyzer.h"
#include "main.h"

void DebugExtAnalyzerPulse1(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(ExtAnalyzer1_GPIO_Port, ExtAnalyzer1_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2120      	movs	r1, #32
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <DebugExtAnalyzerPulse1+0x1c>)
 80008a6:	f003 ff39 	bl	800471c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ExtAnalyzer1_GPIO_Port, ExtAnalyzer1_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2120      	movs	r1, #32
 80008ae:	4802      	ldr	r0, [pc, #8]	; (80008b8 <DebugExtAnalyzerPulse1+0x1c>)
 80008b0:	f003 ff34 	bl	800471c <HAL_GPIO_WritePin>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	48000800 	.word	0x48000800

080008bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80008cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <vApplicationGetIdleTaskMemory+0x30>)
 80008d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	2000010c 	.word	0x2000010c
 80008ec:	200001c0 	.word	0x200001c0

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b5b0      	push	{r4, r5, r7, lr}
 80008f2:	b08e      	sub	sp, #56	; 0x38
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f002 ff07 	bl	8003708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f849 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f000 f9f9 	bl	8000cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000902:	f000 f9d1 	bl	8000ca8 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000906:	f000 f8a5 	bl	8000a54 <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 800090a:	f000 f8db 	bl	8000ac4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800090e:	f000 f8ff 	bl	8000b10 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000912:	f000 f93b 	bl	8000b8c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000916:	f000 f969 	bl	8000bec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800091a:	f000 f997 	bl	8000c4c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 800091e:	f00e fec9 	bl	800f6b4 <SEGGER_SYSVIEW_Conf>
  SensorBus1_Init(&AccGyroCallback, &MagCallback);
 8000922:	4915      	ldr	r1, [pc, #84]	; (8000978 <main+0x88>)
 8000924:	4815      	ldr	r0, [pc, #84]	; (800097c <main+0x8c>)
 8000926:	f000 fd07 	bl	8001338 <SensorBus1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <main+0x90>)
 800092c:	f107 041c 	add.w	r4, r7, #28
 8000930:	461d      	mov	r5, r3
 8000932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000936:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800093a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f00a fbd8 	bl	800b0fa <osThreadCreate>
 800094a:	4603      	mov	r3, r0
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <main+0x94>)
 800094e:	6013      	str	r3, [r2, #0]

  /* definition and creation of remoteCommTask */
  osThreadDef(remoteCommTask, StartRemoteCommTask, osPriorityIdle, 0, 256);
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <main+0x98>)
 8000952:	463c      	mov	r4, r7
 8000954:	461d      	mov	r5, r3
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800095e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  remoteCommTaskHandle = osThreadCreate(osThread(remoteCommTask), NULL);
 8000962:	463b      	mov	r3, r7
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f00a fbc7 	bl	800b0fa <osThreadCreate>
 800096c:	4603      	mov	r3, r0
 800096e:	4a07      	ldr	r2, [pc, #28]	; (800098c <main+0x9c>)
 8000970:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000972:	f00a fbbb 	bl	800b0ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000976:	e7fe      	b.n	8000976 <main+0x86>
 8000978:	080011d5 	.word	0x080011d5
 800097c:	080010e9 	.word	0x080010e9
 8000980:	08012260 	.word	0x08012260
 8000984:	20000ab4 	.word	0x20000ab4
 8000988:	0801227c 	.word	0x0801227c
 800098c:	20000ab8 	.word	0x20000ab8

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b096      	sub	sp, #88	; 0x58
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2244      	movs	r2, #68	; 0x44
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f010 f9f3 	bl	8010d8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009b6:	f006 f9e3 	bl	8006d80 <HAL_PWREx_ControlVoltageScaling>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009c0:	f000 fc4a 	bl	8001258 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009c4:	f006 f9be 	bl	8006d44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <SystemClock_Config+0xc0>)
 80009ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009ce:	4a20      	ldr	r2, [pc, #128]	; (8000a50 <SystemClock_Config+0xc0>)
 80009d0:	f023 0318 	bic.w	r3, r3, #24
 80009d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009d8:	2314      	movs	r3, #20
 80009da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009dc:	2301      	movs	r3, #1
 80009de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009e8:	2360      	movs	r3, #96	; 0x60
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009f0:	2301      	movs	r3, #1
 80009f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009f8:	2328      	movs	r3, #40	; 0x28
 80009fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009fc:	2307      	movs	r3, #7
 80009fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f006 fad9 	bl	8006fc4 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a18:	f000 fc1e 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	2303      	movs	r3, #3
 8000a22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	2104      	movs	r1, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f006 fea1 	bl	800777c <HAL_RCC_ClockConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a40:	f000 fc0a 	bl	8001258 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a44:	f007 fbda 	bl	80081fc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a48:	bf00      	nop
 8000a4a:	3758      	adds	r7, #88	; 0x58
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000

08000a54 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a5a:	4a19      	ldr	r2, [pc, #100]	; (8000ac0 <MX_DFSDM1_Init+0x6c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a82:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_DFSDM1_Init+0x68>)
 8000aaa:	f002 ff9d 	bl	80039e8 <HAL_DFSDM_ChannelInit>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000ab4:	f000 fbd0 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200003c0 	.word	0x200003c0
 8000ac0:	40016020 	.word	0x40016020

08000ac4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_QUADSPI_Init+0x44>)
 8000aca:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <MX_QUADSPI_Init+0x48>)
 8000acc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_QUADSPI_Init+0x44>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_QUADSPI_Init+0x44>)
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_QUADSPI_Init+0x44>)
 8000adc:	2210      	movs	r2, #16
 8000ade:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_QUADSPI_Init+0x44>)
 8000ae2:	2217      	movs	r2, #23
 8000ae4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_QUADSPI_Init+0x44>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_QUADSPI_Init+0x44>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_QUADSPI_Init+0x44>)
 8000af4:	f006 f9aa 	bl	8006e4c <HAL_QSPI_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000afe:	f000 fbab 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200003f8 	.word	0x200003f8
 8000b0c:	a0001000 	.word	0xa0001000

08000b10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <MX_SPI3_Init+0x78>)
 8000b18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b2a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000b2e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b42:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b46:	2210      	movs	r2, #16
 8000b48:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b5e:	2207      	movs	r2, #7
 8000b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_SPI3_Init+0x74>)
 8000b70:	f007 fd26 	bl	80085c0 <HAL_SPI_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b7a:	f000 fb6d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000043c 	.word	0x2000043c
 8000b88:	40003c00 	.word	0x40003c00

08000b8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_USART1_UART_Init+0x58>)
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_USART1_UART_Init+0x5c>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_USART1_UART_Init+0x58>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART1_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_USART1_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART1_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART1_UART_Init+0x58>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART1_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART1_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART1_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART1_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART1_UART_Init+0x58>)
 8000bd0:	f009 faf8 	bl	800a1c4 <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bda:	f000 fb3d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200004a0 	.word	0x200004a0
 8000be8:	40013800 	.word	0x40013800

08000bec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_USART3_UART_Init+0x58>)
 8000bf2:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <MX_USART3_UART_Init+0x5c>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_USART3_UART_Init+0x58>)
 8000bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART3_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_USART3_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART3_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART3_UART_Init+0x58>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USART3_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USART3_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART3_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART3_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART3_UART_Init+0x58>)
 8000c30:	f009 fac8 	bl	800a1c4 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c3a:	f000 fb0d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000524 	.word	0x20000524
 8000c48:	40004800 	.word	0x40004800

08000c4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c66:	2202      	movs	r2, #2
 8000c68:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c90:	f005 ff0f 	bl	8006ab2 <HAL_PCD_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c9a:	f000 fadd 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200005a8 	.word	0x200005a8

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_DMA_Init+0x48>)
 8000cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <MX_DMA_Init+0x48>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6493      	str	r3, [r2, #72]	; 0x48
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <MX_DMA_Init+0x48>)
 8000cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2105      	movs	r1, #5
 8000cca:	200e      	movs	r0, #14
 8000ccc:	f002 fe54 	bl	8003978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000cd0:	200e      	movs	r0, #14
 8000cd2:	f002 fe6d 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2105      	movs	r1, #5
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f002 fe4c 	bl	8003978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ce0:	200f      	movs	r0, #15
 8000ce2:	f002 fe65 	bl	80039b0 <HAL_NVIC_EnableIRQ>

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0a:	4bbb      	ldr	r3, [pc, #748]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4aba      	ldr	r2, [pc, #744]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4bb8      	ldr	r3, [pc, #736]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	61bb      	str	r3, [r7, #24]
 8000d20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	4bb5      	ldr	r3, [pc, #724]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4ab4      	ldr	r2, [pc, #720]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4bb2      	ldr	r3, [pc, #712]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	4baf      	ldr	r3, [pc, #700]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4aae      	ldr	r2, [pc, #696]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4bac      	ldr	r3, [pc, #688]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4ba9      	ldr	r3, [pc, #676]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4aa8      	ldr	r2, [pc, #672]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4ba6      	ldr	r3, [pc, #664]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4ba3      	ldr	r3, [pc, #652]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4aa2      	ldr	r2, [pc, #648]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4ba0      	ldr	r3, [pc, #640]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	4b9d      	ldr	r3, [pc, #628]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a9c      	ldr	r2, [pc, #624]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b9a      	ldr	r3, [pc, #616]	; (8000ff8 <MX_GPIO_Init+0x304>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000da0:	4896      	ldr	r0, [pc, #600]	; (8000ffc <MX_GPIO_Init+0x308>)
 8000da2:	f003 fcbb 	bl	800471c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ExtAnalyzer4_Pin|ExtAnalyzer3_Pin|ExtAnalyzer2_Pin|ExtAnalyzer1_Pin
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8000dac:	4894      	ldr	r0, [pc, #592]	; (8001000 <MX_GPIO_Init+0x30c>)
 8000dae:	f003 fcb5 	bl	800471c <HAL_GPIO_WritePin>
                          |VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f248 1104 	movw	r1, #33028	; 0x8104
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f003 fcae 	bl	800471c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|GPIO_PIN_14
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000dc6:	488f      	ldr	r0, [pc, #572]	; (8001004 <MX_GPIO_Init+0x310>)
 8000dc8:	f003 fca8 	bl	800471c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f241 0181 	movw	r1, #4225	; 0x1081
 8000dd2:	488d      	ldr	r0, [pc, #564]	; (8001008 <MX_GPIO_Init+0x314>)
 8000dd4:	f003 fca2 	bl	800471c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dde:	488a      	ldr	r0, [pc, #552]	; (8001008 <MX_GPIO_Init+0x314>)
 8000de0:	f003 fc9c 	bl	800471c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2101      	movs	r1, #1
 8000de8:	4884      	ldr	r0, [pc, #528]	; (8000ffc <MX_GPIO_Init+0x308>)
 8000dea:	f003 fc97 	bl	800471c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000dee:	f240 1315 	movw	r3, #277	; 0x115
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	487d      	ldr	r0, [pc, #500]	; (8000ffc <MX_GPIO_Init+0x308>)
 8000e08:	f003 f9d2 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e0c:	236a      	movs	r3, #106	; 0x6a
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4876      	ldr	r0, [pc, #472]	; (8000ffc <MX_GPIO_Init+0x308>)
 8000e22:	f003 f9c5 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4870      	ldr	r0, [pc, #448]	; (8001000 <MX_GPIO_Init+0x30c>)
 8000e3e:	f003 f9b7 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin;
 8000e42:	2303      	movs	r3, #3
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e46:	230b      	movs	r3, #11
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	486a      	ldr	r0, [pc, #424]	; (8001000 <MX_GPIO_Init+0x30c>)
 8000e56:	f003 f9ab 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ExtAnalyzer4_Pin ExtAnalyzer3_Pin ExtAnalyzer2_Pin ExtAnalyzer1_Pin */
  GPIO_InitStruct.Pin = ExtAnalyzer4_Pin|ExtAnalyzer3_Pin|ExtAnalyzer2_Pin|ExtAnalyzer1_Pin;
 8000e5a:	233c      	movs	r3, #60	; 0x3c
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4863      	ldr	r0, [pc, #396]	; (8001000 <MX_GPIO_Init+0x30c>)
 8000e72:	f003 f99d 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000e76:	2303      	movs	r3, #3
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e86:	2308      	movs	r3, #8
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f003 f98c 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000e98:	f248 1304 	movw	r3, #33028	; 0x8104
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb4:	f003 f97c 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f003 f96b 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000eda:	2310      	movs	r3, #16
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ede:	230b      	movs	r3, #11
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f003 f95e 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ef4:	23e0      	movs	r3, #224	; 0xe0
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f04:	2305      	movs	r3, #5
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f003 f94d 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4836      	ldr	r0, [pc, #216]	; (8001004 <MX_GPIO_Init+0x310>)
 8000f2c:	f003 f940 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f34:	230b      	movs	r3, #11
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4830      	ldr	r0, [pc, #192]	; (8001004 <MX_GPIO_Init+0x310>)
 8000f44:	f003 f934 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin PB14
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|GPIO_PIN_14
 8000f48:	f24f 0314 	movw	r3, #61460	; 0xf014
 8000f4c:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4828      	ldr	r0, [pc, #160]	; (8001004 <MX_GPIO_Init+0x310>)
 8000f62:	f003 f925 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000f66:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000f6a:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4822      	ldr	r0, [pc, #136]	; (8001008 <MX_GPIO_Init+0x314>)
 8000f7e:	f003 f917 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000f82:	f243 0381 	movw	r3, #12417	; 0x3081
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <MX_GPIO_Init+0x314>)
 8000f9c:	f003 f908 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fa0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4811      	ldr	r0, [pc, #68]	; (8001000 <MX_GPIO_Init+0x30c>)
 8000fba:	f003 f8f9 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3DSL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3DSL_DRDY_EXTI8_Pin;
 8000fbe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480a      	ldr	r0, [pc, #40]	; (8001000 <MX_GPIO_Init+0x30c>)
 8000fd6:	f003 f8eb 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fea:	2305      	movs	r3, #5
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	e00a      	b.n	800100c <MX_GPIO_Init+0x318>
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48001000 	.word	0x48001000
 8001000:	48000800 	.word	0x48000800
 8001004:	48000400 	.word	0x48000400
 8001008:	48000c00 	.word	0x48000c00
 800100c:	481f      	ldr	r0, [pc, #124]	; (800108c <MX_GPIO_Init+0x398>)
 800100e:	f003 f8cf 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001012:	2378      	movs	r3, #120	; 0x78
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001022:	2307      	movs	r3, #7
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4817      	ldr	r0, [pc, #92]	; (800108c <MX_GPIO_Init+0x398>)
 800102e:	f003 f8bf 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001032:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001038:	2312      	movs	r3, #18
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001044:	2304      	movs	r3, #4
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <MX_GPIO_Init+0x39c>)
 8001050:	f003 f8ae 	bl	80041b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2105      	movs	r1, #5
 8001058:	2007      	movs	r0, #7
 800105a:	f002 fc8d 	bl	8003978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800105e:	2007      	movs	r0, #7
 8001060:	f002 fca6 	bl	80039b0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2105      	movs	r1, #5
 8001068:	2017      	movs	r0, #23
 800106a:	f002 fc85 	bl	8003978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800106e:	2017      	movs	r0, #23
 8001070:	f002 fc9e 	bl	80039b0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2105      	movs	r1, #5
 8001078:	2028      	movs	r0, #40	; 0x28
 800107a:	f002 fc7d 	bl	8003978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800107e:	2028      	movs	r0, #40	; 0x28
 8001080:	f002 fc96 	bl	80039b0 <HAL_NVIC_EnableIRQ>

}
 8001084:	bf00      	nop
 8001086:	3730      	adds	r7, #48	; 0x30
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	48000c00 	.word	0x48000c00
 8001090:	48000400 	.word	0x48000400

08001094 <HAL_GPIO_EXTI_Callback>:
* @brief  EXTI line detection callback.
* @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
* @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a4:	d00b      	beq.n	80010be <HAL_GPIO_EXTI_Callback+0x2a>
 80010a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010aa:	dc0e      	bgt.n	80010ca <HAL_GPIO_EXTI_Callback+0x36>
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_EXTI_Callback+0x24>
 80010b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010b4:	d006      	beq.n	80010c4 <HAL_GPIO_EXTI_Callback+0x30>
		}


		default:
		{
			break;
 80010b6:	e008      	b.n	80010ca <HAL_GPIO_EXTI_Callback+0x36>
			SPI_WIFI_ISR();
 80010b8:	f00f fc68 	bl	801098c <SPI_WIFI_ISR>
			break;
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_EXTI_Callback+0x38>
			SensorBus1_Gyro_ACC_Intr();
 80010be:	f000 f97d 	bl	80013bc <SensorBus1_Gyro_ACC_Intr>
			break;
 80010c2:	e003      	b.n	80010cc <HAL_GPIO_EXTI_Callback+0x38>
			SensorBus1_Mag_Intr();
 80010c4:	f000 f98a 	bl	80013dc <SensorBus1_Mag_Intr>
			break;
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_EXTI_Callback+0x38>
			break;
 80010ca:	bf00      	nop
		}
	}
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_I2C_MemRxCpltCallback>:


// Here when DMA is complete and data is ready to use
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	SensorBus1_DMA_CallBack();
 80010dc:	f000 f9f0 	bl	80014c0 <SensorBus1_DMA_CallBack>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <AccGyroCallback>:



void AccGyroCallback(GYRO_ACC_t * pRawData, uint16_t numItems) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]

	// First, average raw data
	LSM6DSL_Axes_t gyroAvg = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
	LSM6DSL_Axes_t accAvg = {0};
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]

	GYRO_ACC_t * pCruRawData = pRawData;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t itemCount = numItems;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	847b      	strh	r3, [r7, #34]	; 0x22

	// Now sum data sets
	while(itemCount) {
 8001114:	e029      	b.n	800116a <AccGyroCallback+0x82>
		gyroAvg.x += pCruRawData->gyro_data.x;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800111e:	4413      	add	r3, r2
 8001120:	617b      	str	r3, [r7, #20]
		gyroAvg.y += pCruRawData->gyro_data.y;
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001126:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800112a:	4413      	add	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
		gyroAvg.z += pCruRawData->gyro_data.z;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001132:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001136:	4413      	add	r3, r2
 8001138:	61fb      	str	r3, [r7, #28]

		accAvg.x += pCruRawData->acc_data.x;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001142:	4413      	add	r3, r2
 8001144:	60bb      	str	r3, [r7, #8]
		accAvg.y += pCruRawData->acc_data.y;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
		accAvg.z += pCruRawData->acc_data.z;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001156:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800115a:	4413      	add	r3, r2
 800115c:	613b      	str	r3, [r7, #16]

		pCruRawData++;
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	330c      	adds	r3, #12
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
		itemCount--;
 8001164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001166:	3b01      	subs	r3, #1
 8001168:	847b      	strh	r3, [r7, #34]	; 0x22
	while(itemCount) {
 800116a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1d2      	bne.n	8001116 <AccGyroCallback+0x2e>
	}

	// Complete average
	gyroAvg.x /= numItems;
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	fb92 f3f3 	sdiv	r3, r2, r3
 8001178:	617b      	str	r3, [r7, #20]
	gyroAvg.y /= numItems;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001182:	61bb      	str	r3, [r7, #24]
	gyroAvg.z /= numItems;
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	fb92 f3f3 	sdiv	r3, r2, r3
 800118c:	61fb      	str	r3, [r7, #28]

	accAvg.x /= numItems;
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	fb92 f3f3 	sdiv	r3, r2, r3
 8001196:	60bb      	str	r3, [r7, #8]
	accAvg.y /= numItems;
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	fb92 f3f3 	sdiv	r3, r2, r3
 80011a0:	60fb      	str	r3, [r7, #12]
	accAvg.z /= numItems;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	887b      	ldrh	r3, [r7, #2]
 80011a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80011aa:	613b      	str	r3, [r7, #16]


	SEGGER_SYSVIEW_PrintfHost("Gyro Value: X = %d, Y = %d, Z = %d, ",
 80011ac:	6979      	ldr	r1, [r7, #20]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <AccGyroCallback+0xe4>)
 80011b4:	f00e fa00 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>
			gyroAvg.x, gyroAvg.y, gyroAvg.z);

	SEGGER_SYSVIEW_PrintfHost("Acc Value: X = %d, Y = %d, Z = %d, ",
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <AccGyroCallback+0xe8>)
 80011c0:	f00e f9fa 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>
			accAvg.x, accAvg.y, accAvg.z);
}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	08012298 	.word	0x08012298
 80011d0:	080122c0 	.word	0x080122c0

080011d4 <MagCallback>:


void MagCallback(LIS3MDL_AxesRaw_t * pRawData, uint16_t numItems) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]

	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
				 pRawData->x, pRawData->y, pRawData->z);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f9b3 3000 	ldrsh.w	r3, [r3]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 80011e6:	4619      	mov	r1, r3
				 pRawData->x, pRawData->y, pRawData->z);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 80011ee:	461a      	mov	r2, r3
				 pRawData->x, pRawData->y, pRawData->z);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <MagCallback+0x30>)
 80011f8:	f00e f9de 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	080122e4 	.word	0x080122e4

08001208 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	SensorBus1_Start();
 8001210:	f000 f8cc 	bl	80013ac <SensorBus1_Start>

  for(;;)
  {
	osDelay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f009 ffbc 	bl	800b192 <osDelay>
 800121a:	e7fb      	b.n	8001214 <StartDefaultTask+0xc>

0800121c <StartRemoteCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRemoteCommTask */
void StartRemoteCommTask(void const * argument)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRemoteCommTask */
	RemoteCommTask(argument);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f81d 	bl	8001264 <RemoteCommTask>
  /* USER CODE END StartRemoteCommTask */
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001246:	f002 fa77 	bl	8003738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40000c00 	.word	0x40000c00

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <RemoteCommTask>:
#include "es_wifi_conf.h"

extern Remote_Socket_t Socket_0_conf;

void RemoteCommTask(void const * argument)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b098      	sub	sp, #96	; 0x60
 8001268:	af02      	add	r7, sp, #8
 800126a:	6078      	str	r0, [r7, #4]
	uint8_t TxData[60];
	uint16_t Datalen;
	int count = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	657b      	str	r3, [r7, #84]	; 0x54
	int errors = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c


	WIFI_Status_t WifiStatus = WIFI_STATUS_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	// Wait for ES_WIFI to finish boot
	osDelay(500);
 800127a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800127e:	f009 ff88 	bl	800b192 <osDelay>

	while (1)
	{
		// Repeat connect sequence until we get good connection
		while (WifiStatus != WIFI_STATUS_OK)
 8001282:	e023      	b.n	80012cc <RemoteCommTask+0x68>
		{
			if (WIFI_Init() != WIFI_STATUS_OK) {break;}
 8001284:	f00f fb96 	bl	80109b4 <WIFI_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d123      	bne.n	80012d6 <RemoteCommTask+0x72>

			if (WIFI_Connect(Socket_0_conf.SSID, Socket_0_conf.Password, Socket_0_conf.ecn) != WIFI_STATUS_OK) {break;}
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <RemoteCommTask+0xc4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <RemoteCommTask+0xc4>)
 8001294:	6851      	ldr	r1, [r2, #4]
 8001296:	4a24      	ldr	r2, [pc, #144]	; (8001328 <RemoteCommTask+0xc4>)
 8001298:	7c12      	ldrb	r2, [r2, #16]
 800129a:	4618      	mov	r0, r3
 800129c:	f00f fbb6 	bl	8010a0c <WIFI_Connect>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d119      	bne.n	80012da <RemoteCommTask+0x76>

			if (WIFI_OpenClientConnection(Socket_0_conf.SocketNumber, WIFI_UDP_PROTOCOL, "UDP_CLIENT", Socket_0_conf.RemoteIP, Socket_0_conf.RemotePort, 0) != WIFI_STATUS_OK) {break;}
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <RemoteCommTask+0xc4>)
 80012a8:	7a5b      	ldrb	r3, [r3, #9]
 80012aa:	4618      	mov	r0, r3
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <RemoteCommTask+0xc4>)
 80012ae:	895b      	ldrh	r3, [r3, #10]
 80012b0:	2200      	movs	r2, #0
 80012b2:	9201      	str	r2, [sp, #4]
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <RemoteCommTask+0xc8>)
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <RemoteCommTask+0xcc>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	f00f fbc8 	bl	8010a50 <WIFI_OpenClientConnection>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10b      	bne.n	80012de <RemoteCommTask+0x7a>

			WifiStatus = WIFI_STATUS_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		while (WifiStatus != WIFI_STATUS_OK)
 80012cc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1d7      	bne.n	8001284 <RemoteCommTask+0x20>
 80012d4:	e022      	b.n	800131c <RemoteCommTask+0xb8>
			if (WIFI_Init() != WIFI_STATUS_OK) {break;}
 80012d6:	bf00      	nop
 80012d8:	e020      	b.n	800131c <RemoteCommTask+0xb8>
			if (WIFI_Connect(Socket_0_conf.SSID, Socket_0_conf.Password, Socket_0_conf.ecn) != WIFI_STATUS_OK) {break;}
 80012da:	bf00      	nop
 80012dc:	e01e      	b.n	800131c <RemoteCommTask+0xb8>
			if (WIFI_OpenClientConnection(Socket_0_conf.SocketNumber, WIFI_UDP_PROTOCOL, "UDP_CLIENT", Socket_0_conf.RemoteIP, Socket_0_conf.RemotePort, 0) != WIFI_STATUS_OK) {break;}
 80012de:	bf00      	nop
		}

		// Loop until connection is lost
		while (WifiStatus == WIFI_STATUS_OK)
 80012e0:	e01c      	b.n	800131c <RemoteCommTask+0xb8>
		{
			count++;
 80012e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e4:	3301      	adds	r3, #1
 80012e6:	657b      	str	r3, [r7, #84]	; 0x54

			sprintf((char*)TxData, "S3=30\r\r\nCount = %5d\r\n Error = %d5", count, errors);
 80012e8:	f107 0010 	add.w	r0, r7, #16
 80012ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012f0:	4910      	ldr	r1, [pc, #64]	; (8001334 <RemoteCommTask+0xd0>)
 80012f2:	f00f feef 	bl	80110d4 <siprintf>

//			SEGGER_SYSVIEW_PrintfHost("Start Send");
			WifiStatus = WIFI_SendData(Socket_0_conf.SocketNumber, TxData, sizeof(TxData), &Datalen, Socket_0_conf.WifiWriteTimeout);
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <RemoteCommTask+0xc4>)
 80012f8:	7a58      	ldrb	r0, [r3, #9]
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <RemoteCommTask+0xc4>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f107 020e 	add.w	r2, r7, #14
 8001302:	f107 0110 	add.w	r1, r7, #16
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	223c      	movs	r2, #60	; 0x3c
 800130c:	f00f fbda 	bl	8010ac4 <WIFI_SendData>
 8001310:	4603      	mov	r3, r0
 8001312:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
//			SEGGER_SYSVIEW_PrintfHost("End Send");

			osDelay(10);
 8001316:	200a      	movs	r0, #10
 8001318:	f009 ff3b 	bl	800b192 <osDelay>
		while (WifiStatus == WIFI_STATUS_OK)
 800131c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0de      	beq.n	80012e2 <RemoteCommTask+0x7e>
		while (WifiStatus != WIFI_STATUS_OK)
 8001324:	e7d2      	b.n	80012cc <RemoteCommTask+0x68>
 8001326:	bf00      	nop
 8001328:	20000000 	.word	0x20000000
 800132c:	2000000c 	.word	0x2000000c
 8001330:	08012308 	.word	0x08012308
 8001334:	08012314 	.word	0x08012314

08001338 <SensorBus1_Init>:

static void run_pending_dma(void);

extern I2C_HandleTypeDef hi2c2;

void SensorBus1_Init(AccGyroCallback_t pAccGyroCB, MagCallback_t pMagCB) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]

	pAccGyroCallback = pAccGyroCB;
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <SensorBus1_Init+0x4c>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6013      	str	r3, [r2, #0]
	pMagCallback = pMagCB;
 8001348:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <SensorBus1_Init+0x50>)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	6013      	str	r3, [r2, #0]

	req_mag = GP_FALSE;
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <SensorBus1_Init+0x54>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
	req_gyro_acc = GP_FALSE;
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <SensorBus1_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
	lock_update = GP_FALSE;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <SensorBus1_Init+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
	in_process_dma = DMA_RDY;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <SensorBus1_Init+0x60>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
	p_acc_gyro_raw_data = &acc_gyro_raw_data1[0];
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <SensorBus1_Init+0x64>)
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <SensorBus1_Init+0x68>)
 800136a:	601a      	str	r2, [r3, #0]
	p_mag_raw_data = &mag_raw_data1;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <SensorBus1_Init+0x6c>)
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <SensorBus1_Init+0x70>)
 8001370:	601a      	str	r2, [r3, #0]

	bsp_lsm6dsl_init();
 8001372:	f7ff f9cd 	bl	8000710 <bsp_lsm6dsl_init>
	bsp_lis3mdl_init();
 8001376:	f7ff f94d 	bl	8000614 <bsp_lis3mdl_init>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000bc8 	.word	0x20000bc8
 8001388:	20000bcc 	.word	0x20000bcc
 800138c:	20000abd 	.word	0x20000abd
 8001390:	20000abe 	.word	0x20000abe
 8001394:	20000abf 	.word	0x20000abf
 8001398:	20000abc 	.word	0x20000abc
 800139c:	20000bb0 	.word	0x20000bb0
 80013a0:	20000ac0 	.word	0x20000ac0
 80013a4:	20000bc4 	.word	0x20000bc4
 80013a8:	20000bb4 	.word	0x20000bb4

080013ac <SensorBus1_Start>:


void SensorBus1_Start(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	bsp_lsm6dsl_enable();
 80013b0:	f7ff fa68 	bl	8000884 <bsp_lsm6dsl_enable>
	bsp_lis3mdl_enable();
 80013b4:	f7ff f982 	bl	80006bc <bsp_lis3mdl_enable>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <SensorBus1_Gyro_ACC_Intr>:


void SensorBus1_Gyro_ACC_Intr(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_PrintfHost("SensorBus1_Gyro_Acc_Intr");
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <SensorBus1_Gyro_ACC_Intr+0x18>)
 80013c2:	f00e f8f9 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>

	req_gyro_acc = GP_TRUE;
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SensorBus1_Gyro_ACC_Intr+0x1c>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
	run_pending_dma();
 80013cc:	f000 f816 	bl	80013fc <run_pending_dma>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	08012338 	.word	0x08012338
 80013d8:	20000abe 	.word	0x20000abe

080013dc <SensorBus1_Mag_Intr>:


void SensorBus1_Mag_Intr(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_PrintfHost("SensorBus1_Mag_Intr");
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <SensorBus1_Mag_Intr+0x18>)
 80013e2:	f00e f8e9 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>

	req_mag = GP_TRUE;
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SensorBus1_Mag_Intr+0x1c>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
	run_pending_dma();
 80013ec:	f000 f806 	bl	80013fc <run_pending_dma>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	08012354 	.word	0x08012354
 80013f8:	20000abd 	.word	0x20000abd

080013fc <run_pending_dma>:



void run_pending_dma(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af02      	add	r7, sp, #8
	SEGGER_SYSVIEW_PrintfHost("run_pending_dma");
 8001402:	4824      	ldr	r0, [pc, #144]	; (8001494 <run_pending_dma+0x98>)
 8001404:	f00e f8d8 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>
	// Must not be reentrant, this will catch that
	// Must have SensorBus1_DMA_CallBack and SensorBus1_Intr on same interrupt level
	assert_param(lock_update == GP_FALSE);
	lock_update = GP_TRUE;
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <run_pending_dma+0x9c>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]

	if (in_process_dma != DMA_RDY) { // exit if previous still running
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <run_pending_dma+0xa0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <run_pending_dma+0x24>
		lock_update = GP_FALSE;
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <run_pending_dma+0x9c>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
		return;
 800141e:	e036      	b.n	800148e <run_pending_dma+0x92>
	}

	// Else check for ryro/acc DMA read
	if (req_gyro_acc) {
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <run_pending_dma+0xa4>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d015      	beq.n	8001456 <run_pending_dma+0x5a>

		// TODO: Handle error
		HAL_I2C_Mem_Read_DMA(&hi2c2, LSM6DSL_I2C_ADD_L, LSM6DSL_FIFO_DATA_OUT_L,
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <run_pending_dma+0xa8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <run_pending_dma+0xac>)
 8001430:	8812      	ldrh	r2, [r2, #0]
 8001432:	9201      	str	r2, [sp, #4]
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2301      	movs	r3, #1
 8001438:	223e      	movs	r2, #62	; 0x3e
 800143a:	21d5      	movs	r1, #213	; 0xd5
 800143c:	481b      	ldr	r0, [pc, #108]	; (80014ac <run_pending_dma+0xb0>)
 800143e:	f003 fc9d 	bl	8004d7c <HAL_I2C_Mem_Read_DMA>
				I2C_MEMADD_SIZE_8BIT, (uint8_t*) p_acc_gyro_raw_data,
				acc_gyro_raw_data_size);

		in_process_dma = DMA_ACC_GYRO;
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <run_pending_dma+0xa0>)
 8001444:	2202      	movs	r2, #2
 8001446:	701a      	strb	r2, [r3, #0]
		req_gyro_acc = GP_FALSE;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <run_pending_dma+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_gyro_acc DMA");
 800144e:	4818      	ldr	r0, [pc, #96]	; (80014b0 <run_pending_dma+0xb4>)
 8001450:	f00e f8b2 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>
 8001454:	e018      	b.n	8001488 <run_pending_dma+0x8c>
	// Else check for mag request
	} else if (req_mag) {
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <run_pending_dma+0xb8>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <run_pending_dma+0x8c>
		// TODO: Handle error
		HAL_I2C_Mem_Read_DMA(&hi2c2, LIS3MDL_I2C_ADD_L, LIS3MDL_OUT_X_L, I2C_MEMADD_SIZE_8BIT,
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <run_pending_dma+0xbc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2206      	movs	r2, #6
 8001466:	9201      	str	r2, [sp, #4]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	2228      	movs	r2, #40	; 0x28
 800146e:	2139      	movs	r1, #57	; 0x39
 8001470:	480e      	ldr	r0, [pc, #56]	; (80014ac <run_pending_dma+0xb0>)
 8001472:	f003 fc83 	bl	8004d7c <HAL_I2C_Mem_Read_DMA>
				(uint8_t*) p_mag_raw_data, sizeof(LIS3MDL_AxesRaw_t));


		in_process_dma = DMA_MAG;
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <run_pending_dma+0xa0>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
		req_mag = GP_FALSE;
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <run_pending_dma+0xb8>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("req_mag DMA");
 8001482:	480e      	ldr	r0, [pc, #56]	; (80014bc <run_pending_dma+0xc0>)
 8001484:	f00e f898 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>
	}

	lock_update = GP_FALSE;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <run_pending_dma+0x9c>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
}
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	08012368 	.word	0x08012368
 8001498:	20000abf 	.word	0x20000abf
 800149c:	20000abc 	.word	0x20000abc
 80014a0:	20000abe 	.word	0x20000abe
 80014a4:	20000bb0 	.word	0x20000bb0
 80014a8:	2000001c 	.word	0x2000001c
 80014ac:	20000c24 	.word	0x20000c24
 80014b0:	08012378 	.word	0x08012378
 80014b4:	20000abd 	.word	0x20000abd
 80014b8:	20000bc4 	.word	0x20000bc4
 80014bc:	0801238c 	.word	0x0801238c

080014c0 <SensorBus1_DMA_CallBack>:


void SensorBus1_DMA_CallBack(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

	DebugExtAnalyzerPulse1();
 80014c4:	f7ff f9ea 	bl	800089c <DebugExtAnalyzerPulse1>

	// Handle data ready from last dma request
	switch (in_process_dma) {
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <SensorBus1_DMA_CallBack+0xc4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d026      	beq.n	8001520 <SensorBus1_DMA_CallBack+0x60>
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d149      	bne.n	800156a <SensorBus1_DMA_CallBack+0xaa>

	case DMA_ACC_GYRO:
		SEGGER_SYSVIEW_PrintfHost("DMA_ACC_GYRO DMA CALLBACK");
 80014d6:	482c      	ldr	r0, [pc, #176]	; (8001588 <SensorBus1_DMA_CallBack+0xc8>)
 80014d8:	f00e f86e 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>
			// Acc Gyro call back with current raw data
		pAccGyroCallback(p_acc_gyro_raw_data, GYRO_ACC_SAMPLES);
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <SensorBus1_DMA_CallBack+0xcc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a2b      	ldr	r2, [pc, #172]	; (8001590 <SensorBus1_DMA_CallBack+0xd0>)
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	210a      	movs	r1, #10
 80014e6:	4610      	mov	r0, r2
 80014e8:	4798      	blx	r3

		// Swap raw data storage
		if (p_acc_gyro_raw_data == &acc_gyro_raw_data1[0]) {
 80014ea:	4b29      	ldr	r3, [pc, #164]	; (8001590 <SensorBus1_DMA_CallBack+0xd0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a29      	ldr	r2, [pc, #164]	; (8001594 <SensorBus1_DMA_CallBack+0xd4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d103      	bne.n	80014fc <SensorBus1_DMA_CallBack+0x3c>
			p_acc_gyro_raw_data = &acc_gyro_raw_data2[0];
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <SensorBus1_DMA_CallBack+0xd0>)
 80014f6:	4a28      	ldr	r2, [pc, #160]	; (8001598 <SensorBus1_DMA_CallBack+0xd8>)
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e002      	b.n	8001502 <SensorBus1_DMA_CallBack+0x42>
		} else {
			p_acc_gyro_raw_data = &acc_gyro_raw_data1[0];
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <SensorBus1_DMA_CallBack+0xd0>)
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <SensorBus1_DMA_CallBack+0xd4>)
 8001500:	601a      	str	r2, [r3, #0]
		// Check if we have back to back gyro/acc interrupts.
		// This can happen if we halt for debug.
		// In this case the interrupt line remains high between data sets and
		// therefore does not generate second rising edge.
		// We'll just check for interrupt still high and schedule DMA again
		if (HAL_GPIO_ReadPin(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin) == GPIO_PIN_SET) {
 8001502:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001506:	4825      	ldr	r0, [pc, #148]	; (800159c <SensorBus1_DMA_CallBack+0xdc>)
 8001508:	f003 f8f0 	bl	80046ec <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b01      	cmp	r3, #1
 8001510:	d12d      	bne.n	800156e <SensorBus1_DMA_CallBack+0xae>
			req_gyro_acc = GP_TRUE;
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <SensorBus1_DMA_CallBack+0xe0>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
			SEGGER_SYSVIEW_PrintfHost("Reschedule req_gyro_acc");
 8001518:	4822      	ldr	r0, [pc, #136]	; (80015a4 <SensorBus1_DMA_CallBack+0xe4>)
 800151a:	f00e f84d 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>
		}

		break;
 800151e:	e026      	b.n	800156e <SensorBus1_DMA_CallBack+0xae>

	case DMA_MAG:
		SEGGER_SYSVIEW_PrintfHost("DMA_MAG DMA CALLBACK");
 8001520:	4821      	ldr	r0, [pc, #132]	; (80015a8 <SensorBus1_DMA_CallBack+0xe8>)
 8001522:	f00e f849 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>
		// Mag call back with current raw data
		pMagCallback(p_mag_raw_data, 1);
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <SensorBus1_DMA_CallBack+0xec>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <SensorBus1_DMA_CallBack+0xf0>)
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	2101      	movs	r1, #1
 8001530:	4610      	mov	r0, r2
 8001532:	4798      	blx	r3

		// Swap raw data storage
		if (p_mag_raw_data == &mag_raw_data1) {
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <SensorBus1_DMA_CallBack+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <SensorBus1_DMA_CallBack+0xf4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d103      	bne.n	8001546 <SensorBus1_DMA_CallBack+0x86>
			p_mag_raw_data = &mag_raw_data2;
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <SensorBus1_DMA_CallBack+0xf0>)
 8001540:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <SensorBus1_DMA_CallBack+0xf8>)
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e002      	b.n	800154c <SensorBus1_DMA_CallBack+0x8c>
		} else {
			p_mag_raw_data = &mag_raw_data1;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <SensorBus1_DMA_CallBack+0xf0>)
 8001548:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <SensorBus1_DMA_CallBack+0xf4>)
 800154a:	601a      	str	r2, [r3, #0]
		// Check if we have back to back gyro ready interrupts.
		// This can happen if we halt for debug.
		// In this case the interrupt line remains high between data sets and
		// therefore does not generate second rising edge.
		// We'll just check for interrupt still high and schedule DMA again
		if (HAL_GPIO_ReadPin(LSM3DSL_DRDY_EXTI8_GPIO_Port, LSM3DSL_DRDY_EXTI8_Pin) == GPIO_PIN_SET) {
 800154c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001550:	481a      	ldr	r0, [pc, #104]	; (80015bc <SensorBus1_DMA_CallBack+0xfc>)
 8001552:	f003 f8cb 	bl	80046ec <HAL_GPIO_ReadPin>
 8001556:	4603      	mov	r3, r0
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10a      	bne.n	8001572 <SensorBus1_DMA_CallBack+0xb2>
			req_mag = GP_TRUE;
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <SensorBus1_DMA_CallBack+0x100>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
			SEGGER_SYSVIEW_PrintfHost("Reschedule req_mag");
 8001562:	4818      	ldr	r0, [pc, #96]	; (80015c4 <SensorBus1_DMA_CallBack+0x104>)
 8001564:	f00e f828 	bl	800f5b8 <SEGGER_SYSVIEW_PrintfHost>
		}

		break;
 8001568:	e003      	b.n	8001572 <SensorBus1_DMA_CallBack+0xb2>

	default:
		assert_param(!HAL_OK);
		break;
 800156a:	bf00      	nop
 800156c:	e002      	b.n	8001574 <SensorBus1_DMA_CallBack+0xb4>
		break;
 800156e:	bf00      	nop
 8001570:	e000      	b.n	8001574 <SensorBus1_DMA_CallBack+0xb4>
		break;
 8001572:	bf00      	nop
	}

	in_process_dma = DMA_RDY; // Indicate ready for more
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <SensorBus1_DMA_CallBack+0xc4>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]

	// Schedule next pending
	run_pending_dma();
 800157a:	f7ff ff3f 	bl	80013fc <run_pending_dma>
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000abc 	.word	0x20000abc
 8001588:	08012398 	.word	0x08012398
 800158c:	20000bc8 	.word	0x20000bc8
 8001590:	20000bb0 	.word	0x20000bb0
 8001594:	20000ac0 	.word	0x20000ac0
 8001598:	20000b38 	.word	0x20000b38
 800159c:	48000c00 	.word	0x48000c00
 80015a0:	20000abe 	.word	0x20000abe
 80015a4:	080123b4 	.word	0x080123b4
 80015a8:	080123cc 	.word	0x080123cc
 80015ac:	20000bcc 	.word	0x20000bcc
 80015b0:	20000bc4 	.word	0x20000bc4
 80015b4:	20000bb4 	.word	0x20000bb4
 80015b8:	20000bbc 	.word	0x20000bbc
 80015bc:	48000800 	.word	0x48000800
 80015c0:	20000abd 	.word	0x20000abd
 80015c4:	080123e4 	.word	0x080123e4

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_MspInit+0x4c>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_MspInit+0x4c>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6613      	str	r3, [r2, #96]	; 0x60
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_MspInit+0x4c>)
 80015dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_MspInit+0x4c>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_MspInit+0x4c>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6593      	str	r3, [r2, #88]	; 0x58
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_MspInit+0x4c>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	210f      	movs	r1, #15
 8001602:	f06f 0001 	mvn.w	r0, #1
 8001606:	f002 f9b7 	bl	8003978 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000

08001618 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0ac      	sub	sp, #176	; 0xb0
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2288      	movs	r2, #136	; 0x88
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f00f fba6 	bl	8010d8a <memset>
  if(DFSDM1_Init == 0)
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d142      	bne.n	80016cc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4618      	mov	r0, r3
 8001658:	f006 fae6 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001662:	f7ff fdf9 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800166c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001670:	6613      	str	r3, [r2, #96]	; 0x60
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001696:	f44f 7320 	mov.w	r3, #640	; 0x280
 800169a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016b0:	2306      	movs	r3, #6
 80016b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ba:	4619      	mov	r1, r3
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80016be:	f002 fd77 	bl	80041b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	4a02      	ldr	r2, [pc, #8]	; (80016d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016ca:	6013      	str	r3, [r2, #0]
  }

}
 80016cc:	bf00      	nop
 80016ce:	37b0      	adds	r7, #176	; 0xb0
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000bd0 	.word	0x20000bd0
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48001000 	.word	0x48001000

080016e0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_QSPI_MspInit+0x7c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d128      	bne.n	8001754 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <HAL_QSPI_MspInit+0x80>)
 8001704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001706:	4a16      	ldr	r2, [pc, #88]	; (8001760 <HAL_QSPI_MspInit+0x80>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6513      	str	r3, [r2, #80]	; 0x50
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_QSPI_MspInit+0x80>)
 8001710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_QSPI_MspInit+0x80>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <HAL_QSPI_MspInit+0x80>)
 8001720:	f043 0310 	orr.w	r3, r3, #16
 8001724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_QSPI_MspInit+0x80>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001732:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001736:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001744:	230a      	movs	r3, #10
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <HAL_QSPI_MspInit+0x84>)
 8001750:	f002 fd2e 	bl	80041b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	a0001000 	.word	0xa0001000
 8001760:	40021000 	.word	0x40021000
 8001764:	48001000 	.word	0x48001000

08001768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <HAL_SPI_MspInit+0x8c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d130      	bne.n	80017ec <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_SPI_MspInit+0x90>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <HAL_SPI_MspInit+0x90>)
 8001790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001794:	6593      	str	r3, [r2, #88]	; 0x58
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_SPI_MspInit+0x90>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_SPI_MspInit+0x90>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <HAL_SPI_MspInit+0x90>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_SPI_MspInit+0x90>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80017ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017cc:	2306      	movs	r3, #6
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	4809      	ldr	r0, [pc, #36]	; (80017fc <HAL_SPI_MspInit+0x94>)
 80017d8:	f002 fcea 	bl	80041b0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2105      	movs	r1, #5
 80017e0:	2033      	movs	r0, #51	; 0x33
 80017e2:	f002 f8c9 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80017e6:	2033      	movs	r0, #51	; 0x33
 80017e8:	f002 f8e2 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40003c00 	.word	0x40003c00
 80017f8:	40021000 	.word	0x40021000
 80017fc:	48000800 	.word	0x48000800

08001800 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_SPI_MspDeInit+0x38>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10d      	bne.n	800182e <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_SPI_MspDeInit+0x3c>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_SPI_MspDeInit+0x3c>)
 8001818:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800181e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <HAL_SPI_MspDeInit+0x40>)
 8001824:	f002 fe6e 	bl	8004504 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8001828:	2033      	movs	r0, #51	; 0x33
 800182a:	f002 f8cf 	bl	80039cc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40003c00 	.word	0x40003c00
 800183c:	40021000 	.word	0x40021000
 8001840:	48000800 	.word	0x48000800

08001844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0ae      	sub	sp, #184	; 0xb8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	2288      	movs	r2, #136	; 0x88
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f00f fa90 	bl	8010d8a <memset>
  if(huart->Instance==USART1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a42      	ldr	r2, [pc, #264]	; (8001978 <HAL_UART_MspInit+0x134>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d13b      	bne.n	80018ec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001874:	2301      	movs	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001878:	2300      	movs	r3, #0
 800187a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4618      	mov	r0, r3
 8001882:	f006 f9d1 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800188c:	f7ff fce4 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001890:	4b3a      	ldr	r3, [pc, #232]	; (800197c <HAL_UART_MspInit+0x138>)
 8001892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001894:	4a39      	ldr	r2, [pc, #228]	; (800197c <HAL_UART_MspInit+0x138>)
 8001896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189a:	6613      	str	r3, [r2, #96]	; 0x60
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_UART_MspInit+0x138>)
 800189e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	4b34      	ldr	r3, [pc, #208]	; (800197c <HAL_UART_MspInit+0x138>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	4a33      	ldr	r2, [pc, #204]	; (800197c <HAL_UART_MspInit+0x138>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b4:	4b31      	ldr	r3, [pc, #196]	; (800197c <HAL_UART_MspInit+0x138>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80018c0:	23c0      	movs	r3, #192	; 0xc0
 80018c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018d8:	2307      	movs	r3, #7
 80018da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018e2:	4619      	mov	r1, r3
 80018e4:	4826      	ldr	r0, [pc, #152]	; (8001980 <HAL_UART_MspInit+0x13c>)
 80018e6:	f002 fc63 	bl	80041b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018ea:	e040      	b.n	800196e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a24      	ldr	r2, [pc, #144]	; (8001984 <HAL_UART_MspInit+0x140>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d13b      	bne.n	800196e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018f6:	2304      	movs	r3, #4
 80018f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4618      	mov	r0, r3
 8001904:	f006 f990 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800190e:	f7ff fca3 	bl	8001258 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <HAL_UART_MspInit+0x138>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	4a19      	ldr	r2, [pc, #100]	; (800197c <HAL_UART_MspInit+0x138>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6593      	str	r3, [r2, #88]	; 0x58
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_UART_MspInit+0x138>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_UART_MspInit+0x138>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a13      	ldr	r2, [pc, #76]	; (800197c <HAL_UART_MspInit+0x138>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_UART_MspInit+0x138>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001942:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800195c:	2307      	movs	r3, #7
 800195e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001962:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001966:	4619      	mov	r1, r3
 8001968:	4807      	ldr	r0, [pc, #28]	; (8001988 <HAL_UART_MspInit+0x144>)
 800196a:	f002 fc21 	bl	80041b0 <HAL_GPIO_Init>
}
 800196e:	bf00      	nop
 8001970:	37b8      	adds	r7, #184	; 0xb8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40013800 	.word	0x40013800
 800197c:	40021000 	.word	0x40021000
 8001980:	48000400 	.word	0x48000400
 8001984:	40004800 	.word	0x40004800
 8001988:	48000c00 	.word	0x48000c00

0800198c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b0ac      	sub	sp, #176	; 0xb0
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2288      	movs	r2, #136	; 0x88
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00f f9ec 	bl	8010d8a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ba:	d17c      	bne.n	8001ab6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80019c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80019d2:	2318      	movs	r3, #24
 80019d4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019d6:	2307      	movs	r3, #7
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019da:	2302      	movs	r3, #2
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019de:	2302      	movs	r3, #2
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80019e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4618      	mov	r0, r3
 80019ee:	f006 f91b 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80019f8:	f7ff fc2e 	bl	8001258 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	4a2f      	ldr	r2, [pc, #188]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a32:	f002 fbbd 	bl	80041b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001a36:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a50:	230a      	movs	r3, #10
 8001a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a60:	f002 fba6 	bl	80041b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 8001a6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d114      	bne.n	8001ab2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 8001a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a92:	6593      	str	r3, [r2, #88]	; 0x58
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001aa0:	f005 f9c4 	bl	8006e2c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <HAL_PCD_MspInit+0x134>)
 8001aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ab0:	e001      	b.n	8001ab6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001ab2:	f005 f9bb 	bl	8006e2c <HAL_PWREx_EnableVddUSB>
}
 8001ab6:	bf00      	nop
 8001ab8:	37b0      	adds	r7, #176	; 0xb0
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08e      	sub	sp, #56	; 0x38
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001ad2:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <HAL_InitTick+0xe0>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	4a33      	ldr	r2, [pc, #204]	; (8001ba4 <HAL_InitTick+0xe0>)
 8001ad8:	f043 0308 	orr.w	r3, r3, #8
 8001adc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_InitTick+0xe0>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aea:	f107 0210 	add.w	r2, r7, #16
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f006 f805 	bl	8007b04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d103      	bne.n	8001b0c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b04:	f005 ffd2 	bl	8007aac <HAL_RCC_GetPCLK1Freq>
 8001b08:	6378      	str	r0, [r7, #52]	; 0x34
 8001b0a:	e004      	b.n	8001b16 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b0c:	f005 ffce 	bl	8007aac <HAL_RCC_GetPCLK1Freq>
 8001b10:	4603      	mov	r3, r0
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b18:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <HAL_InitTick+0xe4>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	0c9b      	lsrs	r3, r3, #18
 8001b20:	3b01      	subs	r3, #1
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_InitTick+0xe8>)
 8001b26:	4a22      	ldr	r2, [pc, #136]	; (8001bb0 <HAL_InitTick+0xec>)
 8001b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <HAL_InitTick+0xe8>)
 8001b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b30:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001b32:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <HAL_InitTick+0xe8>)
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b36:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_InitTick+0xe8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_InitTick+0xe8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_InitTick+0xe8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001b4a:	4818      	ldr	r0, [pc, #96]	; (8001bac <HAL_InitTick+0xe8>)
 8001b4c:	f008 f869 	bl	8009c22 <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001b56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d11b      	bne.n	8001b96 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001b5e:	4813      	ldr	r0, [pc, #76]	; (8001bac <HAL_InitTick+0xe8>)
 8001b60:	f008 f8c0 	bl	8009ce4 <HAL_TIM_Base_Start_IT>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001b6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d111      	bne.n	8001b96 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b72:	2032      	movs	r0, #50	; 0x32
 8001b74:	f001 ff1c 	bl	80039b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	d808      	bhi.n	8001b90 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	2032      	movs	r0, #50	; 0x32
 8001b84:	f001 fef8 	bl	8003978 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_InitTick+0xf0>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e002      	b.n	8001b96 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3738      	adds	r7, #56	; 0x38
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	431bde83 	.word	0x431bde83
 8001bac:	20000bd4 	.word	0x20000bd4
 8001bb0:	40000c00 	.word	0x40000c00
 8001bb4:	20000024 	.word	0x20000024

08001bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <NMI_Handler+0x4>

08001bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <HardFault_Handler+0x4>

08001bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <MemManage_Handler+0x4>

08001bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <BusFault_Handler+0x4>

08001bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <UsageFault_Handler+0x4>

08001bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8001be8:	2002      	movs	r0, #2
 8001bea:	f002 fdaf 	bl	800474c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <DMA1_Channel4_IRQHandler+0x10>)
 8001bfa:	f002 f9ec 	bl	8003fd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000cc4 	.word	0x20000cc4

08001c08 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <DMA1_Channel5_IRQHandler+0x10>)
 8001c0e:	f002 f9e2 	bl	8003fd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000c7c 	.word	0x20000c7c

08001c1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001c20:	2020      	movs	r0, #32
 8001c22:	f002 fd93 	bl	800474c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001c26:	2040      	movs	r0, #64	; 0x40
 8001c28:	f002 fd90 	bl	800474c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001c2c:	2080      	movs	r0, #128	; 0x80
 8001c2e:	f002 fd8d 	bl	800474c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3DSL_DRDY_EXTI8_Pin);
 8001c32:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c36:	f002 fd89 	bl	800474c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <I2C2_EV_IRQHandler+0x10>)
 8001c46:	f003 f97f 	bl	8004f48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000c24 	.word	0x20000c24

08001c54 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <I2C2_ER_IRQHandler+0x10>)
 8001c5a:	f003 f98f 	bl	8004f7c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000c24 	.word	0x20000c24

08001c68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001c6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c70:	f002 fd6c 	bl	800474c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001c74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c78:	f002 fd68 	bl	800474c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001c7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c80:	f002 fd64 	bl	800474c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001c84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c88:	f002 fd60 	bl	800474c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001c8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c90:	f002 fd5c 	bl	800474c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <TIM5_IRQHandler+0x10>)
 8001c9e:	f008 f891 	bl	8009dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000bd4 	.word	0x20000bd4

08001cac <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <SPI3_IRQHandler+0x10>)
 8001cb2:	f007 fa81 	bl	80091b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000043c 	.word	0x2000043c

08001cc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
	return 1;
 8001cc4:	2301      	movs	r3, #1
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_kill>:

int _kill(int pid, int sig)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cda:	f00e ff15 	bl	8010b08 <__errno>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2216      	movs	r2, #22
 8001ce2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_exit>:

void _exit (int status)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ffe7 	bl	8001cd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d02:	e7fe      	b.n	8001d02 <_exit+0x12>

08001d04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	e00a      	b.n	8001d2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d16:	f3af 8000 	nop.w
 8001d1a:	4601      	mov	r1, r0
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	60ba      	str	r2, [r7, #8]
 8001d22:	b2ca      	uxtb	r2, r1
 8001d24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbf0      	blt.n	8001d16 <_read+0x12>
	}

return len;
 8001d34:	687b      	ldr	r3, [r7, #4]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	return -1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d66:	605a      	str	r2, [r3, #4]
	return 0;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_isatty>:

int _isatty(int file)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
	return 0;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db0:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <_sbrk+0x5c>)
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <_sbrk+0x60>)
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <_sbrk+0x64>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <_sbrk+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d207      	bcs.n	8001de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd8:	f00e fe96 	bl	8010b08 <__errno>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	220c      	movs	r2, #12
 8001de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	e009      	b.n	8001dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <_sbrk+0x64>)
 8001df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20018000 	.word	0x20018000
 8001e08:	00000400 	.word	0x00000400
 8001e0c:	20000c20 	.word	0x20000c20
 8001e10:	20002bd8 	.word	0x20002bd8

08001e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <SystemInit+0x20>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <SystemInit+0x20>)
 8001e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e3c:	f7ff ffea 	bl	8001e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e42:	490d      	ldr	r1, [pc, #52]	; (8001e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <LoopForever+0xe>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e58:	4c0a      	ldr	r4, [pc, #40]	; (8001e84 <LoopForever+0x16>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e66:	f00e ff4b 	bl	8010d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e6a:	f7fe fd41 	bl	80008f0 <main>

08001e6e <LoopForever>:

LoopForever:
    b LoopForever
 8001e6e:	e7fe      	b.n	8001e6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001e7c:	08012af8 	.word	0x08012af8
  ldr r2, =_sbss
 8001e80:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001e84:	20002bd4 	.word	0x20002bd4

08001e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC1_2_IRQHandler>
	...

08001e8c <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <BSP_I2C2_Init+0x70>)
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <BSP_I2C2_Init+0x74>)
 8001e9a:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <BSP_I2C2_Init+0x78>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	4918      	ldr	r1, [pc, #96]	; (8001f04 <BSP_I2C2_Init+0x78>)
 8001ea4:	600a      	str	r2, [r1, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d122      	bne.n	8001ef0 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001eaa:	4814      	ldr	r0, [pc, #80]	; (8001efc <BSP_I2C2_Init+0x70>)
 8001eac:	f003 f925 	bl	80050fa <HAL_I2C_GetState>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d11c      	bne.n	8001ef0 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001eb6:	4811      	ldr	r0, [pc, #68]	; (8001efc <BSP_I2C2_Init+0x70>)
 8001eb8:	f000 f8fe 	bl	80020b8 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d116      	bne.n	8001ef0 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8001ec2:	480e      	ldr	r0, [pc, #56]	; (8001efc <BSP_I2C2_Init+0x70>)
 8001ec4:	f000 f8b4 	bl	8002030 <MX_I2C2_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001ece:	f06f 0307 	mvn.w	r3, #7
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	e00c      	b.n	8001ef0 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4808      	ldr	r0, [pc, #32]	; (8001efc <BSP_I2C2_Init+0x70>)
 8001eda:	f004 fd53 	bl	8006984 <HAL_I2CEx_ConfigAnalogFilter>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001ee4:	f06f 0307 	mvn.w	r3, #7
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	e001      	b.n	8001ef0 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001ef0:	687b      	ldr	r3, [r7, #4]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000c24 	.word	0x20000c24
 8001f00:	40005800 	.word	0x40005800
 8001f04:	20000c78 	.word	0x20000c78

08001f08 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <BSP_I2C2_DeInit+0x48>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d014      	beq.n	8001f44 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <BSP_I2C2_DeInit+0x48>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <BSP_I2C2_DeInit+0x48>)
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <BSP_I2C2_DeInit+0x48>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8001f2c:	4809      	ldr	r0, [pc, #36]	; (8001f54 <BSP_I2C2_DeInit+0x4c>)
 8001f2e:	f000 f985 	bl	800223c <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8001f32:	4808      	ldr	r0, [pc, #32]	; (8001f54 <BSP_I2C2_DeInit+0x4c>)
 8001f34:	f002 fcb1 	bl	800489a <HAL_I2C_DeInit>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001f3e:	f06f 0307 	mvn.w	r3, #7
 8001f42:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001f44:	687b      	ldr	r3, [r7, #4]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000c78 	.word	0x20000c78
 8001f54:	20000c24 	.word	0x20000c24

08001f58 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af04      	add	r7, sp, #16
 8001f5e:	60ba      	str	r2, [r7, #8]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	81fb      	strh	r3, [r7, #14]
 8001f66:	460b      	mov	r3, r1
 8001f68:	81bb      	strh	r3, [r7, #12]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001f72:	89ba      	ldrh	r2, [r7, #12]
 8001f74:	89f9      	ldrh	r1, [r7, #14]
 8001f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7a:	9302      	str	r3, [sp, #8]
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2301      	movs	r3, #1
 8001f86:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <BSP_I2C2_WriteReg+0x60>)
 8001f88:	f002 fcca 	bl	8004920 <HAL_I2C_Mem_Write>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00c      	beq.n	8001fac <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001f92:	4809      	ldr	r0, [pc, #36]	; (8001fb8 <BSP_I2C2_WriteReg+0x60>)
 8001f94:	f003 f8bf 	bl	8005116 <HAL_I2C_GetError>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d103      	bne.n	8001fa6 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001f9e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e002      	b.n	8001fac <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001fa6:	f06f 0303 	mvn.w	r3, #3
 8001faa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001fac:	697b      	ldr	r3, [r7, #20]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000c24 	.word	0x20000c24

08001fbc <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af04      	add	r7, sp, #16
 8001fc2:	60ba      	str	r2, [r7, #8]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	81fb      	strh	r3, [r7, #14]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	81bb      	strh	r3, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001fd6:	89ba      	ldrh	r2, [r7, #12]
 8001fd8:	89f9      	ldrh	r1, [r7, #14]
 8001fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fde:	9302      	str	r3, [sp, #8]
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	480c      	ldr	r0, [pc, #48]	; (800201c <BSP_I2C2_ReadReg+0x60>)
 8001fec:	f002 fdac 	bl	8004b48 <HAL_I2C_Mem_Read>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001ff6:	4809      	ldr	r0, [pc, #36]	; (800201c <BSP_I2C2_ReadReg+0x60>)
 8001ff8:	f003 f88d 	bl	8005116 <HAL_I2C_GetError>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d103      	bne.n	800200a <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002002:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e002      	b.n	8002010 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800200a:	f06f 0303 	mvn.w	r3, #3
 800200e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002010:	697b      	ldr	r3, [r7, #20]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000c24 	.word	0x20000c24

08002020 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002024:	f001 fb9c 	bl	8003760 <HAL_GetTick>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <MX_I2C2_Init+0x80>)
 8002040:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <MX_I2C2_Init+0x84>)
 8002046:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f002 fb82 	bl	800477c <HAL_I2C_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002082:	2100      	movs	r1, #0
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f004 fc7d 	bl	8006984 <HAL_I2CEx_ConfigAnalogFilter>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002094:	2100      	movs	r1, #0
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f004 fcbf 	bl	8006a1a <HAL_I2CEx_ConfigDigitalFilter>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40005800 	.word	0x40005800
 80020b4:	00702991 	.word	0x00702991

080020b8 <I2C2_MspInit>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b0ac      	sub	sp, #176	; 0xb0
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2288      	movs	r2, #136	; 0x88
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f00e fe5e 	bl	8010d8a <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80020d2:	2300      	movs	r3, #0
 80020d4:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4618      	mov	r0, r3
 80020dc:	f005 fda4 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <I2C2_MspInit+0x16c>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	4a4f      	ldr	r2, [pc, #316]	; (8002224 <I2C2_MspInit+0x16c>)
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ec:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <I2C2_MspInit+0x16c>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 80020f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002100:	2312      	movs	r3, #18
 8002102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002112:	2304      	movs	r3, #4
 8002114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002118:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800211c:	4619      	mov	r1, r3
 800211e:	4842      	ldr	r0, [pc, #264]	; (8002228 <I2C2_MspInit+0x170>)
 8002120:	f002 f846 	bl	80041b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002124:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002128:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800212c:	2312      	movs	r3, #18
 800212e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 800213e:	2304      	movs	r3, #4
 8002140:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002144:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002148:	4619      	mov	r1, r3
 800214a:	4837      	ldr	r0, [pc, #220]	; (8002228 <I2C2_MspInit+0x170>)
 800214c:	f002 f830 	bl	80041b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002150:	4b34      	ldr	r3, [pc, #208]	; (8002224 <I2C2_MspInit+0x16c>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	4a33      	ldr	r2, [pc, #204]	; (8002224 <I2C2_MspInit+0x16c>)
 8002156:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800215a:	6593      	str	r3, [r2, #88]	; 0x58
 800215c:	4b31      	ldr	r3, [pc, #196]	; (8002224 <I2C2_MspInit+0x16c>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral DMA init*/

    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <I2C2_MspInit+0x174>)
 800216a:	4a31      	ldr	r2, [pc, #196]	; (8002230 <I2C2_MspInit+0x178>)
 800216c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 800216e:	4b2f      	ldr	r3, [pc, #188]	; (800222c <I2C2_MspInit+0x174>)
 8002170:	2203      	movs	r2, #3
 8002172:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <I2C2_MspInit+0x174>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <I2C2_MspInit+0x174>)
 800217c:	2200      	movs	r2, #0
 800217e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002180:	4b2a      	ldr	r3, [pc, #168]	; (800222c <I2C2_MspInit+0x174>)
 8002182:	2280      	movs	r2, #128	; 0x80
 8002184:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <I2C2_MspInit+0x174>)
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <I2C2_MspInit+0x174>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <I2C2_MspInit+0x174>)
 8002194:	2200      	movs	r2, #0
 8002196:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002198:	4b24      	ldr	r3, [pc, #144]	; (800222c <I2C2_MspInit+0x174>)
 800219a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800219e:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_i2c2_rx);
 80021a0:	4822      	ldr	r0, [pc, #136]	; (800222c <I2C2_MspInit+0x174>)
 80021a2:	f001 fd2d 	bl	8003c00 <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a20      	ldr	r2, [pc, #128]	; (800222c <I2C2_MspInit+0x174>)
 80021aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80021ac:	4a1f      	ldr	r2, [pc, #124]	; (800222c <I2C2_MspInit+0x174>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6293      	str	r3, [r2, #40]	; 0x28

    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <I2C2_MspInit+0x17c>)
 80021b4:	4a20      	ldr	r2, [pc, #128]	; (8002238 <I2C2_MspInit+0x180>)
 80021b6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <I2C2_MspInit+0x17c>)
 80021ba:	2203      	movs	r2, #3
 80021bc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <I2C2_MspInit+0x17c>)
 80021c0:	2210      	movs	r2, #16
 80021c2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <I2C2_MspInit+0x17c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021ca:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <I2C2_MspInit+0x17c>)
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <I2C2_MspInit+0x17c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <I2C2_MspInit+0x17c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <I2C2_MspInit+0x17c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <I2C2_MspInit+0x17c>)
 80021e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021e8:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_i2c2_tx);
 80021ea:	4812      	ldr	r0, [pc, #72]	; (8002234 <I2C2_MspInit+0x17c>)
 80021ec:	f001 fd08 	bl	8003c00 <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <I2C2_MspInit+0x17c>)
 80021f4:	639a      	str	r2, [r3, #56]	; 0x38
 80021f6:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <I2C2_MspInit+0x17c>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6293      	str	r3, [r2, #40]	; 0x28

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2105      	movs	r1, #5
 8002200:	2021      	movs	r0, #33	; 0x21
 8002202:	f001 fbb9 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002206:	2021      	movs	r0, #33	; 0x21
 8002208:	f001 fbd2 	bl	80039b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2105      	movs	r1, #5
 8002210:	2022      	movs	r0, #34	; 0x22
 8002212:	f001 fbb1 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002216:	2022      	movs	r0, #34	; 0x22
 8002218:	f001 fbca 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 800221c:	bf00      	nop
 800221e:	37b0      	adds	r7, #176	; 0xb0
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	48000400 	.word	0x48000400
 800222c:	20000c7c 	.word	0x20000c7c
 8002230:	40020058 	.word	0x40020058
 8002234:	20000cc4 	.word	0x20000cc4
 8002238:	40020044 	.word	0x40020044

0800223c <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <I2C2_MspDeInit+0x50>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	4a10      	ldr	r2, [pc, #64]	; (800228c <I2C2_MspDeInit+0x50>)
 800224a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800224e:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002254:	480e      	ldr	r0, [pc, #56]	; (8002290 <I2C2_MspDeInit+0x54>)
 8002256:	f002 f955 	bl	8004504 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 800225a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800225e:	480c      	ldr	r0, [pc, #48]	; (8002290 <I2C2_MspDeInit+0x54>)
 8002260:	f002 f950 	bl	8004504 <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002268:	4618      	mov	r0, r3
 800226a:	f001 fd81 	bl	8003d70 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	4618      	mov	r0, r3
 8002274:	f001 fd7c 	bl	8003d70 <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8002278:	2021      	movs	r0, #33	; 0x21
 800227a:	f001 fba7 	bl	80039cc <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800227e:	2022      	movs	r0, #34	; 0x22
 8002280:	f001 fba4 	bl	80039cc <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	48000400 	.word	0x48000400

08002294 <LIS3MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_RegisterBusIO(LIS3MDL_Object_t *pObj, LIS3MDL_IO_t *pIO)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3MDL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d103      	bne.n	80022b0 <LIS3MDL_RegisterBusIO+0x1c>
  {
    ret = LIS3MDL_ERROR;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e04d      	b.n	800234c <LIS3MDL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	7b1a      	ldrb	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <LIS3MDL_RegisterBusIO+0xc4>)
 80022ec:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a1a      	ldr	r2, [pc, #104]	; (800235c <LIS3MDL_RegisterBusIO+0xc8>)
 80022f2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <LIS3MDL_RegisterBusIO+0x76>
    {
      ret = LIS3MDL_ERROR;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e020      	b.n	800234c <LIS3MDL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS3MDL_OK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4798      	blx	r3
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <LIS3MDL_RegisterBusIO+0x8a>
    {
      ret = LIS3MDL_ERROR;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e016      	b.n	800234c <LIS3MDL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS3MDL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d112      	bne.n	800234c <LIS3MDL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10d      	bne.n	800234c <LIS3MDL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x07;
 8002330:	2307      	movs	r3, #7
 8002332:	72fb      	strb	r3, [r7, #11]

          if (LIS3MDL_Write_Reg(pObj, LIS3MDL_CTRL_REG3, data) != LIS3MDL_OK)
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	461a      	mov	r2, r3
 8002338:	2122      	movs	r1, #34	; 0x22
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f938 	bl	80025b0 <LIS3MDL_Write_Reg>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <LIS3MDL_RegisterBusIO+0xb8>
          {
            ret = LIS3MDL_ERROR;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	080025e7 	.word	0x080025e7
 800235c:	08002649 	.word	0x08002649

08002360 <LIS3MDL_Init>:
  * @brief  Component initialization
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_Init(LIS3MDL_Object_t *pObj)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Operating mode selection - power down */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_POWER_DOWN) != LIS3MDL_OK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	331c      	adds	r3, #28
 800236c:	2102      	movs	r1, #2
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fa37 	bl	80027e2 <lis3mdl_operating_mode_set>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <LIS3MDL_Init+0x20>
  {
    return LIS3MDL_ERROR;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e025      	b.n	80023cc <LIS3MDL_Init+0x6c>
  }

  /* Enable BDU */
  if (lis3mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS3MDL_OK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	331c      	adds	r3, #28
 8002384:	2101      	movs	r1, #1
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fa51 	bl	800282e <lis3mdl_block_data_update_set>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <LIS3MDL_Init+0x38>
  {
    return LIS3MDL_ERROR;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	e019      	b.n	80023cc <LIS3MDL_Init+0x6c>
  }

  /* Set Output data rate. */
  if (LIS3MDL_MAG_SetOutputDataRate(pObj, 80.0f) != LIS3MDL_OK)
 8002398:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80023d4 <LIS3MDL_Init+0x74>
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f851 	bl	8002444 <LIS3MDL_MAG_SetOutputDataRate>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <LIS3MDL_Init+0x4e>
  {
    return LIS3MDL_ERROR;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	e00e      	b.n	80023cc <LIS3MDL_Init+0x6c>
  }

  /* Full scale selection. */
  if (LIS3MDL_MAG_SetFullScale(pObj, 4) != LIS3MDL_OK)
 80023ae:	2104      	movs	r1, #4
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f8b1 	bl	8002518 <LIS3MDL_MAG_SetFullScale>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <LIS3MDL_Init+0x62>
  {
    return LIS3MDL_ERROR;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
 80023c0:	e004      	b.n	80023cc <LIS3MDL_Init+0x6c>
  }

  pObj->is_initialized = 1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS3MDL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	42a00000 	.word	0x42a00000

080023d8 <LIS3MDL_ReadID>:
  * @param  pObj pointer to Component object
  * @param  Id pointer to Component ID
  * @retval Component status
  */
int32_t LIS3MDL_ReadID(LIS3MDL_Object_t *pObj, uint8_t *Id)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  if (lis3mdl_device_id_get(&(pObj->Ctx), Id) != LIS3MDL_OK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	331c      	adds	r3, #28
 80023e6:	6839      	ldr	r1, [r7, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fa91 	bl	8002910 <lis3mdl_device_id_get>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <LIS3MDL_ReadID+0x22>
  {
    return LIS3MDL_ERROR;
 80023f4:	f04f 33ff 	mov.w	r3, #4294967295
 80023f8:	e000      	b.n	80023fc <LIS3MDL_ReadID+0x24>
  }

  return LIS3MDL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <LIS3MDL_MAG_Enable>:
  * @brief Enable the LIS3MDL accelerometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_Enable(LIS3MDL_Object_t *pObj)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <LIS3MDL_MAG_Enable+0x16>
  {
    return LIS3MDL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e010      	b.n	800243c <LIS3MDL_MAG_Enable+0x38>
  }

  /* Operating mode selection - continuous */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_CONTINUOUS_MODE) != LIS3MDL_OK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	331c      	adds	r3, #28
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f000 f9de 	bl	80027e2 <lis3mdl_operating_mode_set>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <LIS3MDL_MAG_Enable+0x2e>
  {
    return LIS3MDL_ERROR;
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
 8002430:	e004      	b.n	800243c <LIS3MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3MDL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <LIS3MDL_MAG_SetOutputDataRate>:
  * @param pObj the device pObj
  * @param Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_SetOutputDataRate(LIS3MDL_Object_t *pObj, float Odr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	ed87 0a00 	vstr	s0, [r7]
  lis3mdl_om_t new_odr;

  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
            : (Odr <=  1.250f) ? LIS3MDL_LP_1Hz25
 8002450:	edd7 7a00 	vldr	s15, [r7]
 8002454:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 8002458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002460:	d801      	bhi.n	8002466 <LIS3MDL_MAG_SetOutputDataRate+0x22>
 8002462:	2300      	movs	r3, #0
 8002464:	e042      	b.n	80024ec <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8002466:	edd7 7a00 	vldr	s15, [r7]
 800246a:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 800246e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	d801      	bhi.n	800247c <LIS3MDL_MAG_SetOutputDataRate+0x38>
 8002478:	2302      	movs	r3, #2
 800247a:	e037      	b.n	80024ec <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 800247c:	edd7 7a00 	vldr	s15, [r7]
 8002480:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248c:	d801      	bhi.n	8002492 <LIS3MDL_MAG_SetOutputDataRate+0x4e>
 800248e:	2304      	movs	r3, #4
 8002490:	e02c      	b.n	80024ec <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8002492:	edd7 7a00 	vldr	s15, [r7]
 8002496:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800249a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800249e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a2:	d801      	bhi.n	80024a8 <LIS3MDL_MAG_SetOutputDataRate+0x64>
 80024a4:	2306      	movs	r3, #6
 80024a6:	e021      	b.n	80024ec <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 80024a8:	edd7 7a00 	vldr	s15, [r7]
 80024ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	d801      	bhi.n	80024be <LIS3MDL_MAG_SetOutputDataRate+0x7a>
 80024ba:	2308      	movs	r3, #8
 80024bc:	e016      	b.n	80024ec <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 80024be:	edd7 7a00 	vldr	s15, [r7]
 80024c2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80024c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	d801      	bhi.n	80024d4 <LIS3MDL_MAG_SetOutputDataRate+0x90>
 80024d0:	230a      	movs	r3, #10
 80024d2:	e00b      	b.n	80024ec <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 80024d4:	edd7 7a00 	vldr	s15, [r7]
 80024d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002514 <LIS3MDL_MAG_SetOutputDataRate+0xd0>
 80024dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	d801      	bhi.n	80024ea <LIS3MDL_MAG_SetOutputDataRate+0xa6>
 80024e6:	230c      	movs	r3, #12
 80024e8:	e000      	b.n	80024ec <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 80024ea:	230e      	movs	r3, #14
  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
 80024ec:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 10.000f) ? LIS3MDL_LP_10Hz
            : (Odr <= 20.000f) ? LIS3MDL_LP_20Hz
            : (Odr <= 40.000f) ? LIS3MDL_LP_40Hz
            :                      LIS3MDL_LP_80Hz;

  if (lis3mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS3MDL_OK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	331c      	adds	r3, #28
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f907 	bl	800270a <lis3mdl_data_rate_set>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <LIS3MDL_MAG_SetOutputDataRate+0xc4>
  {
    return LIS3MDL_ERROR;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	e000      	b.n	800250a <LIS3MDL_MAG_SetOutputDataRate+0xc6>
  }

  return LIS3MDL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	42200000 	.word	0x42200000

08002518 <LIS3MDL_MAG_SetFullScale>:
  * @param pObj the device pObj
  * @param FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_SetFullScale(LIS3MDL_Object_t *pObj, int32_t FullScale)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t new_fs;

  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
           : (FullScale <= 8) ? LIS3MDL_8_GAUSS
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b04      	cmp	r3, #4
 8002526:	dd0b      	ble.n	8002540 <LIS3MDL_MAG_SetFullScale+0x28>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b08      	cmp	r3, #8
 800252c:	dd06      	ble.n	800253c <LIS3MDL_MAG_SetFullScale+0x24>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	dc01      	bgt.n	8002538 <LIS3MDL_MAG_SetFullScale+0x20>
 8002534:	2302      	movs	r3, #2
 8002536:	e004      	b.n	8002542 <LIS3MDL_MAG_SetFullScale+0x2a>
 8002538:	2303      	movs	r3, #3
 800253a:	e002      	b.n	8002542 <LIS3MDL_MAG_SetFullScale+0x2a>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <LIS3MDL_MAG_SetFullScale+0x2a>
 8002540:	2300      	movs	r3, #0
  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
 8002542:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 12) ? LIS3MDL_12_GAUSS
           :                       LIS3MDL_16_GAUSS;

  if (lis3mdl_full_scale_set(&(pObj->Ctx), new_fs) != LIS3MDL_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	331c      	adds	r3, #28
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f000 f922 	bl	8002796 <lis3mdl_full_scale_set>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <LIS3MDL_MAG_SetFullScale+0x46>
  {
    return LIS3MDL_ERROR;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
 800255c:	e000      	b.n	8002560 <LIS3MDL_MAG_SetFullScale+0x48>
  }

  return LIS3MDL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <LIS3MDL_MAG_GetAxesRaw>:
  * @param pObj the device pObj
  * @param Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_GetAxesRaw(LIS3MDL_Object_t *pObj, LIS3MDL_AxesRaw_t *Value)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  lis3mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis3mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3MDL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	331c      	adds	r3, #28
 8002576:	f107 0208 	add.w	r2, r7, #8
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f000 f97c 	bl	800287a <lis3mdl_magnetic_raw_get>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <LIS3MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS3MDL_ERROR;
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
 800258c:	e00c      	b.n	80025a8 <LIS3MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800258e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002596:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800259e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	809a      	strh	r2, [r3, #4]

  return LIS3MDL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <LIS3MDL_Write_Reg>:
  * @param Reg address to be written
  * @param Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_Write_Reg(LIS3MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
 80025bc:	4613      	mov	r3, r2
 80025be:	70bb      	strb	r3, [r7, #2]
  if (lis3mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS3MDL_OK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f103 001c 	add.w	r0, r3, #28
 80025c6:	1cba      	adds	r2, r7, #2
 80025c8:	78f9      	ldrb	r1, [r7, #3]
 80025ca:	2301      	movs	r3, #1
 80025cc:	f000 f885 	bl	80026da <lis3mdl_write_reg>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <LIS3MDL_Write_Reg+0x2c>
  {
    return LIS3MDL_ERROR;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	e000      	b.n	80025de <LIS3MDL_Write_Reg+0x2e>
  }

  return LIS3MDL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <ReadRegWrap>:
  * @brief  Wrap Read register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80025e6:	b590      	push	{r4, r7, lr}
 80025e8:	b087      	sub	sp, #28
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	461a      	mov	r2, r3
 80025f2:	460b      	mov	r3, r1
 80025f4:	72fb      	strb	r3, [r7, #11]
 80025f6:	4613      	mov	r3, r2
 80025f8:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10e      	bne.n	8002624 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	695c      	ldr	r4, [r3, #20]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	7b1b      	ldrb	r3, [r3, #12]
 800260e:	b298      	uxth	r0, r3
 8002610:	7afb      	ldrb	r3, [r7, #11]
 8002612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002616:	b2db      	uxtb	r3, r3
 8002618:	b299      	uxth	r1, r3
 800261a:	893b      	ldrh	r3, [r7, #8]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	47a0      	blx	r4
 8002620:	4603      	mov	r3, r0
 8002622:	e00d      	b.n	8002640 <ReadRegWrap+0x5a>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	695c      	ldr	r4, [r3, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	7b1b      	ldrb	r3, [r3, #12]
 800262c:	b298      	uxth	r0, r3
 800262e:	7afb      	ldrb	r3, [r7, #11]
 8002630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002634:	b2db      	uxtb	r3, r3
 8002636:	b299      	uxth	r1, r3
 8002638:	893b      	ldrh	r3, [r7, #8]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	47a0      	blx	r4
 800263e:	4603      	mov	r3, r0
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd90      	pop	{r4, r7, pc}

08002648 <WriteRegWrap>:
  * @brief  Wrap Write register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	461a      	mov	r2, r3
 8002654:	460b      	mov	r3, r1
 8002656:	72fb      	strb	r3, [r7, #11]
 8002658:	4613      	mov	r3, r2
 800265a:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10e      	bne.n	8002686 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	691c      	ldr	r4, [r3, #16]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	7b1b      	ldrb	r3, [r3, #12]
 8002670:	b298      	uxth	r0, r3
 8002672:	7afb      	ldrb	r3, [r7, #11]
 8002674:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002678:	b2db      	uxtb	r3, r3
 800267a:	b299      	uxth	r1, r3
 800267c:	893b      	ldrh	r3, [r7, #8]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	47a0      	blx	r4
 8002682:	4603      	mov	r3, r0
 8002684:	e00d      	b.n	80026a2 <WriteRegWrap+0x5a>
  }
  else   /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	691c      	ldr	r4, [r3, #16]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	7b1b      	ldrb	r3, [r3, #12]
 800268e:	b298      	uxth	r0, r3
 8002690:	7afb      	ldrb	r3, [r7, #11]
 8002692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002696:	b2db      	uxtb	r3, r3
 8002698:	b299      	uxth	r1, r3
 800269a:	893b      	ldrh	r3, [r7, #8]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	47a0      	blx	r4
 80026a0:	4603      	mov	r3, r0
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd90      	pop	{r4, r7, pc}

080026aa <lis3mdl_read_reg>:
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80026aa:	b590      	push	{r4, r7, lr}
 80026ac:	b087      	sub	sp, #28
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	461a      	mov	r2, r3
 80026b6:	460b      	mov	r3, r1
 80026b8:	72fb      	strb	r3, [r7, #11]
 80026ba:	4613      	mov	r3, r2
 80026bc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685c      	ldr	r4, [r3, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6898      	ldr	r0, [r3, #8]
 80026c6:	893b      	ldrh	r3, [r7, #8]
 80026c8:	7af9      	ldrb	r1, [r7, #11]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	47a0      	blx	r4
 80026ce:	6178      	str	r0, [r7, #20]

  return ret;
 80026d0:	697b      	ldr	r3, [r7, #20]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}

080026da <lis3mdl_write_reg>:
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80026da:	b590      	push	{r4, r7, lr}
 80026dc:	b087      	sub	sp, #28
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	461a      	mov	r2, r3
 80026e6:	460b      	mov	r3, r1
 80026e8:	72fb      	strb	r3, [r7, #11]
 80026ea:	4613      	mov	r3, r2
 80026ec:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681c      	ldr	r4, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6898      	ldr	r0, [r3, #8]
 80026f6:	893b      	ldrh	r3, [r7, #8]
 80026f8:	7af9      	ldrb	r1, [r7, #11]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	47a0      	blx	r4
 80026fe:	6178      	str	r0, [r7, #20]

  return ret;
 8002700:	697b      	ldr	r3, [r7, #20]
}
 8002702:	4618      	mov	r0, r3
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bd90      	pop	{r4, r7, pc}

0800270a <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002716:	f107 0210 	add.w	r2, r7, #16
 800271a:	2301      	movs	r3, #1
 800271c:	2120      	movs	r1, #32
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ffc3 	bl	80026aa <lis3mdl_read_reg>
 8002724:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10f      	bne.n	800274c <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002732:	b2da      	uxtb	r2, r3
 8002734:	7c3b      	ldrb	r3, [r7, #16]
 8002736:	f362 0346 	bfi	r3, r2, #1, #6
 800273a:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800273c:	f107 0210 	add.w	r2, r7, #16
 8002740:	2301      	movs	r3, #1
 8002742:	2120      	movs	r1, #32
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ffc8 	bl	80026da <lis3mdl_write_reg>
 800274a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d107      	bne.n	8002762 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002752:	f107 020c 	add.w	r2, r7, #12
 8002756:	2301      	movs	r3, #1
 8002758:	2123      	movs	r1, #35	; 0x23
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffa5 	bl	80026aa <lis3mdl_read_reg>
 8002760:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d111      	bne.n	800278c <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	b2da      	uxtb	r2, r3
 8002774:	7b3b      	ldrb	r3, [r7, #12]
 8002776:	f362 0383 	bfi	r3, r2, #2, #2
 800277a:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 800277c:	f107 020c 	add.w	r2, r7, #12
 8002780:	2301      	movs	r3, #1
 8002782:	2123      	movs	r1, #35	; 0x23
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ffa8 	bl	80026da <lis3mdl_write_reg>
 800278a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 800278c:	697b      	ldr	r3, [r7, #20]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80027a2:	f107 0208 	add.w	r2, r7, #8
 80027a6:	2301      	movs	r3, #1
 80027a8:	2121      	movs	r1, #33	; 0x21
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ff7d 	bl	80026aa <lis3mdl_read_reg>
 80027b0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10f      	bne.n	80027d8 <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	7a3b      	ldrb	r3, [r7, #8]
 80027c2:	f362 1346 	bfi	r3, r2, #5, #2
 80027c6:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80027c8:	f107 0208 	add.w	r2, r7, #8
 80027cc:	2301      	movs	r3, #1
 80027ce:	2121      	movs	r1, #33	; 0x21
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff82 	bl	80026da <lis3mdl_write_reg>
 80027d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027d8:	68fb      	ldr	r3, [r7, #12]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 80027ee:	f107 0208 	add.w	r2, r7, #8
 80027f2:	2301      	movs	r3, #1
 80027f4:	2122      	movs	r1, #34	; 0x22
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ff57 	bl	80026aa <lis3mdl_read_reg>
 80027fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10f      	bne.n	8002824 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	b2da      	uxtb	r2, r3
 800280c:	7a3b      	ldrb	r3, [r7, #8]
 800280e:	f362 0301 	bfi	r3, r2, #0, #2
 8002812:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8002814:	f107 0208 	add.w	r2, r7, #8
 8002818:	2301      	movs	r3, #1
 800281a:	2122      	movs	r1, #34	; 0x22
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff5c 	bl	80026da <lis3mdl_write_reg>
 8002822:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002824:	68fb      	ldr	r3, [r7, #12]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800283a:	f107 0208 	add.w	r2, r7, #8
 800283e:	2301      	movs	r3, #1
 8002840:	2124      	movs	r1, #36	; 0x24
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff31 	bl	80026aa <lis3mdl_read_reg>
 8002848:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	b2da      	uxtb	r2, r3
 8002858:	7a3b      	ldrb	r3, [r7, #8]
 800285a:	f362 1386 	bfi	r3, r2, #6, #1
 800285e:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8002860:	f107 0208 	add.w	r2, r7, #8
 8002864:	2301      	movs	r3, #1
 8002866:	2124      	movs	r1, #36	; 0x24
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff36 	bl	80026da <lis3mdl_write_reg>
 800286e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002870:	68fb      	ldr	r3, [r7, #12]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 8002884:	f107 020c 	add.w	r2, r7, #12
 8002888:	2306      	movs	r3, #6
 800288a:	2128      	movs	r1, #40	; 0x28
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff0c 	bl	80026aa <lis3mdl_read_reg>
 8002892:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002894:	7b7b      	ldrb	r3, [r7, #13]
 8002896:	b21a      	sxth	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	7b3b      	ldrb	r3, [r7, #12]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	b21a      	sxth	r2, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	3302      	adds	r3, #2
 80028bc:	b212      	sxth	r2, r2
 80028be:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	3302      	adds	r3, #2
 80028c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	7bbb      	ldrb	r3, [r7, #14]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	3302      	adds	r3, #2
 80028da:	b212      	sxth	r2, r2
 80028dc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80028de:	7c7a      	ldrb	r2, [r7, #17]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	3304      	adds	r3, #4
 80028e4:	b212      	sxth	r2, r2
 80028e6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	3304      	adds	r3, #4
 80028ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	7c3b      	ldrb	r3, [r7, #16]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	3304      	adds	r3, #4
 8002902:	b212      	sxth	r2, r2
 8002904:	801a      	strh	r2, [r3, #0]

  return ret;
 8002906:	697b      	ldr	r3, [r7, #20]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 800291a:	2301      	movs	r3, #1
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	210f      	movs	r1, #15
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fec2 	bl	80026aa <lis3mdl_read_reg>
 8002926:	60f8      	str	r0, [r7, #12]

  return ret;
 8002928:	68fb      	ldr	r3, [r7, #12]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <lis3mdl_int_generation_set>:
  * @param  val      change the values of ien in reg INT_CFG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_int_generation_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	70fb      	strb	r3, [r7, #3]
  lis3mdl_int_cfg_t int_cfg;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_INT_CFG, (uint8_t *)&int_cfg, 1);
 800293e:	f107 0208 	add.w	r2, r7, #8
 8002942:	2301      	movs	r3, #1
 8002944:	2130      	movs	r1, #48	; 0x30
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff feaf 	bl	80026aa <lis3mdl_read_reg>
 800294c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10f      	bne.n	8002974 <lis3mdl_int_generation_set+0x42>
  {
    int_cfg.ien = val;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	b2da      	uxtb	r2, r3
 800295c:	7a3b      	ldrb	r3, [r7, #8]
 800295e:	f362 0300 	bfi	r3, r2, #0, #1
 8002962:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_INT_CFG, (uint8_t *)&int_cfg, 1);
 8002964:	f107 0208 	add.w	r2, r7, #8
 8002968:	2301      	movs	r3, #1
 800296a:	2130      	movs	r1, #48	; 0x30
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff feb4 	bl	80026da <lis3mdl_write_reg>
 8002972:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002974:	68fb      	ldr	r3, [r7, #12]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d103      	bne.n	800299c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e04d      	b.n	8002a38 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	7b1a      	ldrb	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <LSM6DSL_RegisterBusIO+0xc4>)
 80029d8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1a      	ldr	r2, [pc, #104]	; (8002a48 <LSM6DSL_RegisterBusIO+0xc8>)
 80029de:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d103      	bne.n	80029f6 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e020      	b.n	8002a38 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4798      	blx	r3
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e016      	b.n	8002a38 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d112      	bne.n	8002a38 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10d      	bne.n	8002a38 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8002a20:	7afb      	ldrb	r3, [r7, #11]
 8002a22:	461a      	mov	r2, r3
 8002a24:	2112      	movs	r1, #18
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f935 	bl	8002c96 <LSM6DSL_Write_Reg>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
 8002a36:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002a38:	68fb      	ldr	r3, [r7, #12]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	08002e0f 	.word	0x08002e0f
 8002a48:	08002e45 	.word	0x08002e45

08002a4c <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	331c      	adds	r3, #28
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fbfd 	bl	800325a <lsm6dsl_auto_increment_set>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8002a66:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6a:	e054      	b.n	8002b16 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	331c      	adds	r3, #28
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fb94 	bl	80031a0 <lsm6dsl_block_data_update_set>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	e048      	b.n	8002b16 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	331c      	adds	r3, #28
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fdf0 	bl	8003670 <lsm6dsl_fifo_mode_set>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	e03c      	b.n	8002b16 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	331c      	adds	r3, #28
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fa3b 	bl	8002f26 <lsm6dsl_xl_data_rate_set>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aba:	e02c      	b.n	8002b16 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	331c      	adds	r3, #28
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fa09 	bl	8002eda <lsm6dsl_xl_full_scale_set>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad2:	e020      	b.n	8002b16 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	331c      	adds	r3, #28
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fad4 	bl	8003090 <lsm6dsl_gy_data_rate_set>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	e010      	b.n	8002b16 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	331c      	adds	r3, #28
 8002af8:	2106      	movs	r1, #6
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 faa2 	bl	8003044 <lsm6dsl_gy_full_scale_set>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0a:	e004      	b.n	8002b16 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	331c      	adds	r3, #28
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fb5c 	bl	80031ec <lsm6dsl_device_id_get>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e000      	b.n	8002b42 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e014      	b.n	8002b8a <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f103 021c 	add.w	r2, r3, #28
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 f9d9 	bl	8002f26 <lsm6dsl_xl_data_rate_set>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	e004      	b.n	8002b8a <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <LSM6DSL_ACC_Disable>:
  * @brief  Disable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e01f      	b.n	8002be8 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f103 021c 	add.w	r2, r3, #28
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	332b      	adds	r3, #43	; 0x2b
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	f000 f9dd 	bl	8002f74 <lsm6dsl_xl_data_rate_get>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc4:	e010      	b.n	8002be8 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	331c      	adds	r3, #28
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f9aa 	bl	8002f26 <lsm6dsl_xl_data_rate_set>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bdc:	e004      	b.n	8002be8 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e014      	b.n	8002c30 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f103 021c 	add.w	r2, r3, #28
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c12:	4619      	mov	r1, r3
 8002c14:	4610      	mov	r0, r2
 8002c16:	f000 fa3b 	bl	8003090 <lsm6dsl_gy_data_rate_set>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002c20:	f04f 33ff 	mov.w	r3, #4294967295
 8002c24:	e004      	b.n	8002c30 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <LSM6DSL_GYRO_Disable>:
  * @brief  Disable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e01f      	b.n	8002c8e <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f103 021c 	add.w	r2, r3, #28
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	332c      	adds	r3, #44	; 0x2c
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f000 fa3e 	bl	80030dc <lsm6dsl_gy_data_rate_get>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8002c66:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6a:	e010      	b.n	8002c8e <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	331c      	adds	r3, #28
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fa0c 	bl	8003090 <lsm6dsl_gy_data_rate_set>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	e004      	b.n	8002c8e <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	70fb      	strb	r3, [r7, #3]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f103 001c 	add.w	r0, r3, #28
 8002cac:	1cba      	adds	r2, r7, #2
 8002cae:	78f9      	ldrb	r1, [r7, #3]
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f000 f8fa 	bl	8002eaa <lsm6dsl_write_reg>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	e000      	b.n	8002cc4 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <LSM6DSL_FIFO_Set_Watermark_Level>:
  * @param  pObj the device pObj
  * @param  Watermark FIFO watermark level
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_Set_Watermark_Level(LSM6DSL_Object_t *pObj, uint16_t Watermark)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
  if (lsm6dsl_fifo_watermark_set(&(pObj->Ctx), Watermark) != LSM6DSL_OK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	331c      	adds	r3, #28
 8002cdc:	887a      	ldrh	r2, [r7, #2]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fc43 	bl	800356c <lsm6dsl_fifo_watermark_set>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <LSM6DSL_FIFO_Set_Watermark_Level+0x26>
  {
    return LSM6DSL_ERROR;
 8002cec:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf0:	e000      	b.n	8002cf4 <LSM6DSL_FIFO_Set_Watermark_Level+0x28>
  }

  return LSM6DSL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <LSM6DSL_FIFO_Set_Mode>:
  * @param  pObj the device pObj
  * @param  Mode FIFO mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_Set_Mode(LSM6DSL_Object_t *pObj, uint8_t Mode)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_fifo_mode_t)Mode)
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	bf8c      	ite	hi
 8002d12:	2201      	movhi	r2, #1
 8002d14:	2200      	movls	r2, #0
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d10b      	bne.n	8002d34 <LSM6DSL_FIFO_Set_Mode+0x38>
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d103      	bne.n	8002d3c <LSM6DSL_FIFO_Set_Mode+0x40>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
    case LSM6DSL_STREAM_MODE:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
 8002d38:	60fb      	str	r3, [r7, #12]
      break;
 8002d3a:	e000      	b.n	8002d3e <LSM6DSL_FIFO_Set_Mode+0x42>
      break;
 8002d3c:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d101      	bne.n	8002d4a <LSM6DSL_FIFO_Set_Mode+0x4e>
  {
    return ret;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	e00d      	b.n	8002d66 <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), (lsm6dsl_fifo_mode_t)Mode) != LSM6DSL_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	331c      	adds	r3, #28
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fc8c 	bl	8003670 <lsm6dsl_fifo_mode_set>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <LSM6DSL_FIFO_Set_Mode+0x68>
  {
    return LSM6DSL_ERROR;
 8002d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d62:	e000      	b.n	8002d66 <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  return ret;
 8002d64:	68fb      	ldr	r3, [r7, #12]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <LSM6DSL_FIFO_ACC_Set_Decimation>:
  * @param  pObj the device pObj
  * @param  Decimation FIFO accelero decimation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_ACC_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_xl_t)Decimation)
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	2b07      	cmp	r3, #7
 8002d82:	d903      	bls.n	8002d8c <LSM6DSL_FIFO_ACC_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_XL_DEC_16:
    case LSM6DSL_FIFO_XL_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295
 8002d88:	60fb      	str	r3, [r7, #12]
      break;
 8002d8a:	e000      	b.n	8002d8e <LSM6DSL_FIFO_ACC_Set_Decimation+0x20>
      break;
 8002d8c:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d101      	bne.n	8002d9a <LSM6DSL_FIFO_ACC_Set_Decimation+0x2c>
  {
    return ret;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	e00d      	b.n	8002db6 <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_xl_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_xl_t)Decimation) != LSM6DSL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	331c      	adds	r3, #28
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fc18 	bl	80035d8 <lsm6dsl_fifo_xl_batch_set>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <LSM6DSL_FIFO_ACC_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	e000      	b.n	8002db6 <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  return ret;
 8002db4:	68fb      	ldr	r3, [r7, #12]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <LSM6DSL_FIFO_GYRO_Set_Decimation>:
  * @param  pObj the device pObj
  * @param  Decimation FIFO gyro decimation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_GYRO_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_gyro_t)Decimation)
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	2b07      	cmp	r3, #7
 8002dd2:	d903      	bls.n	8002ddc <LSM6DSL_FIFO_GYRO_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_GY_DEC_16:
    case LSM6DSL_FIFO_GY_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd8:	60fb      	str	r3, [r7, #12]
      break;
 8002dda:	e000      	b.n	8002dde <LSM6DSL_FIFO_GYRO_Set_Decimation+0x20>
      break;
 8002ddc:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d101      	bne.n	8002dea <LSM6DSL_FIFO_GYRO_Set_Decimation+0x2c>
  {
    return ret;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	e00d      	b.n	8002e06 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_gy_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_gyro_t)Decimation) != LSM6DSL_OK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	331c      	adds	r3, #28
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fc16 	bl	8003624 <lsm6dsl_fifo_gy_batch_set>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	e000      	b.n	8002e06 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  return ret;
 8002e04:	68fb      	ldr	r3, [r7, #12]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e0e:	b590      	push	{r4, r7, lr}
 8002e10:	b087      	sub	sp, #28
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	72fb      	strb	r3, [r7, #11]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	695c      	ldr	r4, [r3, #20]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	7b1b      	ldrb	r3, [r3, #12]
 8002e2e:	b298      	uxth	r0, r3
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	b299      	uxth	r1, r3
 8002e34:	893b      	ldrh	r3, [r7, #8]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	47a0      	blx	r4
 8002e3a:	4603      	mov	r3, r0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd90      	pop	{r4, r7, pc}

08002e44 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	460b      	mov	r3, r1
 8002e52:	72fb      	strb	r3, [r7, #11]
 8002e54:	4613      	mov	r3, r2
 8002e56:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	691c      	ldr	r4, [r3, #16]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	7b1b      	ldrb	r3, [r3, #12]
 8002e64:	b298      	uxth	r0, r3
 8002e66:	7afb      	ldrb	r3, [r7, #11]
 8002e68:	b299      	uxth	r1, r3
 8002e6a:	893b      	ldrh	r3, [r7, #8]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	47a0      	blx	r4
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd90      	pop	{r4, r7, pc}

08002e7a <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002e7a:	b590      	push	{r4, r7, lr}
 8002e7c:	b087      	sub	sp, #28
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	461a      	mov	r2, r3
 8002e86:	460b      	mov	r3, r1
 8002e88:	72fb      	strb	r3, [r7, #11]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685c      	ldr	r4, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6898      	ldr	r0, [r3, #8]
 8002e96:	893b      	ldrh	r3, [r7, #8]
 8002e98:	7af9      	ldrb	r1, [r7, #11]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	47a0      	blx	r4
 8002e9e:	6178      	str	r0, [r7, #20]

  return ret;
 8002ea0:	697b      	ldr	r3, [r7, #20]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd90      	pop	{r4, r7, pc}

08002eaa <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002eaa:	b590      	push	{r4, r7, lr}
 8002eac:	b087      	sub	sp, #28
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	72fb      	strb	r3, [r7, #11]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681c      	ldr	r4, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6898      	ldr	r0, [r3, #8]
 8002ec6:	893b      	ldrh	r3, [r7, #8]
 8002ec8:	7af9      	ldrb	r1, [r7, #11]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	47a0      	blx	r4
 8002ece:	6178      	str	r0, [r7, #20]

  return ret;
 8002ed0:	697b      	ldr	r3, [r7, #20]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd90      	pop	{r4, r7, pc}

08002eda <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002ee6:	f107 0208 	add.w	r2, r7, #8
 8002eea:	2301      	movs	r3, #1
 8002eec:	2110      	movs	r1, #16
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ffc3 	bl	8002e7a <lsm6dsl_read_reg>
 8002ef4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10f      	bne.n	8002f1c <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	7a3b      	ldrb	r3, [r7, #8]
 8002f06:	f362 0383 	bfi	r3, r2, #2, #2
 8002f0a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002f0c:	f107 0208 	add.w	r2, r7, #8
 8002f10:	2301      	movs	r3, #1
 8002f12:	2110      	movs	r1, #16
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ffc8 	bl	8002eaa <lsm6dsl_write_reg>
 8002f1a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002f32:	f107 0208 	add.w	r2, r7, #8
 8002f36:	2301      	movs	r3, #1
 8002f38:	2110      	movs	r1, #16
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ff9d 	bl	8002e7a <lsm6dsl_read_reg>
 8002f40:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10f      	bne.n	8002f68 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	7a3b      	ldrb	r3, [r7, #8]
 8002f52:	f362 1307 	bfi	r3, r2, #4, #4
 8002f56:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002f58:	f107 0208 	add.w	r2, r7, #8
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	2110      	movs	r1, #16
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff ffa2 	bl	8002eaa <lsm6dsl_write_reg>
 8002f66:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f68:	68fb      	ldr	r3, [r7, #12]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002f7e:	f107 0208 	add.w	r2, r7, #8
 8002f82:	2301      	movs	r3, #1
 8002f84:	2110      	movs	r1, #16
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff ff77 	bl	8002e7a <lsm6dsl_read_reg>
 8002f8c:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 8002f8e:	7a3b      	ldrb	r3, [r7, #8]
 8002f90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b0b      	cmp	r3, #11
 8002f98:	d84a      	bhi.n	8003030 <lsm6dsl_xl_data_rate_get+0xbc>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <lsm6dsl_xl_data_rate_get+0x2c>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	08002fd1 	.word	0x08002fd1
 8002fa4:	08002fd9 	.word	0x08002fd9
 8002fa8:	08002fe1 	.word	0x08002fe1
 8002fac:	08002fe9 	.word	0x08002fe9
 8002fb0:	08002ff1 	.word	0x08002ff1
 8002fb4:	08002ff9 	.word	0x08002ff9
 8002fb8:	08003001 	.word	0x08003001
 8002fbc:	08003009 	.word	0x08003009
 8002fc0:	08003011 	.word	0x08003011
 8002fc4:	08003019 	.word	0x08003019
 8002fc8:	08003021 	.word	0x08003021
 8002fcc:	08003029 	.word	0x08003029
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
      break;
 8002fd6:	e02f      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
      break;
 8002fde:	e02b      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	701a      	strb	r2, [r3, #0]
      break;
 8002fe6:	e027      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2203      	movs	r2, #3
 8002fec:	701a      	strb	r2, [r3, #0]
      break;
 8002fee:	e023      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	701a      	strb	r2, [r3, #0]
      break;
 8002ff6:	e01f      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2205      	movs	r2, #5
 8002ffc:	701a      	strb	r2, [r3, #0]
      break;
 8002ffe:	e01b      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2206      	movs	r2, #6
 8003004:	701a      	strb	r2, [r3, #0]
      break;
 8003006:	e017      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2207      	movs	r2, #7
 800300c:	701a      	strb	r2, [r3, #0]
      break;
 800300e:	e013      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2208      	movs	r2, #8
 8003014:	701a      	strb	r2, [r3, #0]
      break;
 8003016:	e00f      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2209      	movs	r2, #9
 800301c:	701a      	strb	r2, [r3, #0]
      break;
 800301e:	e00b      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	220a      	movs	r2, #10
 8003024:	701a      	strb	r2, [r3, #0]
      break;
 8003026:	e007      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	220b      	movs	r2, #11
 800302c:	701a      	strb	r2, [r3, #0]
      break;
 800302e:	e003      	b.n	8003038 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	220c      	movs	r2, #12
 8003034:	701a      	strb	r2, [r3, #0]
      break;
 8003036:	bf00      	nop
  }

  return ret;
 8003038:	68fb      	ldr	r3, [r7, #12]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop

08003044 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003050:	f107 0208 	add.w	r2, r7, #8
 8003054:	2301      	movs	r3, #1
 8003056:	2111      	movs	r1, #17
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff0e 	bl	8002e7a <lsm6dsl_read_reg>
 800305e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10f      	bne.n	8003086 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	b2da      	uxtb	r2, r3
 800306e:	7a3b      	ldrb	r3, [r7, #8]
 8003070:	f362 0343 	bfi	r3, r2, #1, #3
 8003074:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003076:	f107 0208 	add.w	r2, r7, #8
 800307a:	2301      	movs	r3, #1
 800307c:	2111      	movs	r1, #17
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ff13 	bl	8002eaa <lsm6dsl_write_reg>
 8003084:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800309c:	f107 0208 	add.w	r2, r7, #8
 80030a0:	2301      	movs	r3, #1
 80030a2:	2111      	movs	r1, #17
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff fee8 	bl	8002e7a <lsm6dsl_read_reg>
 80030aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	7a3b      	ldrb	r3, [r7, #8]
 80030bc:	f362 1307 	bfi	r3, r2, #4, #4
 80030c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80030c2:	f107 0208 	add.w	r2, r7, #8
 80030c6:	2301      	movs	r3, #1
 80030c8:	2111      	movs	r1, #17
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff feed 	bl	8002eaa <lsm6dsl_write_reg>
 80030d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80030d2:	68fb      	ldr	r3, [r7, #12]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80030e6:	f107 0208 	add.w	r2, r7, #8
 80030ea:	2301      	movs	r3, #1
 80030ec:	2111      	movs	r1, #17
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fec3 	bl	8002e7a <lsm6dsl_read_reg>
 80030f4:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 80030f6:	7a3b      	ldrb	r3, [r7, #8]
 80030f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b0a      	cmp	r3, #10
 8003100:	d844      	bhi.n	800318c <lsm6dsl_gy_data_rate_get+0xb0>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <lsm6dsl_gy_data_rate_get+0x2c>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003135 	.word	0x08003135
 800310c:	0800313d 	.word	0x0800313d
 8003110:	08003145 	.word	0x08003145
 8003114:	0800314d 	.word	0x0800314d
 8003118:	08003155 	.word	0x08003155
 800311c:	0800315d 	.word	0x0800315d
 8003120:	08003165 	.word	0x08003165
 8003124:	0800316d 	.word	0x0800316d
 8003128:	08003175 	.word	0x08003175
 800312c:	0800317d 	.word	0x0800317d
 8003130:	08003185 	.word	0x08003185
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
      break;
 800313a:	e02b      	b.n	8003194 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
      break;
 8003142:	e027      	b.n	8003194 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
      break;
 800314a:	e023      	b.n	8003194 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2203      	movs	r2, #3
 8003150:	701a      	strb	r2, [r3, #0]
      break;
 8003152:	e01f      	b.n	8003194 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2204      	movs	r2, #4
 8003158:	701a      	strb	r2, [r3, #0]
      break;
 800315a:	e01b      	b.n	8003194 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2205      	movs	r2, #5
 8003160:	701a      	strb	r2, [r3, #0]
      break;
 8003162:	e017      	b.n	8003194 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2206      	movs	r2, #6
 8003168:	701a      	strb	r2, [r3, #0]
      break;
 800316a:	e013      	b.n	8003194 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2207      	movs	r2, #7
 8003170:	701a      	strb	r2, [r3, #0]
      break;
 8003172:	e00f      	b.n	8003194 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2208      	movs	r2, #8
 8003178:	701a      	strb	r2, [r3, #0]
      break;
 800317a:	e00b      	b.n	8003194 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2209      	movs	r2, #9
 8003180:	701a      	strb	r2, [r3, #0]
      break;
 8003182:	e007      	b.n	8003194 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	220a      	movs	r2, #10
 8003188:	701a      	strb	r2, [r3, #0]
      break;
 800318a:	e003      	b.n	8003194 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	220b      	movs	r2, #11
 8003190:	701a      	strb	r2, [r3, #0]
      break;
 8003192:	bf00      	nop
  }

  return ret;
 8003194:	68fb      	ldr	r3, [r7, #12]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop

080031a0 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80031ac:	f107 0208 	add.w	r2, r7, #8
 80031b0:	2301      	movs	r3, #1
 80031b2:	2112      	movs	r1, #18
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff fe60 	bl	8002e7a <lsm6dsl_read_reg>
 80031ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10f      	bne.n	80031e2 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	7a3b      	ldrb	r3, [r7, #8]
 80031cc:	f362 1386 	bfi	r3, r2, #6, #1
 80031d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80031d2:	f107 0208 	add.w	r2, r7, #8
 80031d6:	2301      	movs	r3, #1
 80031d8:	2112      	movs	r1, #18
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fe65 	bl	8002eaa <lsm6dsl_write_reg>
 80031e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031e2:	68fb      	ldr	r3, [r7, #12]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80031f6:	2301      	movs	r3, #1
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	210f      	movs	r1, #15
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff fe3c 	bl	8002e7a <lsm6dsl_read_reg>
 8003202:	60f8      	str	r0, [r7, #12]

  return ret;
 8003204:	68fb      	ldr	r3, [r7, #12]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	460b      	mov	r3, r1
 8003218:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800321a:	f107 0208 	add.w	r2, r7, #8
 800321e:	2301      	movs	r3, #1
 8003220:	2112      	movs	r1, #18
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fe29 	bl	8002e7a <lsm6dsl_read_reg>
 8003228:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10f      	bne.n	8003250 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	b2da      	uxtb	r2, r3
 8003238:	7a3b      	ldrb	r3, [r7, #8]
 800323a:	f362 0300 	bfi	r3, r2, #0, #1
 800323e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003240:	f107 0208 	add.w	r2, r7, #8
 8003244:	2301      	movs	r3, #1
 8003246:	2112      	movs	r1, #18
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fe2e 	bl	8002eaa <lsm6dsl_write_reg>
 800324e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003250:	68fb      	ldr	r3, [r7, #12]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003266:	f107 0208 	add.w	r2, r7, #8
 800326a:	2301      	movs	r3, #1
 800326c:	2112      	movs	r1, #18
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fe03 	bl	8002e7a <lsm6dsl_read_reg>
 8003274:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10f      	bne.n	800329c <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	b2da      	uxtb	r2, r3
 8003284:	7a3b      	ldrb	r3, [r7, #8]
 8003286:	f362 0382 	bfi	r3, r2, #2, #1
 800328a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800328c:	f107 0208 	add.w	r2, r7, #8
 8003290:	2301      	movs	r3, #1
 8003292:	2112      	movs	r1, #18
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff fe08 	bl	8002eaa <lsm6dsl_write_reg>
 800329a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800329c:	68fb      	ldr	r3, [r7, #12]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b08a      	sub	sp, #40	; 0x28
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80032b0:	f107 021c 	add.w	r2, r7, #28
 80032b4:	2301      	movs	r3, #1
 80032b6:	210d      	movs	r1, #13
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fdde 	bl	8002e7a <lsm6dsl_read_reg>
 80032be:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == 0)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d147      	bne.n	8003356 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 80032c6:	783b      	ldrb	r3, [r7, #0]
 80032c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	7f3b      	ldrb	r3, [r7, #28]
 80032d0:	f362 0300 	bfi	r3, r2, #0, #1
 80032d4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 80032d6:	783b      	ldrb	r3, [r7, #0]
 80032d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	7f3b      	ldrb	r3, [r7, #28]
 80032e0:	f362 0341 	bfi	r3, r2, #1, #1
 80032e4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 80032e6:	783b      	ldrb	r3, [r7, #0]
 80032e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	7f3b      	ldrb	r3, [r7, #28]
 80032f0:	f362 0382 	bfi	r3, r2, #2, #1
 80032f4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80032f6:	783b      	ldrb	r3, [r7, #0]
 80032f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	7f3b      	ldrb	r3, [r7, #28]
 8003300:	f362 03c3 	bfi	r3, r2, #3, #1
 8003304:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8003306:	783b      	ldrb	r3, [r7, #0]
 8003308:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800330c:	b2da      	uxtb	r2, r3
 800330e:	7f3b      	ldrb	r3, [r7, #28]
 8003310:	f362 1304 	bfi	r3, r2, #4, #1
 8003314:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8003316:	783b      	ldrb	r3, [r7, #0]
 8003318:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800331c:	b2da      	uxtb	r2, r3
 800331e:	7f3b      	ldrb	r3, [r7, #28]
 8003320:	f362 1345 	bfi	r3, r2, #5, #1
 8003324:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8003326:	783b      	ldrb	r3, [r7, #0]
 8003328:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800332c:	b2da      	uxtb	r2, r3
 800332e:	7f3b      	ldrb	r3, [r7, #28]
 8003330:	f362 1386 	bfi	r3, r2, #6, #1
 8003334:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8003336:	783b      	ldrb	r3, [r7, #0]
 8003338:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800333c:	b2da      	uxtb	r2, r3
 800333e:	7f3b      	ldrb	r3, [r7, #28]
 8003340:	f362 13c7 	bfi	r3, r2, #7, #1
 8003344:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003346:	f107 021c 	add.w	r2, r7, #28
 800334a:	2301      	movs	r3, #1
 800334c:	210d      	movs	r1, #13
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fdab 	bl	8002eaa <lsm6dsl_write_reg>
 8003354:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800335c:	f107 0218 	add.w	r2, r7, #24
 8003360:	2301      	movs	r3, #1
 8003362:	215e      	movs	r1, #94	; 0x5e
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff fd88 	bl	8002e7a <lsm6dsl_read_reg>
 800336a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	2b00      	cmp	r3, #0
 8003370:	d107      	bne.n	8003382 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8003372:	f107 0214 	add.w	r2, r7, #20
 8003376:	2301      	movs	r3, #1
 8003378:	215f      	movs	r1, #95	; 0x5f
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fd7d 	bl	8002e7a <lsm6dsl_read_reg>
 8003380:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	d147      	bne.n	8003418 <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8003388:	787b      	ldrb	r3, [r7, #1]
 800338a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800338e:	b2da      	uxtb	r2, r3
 8003390:	7e3b      	ldrb	r3, [r7, #24]
 8003392:	f362 0300 	bfi	r3, r2, #0, #1
 8003396:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8003398:	787b      	ldrb	r3, [r7, #1]
 800339a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	7e3b      	ldrb	r3, [r7, #24]
 80033a2:	f362 0341 	bfi	r3, r2, #1, #1
 80033a6:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 80033a8:	787b      	ldrb	r3, [r7, #1]
 80033aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	7e3b      	ldrb	r3, [r7, #24]
 80033b2:	f362 0382 	bfi	r3, r2, #2, #1
 80033b6:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	7e3b      	ldrb	r3, [r7, #24]
 80033c2:	f362 03c3 	bfi	r3, r2, #3, #1
 80033c6:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 80033c8:	787b      	ldrb	r3, [r7, #1]
 80033ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	7e3b      	ldrb	r3, [r7, #24]
 80033d2:	f362 1304 	bfi	r3, r2, #4, #1
 80033d6:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 80033d8:	787b      	ldrb	r3, [r7, #1]
 80033da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	7e3b      	ldrb	r3, [r7, #24]
 80033e2:	f362 1345 	bfi	r3, r2, #5, #1
 80033e6:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	7e3b      	ldrb	r3, [r7, #24]
 80033f2:	f362 1386 	bfi	r3, r2, #6, #1
 80033f6:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 80033f8:	787b      	ldrb	r3, [r7, #1]
 80033fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	7e3b      	ldrb	r3, [r7, #24]
 8003402:	f362 13c7 	bfi	r3, r2, #7, #1
 8003406:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003408:	f107 0218 	add.w	r2, r7, #24
 800340c:	2301      	movs	r3, #1
 800340e:	215e      	movs	r1, #94	; 0x5e
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff fd4a 	bl	8002eaa <lsm6dsl_write_reg>
 8003416:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800341e:	f107 0210 	add.w	r2, r7, #16
 8003422:	2301      	movs	r3, #1
 8003424:	2113      	movs	r1, #19
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fd27 	bl	8002e7a <lsm6dsl_read_reg>
 800342c:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10f      	bne.n	8003454 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8003434:	78bb      	ldrb	r3, [r7, #2]
 8003436:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800343a:	b2da      	uxtb	r2, r3
 800343c:	7c3b      	ldrb	r3, [r7, #16]
 800343e:	f362 1304 	bfi	r3, r2, #4, #1
 8003442:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003444:	f107 0210 	add.w	r2, r7, #16
 8003448:	2301      	movs	r3, #1
 800344a:	2113      	movs	r1, #19
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fd2c 	bl	8002eaa <lsm6dsl_write_reg>
 8003452:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800345a:	f107 0220 	add.w	r2, r7, #32
 800345e:	2301      	movs	r3, #1
 8003460:	211a      	movs	r1, #26
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff fd09 	bl	8002e7a <lsm6dsl_read_reg>
 8003468:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d111      	bne.n	8003494 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8003470:	78bb      	ldrb	r3, [r7, #2]
 8003472:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003476:	b2da      	uxtb	r2, r3
 8003478:	f897 3020 	ldrb.w	r3, [r7, #32]
 800347c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003480:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003484:	f107 0220 	add.w	r2, r7, #32
 8003488:	2301      	movs	r3, #1
 800348a:	211a      	movs	r1, #26
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff fd0c 	bl	8002eaa <lsm6dsl_write_reg>
 8003492:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d158      	bne.n	800354c <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 800349a:	f107 020c 	add.w	r2, r7, #12
 800349e:	2301      	movs	r3, #1
 80034a0:	2158      	movs	r1, #88	; 0x58
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff fce9 	bl	8002e7a <lsm6dsl_read_reg>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 80034aa:	787b      	ldrb	r3, [r7, #1]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d141      	bne.n	800353a <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 80034b6:	787b      	ldrb	r3, [r7, #1]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d13b      	bne.n	800353a <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 80034c2:	787b      	ldrb	r3, [r7, #1]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d135      	bne.n	800353a <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 80034ce:	787b      	ldrb	r3, [r7, #1]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d12f      	bne.n	800353a <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 80034da:	787b      	ldrb	r3, [r7, #1]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d129      	bne.n	800353a <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 80034e6:	787b      	ldrb	r3, [r7, #1]
 80034e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80034ec:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d123      	bne.n	800353a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 80034f2:	7d3b      	ldrb	r3, [r7, #20]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11d      	bne.n	800353a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 80034fe:	7d3b      	ldrb	r3, [r7, #20]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8003506:	2b00      	cmp	r3, #0
 8003508:	d117      	bne.n	800353a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800350a:	7d3b      	ldrb	r3, [r7, #20]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8003512:	2b00      	cmp	r3, #0
 8003514:	d111      	bne.n	800353a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8003516:	7d3b      	ldrb	r3, [r7, #20]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10b      	bne.n	800353a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8003522:	7d3b      	ldrb	r3, [r7, #20]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 800352a:	2b00      	cmp	r3, #0
 800352c:	d105      	bne.n	800353a <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 800352e:	7d3b      	ldrb	r3, [r7, #20]
 8003530:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003534:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8003536:	2b00      	cmp	r3, #0
 8003538:	d004      	beq.n	8003544 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 800353a:	7b3b      	ldrb	r3, [r7, #12]
 800353c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003540:	733b      	strb	r3, [r7, #12]
 8003542:	e003      	b.n	800354c <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8003544:	7b3b      	ldrb	r3, [r7, #12]
 8003546:	f36f 13c7 	bfc	r3, #7, #1
 800354a:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8003552:	f107 020c 	add.w	r2, r7, #12
 8003556:	2301      	movs	r3, #1
 8003558:	2158      	movs	r1, #88	; 0x58
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff fca5 	bl	8002eaa <lsm6dsl_write_reg>
 8003560:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003564:	4618      	mov	r0, r3
 8003566:	3728      	adds	r7, #40	; 0x28
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8003578:	f107 020c 	add.w	r2, r7, #12
 800357c:	2301      	movs	r3, #1
 800357e:	2107      	movs	r1, #7
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff fc7a 	bl	8002e7a <lsm6dsl_read_reg>
 8003586:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11f      	bne.n	80035ce <lsm6dsl_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.fth = (uint8_t)(0x00FFU & val);
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t)((0x0700U & val) >> 8);
 8003594:	887b      	ldrh	r3, [r7, #2]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	b29b      	uxth	r3, r3
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	7b3b      	ldrb	r3, [r7, #12]
 80035a2:	f362 0302 	bfi	r3, r2, #0, #3
 80035a6:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1,
 80035a8:	f107 0210 	add.w	r2, r7, #16
 80035ac:	2301      	movs	r3, #1
 80035ae:	2106      	movs	r1, #6
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff fc7a 	bl	8002eaa <lsm6dsl_write_reg>
 80035b6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl1, 1);

    if (ret == 0)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <lsm6dsl_fifo_watermark_set+0x62>
    {
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 80035be:	f107 020c 	add.w	r2, r7, #12
 80035c2:	2301      	movs	r3, #1
 80035c4:	2107      	movs	r1, #7
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff fc6f 	bl	8002eaa <lsm6dsl_write_reg>
 80035cc:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_ctrl2, 1);
    }
  }

  return ret;
 80035ce:	697b      	ldr	r3, [r7, #20]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 80035e4:	f107 0208 	add.w	r2, r7, #8
 80035e8:	2301      	movs	r3, #1
 80035ea:	2108      	movs	r1, #8
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fc44 	bl	8002e7a <lsm6dsl_read_reg>
 80035f2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10f      	bne.n	800361a <lsm6dsl_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	b2da      	uxtb	r2, r3
 8003602:	7a3b      	ldrb	r3, [r7, #8]
 8003604:	f362 0302 	bfi	r3, r2, #0, #3
 8003608:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 800360a:	f107 0208 	add.w	r2, r7, #8
 800360e:	2301      	movs	r3, #1
 8003610:	2108      	movs	r1, #8
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fc49 	bl	8002eaa <lsm6dsl_write_reg>
 8003618:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8003630:	f107 0208 	add.w	r2, r7, #8
 8003634:	2301      	movs	r3, #1
 8003636:	2108      	movs	r1, #8
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fc1e 	bl	8002e7a <lsm6dsl_read_reg>
 800363e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <lsm6dsl_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	b2da      	uxtb	r2, r3
 800364e:	7a3b      	ldrb	r3, [r7, #8]
 8003650:	f362 03c5 	bfi	r3, r2, #3, #3
 8003654:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8003656:	f107 0208 	add.w	r2, r7, #8
 800365a:	2301      	movs	r3, #1
 800365c:	2108      	movs	r1, #8
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fc23 	bl	8002eaa <lsm6dsl_write_reg>
 8003664:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800367c:	f107 0208 	add.w	r2, r7, #8
 8003680:	2301      	movs	r3, #1
 8003682:	210a      	movs	r1, #10
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fbf8 	bl	8002e7a <lsm6dsl_read_reg>
 800368a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	b2da      	uxtb	r2, r3
 800369a:	7a3b      	ldrb	r3, [r7, #8]
 800369c:	f362 0302 	bfi	r3, r2, #0, #3
 80036a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80036a2:	f107 0208 	add.w	r2, r7, #8
 80036a6:	2301      	movs	r3, #1
 80036a8:	210a      	movs	r1, #10
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fbfd 	bl	8002eaa <lsm6dsl_write_reg>
 80036b0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80036b2:	68fb      	ldr	r3, [r7, #12]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <lsm6dsl_fifo_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_odr_fifo_t val)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80036c8:	f107 0208 	add.w	r2, r7, #8
 80036cc:	2301      	movs	r3, #1
 80036ce:	210a      	movs	r1, #10
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fbd2 	bl	8002e7a <lsm6dsl_read_reg>
 80036d6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <lsm6dsl_fifo_data_rate_set+0x42>
  {
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	7a3b      	ldrb	r3, [r7, #8]
 80036e8:	f362 03c6 	bfi	r3, r2, #3, #4
 80036ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80036ee:	f107 0208 	add.w	r2, r7, #8
 80036f2:	2301      	movs	r3, #1
 80036f4:	210a      	movs	r1, #10
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff fbd7 	bl	8002eaa <lsm6dsl_write_reg>
 80036fc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80036fe:	68fb      	ldr	r3, [r7, #12]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003712:	2003      	movs	r0, #3
 8003714:	f000 f925 	bl	8003962 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003718:	200f      	movs	r0, #15
 800371a:	f7fe f9d3 	bl	8001ac4 <HAL_InitTick>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	71fb      	strb	r3, [r7, #7]
 8003728:	e001      	b.n	800372e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800372a:	f7fd ff4d 	bl	80015c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800372e:	79fb      	ldrb	r3, [r7, #7]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_IncTick+0x20>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_IncTick+0x24>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_IncTick+0x24>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000028 	.word	0x20000028
 800375c:	20000d0c 	.word	0x20000d0c

08003760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return uwTick;
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_GetTick+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000d0c 	.word	0x20000d0c

08003778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7ff ffee 	bl	8003760 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d005      	beq.n	800379e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_Delay+0x44>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800379e:	bf00      	nop
 80037a0:	f7ff ffde 	bl	8003760 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d8f7      	bhi.n	80037a0 <HAL_Delay+0x28>
  {
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000028 	.word	0x20000028

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4907      	ldr	r1, [pc, #28]	; (800385c <__NVIC_EnableIRQ+0x38>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e100 	.word	0xe000e100

08003860 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	2b00      	cmp	r3, #0
 8003870:	db12      	blt.n	8003898 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	f003 021f 	and.w	r2, r3, #31
 8003878:	490a      	ldr	r1, [pc, #40]	; (80038a4 <__NVIC_DisableIRQ+0x44>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	2001      	movs	r0, #1
 8003882:	fa00 f202 	lsl.w	r2, r0, r2
 8003886:	3320      	adds	r3, #32
 8003888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800388c:	f3bf 8f4f 	dsb	sy
}
 8003890:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003892:	f3bf 8f6f 	isb	sy
}
 8003896:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000e100 	.word	0xe000e100

080038a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	db0a      	blt.n	80038d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	490c      	ldr	r1, [pc, #48]	; (80038f4 <__NVIC_SetPriority+0x4c>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	440b      	add	r3, r1
 80038cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d0:	e00a      	b.n	80038e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4908      	ldr	r1, [pc, #32]	; (80038f8 <__NVIC_SetPriority+0x50>)
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	3b04      	subs	r3, #4
 80038e0:	0112      	lsls	r2, r2, #4
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	440b      	add	r3, r1
 80038e6:	761a      	strb	r2, [r3, #24]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000e100 	.word	0xe000e100
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f1c3 0307 	rsb	r3, r3, #7
 8003916:	2b04      	cmp	r3, #4
 8003918:	bf28      	it	cs
 800391a:	2304      	movcs	r3, #4
 800391c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3304      	adds	r3, #4
 8003922:	2b06      	cmp	r3, #6
 8003924:	d902      	bls.n	800392c <NVIC_EncodePriority+0x30>
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3b03      	subs	r3, #3
 800392a:	e000      	b.n	800392e <NVIC_EncodePriority+0x32>
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43da      	mvns	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	401a      	ands	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003944:	f04f 31ff 	mov.w	r1, #4294967295
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	43d9      	mvns	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003954:	4313      	orrs	r3, r2
         );
}
 8003956:	4618      	mov	r0, r3
 8003958:	3724      	adds	r7, #36	; 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ff28 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800398a:	f7ff ff3d 	bl	8003808 <__NVIC_GetPriorityGrouping>
 800398e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	6978      	ldr	r0, [r7, #20]
 8003996:	f7ff ffb1 	bl	80038fc <NVIC_EncodePriority>
 800399a:	4602      	mov	r2, r0
 800399c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff80 	bl	80038a8 <__NVIC_SetPriority>
}
 80039a8:	bf00      	nop
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff ff30 	bl	8003824 <__NVIC_EnableIRQ>
}
 80039c4:	bf00      	nop
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ff40 	bl	8003860 <__NVIC_DisableIRQ>
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e0ac      	b.n	8003b54 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f8b2 	bl	8003b68 <DFSDM_GetChannelFromInstance>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4a55      	ldr	r2, [pc, #340]	; (8003b5c <HAL_DFSDM_ChannelInit+0x174>)
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e09f      	b.n	8003b54 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fd fdff 	bl	8001618 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003a1a:	4b51      	ldr	r3, [pc, #324]	; (8003b60 <HAL_DFSDM_ChannelInit+0x178>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	4a4f      	ldr	r2, [pc, #316]	; (8003b60 <HAL_DFSDM_ChannelInit+0x178>)
 8003a22:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003a24:	4b4e      	ldr	r3, [pc, #312]	; (8003b60 <HAL_DFSDM_ChannelInit+0x178>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d125      	bne.n	8003a78 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003a2c:	4b4d      	ldr	r3, [pc, #308]	; (8003b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a4c      	ldr	r2, [pc, #304]	; (8003b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a36:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003a38:	4b4a      	ldr	r3, [pc, #296]	; (8003b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4948      	ldr	r1, [pc, #288]	; (8003b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003a46:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a46      	ldr	r2, [pc, #280]	; (8003b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a4c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003a50:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	791b      	ldrb	r3, [r3, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d108      	bne.n	8003a6c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003a5a:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	493f      	ldr	r1, [pc, #252]	; (8003b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003a6c:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a3c      	ldr	r2, [pc, #240]	; (8003b64 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a76:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003a86:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6819      	ldr	r1, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a96:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a9c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 020f 	bic.w	r2, r2, #15
 8003ab4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6819      	ldr	r1, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003adc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6899      	ldr	r1, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	3b01      	subs	r3, #1
 8003aee:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f002 0207 	and.w	r2, r2, #7
 8003b08:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b34:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 f810 	bl	8003b68 <DFSDM_GetChannelFromInstance>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4904      	ldr	r1, [pc, #16]	; (8003b5c <HAL_DFSDM_ChannelInit+0x174>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000d14 	.word	0x20000d14
 8003b60:	20000d10 	.word	0x20000d10
 8003b64:	40016000 	.word	0x40016000

08003b68 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a1c      	ldr	r2, [pc, #112]	; (8003be4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d102      	bne.n	8003b7e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e02b      	b.n	8003bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <DFSDM_GetChannelFromInstance+0x80>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d102      	bne.n	8003b8c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	e024      	b.n	8003bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a17      	ldr	r2, [pc, #92]	; (8003bec <DFSDM_GetChannelFromInstance+0x84>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d102      	bne.n	8003b9a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003b94:	2302      	movs	r3, #2
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e01d      	b.n	8003bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <DFSDM_GetChannelFromInstance+0x88>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d102      	bne.n	8003ba8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	e016      	b.n	8003bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <DFSDM_GetChannelFromInstance+0x8c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d102      	bne.n	8003bb6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003bb0:	2305      	movs	r3, #5
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	e00f      	b.n	8003bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <DFSDM_GetChannelFromInstance+0x90>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d102      	bne.n	8003bc4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003bbe:	2306      	movs	r3, #6
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e008      	b.n	8003bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0d      	ldr	r2, [pc, #52]	; (8003bfc <DFSDM_GetChannelFromInstance+0x94>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d102      	bne.n	8003bd2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003bcc:	2307      	movs	r3, #7
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e001      	b.n	8003bd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40016000 	.word	0x40016000
 8003be8:	40016020 	.word	0x40016020
 8003bec:	40016040 	.word	0x40016040
 8003bf0:	40016080 	.word	0x40016080
 8003bf4:	400160a0 	.word	0x400160a0
 8003bf8:	400160c0 	.word	0x400160c0
 8003bfc:	400160e0 	.word	0x400160e0

08003c00 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e098      	b.n	8003d44 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	4b4d      	ldr	r3, [pc, #308]	; (8003d50 <HAL_DMA_Init+0x150>)
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d80f      	bhi.n	8003c3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <HAL_DMA_Init+0x154>)
 8003c26:	4413      	add	r3, r2
 8003c28:	4a4b      	ldr	r2, [pc, #300]	; (8003d58 <HAL_DMA_Init+0x158>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	009a      	lsls	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a48      	ldr	r2, [pc, #288]	; (8003d5c <HAL_DMA_Init+0x15c>)
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c3c:	e00e      	b.n	8003c5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	4b46      	ldr	r3, [pc, #280]	; (8003d60 <HAL_DMA_Init+0x160>)
 8003c46:	4413      	add	r3, r2
 8003c48:	4a43      	ldr	r2, [pc, #268]	; (8003d58 <HAL_DMA_Init+0x158>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	009a      	lsls	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a42      	ldr	r2, [pc, #264]	; (8003d64 <HAL_DMA_Init+0x164>)
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb6:	d039      	beq.n	8003d2c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	4a27      	ldr	r2, [pc, #156]	; (8003d5c <HAL_DMA_Init+0x15c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d11a      	bne.n	8003cf8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cc2:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <HAL_DMA_Init+0x168>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f003 031c 	and.w	r3, r3, #28
 8003cce:	210f      	movs	r1, #15
 8003cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	4924      	ldr	r1, [pc, #144]	; (8003d68 <HAL_DMA_Init+0x168>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003cdc:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <HAL_DMA_Init+0x168>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	f003 031c 	and.w	r3, r3, #28
 8003cec:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf0:	491d      	ldr	r1, [pc, #116]	; (8003d68 <HAL_DMA_Init+0x168>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
 8003cf6:	e019      	b.n	8003d2c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cf8:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <HAL_DMA_Init+0x16c>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	f003 031c 	and.w	r3, r3, #28
 8003d04:	210f      	movs	r1, #15
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	4917      	ldr	r1, [pc, #92]	; (8003d6c <HAL_DMA_Init+0x16c>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d12:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <HAL_DMA_Init+0x16c>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6859      	ldr	r1, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	f003 031c 	and.w	r3, r3, #28
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	4911      	ldr	r1, [pc, #68]	; (8003d6c <HAL_DMA_Init+0x16c>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	40020407 	.word	0x40020407
 8003d54:	bffdfff8 	.word	0xbffdfff8
 8003d58:	cccccccd 	.word	0xcccccccd
 8003d5c:	40020000 	.word	0x40020000
 8003d60:	bffdfbf8 	.word	0xbffdfbf8
 8003d64:	40020400 	.word	0x40020400
 8003d68:	400200a8 	.word	0x400200a8
 8003d6c:	400204a8 	.word	0x400204a8

08003d70 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e072      	b.n	8003e68 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <HAL_DMA_DeInit+0x104>)
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d80f      	bhi.n	8003dbe <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_DMA_DeInit+0x108>)
 8003da6:	4413      	add	r3, r2
 8003da8:	4a34      	ldr	r2, [pc, #208]	; (8003e7c <HAL_DMA_DeInit+0x10c>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	009a      	lsls	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a31      	ldr	r2, [pc, #196]	; (8003e80 <HAL_DMA_DeInit+0x110>)
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
 8003dbc:	e00e      	b.n	8003ddc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <HAL_DMA_DeInit+0x114>)
 8003dc6:	4413      	add	r3, r2
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	; (8003e7c <HAL_DMA_DeInit+0x10c>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	009a      	lsls	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <HAL_DMA_DeInit+0x118>)
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f003 021c 	and.w	r2, r3, #28
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f202 	lsl.w	r2, r1, r2
 8003df6:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <HAL_DMA_DeInit+0x110>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10d      	bne.n	8003e1e <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e02:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <HAL_DMA_DeInit+0x11c>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f003 031c 	and.w	r3, r3, #28
 8003e0e:	210f      	movs	r1, #15
 8003e10:	fa01 f303 	lsl.w	r3, r1, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	491d      	ldr	r1, [pc, #116]	; (8003e8c <HAL_DMA_DeInit+0x11c>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]
 8003e1c:	e00c      	b.n	8003e38 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e1e:	4b1c      	ldr	r3, [pc, #112]	; (8003e90 <HAL_DMA_DeInit+0x120>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	f003 031c 	and.w	r3, r3, #28
 8003e2a:	210f      	movs	r1, #15
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	4917      	ldr	r1, [pc, #92]	; (8003e90 <HAL_DMA_DeInit+0x120>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40020407 	.word	0x40020407
 8003e78:	bffdfff8 	.word	0xbffdfff8
 8003e7c:	cccccccd 	.word	0xcccccccd
 8003e80:	40020000 	.word	0x40020000
 8003e84:	bffdfbf8 	.word	0xbffdfbf8
 8003e88:	40020400 	.word	0x40020400
 8003e8c:	400200a8 	.word	0x400200a8
 8003e90:	400204a8 	.word	0x400204a8

08003e94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_DMA_Start_IT+0x20>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e04b      	b.n	8003f4c <HAL_DMA_Start_IT+0xb8>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d13a      	bne.n	8003f3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f92f 	bl	8004150 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 020e 	orr.w	r2, r2, #14
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e00f      	b.n	8003f2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0204 	bic.w	r2, r2, #4
 8003f1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 020a 	orr.w	r2, r2, #10
 8003f2a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e005      	b.n	8003f4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
 8003f48:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d005      	beq.n	8003f78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2204      	movs	r2, #4
 8003f70:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
 8003f76:	e029      	b.n	8003fcc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 020e 	bic.w	r2, r2, #14
 8003f86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9c:	f003 021c 	and.w	r2, r3, #28
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8003faa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	4798      	blx	r3
    }
  }
  return status;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f003 031c 	and.w	r3, r3, #28
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d026      	beq.n	8004050 <HAL_DMA_IRQHandler+0x7a>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d021      	beq.n	8004050 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d107      	bne.n	800402a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0204 	bic.w	r2, r2, #4
 8004028:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f003 021c 	and.w	r2, r3, #28
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2104      	movs	r1, #4
 8004038:	fa01 f202 	lsl.w	r2, r1, r2
 800403c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	2b00      	cmp	r3, #0
 8004044:	d071      	beq.n	800412a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800404e:	e06c      	b.n	800412a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004054:	f003 031c 	and.w	r3, r3, #28
 8004058:	2202      	movs	r2, #2
 800405a:	409a      	lsls	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d02e      	beq.n	80040c2 <HAL_DMA_IRQHandler+0xec>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d029      	beq.n	80040c2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10b      	bne.n	8004094 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 020a 	bic.w	r2, r2, #10
 800408a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004098:	f003 021c 	and.w	r2, r3, #28
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	2102      	movs	r1, #2
 80040a2:	fa01 f202 	lsl.w	r2, r1, r2
 80040a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d038      	beq.n	800412a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80040c0:	e033      	b.n	800412a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	f003 031c 	and.w	r3, r3, #28
 80040ca:	2208      	movs	r2, #8
 80040cc:	409a      	lsls	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d02a      	beq.n	800412c <HAL_DMA_IRQHandler+0x156>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d025      	beq.n	800412c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 020e 	bic.w	r2, r2, #14
 80040ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f4:	f003 021c 	and.w	r2, r3, #28
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004102:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800412a:	bf00      	nop
 800412c:	bf00      	nop
}
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004142:	b2db      	uxtb	r3, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f003 021c 	and.w	r2, r3, #28
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2101      	movs	r1, #1
 800416c:	fa01 f202 	lsl.w	r2, r1, r2
 8004170:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b10      	cmp	r3, #16
 8004180:	d108      	bne.n	8004194 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004192:	e007      	b.n	80041a4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041be:	e17f      	b.n	80044c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	2101      	movs	r1, #1
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8171 	beq.w	80044ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d005      	beq.n	80041f0 <HAL_GPIO_Init+0x40>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d130      	bne.n	8004252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	2203      	movs	r2, #3
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004226:	2201      	movs	r2, #1
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4013      	ands	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	f003 0201 	and.w	r2, r3, #1
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b03      	cmp	r3, #3
 800425c:	d118      	bne.n	8004290 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004264:	2201      	movs	r2, #1
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f003 0201 	and.w	r2, r3, #1
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	2b03      	cmp	r3, #3
 800429a:	d017      	beq.n	80042cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	2203      	movs	r2, #3
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d123      	bne.n	8004320 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	08da      	lsrs	r2, r3, #3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3208      	adds	r2, #8
 80042e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	220f      	movs	r2, #15
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4013      	ands	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	08da      	lsrs	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3208      	adds	r2, #8
 800431a:	6939      	ldr	r1, [r7, #16]
 800431c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	2203      	movs	r2, #3
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0203 	and.w	r2, r3, #3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80ac 	beq.w	80044ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004362:	4b5f      	ldr	r3, [pc, #380]	; (80044e0 <HAL_GPIO_Init+0x330>)
 8004364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004366:	4a5e      	ldr	r2, [pc, #376]	; (80044e0 <HAL_GPIO_Init+0x330>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6613      	str	r3, [r2, #96]	; 0x60
 800436e:	4b5c      	ldr	r3, [pc, #368]	; (80044e0 <HAL_GPIO_Init+0x330>)
 8004370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800437a:	4a5a      	ldr	r2, [pc, #360]	; (80044e4 <HAL_GPIO_Init+0x334>)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	3302      	adds	r3, #2
 8004382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004386:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	220f      	movs	r2, #15
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043a4:	d025      	beq.n	80043f2 <HAL_GPIO_Init+0x242>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a4f      	ldr	r2, [pc, #316]	; (80044e8 <HAL_GPIO_Init+0x338>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01f      	beq.n	80043ee <HAL_GPIO_Init+0x23e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a4e      	ldr	r2, [pc, #312]	; (80044ec <HAL_GPIO_Init+0x33c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d019      	beq.n	80043ea <HAL_GPIO_Init+0x23a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4d      	ldr	r2, [pc, #308]	; (80044f0 <HAL_GPIO_Init+0x340>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_GPIO_Init+0x236>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4c      	ldr	r2, [pc, #304]	; (80044f4 <HAL_GPIO_Init+0x344>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00d      	beq.n	80043e2 <HAL_GPIO_Init+0x232>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4b      	ldr	r2, [pc, #300]	; (80044f8 <HAL_GPIO_Init+0x348>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <HAL_GPIO_Init+0x22e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a4a      	ldr	r2, [pc, #296]	; (80044fc <HAL_GPIO_Init+0x34c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_GPIO_Init+0x22a>
 80043d6:	2306      	movs	r3, #6
 80043d8:	e00c      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043da:	2307      	movs	r3, #7
 80043dc:	e00a      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043de:	2305      	movs	r3, #5
 80043e0:	e008      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043e2:	2304      	movs	r3, #4
 80043e4:	e006      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043e6:	2303      	movs	r3, #3
 80043e8:	e004      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e002      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043f2:	2300      	movs	r3, #0
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	f002 0203 	and.w	r2, r2, #3
 80043fa:	0092      	lsls	r2, r2, #2
 80043fc:	4093      	lsls	r3, r2
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004404:	4937      	ldr	r1, [pc, #220]	; (80044e4 <HAL_GPIO_Init+0x334>)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	3302      	adds	r3, #2
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_GPIO_Init+0x350>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	43db      	mvns	r3, r3
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4013      	ands	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004436:	4a32      	ldr	r2, [pc, #200]	; (8004500 <HAL_GPIO_Init+0x350>)
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800443c:	4b30      	ldr	r3, [pc, #192]	; (8004500 <HAL_GPIO_Init+0x350>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	43db      	mvns	r3, r3
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4013      	ands	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004460:	4a27      	ldr	r2, [pc, #156]	; (8004500 <HAL_GPIO_Init+0x350>)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004466:	4b26      	ldr	r3, [pc, #152]	; (8004500 <HAL_GPIO_Init+0x350>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	43db      	mvns	r3, r3
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4013      	ands	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800448a:	4a1d      	ldr	r2, [pc, #116]	; (8004500 <HAL_GPIO_Init+0x350>)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_GPIO_Init+0x350>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	43db      	mvns	r3, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4013      	ands	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044b4:	4a12      	ldr	r2, [pc, #72]	; (8004500 <HAL_GPIO_Init+0x350>)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	3301      	adds	r3, #1
 80044be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f47f ae78 	bne.w	80041c0 <HAL_GPIO_Init+0x10>
  }
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40010000 	.word	0x40010000
 80044e8:	48000400 	.word	0x48000400
 80044ec:	48000800 	.word	0x48000800
 80044f0:	48000c00 	.word	0x48000c00
 80044f4:	48001000 	.word	0x48001000
 80044f8:	48001400 	.word	0x48001400
 80044fc:	48001800 	.word	0x48001800
 8004500:	40010400 	.word	0x40010400

08004504 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004512:	e0cd      	b.n	80046b0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004514:	2201      	movs	r2, #1
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80c0 	beq.w	80046aa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800452a:	4a68      	ldr	r2, [pc, #416]	; (80046cc <HAL_GPIO_DeInit+0x1c8>)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	089b      	lsrs	r3, r3, #2
 8004530:	3302      	adds	r3, #2
 8004532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004536:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	220f      	movs	r2, #15
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4013      	ands	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004552:	d025      	beq.n	80045a0 <HAL_GPIO_DeInit+0x9c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a5e      	ldr	r2, [pc, #376]	; (80046d0 <HAL_GPIO_DeInit+0x1cc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d01f      	beq.n	800459c <HAL_GPIO_DeInit+0x98>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a5d      	ldr	r2, [pc, #372]	; (80046d4 <HAL_GPIO_DeInit+0x1d0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d019      	beq.n	8004598 <HAL_GPIO_DeInit+0x94>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a5c      	ldr	r2, [pc, #368]	; (80046d8 <HAL_GPIO_DeInit+0x1d4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <HAL_GPIO_DeInit+0x90>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a5b      	ldr	r2, [pc, #364]	; (80046dc <HAL_GPIO_DeInit+0x1d8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00d      	beq.n	8004590 <HAL_GPIO_DeInit+0x8c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a5a      	ldr	r2, [pc, #360]	; (80046e0 <HAL_GPIO_DeInit+0x1dc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d007      	beq.n	800458c <HAL_GPIO_DeInit+0x88>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a59      	ldr	r2, [pc, #356]	; (80046e4 <HAL_GPIO_DeInit+0x1e0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_GPIO_DeInit+0x84>
 8004584:	2306      	movs	r3, #6
 8004586:	e00c      	b.n	80045a2 <HAL_GPIO_DeInit+0x9e>
 8004588:	2307      	movs	r3, #7
 800458a:	e00a      	b.n	80045a2 <HAL_GPIO_DeInit+0x9e>
 800458c:	2305      	movs	r3, #5
 800458e:	e008      	b.n	80045a2 <HAL_GPIO_DeInit+0x9e>
 8004590:	2304      	movs	r3, #4
 8004592:	e006      	b.n	80045a2 <HAL_GPIO_DeInit+0x9e>
 8004594:	2303      	movs	r3, #3
 8004596:	e004      	b.n	80045a2 <HAL_GPIO_DeInit+0x9e>
 8004598:	2302      	movs	r3, #2
 800459a:	e002      	b.n	80045a2 <HAL_GPIO_DeInit+0x9e>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <HAL_GPIO_DeInit+0x9e>
 80045a0:	2300      	movs	r3, #0
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	f002 0203 	and.w	r2, r2, #3
 80045a8:	0092      	lsls	r2, r2, #2
 80045aa:	4093      	lsls	r3, r2
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d132      	bne.n	8004618 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80045b2:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <HAL_GPIO_DeInit+0x1e4>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	494b      	ldr	r1, [pc, #300]	; (80046e8 <HAL_GPIO_DeInit+0x1e4>)
 80045bc:	4013      	ands	r3, r2
 80045be:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80045c0:	4b49      	ldr	r3, [pc, #292]	; (80046e8 <HAL_GPIO_DeInit+0x1e4>)
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	4947      	ldr	r1, [pc, #284]	; (80046e8 <HAL_GPIO_DeInit+0x1e4>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80045ce:	4b46      	ldr	r3, [pc, #280]	; (80046e8 <HAL_GPIO_DeInit+0x1e4>)
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	4944      	ldr	r1, [pc, #272]	; (80046e8 <HAL_GPIO_DeInit+0x1e4>)
 80045d8:	4013      	ands	r3, r2
 80045da:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80045dc:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <HAL_GPIO_DeInit+0x1e4>)
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	4940      	ldr	r1, [pc, #256]	; (80046e8 <HAL_GPIO_DeInit+0x1e4>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	220f      	movs	r2, #15
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80045fa:	4a34      	ldr	r2, [pc, #208]	; (80046cc <HAL_GPIO_DeInit+0x1c8>)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	3302      	adds	r3, #2
 8004602:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	43da      	mvns	r2, r3
 800460a:	4830      	ldr	r0, [pc, #192]	; (80046cc <HAL_GPIO_DeInit+0x1c8>)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	089b      	lsrs	r3, r3, #2
 8004610:	400a      	ands	r2, r1
 8004612:	3302      	adds	r3, #2
 8004614:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	2103      	movs	r1, #3
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	08da      	lsrs	r2, r3, #3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3208      	adds	r2, #8
 8004634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	220f      	movs	r2, #15
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	08d2      	lsrs	r2, r2, #3
 800464c:	4019      	ands	r1, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3208      	adds	r2, #8
 8004652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	2103      	movs	r1, #3
 8004660:	fa01 f303 	lsl.w	r3, r1, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	401a      	ands	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	2101      	movs	r1, #1
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	fa01 f303 	lsl.w	r3, r1, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	401a      	ands	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	2103      	movs	r1, #3
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	401a      	ands	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469a:	2101      	movs	r1, #1
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	401a      	ands	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	3301      	adds	r3, #1
 80046ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f47f af2b 	bne.w	8004514 <HAL_GPIO_DeInit+0x10>
  }
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40010000 	.word	0x40010000
 80046d0:	48000400 	.word	0x48000400
 80046d4:	48000800 	.word	0x48000800
 80046d8:	48000c00 	.word	0x48000c00
 80046dc:	48001000 	.word	0x48001000
 80046e0:	48001400 	.word	0x48001400
 80046e4:	48001800 	.word	0x48001800
 80046e8:	40010400 	.word	0x40010400

080046ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	887b      	ldrh	r3, [r7, #2]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	e001      	b.n	800470e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800470e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]
 8004728:	4613      	mov	r3, r2
 800472a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800472c:	787b      	ldrb	r3, [r7, #1]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004738:	e002      	b.n	8004740 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800473a:	887a      	ldrh	r2, [r7, #2]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	4013      	ands	r3, r2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004762:	4a05      	ldr	r2, [pc, #20]	; (8004778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	4618      	mov	r0, r3
 800476c:	f7fc fc92 	bl	8001094 <HAL_GPIO_EXTI_Callback>
  }

}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40010400 	.word	0x40010400

0800477c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e081      	b.n	8004892 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f8a8 	bl	80048f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2224      	movs	r2, #36	; 0x24
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d107      	bne.n	80047f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f2:	609a      	str	r2, [r3, #8]
 80047f4:	e006      	b.n	8004804 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004802:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d104      	bne.n	8004816 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004814:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004828:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004838:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69d9      	ldr	r1, [r3, #28]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1a      	ldr	r2, [r3, #32]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e021      	b.n	80048f0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2224      	movs	r2, #36	; 0x24
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f821 	bl	800490c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	4608      	mov	r0, r1
 800492a:	4611      	mov	r1, r2
 800492c:	461a      	mov	r2, r3
 800492e:	4603      	mov	r3, r0
 8004930:	817b      	strh	r3, [r7, #10]
 8004932:	460b      	mov	r3, r1
 8004934:	813b      	strh	r3, [r7, #8]
 8004936:	4613      	mov	r3, r2
 8004938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b20      	cmp	r3, #32
 8004944:	f040 80f9 	bne.w	8004b3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_I2C_Mem_Write+0x34>
 800494e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800495a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0ed      	b.n	8004b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_I2C_Mem_Write+0x4e>
 800496a:	2302      	movs	r3, #2
 800496c:	e0e6      	b.n	8004b3c <HAL_I2C_Mem_Write+0x21c>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004976:	f7fe fef3 	bl	8003760 <HAL_GetTick>
 800497a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2319      	movs	r3, #25
 8004982:	2201      	movs	r2, #1
 8004984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f001 fd58 	bl	800643e <I2C_WaitOnFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0d1      	b.n	8004b3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2221      	movs	r2, #33	; 0x21
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2240      	movs	r2, #64	; 0x40
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049c0:	88f8      	ldrh	r0, [r7, #6]
 80049c2:	893a      	ldrh	r2, [r7, #8]
 80049c4:	8979      	ldrh	r1, [r7, #10]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	4603      	mov	r3, r0
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 ffa7 	bl	8005924 <I2C_RequestMemoryWrite>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0a9      	b.n	8004b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2bff      	cmp	r3, #255	; 0xff
 80049f0:	d90e      	bls.n	8004a10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	8979      	ldrh	r1, [r7, #10]
 8004a00:	2300      	movs	r3, #0
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f001 fec1 	bl	8006790 <I2C_TransferConfig>
 8004a0e:	e00f      	b.n	8004a30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	8979      	ldrh	r1, [r7, #10]
 8004a22:	2300      	movs	r3, #0
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f001 feb0 	bl	8006790 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f001 fd42 	bl	80064be <I2C_WaitOnTXISFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e07b      	b.n	8004b3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d034      	beq.n	8004ae8 <HAL_I2C_Mem_Write+0x1c8>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d130      	bne.n	8004ae8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2180      	movs	r1, #128	; 0x80
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f001 fcd4 	bl	800643e <I2C_WaitOnFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e04d      	b.n	8004b3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2bff      	cmp	r3, #255	; 0xff
 8004aa8:	d90e      	bls.n	8004ac8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	22ff      	movs	r2, #255	; 0xff
 8004aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	8979      	ldrh	r1, [r7, #10]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f001 fe65 	bl	8006790 <I2C_TransferConfig>
 8004ac6:	e00f      	b.n	8004ae8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	8979      	ldrh	r1, [r7, #10]
 8004ada:	2300      	movs	r3, #0
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f001 fe54 	bl	8006790 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d19e      	bne.n	8004a30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f001 fd21 	bl	800653e <I2C_WaitOnSTOPFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e01a      	b.n	8004b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6859      	ldr	r1, [r3, #4]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_I2C_Mem_Write+0x224>)
 8004b1a:	400b      	ands	r3, r1
 8004b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	fe00e800 	.word	0xfe00e800

08004b48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	4608      	mov	r0, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	461a      	mov	r2, r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	817b      	strh	r3, [r7, #10]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	813b      	strh	r3, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	f040 80fd 	bne.w	8004d6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_I2C_Mem_Read+0x34>
 8004b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0f1      	b.n	8004d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_I2C_Mem_Read+0x4e>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e0ea      	b.n	8004d6c <HAL_I2C_Mem_Read+0x224>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b9e:	f7fe fddf 	bl	8003760 <HAL_GetTick>
 8004ba2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2319      	movs	r3, #25
 8004baa:	2201      	movs	r2, #1
 8004bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f001 fc44 	bl	800643e <I2C_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0d5      	b.n	8004d6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2222      	movs	r2, #34	; 0x22
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2240      	movs	r2, #64	; 0x40
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a3a      	ldr	r2, [r7, #32]
 8004bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004be8:	88f8      	ldrh	r0, [r7, #6]
 8004bea:	893a      	ldrh	r2, [r7, #8]
 8004bec:	8979      	ldrh	r1, [r7, #10]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 fee7 	bl	80059cc <I2C_RequestMemoryRead>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0ad      	b.n	8004d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2bff      	cmp	r3, #255	; 0xff
 8004c18:	d90e      	bls.n	8004c38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	22ff      	movs	r2, #255	; 0xff
 8004c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	8979      	ldrh	r1, [r7, #10]
 8004c28:	4b52      	ldr	r3, [pc, #328]	; (8004d74 <HAL_I2C_Mem_Read+0x22c>)
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f001 fdad 	bl	8006790 <I2C_TransferConfig>
 8004c36:	e00f      	b.n	8004c58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	8979      	ldrh	r1, [r7, #10]
 8004c4a:	4b4a      	ldr	r3, [pc, #296]	; (8004d74 <HAL_I2C_Mem_Read+0x22c>)
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f001 fd9c 	bl	8006790 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2104      	movs	r1, #4
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f001 fbeb 	bl	800643e <I2C_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e07c      	b.n	8004d6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d034      	beq.n	8004d18 <HAL_I2C_Mem_Read+0x1d0>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d130      	bne.n	8004d18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2180      	movs	r1, #128	; 0x80
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f001 fbbc 	bl	800643e <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e04d      	b.n	8004d6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2bff      	cmp	r3, #255	; 0xff
 8004cd8:	d90e      	bls.n	8004cf8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	22ff      	movs	r2, #255	; 0xff
 8004cde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	8979      	ldrh	r1, [r7, #10]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f001 fd4d 	bl	8006790 <I2C_TransferConfig>
 8004cf6:	e00f      	b.n	8004d18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	8979      	ldrh	r1, [r7, #10]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f001 fd3c 	bl	8006790 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d19a      	bne.n	8004c58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f001 fc09 	bl	800653e <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e01a      	b.n	8004d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_I2C_Mem_Read+0x230>)
 8004d4a:	400b      	ands	r3, r1
 8004d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e000      	b.n	8004d6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
  }
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	80002400 	.word	0x80002400
 8004d78:	fe00e800 	.word	0xfe00e800

08004d7c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	4608      	mov	r0, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	817b      	strh	r3, [r7, #10]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	813b      	strh	r3, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	f040 80c2 	bne.w	8004f28 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_I2C_Mem_Read_DMA+0x34>
 8004daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004db6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0b6      	b.n	8004f2a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dca:	d101      	bne.n	8004dd0 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e0ac      	b.n	8004f2a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_I2C_Mem_Read_DMA+0x62>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e0a5      	b.n	8004f2a <HAL_I2C_Mem_Read_DMA+0x1ae>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2222      	movs	r2, #34	; 0x22
 8004dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2240      	movs	r2, #64	; 0x40
 8004df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a3a      	ldr	r2, [r7, #32]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4a4a      	ldr	r2, [pc, #296]	; (8004f34 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8004e0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a49      	ldr	r2, [pc, #292]	; (8004f38 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8004e12:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8004e14:	897a      	ldrh	r2, [r7, #10]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2bff      	cmp	r3, #255	; 0xff
 8004e22:	d903      	bls.n	8004e2c <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	22ff      	movs	r2, #255	; 0xff
 8004e28:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e2a:	e004      	b.n	8004e36 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d109      	bne.n	8004e50 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3c:	893b      	ldrh	r3, [r7, #8]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4c:	651a      	str	r2, [r3, #80]	; 0x50
 8004e4e:	e00b      	b.n	8004e68 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e50:	893b      	ldrh	r3, [r7, #8]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8004e5e:	893b      	ldrh	r3, [r7, #8]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d020      	beq.n	8004eb2 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e74:	4a31      	ldr	r2, [pc, #196]	; (8004f3c <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	4a30      	ldr	r2, [pc, #192]	; (8004f40 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8004e7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3324      	adds	r3, #36	; 0x24
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004ea2:	f7fe fff7 	bl	8003e94 <HAL_DMA_Start_IT>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d127      	bne.n	8004f00 <HAL_I2C_Mem_Read_DMA+0x184>
 8004eb0:	e013      	b.n	8004eda <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e027      	b.n	8004f2a <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	8979      	ldrh	r1, [r7, #10]
 8004ee0:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f001 fc52 	bl	8006790 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f001 fc7c 	bl	80067f4 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e014      	b.n	8004f2a <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f14:	f043 0210 	orr.w	r2, r3, #16
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8004f28:	2302      	movs	r3, #2
  }
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	ffff0000 	.word	0xffff0000
 8004f38:	0800551d 	.word	0x0800551d
 8004f3c:	0800633f 	.word	0x0800633f
 8004f40:	080063d5 	.word	0x080063d5
 8004f44:	80002000 	.word	0x80002000

08004f48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	68f9      	ldr	r1, [r7, #12]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
  }
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	0a1b      	lsrs	r3, r3, #8
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d010      	beq.n	8004fc2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	09db      	lsrs	r3, r3, #7
 8004fa4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb0:	f043 0201 	orr.w	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fc0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	0a9b      	lsrs	r3, r3, #10
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d010      	beq.n	8004ff0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	09db      	lsrs	r3, r3, #7
 8004fd2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	f043 0208 	orr.w	r2, r3, #8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	0a5b      	lsrs	r3, r3, #9
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d010      	beq.n	800501e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	09db      	lsrs	r3, r3, #7
 8005000:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500c:	f043 0202 	orr.w	r2, r3, #2
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800501c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005022:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 030b 	and.w	r3, r3, #11
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 f869 	bl	8006108 <I2C_ITError>
  }
}
 8005036:	bf00      	nop
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	460b      	mov	r3, r1
 8005098:	70fb      	strb	r3, [r7, #3]
 800509a:	4613      	mov	r3, r2
 800509c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005108:	b2db      	uxtb	r3, r3
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <I2C_Slave_ISR_IT+0x24>
 800514e:	2302      	movs	r3, #2
 8005150:	e0ec      	b.n	800532c <I2C_Slave_ISR_IT+0x1fe>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005172:	6939      	ldr	r1, [r7, #16]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fe67 	bl	8005e48 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d04d      	beq.n	8005222 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800518e:	2b00      	cmp	r3, #0
 8005190:	d047      	beq.n	8005222 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d128      	bne.n	80051ee <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b28      	cmp	r3, #40	; 0x28
 80051a6:	d108      	bne.n	80051ba <I2C_Slave_ISR_IT+0x8c>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051ae:	d104      	bne.n	80051ba <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80051b0:	6939      	ldr	r1, [r7, #16]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 ff52 	bl	800605c <I2C_ITListenCplt>
 80051b8:	e032      	b.n	8005220 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b29      	cmp	r3, #41	; 0x29
 80051c4:	d10e      	bne.n	80051e4 <I2C_Slave_ISR_IT+0xb6>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051cc:	d00a      	beq.n	80051e4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2210      	movs	r2, #16
 80051d4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f001 f88d 	bl	80062f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fd0a 	bl	8005bf6 <I2C_ITSlaveSeqCplt>
 80051e2:	e01d      	b.n	8005220 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2210      	movs	r2, #16
 80051ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80051ec:	e096      	b.n	800531c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2210      	movs	r2, #16
 80051f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fa:	f043 0204 	orr.w	r2, r3, #4
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <I2C_Slave_ISR_IT+0xe4>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800520e:	f040 8085 	bne.w	800531c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	4619      	mov	r1, r3
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 ff75 	bl	8006108 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800521e:	e07d      	b.n	800531c <I2C_Slave_ISR_IT+0x1ee>
 8005220:	e07c      	b.n	800531c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	089b      	lsrs	r3, r3, #2
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d030      	beq.n	8005290 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	089b      	lsrs	r3, r3, #2
 8005232:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005236:	2b00      	cmp	r3, #0
 8005238:	d02a      	beq.n	8005290 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d018      	beq.n	8005276 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d14f      	bne.n	8005320 <I2C_Slave_ISR_IT+0x1f2>
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005286:	d04b      	beq.n	8005320 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fcb4 	bl	8005bf6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800528e:	e047      	b.n	8005320 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	08db      	lsrs	r3, r3, #3
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	08db      	lsrs	r3, r3, #3
 80052a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80052a8:	6939      	ldr	r1, [r7, #16]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fbe2 	bl	8005a74 <I2C_ITAddrCplt>
 80052b0:	e037      	b.n	8005322 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d031      	beq.n	8005322 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d02b      	beq.n	8005322 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d018      	beq.n	8005306 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	781a      	ldrb	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	851a      	strh	r2, [r3, #40]	; 0x28
 8005304:	e00d      	b.n	8005322 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800530c:	d002      	beq.n	8005314 <I2C_Slave_ISR_IT+0x1e6>
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 fc6e 	bl	8005bf6 <I2C_ITSlaveSeqCplt>
 800531a:	e002      	b.n	8005322 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800531c:	bf00      	nop
 800531e:	e000      	b.n	8005322 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005320:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <I2C_Master_ISR_DMA+0x1a>
 800534a:	2302      	movs	r3, #2
 800534c:	e0e1      	b.n	8005512 <I2C_Master_ISR_DMA+0x1de>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d017      	beq.n	8005392 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800536a:	2b00      	cmp	r3, #0
 800536c:	d011      	beq.n	8005392 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2210      	movs	r2, #16
 8005374:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	f043 0204 	orr.w	r2, r3, #4
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005382:	2120      	movs	r1, #32
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f001 fa35 	bl	80067f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 ffb3 	bl	80062f6 <I2C_Flush_TXDR>
 8005390:	e0ba      	b.n	8005508 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	09db      	lsrs	r3, r3, #7
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d072      	beq.n	8005484 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	099b      	lsrs	r3, r3, #6
 80053a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d06c      	beq.n	8005484 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d04e      	beq.n	8005462 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053d0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	2bff      	cmp	r3, #255	; 0xff
 80053da:	d906      	bls.n	80053ea <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	22ff      	movs	r2, #255	; 0xff
 80053e0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80053e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e010      	b.n	800540c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053fc:	d003      	beq.n	8005406 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e002      	b.n	800540c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800540a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	b2da      	uxtb	r2, r3
 8005412:	8a79      	ldrh	r1, [r7, #18]
 8005414:	2300      	movs	r3, #0
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f001 f9b8 	bl	8006790 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b22      	cmp	r3, #34	; 0x22
 800543c:	d108      	bne.n	8005450 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800544c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800544e:	e05b      	b.n	8005508 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800545e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005460:	e052      	b.n	8005508 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005470:	d003      	beq.n	800547a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fb82 	bl	8005b7c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005478:	e046      	b.n	8005508 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800547a:	2140      	movs	r1, #64	; 0x40
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fe43 	bl	8006108 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005482:	e041      	b.n	8005508 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	099b      	lsrs	r3, r3, #6
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d029      	beq.n	80054e4 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	099b      	lsrs	r3, r3, #6
 8005494:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005498:	2b00      	cmp	r3, #0
 800549a:	d023      	beq.n	80054e4 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d119      	bne.n	80054da <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054b4:	d027      	beq.n	8005506 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054be:	d108      	bne.n	80054d2 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ce:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80054d0:	e019      	b.n	8005506 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fb52 	bl	8005b7c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80054d8:	e015      	b.n	8005506 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80054da:	2140      	movs	r1, #64	; 0x40
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fe13 	bl	8006108 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80054e2:	e010      	b.n	8005506 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fbd8 	bl	8005cb4 <I2C_ITMasterCplt>
 8005504:	e000      	b.n	8005508 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005506:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005528:	4b8c      	ldr	r3, [pc, #560]	; (800575c <I2C_Mem_ISR_DMA+0x240>)
 800552a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <I2C_Mem_ISR_DMA+0x1e>
 8005536:	2302      	movs	r3, #2
 8005538:	e10c      	b.n	8005754 <I2C_Mem_ISR_DMA+0x238>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d017      	beq.n	800557e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005556:	2b00      	cmp	r3, #0
 8005558:	d011      	beq.n	800557e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2210      	movs	r2, #16
 8005560:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	f043 0204 	orr.w	r2, r3, #4
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800556e:	2120      	movs	r1, #32
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f001 f93f 	bl	80067f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 febd 	bl	80062f6 <I2C_Flush_TXDR>
 800557c:	e0e5      	b.n	800574a <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00f      	beq.n	80055aa <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800559e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f04f 32ff 	mov.w	r2, #4294967295
 80055a6:	651a      	str	r2, [r3, #80]	; 0x50
 80055a8:	e0cf      	b.n	800574a <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	09db      	lsrs	r3, r3, #7
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d05c      	beq.n	8005670 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	099b      	lsrs	r3, r3, #6
 80055ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d056      	beq.n	8005670 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80055c2:	2110      	movs	r1, #16
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f001 f915 	bl	80067f4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d048      	beq.n	8005666 <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2bff      	cmp	r3, #255	; 0xff
 80055dc:	d910      	bls.n	8005600 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	22ff      	movs	r2, #255	; 0xff
 80055e2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e8:	b299      	uxth	r1, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	2300      	movs	r3, #0
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f001 f8c9 	bl	8006790 <I2C_TransferConfig>
 80055fe:	e011      	b.n	8005624 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560e:	b299      	uxth	r1, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005614:	b2da      	uxtb	r2, r3
 8005616:	2300      	movs	r3, #0
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f001 f8b6 	bl	8006790 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b22      	cmp	r3, #34	; 0x22
 8005640:	d108      	bne.n	8005654 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005650:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005652:	e07a      	b.n	800574a <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005662:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005664:	e071      	b.n	800574a <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005666:	2140      	movs	r1, #64	; 0x40
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 fd4d 	bl	8006108 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800566e:	e06c      	b.n	800574a <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	099b      	lsrs	r3, r3, #6
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d056      	beq.n	800572a <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	099b      	lsrs	r3, r3, #6
 8005680:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005684:	2b00      	cmp	r3, #0
 8005686:	d050      	beq.n	800572a <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b22      	cmp	r3, #34	; 0x22
 8005692:	d101      	bne.n	8005698 <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 8005694:	4b32      	ldr	r3, [pc, #200]	; (8005760 <I2C_Mem_ISR_DMA+0x244>)
 8005696:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569c:	b29b      	uxth	r3, r3
 800569e:	2bff      	cmp	r3, #255	; 0xff
 80056a0:	d910      	bls.n	80056c4 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	22ff      	movs	r2, #255	; 0xff
 80056a6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ac:	b299      	uxth	r1, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f001 f867 	bl	8006790 <I2C_TransferConfig>
 80056c2:	e011      	b.n	80056e8 <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d2:	b299      	uxth	r1, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f001 f854 	bl	8006790 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b22      	cmp	r3, #34	; 0x22
 8005704:	d108      	bne.n	8005718 <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005714:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005716:	e018      	b.n	800574a <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005726:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005728:	e00f      	b.n	800574a <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 fab5 	bl	8005cb4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	80002000 	.word	0x80002000
 8005760:	80002400 	.word	0x80002400

08005764 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <I2C_Slave_ISR_DMA+0x24>
 8005784:	2302      	movs	r3, #2
 8005786:	e0c9      	b.n	800591c <I2C_Slave_ISR_DMA+0x1b8>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d009      	beq.n	80057b0 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fb4c 	bl	8005e48 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	091b      	lsrs	r3, r3, #4
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 809a 	beq.w	80058f2 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 8093 	beq.w	80058f2 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	0b9b      	lsrs	r3, r3, #14
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	0bdb      	lsrs	r3, r3, #15
 80057dc:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d07f      	beq.n	80058e4 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00d      	beq.n	8005808 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	0bdb      	lsrs	r3, r3, #15
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8005804:	2301      	movs	r3, #1
 8005806:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00d      	beq.n	800582c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	0b9b      	lsrs	r3, r3, #14
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005828:	2301      	movs	r3, #1
 800582a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d128      	bne.n	8005884 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b28      	cmp	r3, #40	; 0x28
 800583c:	d108      	bne.n	8005850 <I2C_Slave_ISR_DMA+0xec>
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005844:	d104      	bne.n	8005850 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fc07 	bl	800605c <I2C_ITListenCplt>
 800584e:	e048      	b.n	80058e2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b29      	cmp	r3, #41	; 0x29
 800585a:	d10e      	bne.n	800587a <I2C_Slave_ISR_DMA+0x116>
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005862:	d00a      	beq.n	800587a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2210      	movs	r2, #16
 800586a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fd42 	bl	80062f6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f9bf 	bl	8005bf6 <I2C_ITSlaveSeqCplt>
 8005878:	e033      	b.n	80058e2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2210      	movs	r2, #16
 8005880:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005882:	e034      	b.n	80058ee <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2210      	movs	r2, #16
 800588a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005890:	f043 0204 	orr.w	r2, r3, #4
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800589e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <I2C_Slave_ISR_DMA+0x14a>
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058ac:	d11f      	bne.n	80058ee <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	2b21      	cmp	r3, #33	; 0x21
 80058b2:	d002      	beq.n	80058ba <I2C_Slave_ISR_DMA+0x156>
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b29      	cmp	r3, #41	; 0x29
 80058b8:	d103      	bne.n	80058c2 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2221      	movs	r2, #33	; 0x21
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
 80058c0:	e008      	b.n	80058d4 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	2b22      	cmp	r3, #34	; 0x22
 80058c6:	d002      	beq.n	80058ce <I2C_Slave_ISR_DMA+0x16a>
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	2b2a      	cmp	r3, #42	; 0x2a
 80058cc:	d102      	bne.n	80058d4 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2222      	movs	r2, #34	; 0x22
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	4619      	mov	r1, r3
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fc14 	bl	8006108 <I2C_ITError>
      if (treatdmanack == 1U)
 80058e0:	e005      	b.n	80058ee <I2C_Slave_ISR_DMA+0x18a>
 80058e2:	e004      	b.n	80058ee <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2210      	movs	r2, #16
 80058ea:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80058ec:	e011      	b.n	8005912 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80058ee:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80058f0:	e00f      	b.n	8005912 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	08db      	lsrs	r3, r3, #3
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	08db      	lsrs	r3, r3, #3
 8005902:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f8b1 	bl	8005a74 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	461a      	mov	r2, r3
 8005932:	4603      	mov	r3, r0
 8005934:	817b      	strh	r3, [r7, #10]
 8005936:	460b      	mov	r3, r1
 8005938:	813b      	strh	r3, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800593e:	88fb      	ldrh	r3, [r7, #6]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	8979      	ldrh	r1, [r7, #10]
 8005944:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <I2C_RequestMemoryWrite+0xa4>)
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 ff1f 	bl	8006790 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	69b9      	ldr	r1, [r7, #24]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fdb1 	bl	80064be <I2C_WaitOnTXISFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e02c      	b.n	80059c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d105      	bne.n	8005978 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800596c:	893b      	ldrh	r3, [r7, #8]
 800596e:	b2da      	uxtb	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
 8005976:	e015      	b.n	80059a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005978:	893b      	ldrh	r3, [r7, #8]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	b29b      	uxth	r3, r3
 800597e:	b2da      	uxtb	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	69b9      	ldr	r1, [r7, #24]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fd97 	bl	80064be <I2C_WaitOnTXISFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e012      	b.n	80059c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800599a:	893b      	ldrh	r3, [r7, #8]
 800599c:	b2da      	uxtb	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2200      	movs	r2, #0
 80059ac:	2180      	movs	r1, #128	; 0x80
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 fd45 	bl	800643e <I2C_WaitOnFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	80002000 	.word	0x80002000

080059cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	4608      	mov	r0, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	461a      	mov	r2, r3
 80059da:	4603      	mov	r3, r0
 80059dc:	817b      	strh	r3, [r7, #10]
 80059de:	460b      	mov	r3, r1
 80059e0:	813b      	strh	r3, [r7, #8]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	8979      	ldrh	r1, [r7, #10]
 80059ec:	4b20      	ldr	r3, [pc, #128]	; (8005a70 <I2C_RequestMemoryRead+0xa4>)
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	2300      	movs	r3, #0
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fecc 	bl	8006790 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	69b9      	ldr	r1, [r7, #24]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 fd5e 	bl	80064be <I2C_WaitOnTXISFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e02c      	b.n	8005a66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d105      	bne.n	8005a1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a12:	893b      	ldrh	r3, [r7, #8]
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a1c:	e015      	b.n	8005a4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a1e:	893b      	ldrh	r3, [r7, #8]
 8005a20:	0a1b      	lsrs	r3, r3, #8
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	69b9      	ldr	r1, [r7, #24]
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fd44 	bl	80064be <I2C_WaitOnTXISFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e012      	b.n	8005a66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a40:	893b      	ldrh	r3, [r7, #8]
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	2200      	movs	r2, #0
 8005a52:	2140      	movs	r1, #64	; 0x40
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fcf2 	bl	800643e <I2C_WaitOnFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	80002000 	.word	0x80002000

08005a74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a8a:	2b28      	cmp	r3, #40	; 0x28
 8005a8c:	d16a      	bne.n	8005b64 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	0c1b      	lsrs	r3, r3, #16
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	0c1b      	lsrs	r3, r3, #16
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005aac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005ac8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d138      	bne.n	8005b44 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005ad2:	897b      	ldrh	r3, [r7, #10]
 8005ad4:	09db      	lsrs	r3, r3, #7
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	89bb      	ldrh	r3, [r7, #12]
 8005ada:	4053      	eors	r3, r2
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f003 0306 	and.w	r3, r3, #6
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d11c      	bne.n	8005b20 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005ae6:	897b      	ldrh	r3, [r7, #10]
 8005ae8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d13b      	bne.n	8005b74 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2208      	movs	r2, #8
 8005b08:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b12:	89ba      	ldrh	r2, [r7, #12]
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff fab8 	bl	800508e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005b1e:	e029      	b.n	8005b74 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005b20:	893b      	ldrh	r3, [r7, #8]
 8005b22:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fecd 	bl	80068c8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b36:	89ba      	ldrh	r2, [r7, #12]
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff faa6 	bl	800508e <HAL_I2C_AddrCallback>
}
 8005b42:	e017      	b.n	8005b74 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 febd 	bl	80068c8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b56:	89ba      	ldrh	r2, [r7, #12]
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fa96 	bl	800508e <HAL_I2C_AddrCallback>
}
 8005b62:	e007      	b.n	8005b74 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2208      	movs	r2, #8
 8005b6a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005b74:	bf00      	nop
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b21      	cmp	r3, #33	; 0x21
 8005b96:	d115      	bne.n	8005bc4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2211      	movs	r2, #17
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005bac:	2101      	movs	r1, #1
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fe8a 	bl	80068c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff fa3e 	bl	800503e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bc2:	e014      	b.n	8005bee <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2212      	movs	r2, #18
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005bd8:	2102      	movs	r1, #2
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fe74 	bl	80068c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff fa32 	bl	8005052 <HAL_I2C_MasterRxCpltCallback>
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	0b9b      	lsrs	r3, r3, #14
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d008      	beq.n	8005c2c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e00d      	b.n	8005c48 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	0bdb      	lsrs	r3, r3, #15
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c46:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b29      	cmp	r3, #41	; 0x29
 8005c52:	d112      	bne.n	8005c7a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2228      	movs	r2, #40	; 0x28
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2221      	movs	r2, #33	; 0x21
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c62:	2101      	movs	r1, #1
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fe2f 	bl	80068c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7ff f9f7 	bl	8005066 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c78:	e017      	b.n	8005caa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b2a      	cmp	r3, #42	; 0x2a
 8005c84:	d111      	bne.n	8005caa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2228      	movs	r2, #40	; 0x28
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2222      	movs	r2, #34	; 0x22
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005c94:	2102      	movs	r1, #2
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fe16 	bl	80068c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff f9e8 	bl	800507a <HAL_I2C_SlaveRxCpltCallback>
}
 8005caa:	bf00      	nop
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b21      	cmp	r3, #33	; 0x21
 8005cd4:	d107      	bne.n	8005ce6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fdf5 	bl	80068c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2211      	movs	r2, #17
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ce4:	e00c      	b.n	8005d00 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b22      	cmp	r3, #34	; 0x22
 8005cf0:	d106      	bne.n	8005d00 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005cf2:	2102      	movs	r1, #2
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fde7 	bl	80068c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2212      	movs	r2, #18
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6859      	ldr	r1, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4b4d      	ldr	r3, [pc, #308]	; (8005e40 <I2C_ITMasterCplt+0x18c>)
 8005d0c:	400b      	ands	r3, r1
 8005d0e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a4a      	ldr	r2, [pc, #296]	; (8005e44 <I2C_ITMasterCplt+0x190>)
 8005d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	091b      	lsrs	r3, r3, #4
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d009      	beq.n	8005d3c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2210      	movs	r2, #16
 8005d2e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	f043 0204 	orr.w	r2, r3, #4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b60      	cmp	r3, #96	; 0x60
 8005d46:	d10b      	bne.n	8005d60 <I2C_ITMasterCplt+0xac>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	089b      	lsrs	r3, r3, #2
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fac8 	bl	80062f6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b60      	cmp	r3, #96	; 0x60
 8005d76:	d002      	beq.n	8005d7e <I2C_ITMasterCplt+0xca>
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d006      	beq.n	8005d8c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f9bf 	bl	8006108 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d8a:	e054      	b.n	8005e36 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b21      	cmp	r3, #33	; 0x21
 8005d96:	d124      	bne.n	8005de2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b40      	cmp	r3, #64	; 0x40
 8005db0:	d10b      	bne.n	8005dca <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff f97b 	bl	80050be <HAL_I2C_MemTxCpltCallback>
}
 8005dc8:	e035      	b.n	8005e36 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff f92f 	bl	800503e <HAL_I2C_MasterTxCpltCallback>
}
 8005de0:	e029      	b.n	8005e36 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b22      	cmp	r3, #34	; 0x22
 8005dec:	d123      	bne.n	8005e36 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	d10b      	bne.n	8005e20 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7fb f95b 	bl	80010d4 <HAL_I2C_MemRxCpltCallback>
}
 8005e1e:	e00a      	b.n	8005e36 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff f90e 	bl	8005052 <HAL_I2C_MasterRxCpltCallback>
}
 8005e36:	bf00      	nop
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	fe00e800 	.word	0xfe00e800
 8005e44:	ffff0000 	.word	0xffff0000

08005e48 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e64:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	2b21      	cmp	r3, #33	; 0x21
 8005e72:	d002      	beq.n	8005e7a <I2C_ITSlaveCplt+0x32>
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2b29      	cmp	r3, #41	; 0x29
 8005e78:	d108      	bne.n	8005e8c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005e7a:	f248 0101 	movw	r1, #32769	; 0x8001
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fd22 	bl	80068c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2221      	movs	r2, #33	; 0x21
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
 8005e8a:	e00d      	b.n	8005ea8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b22      	cmp	r3, #34	; 0x22
 8005e90:	d002      	beq.n	8005e98 <I2C_ITSlaveCplt+0x50>
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	2b2a      	cmp	r3, #42	; 0x2a
 8005e96:	d107      	bne.n	8005ea8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005e98:	f248 0102 	movw	r1, #32770	; 0x8002
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fd13 	bl	80068c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2222      	movs	r2, #34	; 0x22
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6859      	ldr	r1, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b64      	ldr	r3, [pc, #400]	; (8006054 <I2C_ITSlaveCplt+0x20c>)
 8005ec4:	400b      	ands	r3, r1
 8005ec6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fa14 	bl	80062f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	0b9b      	lsrs	r3, r3, #14
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d013      	beq.n	8005f02 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ee8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d020      	beq.n	8005f34 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f00:	e018      	b.n	8005f34 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	0bdb      	lsrs	r3, r3, #15
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d012      	beq.n	8005f34 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d006      	beq.n	8005f34 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d020      	beq.n	8005f82 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0304 	bic.w	r3, r3, #4
 8005f46:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00c      	beq.n	8005f82 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f90:	f043 0204 	orr.w	r2, r3, #4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d010      	beq.n	8005fd0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f8a7 	bl	8006108 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b28      	cmp	r3, #40	; 0x28
 8005fc4:	d141      	bne.n	800604a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005fc6:	6979      	ldr	r1, [r7, #20]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f847 	bl	800605c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fce:	e03c      	b.n	800604a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fd8:	d014      	beq.n	8006004 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff fe0b 	bl	8005bf6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a1d      	ldr	r2, [pc, #116]	; (8006058 <I2C_ITSlaveCplt+0x210>)
 8005fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff f854 	bl	80050aa <HAL_I2C_ListenCpltCallback>
}
 8006002:	e022      	b.n	800604a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b22      	cmp	r3, #34	; 0x22
 800600e:	d10e      	bne.n	800602e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff f827 	bl	800507a <HAL_I2C_SlaveRxCpltCallback>
}
 800602c:	e00d      	b.n	800604a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff f80e 	bl	8005066 <HAL_I2C_SlaveTxCpltCallback>
}
 800604a:	bf00      	nop
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	fe00e800 	.word	0xfe00e800
 8006058:	ffff0000 	.word	0xffff0000

0800605c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a26      	ldr	r2, [pc, #152]	; (8006104 <I2C_ITListenCplt+0xa8>)
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	089b      	lsrs	r3, r3, #2
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d022      	beq.n	80060da <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d012      	beq.n	80060da <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d2:	f043 0204 	orr.w	r2, r3, #4
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80060da:	f248 0103 	movw	r1, #32771	; 0x8003
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fbf2 	bl	80068c8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2210      	movs	r2, #16
 80060ea:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7fe ffd8 	bl	80050aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	ffff0000 	.word	0xffff0000

08006108 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a5d      	ldr	r2, [pc, #372]	; (800629c <I2C_ITError+0x194>)
 8006126:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	2b28      	cmp	r3, #40	; 0x28
 800613e:	d005      	beq.n	800614c <I2C_ITError+0x44>
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b29      	cmp	r3, #41	; 0x29
 8006144:	d002      	beq.n	800614c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b2a      	cmp	r3, #42	; 0x2a
 800614a:	d10b      	bne.n	8006164 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800614c:	2103      	movs	r1, #3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fbba 	bl	80068c8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2228      	movs	r2, #40	; 0x28
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a50      	ldr	r2, [pc, #320]	; (80062a0 <I2C_ITError+0x198>)
 8006160:	635a      	str	r2, [r3, #52]	; 0x34
 8006162:	e011      	b.n	8006188 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006164:	f248 0103 	movw	r1, #32771	; 0x8003
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fbad 	bl	80068c8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b60      	cmp	r3, #96	; 0x60
 8006178:	d003      	beq.n	8006182 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	2b00      	cmp	r3, #0
 8006194:	d039      	beq.n	800620a <I2C_ITError+0x102>
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b11      	cmp	r3, #17
 800619a:	d002      	beq.n	80061a2 <I2C_ITError+0x9a>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b21      	cmp	r3, #33	; 0x21
 80061a0:	d133      	bne.n	800620a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061b0:	d107      	bne.n	80061c2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061c0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fd ffb4 	bl	8004134 <HAL_DMA_GetState>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d017      	beq.n	8006202 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	4a33      	ldr	r2, [pc, #204]	; (80062a4 <I2C_ITError+0x19c>)
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fd feb4 	bl	8003f54 <HAL_DMA_Abort_IT>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d04d      	beq.n	800628e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006200:	e045      	b.n	800628e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f850 	bl	80062a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006208:	e041      	b.n	800628e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d039      	beq.n	8006286 <I2C_ITError+0x17e>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b12      	cmp	r3, #18
 8006216:	d002      	beq.n	800621e <I2C_ITError+0x116>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b22      	cmp	r3, #34	; 0x22
 800621c:	d133      	bne.n	8006286 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622c:	d107      	bne.n	800623e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800623c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006242:	4618      	mov	r0, r3
 8006244:	f7fd ff76 	bl	8004134 <HAL_DMA_GetState>
 8006248:	4603      	mov	r3, r0
 800624a:	2b01      	cmp	r3, #1
 800624c:	d017      	beq.n	800627e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006252:	4a14      	ldr	r2, [pc, #80]	; (80062a4 <I2C_ITError+0x19c>)
 8006254:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006262:	4618      	mov	r0, r3
 8006264:	f7fd fe76 	bl	8003f54 <HAL_DMA_Abort_IT>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d011      	beq.n	8006292 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800627c:	e009      	b.n	8006292 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f812 	bl	80062a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006284:	e005      	b.n	8006292 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f80e 	bl	80062a8 <I2C_TreatErrorCallback>
  }
}
 800628c:	e002      	b.n	8006294 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800628e:	bf00      	nop
 8006290:	e000      	b.n	8006294 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006292:	bf00      	nop
}
 8006294:	bf00      	nop
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	ffff0000 	.word	0xffff0000
 80062a0:	0800512f 	.word	0x0800512f
 80062a4:	08006403 	.word	0x08006403

080062a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b60      	cmp	r3, #96	; 0x60
 80062ba:	d10e      	bne.n	80062da <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fe ff07 	bl	80050e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062d8:	e009      	b.n	80062ee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fe fef2 	bl	80050d2 <HAL_I2C_ErrorCallback>
}
 80062ee:	bf00      	nop
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b02      	cmp	r3, #2
 800630a:	d103      	bne.n	8006314 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2200      	movs	r2, #0
 8006312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b01      	cmp	r3, #1
 8006320:	d007      	beq.n	8006332 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699a      	ldr	r2, [r3, #24]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0201 	orr.w	r2, r2, #1
 8006330:	619a      	str	r2, [r3, #24]
  }
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800635a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d104      	bne.n	8006370 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006366:	2120      	movs	r1, #32
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fa43 	bl	80067f4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800636e:	e02d      	b.n	80063cc <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006378:	441a      	add	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006382:	b29b      	uxth	r3, r3
 8006384:	2bff      	cmp	r3, #255	; 0xff
 8006386:	d903      	bls.n	8006390 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	22ff      	movs	r2, #255	; 0xff
 800638c:	851a      	strh	r2, [r3, #40]	; 0x28
 800638e:	e004      	b.n	800639a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3324      	adds	r3, #36	; 0x24
 80063a4:	4619      	mov	r1, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80063b0:	f7fd fd70 	bl	8003e94 <HAL_DMA_Start_IT>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d004      	beq.n	80063c4 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80063ba:	2110      	movs	r1, #16
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f7ff fea3 	bl	8006108 <I2C_ITError>
}
 80063c2:	e003      	b.n	80063cc <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80063c4:	2140      	movs	r1, #64	; 0x40
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fa14 	bl	80067f4 <I2C_Enable_IRQ>
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063f0:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80063f2:	2110      	movs	r1, #16
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f7ff fe87 	bl	8006108 <I2C_ITError>
}
 80063fa:	bf00      	nop
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	2200      	movs	r2, #0
 800641e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642c:	2200      	movs	r2, #0
 800642e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff ff39 	bl	80062a8 <I2C_TreatErrorCallback>
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	603b      	str	r3, [r7, #0]
 800644a:	4613      	mov	r3, r2
 800644c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800644e:	e022      	b.n	8006496 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d01e      	beq.n	8006496 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006458:	f7fd f982 	bl	8003760 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d302      	bcc.n	800646e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d113      	bne.n	8006496 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006472:	f043 0220 	orr.w	r2, r3, #32
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e00f      	b.n	80064b6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699a      	ldr	r2, [r3, #24]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4013      	ands	r3, r2
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	bf0c      	ite	eq
 80064a6:	2301      	moveq	r3, #1
 80064a8:	2300      	movne	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d0cd      	beq.n	8006450 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064ca:	e02c      	b.n	8006526 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	68b9      	ldr	r1, [r7, #8]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f871 	bl	80065b8 <I2C_IsErrorOccurred>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e02a      	b.n	8006536 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e6:	d01e      	beq.n	8006526 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e8:	f7fd f93a 	bl	8003760 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d302      	bcc.n	80064fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d113      	bne.n	8006526 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006502:	f043 0220 	orr.w	r2, r3, #32
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e007      	b.n	8006536 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b02      	cmp	r3, #2
 8006532:	d1cb      	bne.n	80064cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800654a:	e028      	b.n	800659e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f831 	bl	80065b8 <I2C_IsErrorOccurred>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e026      	b.n	80065ae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006560:	f7fd f8fe 	bl	8003760 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	429a      	cmp	r2, r3
 800656e:	d302      	bcc.n	8006576 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d113      	bne.n	800659e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	f043 0220 	orr.w	r2, r3, #32
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2220      	movs	r2, #32
 8006586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e007      	b.n	80065ae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d1cf      	bne.n	800654c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d075      	beq.n	80066d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2210      	movs	r2, #16
 80065ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065ec:	e056      	b.n	800669c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f4:	d052      	beq.n	800669c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065f6:	f7fd f8b3 	bl	8003760 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	429a      	cmp	r2, r3
 8006604:	d302      	bcc.n	800660c <I2C_IsErrorOccurred+0x54>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d147      	bne.n	800669c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006616:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800661e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800662a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662e:	d12e      	bne.n	800668e <I2C_IsErrorOccurred+0xd6>
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006636:	d02a      	beq.n	800668e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006638:	7cfb      	ldrb	r3, [r7, #19]
 800663a:	2b20      	cmp	r3, #32
 800663c:	d027      	beq.n	800668e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800664c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800664e:	f7fd f887 	bl	8003760 <HAL_GetTick>
 8006652:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006654:	e01b      	b.n	800668e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006656:	f7fd f883 	bl	8003760 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b19      	cmp	r3, #25
 8006662:	d914      	bls.n	800668e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006668:	f043 0220 	orr.w	r2, r3, #32
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b20      	cmp	r3, #32
 800669a:	d1dc      	bne.n	8006656 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d003      	beq.n	80066b2 <I2C_IsErrorOccurred+0xfa>
 80066aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d09d      	beq.n	80065ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80066b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d103      	bne.n	80066c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2220      	movs	r2, #32
 80066c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	f043 0304 	orr.w	r3, r3, #4
 80066c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f043 0301 	orr.w	r3, r3, #1
 80066e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	f043 0308 	orr.w	r3, r3, #8
 800670a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	f043 0302 	orr.w	r3, r3, #2
 800672c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006736:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800673e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01c      	beq.n	8006780 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff fdd5 	bl	80062f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6859      	ldr	r1, [r3, #4]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4b0d      	ldr	r3, [pc, #52]	; (800678c <I2C_IsErrorOccurred+0x1d4>)
 8006758:	400b      	ands	r3, r1
 800675a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	431a      	orrs	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006784:	4618      	mov	r0, r3
 8006786:	3728      	adds	r7, #40	; 0x28
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	fe00e800 	.word	0xfe00e800

08006790 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	607b      	str	r3, [r7, #4]
 800679a:	460b      	mov	r3, r1
 800679c:	817b      	strh	r3, [r7, #10]
 800679e:	4613      	mov	r3, r2
 80067a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067a2:	897b      	ldrh	r3, [r7, #10]
 80067a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067a8:	7a7b      	ldrb	r3, [r7, #9]
 80067aa:	041b      	lsls	r3, r3, #16
 80067ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	0d5b      	lsrs	r3, r3, #21
 80067ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80067ce:	4b08      	ldr	r3, [pc, #32]	; (80067f0 <I2C_TransferConfig+0x60>)
 80067d0:	430b      	orrs	r3, r1
 80067d2:	43db      	mvns	r3, r3
 80067d4:	ea02 0103 	and.w	r1, r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	03ff63ff 	.word	0x03ff63ff

080067f4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006808:	4a2d      	ldr	r2, [pc, #180]	; (80068c0 <I2C_Enable_IRQ+0xcc>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006812:	4a2c      	ldr	r2, [pc, #176]	; (80068c4 <I2C_Enable_IRQ+0xd0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d11d      	bne.n	8006854 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006818:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800681c:	2b00      	cmp	r3, #0
 800681e:	da03      	bge.n	8006828 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006826:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006828:	887b      	ldrh	r3, [r7, #2]
 800682a:	2b10      	cmp	r3, #16
 800682c:	d103      	bne.n	8006836 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006834:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006836:	887b      	ldrh	r3, [r7, #2]
 8006838:	2b20      	cmp	r3, #32
 800683a:	d103      	bne.n	8006844 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006842:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006844:	887b      	ldrh	r3, [r7, #2]
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d12c      	bne.n	80068a4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006850:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006852:	e027      	b.n	80068a4 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006858:	2b00      	cmp	r3, #0
 800685a:	da03      	bge.n	8006864 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006862:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006864:	887b      	ldrh	r3, [r7, #2]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006874:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006876:	887b      	ldrh	r3, [r7, #2]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006886:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006888:	887b      	ldrh	r3, [r7, #2]
 800688a:	2b10      	cmp	r3, #16
 800688c:	d103      	bne.n	8006896 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006894:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006896:	887b      	ldrh	r3, [r7, #2]
 8006898:	2b20      	cmp	r3, #32
 800689a:	d103      	bne.n	80068a4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f043 0320 	orr.w	r3, r3, #32
 80068a2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6819      	ldr	r1, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	601a      	str	r2, [r3, #0]
}
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	08005335 	.word	0x08005335
 80068c4:	08005765 	.word	0x08005765

080068c8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80068d8:	887b      	ldrh	r3, [r7, #2]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00f      	beq.n	8006902 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80068e8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068f6:	2b28      	cmp	r3, #40	; 0x28
 80068f8:	d003      	beq.n	8006902 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006900:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006902:	887b      	ldrh	r3, [r7, #2]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00f      	beq.n	800692c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006912:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006920:	2b28      	cmp	r3, #40	; 0x28
 8006922:	d003      	beq.n	800692c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800692a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800692c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006930:	2b00      	cmp	r3, #0
 8006932:	da03      	bge.n	800693c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800693a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800693c:	887b      	ldrh	r3, [r7, #2]
 800693e:	2b10      	cmp	r3, #16
 8006940:	d103      	bne.n	800694a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006948:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800694a:	887b      	ldrh	r3, [r7, #2]
 800694c:	2b20      	cmp	r3, #32
 800694e:	d103      	bne.n	8006958 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f043 0320 	orr.w	r3, r3, #32
 8006956:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006958:	887b      	ldrh	r3, [r7, #2]
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d103      	bne.n	8006966 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006964:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6819      	ldr	r1, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	43da      	mvns	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	400a      	ands	r2, r1
 8006976:	601a      	str	r2, [r3, #0]
}
 8006978:	bf00      	nop
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b20      	cmp	r3, #32
 8006998:	d138      	bne.n	8006a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e032      	b.n	8006a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2224      	movs	r2, #36	; 0x24
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0201 	bic.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6819      	ldr	r1, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e000      	b.n	8006a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a0c:	2302      	movs	r3, #2
  }
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b085      	sub	sp, #20
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d139      	bne.n	8006aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e033      	b.n	8006aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2224      	movs	r2, #36	; 0x24
 8006a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0201 	bic.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e000      	b.n	8006aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
  }
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab4:	b08f      	sub	sp, #60	; 0x3c
 8006ab6:	af0a      	add	r7, sp, #40	; 0x28
 8006ab8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e116      	b.n	8006cf2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fa ff54 	bl	800198c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f004 f83f 	bl	800ab86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	603b      	str	r3, [r7, #0]
 8006b0e:	687e      	ldr	r6, [r7, #4]
 8006b10:	466d      	mov	r5, sp
 8006b12:	f106 0410 	add.w	r4, r6, #16
 8006b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b22:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b26:	1d33      	adds	r3, r6, #4
 8006b28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b2a:	6838      	ldr	r0, [r7, #0]
 8006b2c:	f003 ffff 	bl	800ab2e <USB_CoreInit>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e0d7      	b.n	8006cf2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2100      	movs	r1, #0
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f004 f82d 	bl	800aba8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
 8006b52:	e04a      	b.n	8006bea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006b54:	7bfa      	ldrb	r2, [r7, #15]
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	440b      	add	r3, r1
 8006b62:	333d      	adds	r3, #61	; 0x3d
 8006b64:	2201      	movs	r2, #1
 8006b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b68:	7bfa      	ldrb	r2, [r7, #15]
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	333c      	adds	r3, #60	; 0x3c
 8006b78:	7bfa      	ldrb	r2, [r7, #15]
 8006b7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006b7c:	7bfa      	ldrb	r2, [r7, #15]
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	b298      	uxth	r0, r3
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	3344      	adds	r3, #68	; 0x44
 8006b90:	4602      	mov	r2, r0
 8006b92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006b94:	7bfa      	ldrb	r2, [r7, #15]
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	3340      	adds	r3, #64	; 0x40
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006ba8:	7bfa      	ldrb	r2, [r7, #15]
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	3348      	adds	r3, #72	; 0x48
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006bbc:	7bfa      	ldrb	r2, [r7, #15]
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	440b      	add	r3, r1
 8006bca:	334c      	adds	r3, #76	; 0x4c
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006bd0:	7bfa      	ldrb	r2, [r7, #15]
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	440b      	add	r3, r1
 8006bde:	3354      	adds	r3, #84	; 0x54
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	3301      	adds	r3, #1
 8006be8:	73fb      	strb	r3, [r7, #15]
 8006bea:	7bfa      	ldrb	r2, [r7, #15]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d3af      	bcc.n	8006b54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
 8006bf8:	e044      	b.n	8006c84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006bfa:	7bfa      	ldrb	r2, [r7, #15]
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c10:	7bfa      	ldrb	r2, [r7, #15]
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006c22:	7bfa      	ldrb	r2, [r7, #15]
 8006c24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c26:	7bfa      	ldrb	r2, [r7, #15]
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	440b      	add	r3, r1
 8006c34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c3c:	7bfa      	ldrb	r2, [r7, #15]
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	4613      	mov	r3, r2
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	440b      	add	r3, r1
 8006c4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c52:	7bfa      	ldrb	r2, [r7, #15]
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006c68:	7bfa      	ldrb	r2, [r7, #15]
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	3301      	adds	r3, #1
 8006c82:	73fb      	strb	r3, [r7, #15]
 8006c84:	7bfa      	ldrb	r2, [r7, #15]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d3b5      	bcc.n	8006bfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	687e      	ldr	r6, [r7, #4]
 8006c96:	466d      	mov	r5, sp
 8006c98:	f106 0410 	add.w	r4, r6, #16
 8006c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ca4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ca8:	e885 0003 	stmia.w	r5, {r0, r1}
 8006cac:	1d33      	adds	r3, r6, #4
 8006cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cb0:	6838      	ldr	r0, [r7, #0]
 8006cb2:	f003 ffc5 	bl	800ac40 <USB_DevInit>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e014      	b.n	8006cf2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d102      	bne.n	8006ce6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f80a 	bl	8006cfa <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f004 f971 	bl	800afd2 <USB_DevDisconnect>

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cfa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b085      	sub	sp, #20
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2c:	f043 0303 	orr.w	r3, r3, #3
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a04      	ldr	r2, [pc, #16]	; (8006d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d52:	6013      	str	r3, [r2, #0]
}
 8006d54:	bf00      	nop
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40007000 	.word	0x40007000

08006d64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <HAL_PWREx_GetVoltageRange+0x18>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40007000 	.word	0x40007000

08006d80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d8e:	d130      	bne.n	8006df2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d90:	4b23      	ldr	r3, [pc, #140]	; (8006e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d9c:	d038      	beq.n	8006e10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d9e:	4b20      	ldr	r3, [pc, #128]	; (8006e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006da6:	4a1e      	ldr	r2, [pc, #120]	; (8006e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006dae:	4b1d      	ldr	r3, [pc, #116]	; (8006e24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2232      	movs	r2, #50	; 0x32
 8006db4:	fb02 f303 	mul.w	r3, r2, r3
 8006db8:	4a1b      	ldr	r2, [pc, #108]	; (8006e28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006dba:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbe:	0c9b      	lsrs	r3, r3, #18
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dc4:	e002      	b.n	8006dcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dcc:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd8:	d102      	bne.n	8006de0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1f2      	bne.n	8006dc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006de0:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dec:	d110      	bne.n	8006e10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e00f      	b.n	8006e12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006df2:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dfe:	d007      	beq.n	8006e10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e00:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e08:	4a05      	ldr	r2, [pc, #20]	; (8006e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40007000 	.word	0x40007000
 8006e24:	20000020 	.word	0x20000020
 8006e28:	431bde83 	.word	0x431bde83

08006e2c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	4a04      	ldr	r2, [pc, #16]	; (8006e48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e3a:	6053      	str	r3, [r2, #4]
}
 8006e3c:	bf00      	nop
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	40007000 	.word	0x40007000

08006e4c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006e54:	f7fc fc84 	bl	8003760 <HAL_GetTick>
 8006e58:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e063      	b.n	8006f2c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10b      	bne.n	8006e88 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fa fc31 	bl	80016e0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006e7e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f858 	bl	8006f38 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	021a      	lsls	r2, r3, #8
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2120      	movs	r1, #32
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f850 	bl	8006f54 <QSPI_WaitFlagStateUntilTimeout>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006eb8:	7afb      	ldrb	r3, [r7, #11]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d131      	bne.n	8006f22 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ec8:	f023 0310 	bic.w	r3, r3, #16
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6852      	ldr	r2, [r2, #4]
 8006ed0:	0611      	lsls	r1, r2, #24
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	68d2      	ldr	r2, [r2, #12]
 8006ed6:	4311      	orrs	r1, r2
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6812      	ldr	r2, [r2, #0]
 8006edc:	430b      	orrs	r3, r1
 8006ede:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	4b13      	ldr	r3, [pc, #76]	; (8006f34 <HAL_QSPI_Init+0xe8>)
 8006ee8:	4013      	ands	r3, r2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6912      	ldr	r2, [r2, #16]
 8006eee:	0411      	lsls	r1, r2, #16
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6952      	ldr	r2, [r2, #20]
 8006ef4:	4311      	orrs	r1, r2
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6992      	ldr	r2, [r2, #24]
 8006efa:	4311      	orrs	r1, r2
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0201 	orr.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	ffe0f8fe 	.word	0xffe0f8fe

08006f38 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	4613      	mov	r3, r2
 8006f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f64:	e01a      	b.n	8006f9c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6c:	d016      	beq.n	8006f9c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6e:	f7fc fbf7 	bl	8003760 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d302      	bcc.n	8006f84 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10b      	bne.n	8006f9c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2204      	movs	r2, #4
 8006f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f90:	f043 0201 	orr.w	r2, r3, #1
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e00e      	b.n	8006fba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	bf14      	ite	ne
 8006faa:	2301      	movne	r3, #1
 8006fac:	2300      	moveq	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d1d6      	bne.n	8006f66 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e3ca      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fd6:	4b97      	ldr	r3, [pc, #604]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 030c 	and.w	r3, r3, #12
 8006fde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fe0:	4b94      	ldr	r3, [pc, #592]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0310 	and.w	r3, r3, #16
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 80e4 	beq.w	80071c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d007      	beq.n	800700e <HAL_RCC_OscConfig+0x4a>
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b0c      	cmp	r3, #12
 8007002:	f040 808b 	bne.w	800711c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b01      	cmp	r3, #1
 800700a:	f040 8087 	bne.w	800711c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800700e:	4b89      	ldr	r3, [pc, #548]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d005      	beq.n	8007026 <HAL_RCC_OscConfig+0x62>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e3a2      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1a      	ldr	r2, [r3, #32]
 800702a:	4b82      	ldr	r3, [pc, #520]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <HAL_RCC_OscConfig+0x7c>
 8007036:	4b7f      	ldr	r3, [pc, #508]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800703e:	e005      	b.n	800704c <HAL_RCC_OscConfig+0x88>
 8007040:	4b7c      	ldr	r3, [pc, #496]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007046:	091b      	lsrs	r3, r3, #4
 8007048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800704c:	4293      	cmp	r3, r2
 800704e:	d223      	bcs.n	8007098 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fd87 	bl	8007b68 <RCC_SetFlashLatencyFromMSIRange>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e383      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007064:	4b73      	ldr	r3, [pc, #460]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a72      	ldr	r2, [pc, #456]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800706a:	f043 0308 	orr.w	r3, r3, #8
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	4b70      	ldr	r3, [pc, #448]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	496d      	ldr	r1, [pc, #436]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800707e:	4313      	orrs	r3, r2
 8007080:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007082:	4b6c      	ldr	r3, [pc, #432]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	4968      	ldr	r1, [pc, #416]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007092:	4313      	orrs	r3, r2
 8007094:	604b      	str	r3, [r1, #4]
 8007096:	e025      	b.n	80070e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007098:	4b66      	ldr	r3, [pc, #408]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a65      	ldr	r2, [pc, #404]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800709e:	f043 0308 	orr.w	r3, r3, #8
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	4b63      	ldr	r3, [pc, #396]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	4960      	ldr	r1, [pc, #384]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070b6:	4b5f      	ldr	r3, [pc, #380]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	495b      	ldr	r1, [pc, #364]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d109      	bne.n	80070e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 fd47 	bl	8007b68 <RCC_SetFlashLatencyFromMSIRange>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e343      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070e4:	f000 fc4a 	bl	800797c <HAL_RCC_GetSysClockFreq>
 80070e8:	4602      	mov	r2, r0
 80070ea:	4b52      	ldr	r3, [pc, #328]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	091b      	lsrs	r3, r3, #4
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	4950      	ldr	r1, [pc, #320]	; (8007238 <HAL_RCC_OscConfig+0x274>)
 80070f6:	5ccb      	ldrb	r3, [r1, r3]
 80070f8:	f003 031f 	and.w	r3, r3, #31
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007100:	4a4e      	ldr	r2, [pc, #312]	; (800723c <HAL_RCC_OscConfig+0x278>)
 8007102:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007104:	4b4e      	ldr	r3, [pc, #312]	; (8007240 <HAL_RCC_OscConfig+0x27c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4618      	mov	r0, r3
 800710a:	f7fa fcdb 	bl	8001ac4 <HAL_InitTick>
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d052      	beq.n	80071be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	e327      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d032      	beq.n	800718a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007124:	4b43      	ldr	r3, [pc, #268]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a42      	ldr	r2, [pc, #264]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800712a:	f043 0301 	orr.w	r3, r3, #1
 800712e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007130:	f7fc fb16 	bl	8003760 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007138:	f7fc fb12 	bl	8003760 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e310      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800714a:	4b3a      	ldr	r3, [pc, #232]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f0      	beq.n	8007138 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007156:	4b37      	ldr	r3, [pc, #220]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a36      	ldr	r2, [pc, #216]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800715c:	f043 0308 	orr.w	r3, r3, #8
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	4b34      	ldr	r3, [pc, #208]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	4931      	ldr	r1, [pc, #196]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007170:	4313      	orrs	r3, r2
 8007172:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007174:	4b2f      	ldr	r3, [pc, #188]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	492c      	ldr	r1, [pc, #176]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007184:	4313      	orrs	r3, r2
 8007186:	604b      	str	r3, [r1, #4]
 8007188:	e01a      	b.n	80071c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800718a:	4b2a      	ldr	r3, [pc, #168]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a29      	ldr	r2, [pc, #164]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007190:	f023 0301 	bic.w	r3, r3, #1
 8007194:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007196:	f7fc fae3 	bl	8003760 <HAL_GetTick>
 800719a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800719c:	e008      	b.n	80071b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800719e:	f7fc fadf 	bl	8003760 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e2dd      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80071b0:	4b20      	ldr	r3, [pc, #128]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1f0      	bne.n	800719e <HAL_RCC_OscConfig+0x1da>
 80071bc:	e000      	b.n	80071c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d074      	beq.n	80072b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	d005      	beq.n	80071de <HAL_RCC_OscConfig+0x21a>
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	2b0c      	cmp	r3, #12
 80071d6:	d10e      	bne.n	80071f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d10b      	bne.n	80071f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071de:	4b15      	ldr	r3, [pc, #84]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d064      	beq.n	80072b4 <HAL_RCC_OscConfig+0x2f0>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d160      	bne.n	80072b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e2ba      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071fe:	d106      	bne.n	800720e <HAL_RCC_OscConfig+0x24a>
 8007200:	4b0c      	ldr	r3, [pc, #48]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a0b      	ldr	r2, [pc, #44]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	e026      	b.n	800725c <HAL_RCC_OscConfig+0x298>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007216:	d115      	bne.n	8007244 <HAL_RCC_OscConfig+0x280>
 8007218:	4b06      	ldr	r3, [pc, #24]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a05      	ldr	r2, [pc, #20]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800721e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007222:	6013      	str	r3, [r2, #0]
 8007224:	4b03      	ldr	r3, [pc, #12]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a02      	ldr	r2, [pc, #8]	; (8007234 <HAL_RCC_OscConfig+0x270>)
 800722a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	e014      	b.n	800725c <HAL_RCC_OscConfig+0x298>
 8007232:	bf00      	nop
 8007234:	40021000 	.word	0x40021000
 8007238:	0801291c 	.word	0x0801291c
 800723c:	20000020 	.word	0x20000020
 8007240:	20000024 	.word	0x20000024
 8007244:	4ba0      	ldr	r3, [pc, #640]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a9f      	ldr	r2, [pc, #636]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 800724a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	4b9d      	ldr	r3, [pc, #628]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a9c      	ldr	r2, [pc, #624]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 8007256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800725a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d013      	beq.n	800728c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007264:	f7fc fa7c 	bl	8003760 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800726c:	f7fc fa78 	bl	8003760 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b64      	cmp	r3, #100	; 0x64
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e276      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800727e:	4b92      	ldr	r3, [pc, #584]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f0      	beq.n	800726c <HAL_RCC_OscConfig+0x2a8>
 800728a:	e014      	b.n	80072b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728c:	f7fc fa68 	bl	8003760 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007294:	f7fc fa64 	bl	8003760 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b64      	cmp	r3, #100	; 0x64
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e262      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072a6:	4b88      	ldr	r3, [pc, #544]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1f0      	bne.n	8007294 <HAL_RCC_OscConfig+0x2d0>
 80072b2:	e000      	b.n	80072b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d060      	beq.n	8007384 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d005      	beq.n	80072d4 <HAL_RCC_OscConfig+0x310>
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	2b0c      	cmp	r3, #12
 80072cc:	d119      	bne.n	8007302 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d116      	bne.n	8007302 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072d4:	4b7c      	ldr	r3, [pc, #496]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <HAL_RCC_OscConfig+0x328>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e23f      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ec:	4b76      	ldr	r3, [pc, #472]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	061b      	lsls	r3, r3, #24
 80072fa:	4973      	ldr	r1, [pc, #460]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007300:	e040      	b.n	8007384 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d023      	beq.n	8007352 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800730a:	4b6f      	ldr	r3, [pc, #444]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a6e      	ldr	r2, [pc, #440]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 8007310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007316:	f7fc fa23 	bl	8003760 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800731c:	e008      	b.n	8007330 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800731e:	f7fc fa1f 	bl	8003760 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e21d      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007330:	4b65      	ldr	r3, [pc, #404]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0f0      	beq.n	800731e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800733c:	4b62      	ldr	r3, [pc, #392]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	061b      	lsls	r3, r3, #24
 800734a:	495f      	ldr	r1, [pc, #380]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 800734c:	4313      	orrs	r3, r2
 800734e:	604b      	str	r3, [r1, #4]
 8007350:	e018      	b.n	8007384 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007352:	4b5d      	ldr	r3, [pc, #372]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a5c      	ldr	r2, [pc, #368]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 8007358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800735c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800735e:	f7fc f9ff 	bl	8003760 <HAL_GetTick>
 8007362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007366:	f7fc f9fb 	bl	8003760 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e1f9      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007378:	4b53      	ldr	r3, [pc, #332]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f0      	bne.n	8007366 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b00      	cmp	r3, #0
 800738e:	d03c      	beq.n	800740a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01c      	beq.n	80073d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007398:	4b4b      	ldr	r3, [pc, #300]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 800739a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800739e:	4a4a      	ldr	r2, [pc, #296]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80073a0:	f043 0301 	orr.w	r3, r3, #1
 80073a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a8:	f7fc f9da 	bl	8003760 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073b0:	f7fc f9d6 	bl	8003760 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e1d4      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073c2:	4b41      	ldr	r3, [pc, #260]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80073c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0ef      	beq.n	80073b0 <HAL_RCC_OscConfig+0x3ec>
 80073d0:	e01b      	b.n	800740a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073d2:	4b3d      	ldr	r3, [pc, #244]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80073d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d8:	4a3b      	ldr	r2, [pc, #236]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80073da:	f023 0301 	bic.w	r3, r3, #1
 80073de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e2:	f7fc f9bd 	bl	8003760 <HAL_GetTick>
 80073e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073e8:	e008      	b.n	80073fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073ea:	f7fc f9b9 	bl	8003760 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e1b7      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073fc:	4b32      	ldr	r3, [pc, #200]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80073fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1ef      	bne.n	80073ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 80a6 	beq.w	8007564 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007418:	2300      	movs	r3, #0
 800741a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800741c:	4b2a      	ldr	r3, [pc, #168]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 800741e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10d      	bne.n	8007444 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007428:	4b27      	ldr	r3, [pc, #156]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742c:	4a26      	ldr	r2, [pc, #152]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 800742e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007432:	6593      	str	r3, [r2, #88]	; 0x58
 8007434:	4b24      	ldr	r3, [pc, #144]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 8007436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743c:	60bb      	str	r3, [r7, #8]
 800743e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007440:	2301      	movs	r3, #1
 8007442:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007444:	4b21      	ldr	r3, [pc, #132]	; (80074cc <HAL_RCC_OscConfig+0x508>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744c:	2b00      	cmp	r3, #0
 800744e:	d118      	bne.n	8007482 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007450:	4b1e      	ldr	r3, [pc, #120]	; (80074cc <HAL_RCC_OscConfig+0x508>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1d      	ldr	r2, [pc, #116]	; (80074cc <HAL_RCC_OscConfig+0x508>)
 8007456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800745a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800745c:	f7fc f980 	bl	8003760 <HAL_GetTick>
 8007460:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007462:	e008      	b.n	8007476 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007464:	f7fc f97c 	bl	8003760 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e17a      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007476:	4b15      	ldr	r3, [pc, #84]	; (80074cc <HAL_RCC_OscConfig+0x508>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0f0      	beq.n	8007464 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d108      	bne.n	800749c <HAL_RCC_OscConfig+0x4d8>
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 800748c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007490:	4a0d      	ldr	r2, [pc, #52]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 8007492:	f043 0301 	orr.w	r3, r3, #1
 8007496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800749a:	e029      	b.n	80074f0 <HAL_RCC_OscConfig+0x52c>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b05      	cmp	r3, #5
 80074a2:	d115      	bne.n	80074d0 <HAL_RCC_OscConfig+0x50c>
 80074a4:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80074a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074aa:	4a07      	ldr	r2, [pc, #28]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80074ac:	f043 0304 	orr.w	r3, r3, #4
 80074b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074b4:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ba:	4a03      	ldr	r2, [pc, #12]	; (80074c8 <HAL_RCC_OscConfig+0x504>)
 80074bc:	f043 0301 	orr.w	r3, r3, #1
 80074c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074c4:	e014      	b.n	80074f0 <HAL_RCC_OscConfig+0x52c>
 80074c6:	bf00      	nop
 80074c8:	40021000 	.word	0x40021000
 80074cc:	40007000 	.word	0x40007000
 80074d0:	4b9c      	ldr	r3, [pc, #624]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d6:	4a9b      	ldr	r2, [pc, #620]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 80074d8:	f023 0301 	bic.w	r3, r3, #1
 80074dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074e0:	4b98      	ldr	r3, [pc, #608]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e6:	4a97      	ldr	r2, [pc, #604]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 80074e8:	f023 0304 	bic.w	r3, r3, #4
 80074ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d016      	beq.n	8007526 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f8:	f7fc f932 	bl	8003760 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074fe:	e00a      	b.n	8007516 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007500:	f7fc f92e 	bl	8003760 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	f241 3288 	movw	r2, #5000	; 0x1388
 800750e:	4293      	cmp	r3, r2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e12a      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007516:	4b8b      	ldr	r3, [pc, #556]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 8007518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0ed      	beq.n	8007500 <HAL_RCC_OscConfig+0x53c>
 8007524:	e015      	b.n	8007552 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007526:	f7fc f91b 	bl	8003760 <HAL_GetTick>
 800752a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800752c:	e00a      	b.n	8007544 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800752e:	f7fc f917 	bl	8003760 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	f241 3288 	movw	r2, #5000	; 0x1388
 800753c:	4293      	cmp	r3, r2
 800753e:	d901      	bls.n	8007544 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e113      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007544:	4b7f      	ldr	r3, [pc, #508]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 8007546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1ed      	bne.n	800752e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007552:	7ffb      	ldrb	r3, [r7, #31]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d105      	bne.n	8007564 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007558:	4b7a      	ldr	r3, [pc, #488]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 800755a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755c:	4a79      	ldr	r2, [pc, #484]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 800755e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007562:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 80fe 	beq.w	800776a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007572:	2b02      	cmp	r3, #2
 8007574:	f040 80d0 	bne.w	8007718 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007578:	4b72      	ldr	r3, [pc, #456]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f003 0203 	and.w	r2, r3, #3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	429a      	cmp	r2, r3
 800758a:	d130      	bne.n	80075ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007596:	3b01      	subs	r3, #1
 8007598:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800759a:	429a      	cmp	r2, r3
 800759c:	d127      	bne.n	80075ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d11f      	bne.n	80075ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075b8:	2a07      	cmp	r2, #7
 80075ba:	bf14      	ite	ne
 80075bc:	2201      	movne	r2, #1
 80075be:	2200      	moveq	r2, #0
 80075c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d113      	bne.n	80075ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d0:	085b      	lsrs	r3, r3, #1
 80075d2:	3b01      	subs	r3, #1
 80075d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d109      	bne.n	80075ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	085b      	lsrs	r3, r3, #1
 80075e6:	3b01      	subs	r3, #1
 80075e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d06e      	beq.n	80076cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b0c      	cmp	r3, #12
 80075f2:	d069      	beq.n	80076c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80075f4:	4b53      	ldr	r3, [pc, #332]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d105      	bne.n	800760c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007600:	4b50      	ldr	r3, [pc, #320]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e0ad      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007610:	4b4c      	ldr	r3, [pc, #304]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a4b      	ldr	r2, [pc, #300]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 8007616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800761a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800761c:	f7fc f8a0 	bl	8003760 <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007624:	f7fc f89c 	bl	8003760 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e09a      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007636:	4b43      	ldr	r3, [pc, #268]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f0      	bne.n	8007624 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007642:	4b40      	ldr	r3, [pc, #256]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	4b40      	ldr	r3, [pc, #256]	; (8007748 <HAL_RCC_OscConfig+0x784>)
 8007648:	4013      	ands	r3, r2
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007652:	3a01      	subs	r2, #1
 8007654:	0112      	lsls	r2, r2, #4
 8007656:	4311      	orrs	r1, r2
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800765c:	0212      	lsls	r2, r2, #8
 800765e:	4311      	orrs	r1, r2
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007664:	0852      	lsrs	r2, r2, #1
 8007666:	3a01      	subs	r2, #1
 8007668:	0552      	lsls	r2, r2, #21
 800766a:	4311      	orrs	r1, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007670:	0852      	lsrs	r2, r2, #1
 8007672:	3a01      	subs	r2, #1
 8007674:	0652      	lsls	r2, r2, #25
 8007676:	4311      	orrs	r1, r2
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800767c:	0912      	lsrs	r2, r2, #4
 800767e:	0452      	lsls	r2, r2, #17
 8007680:	430a      	orrs	r2, r1
 8007682:	4930      	ldr	r1, [pc, #192]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 8007684:	4313      	orrs	r3, r2
 8007686:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007688:	4b2e      	ldr	r3, [pc, #184]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a2d      	ldr	r2, [pc, #180]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 800768e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007692:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007694:	4b2b      	ldr	r3, [pc, #172]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	4a2a      	ldr	r2, [pc, #168]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 800769a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800769e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80076a0:	f7fc f85e 	bl	8003760 <HAL_GetTick>
 80076a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076a6:	e008      	b.n	80076ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076a8:	f7fc f85a 	bl	8003760 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e058      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076ba:	4b22      	ldr	r3, [pc, #136]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0f0      	beq.n	80076a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80076c6:	e050      	b.n	800776a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e04f      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076cc:	4b1d      	ldr	r3, [pc, #116]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d148      	bne.n	800776a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80076d8:	4b1a      	ldr	r3, [pc, #104]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a19      	ldr	r2, [pc, #100]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 80076de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076e4:	4b17      	ldr	r3, [pc, #92]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	4a16      	ldr	r2, [pc, #88]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 80076ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076f0:	f7fc f836 	bl	8003760 <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076f6:	e008      	b.n	800770a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f8:	f7fc f832 	bl	8003760 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e030      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800770a:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0f0      	beq.n	80076f8 <HAL_RCC_OscConfig+0x734>
 8007716:	e028      	b.n	800776a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	2b0c      	cmp	r3, #12
 800771c:	d023      	beq.n	8007766 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800771e:	4b09      	ldr	r3, [pc, #36]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a08      	ldr	r2, [pc, #32]	; (8007744 <HAL_RCC_OscConfig+0x780>)
 8007724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772a:	f7fc f819 	bl	8003760 <HAL_GetTick>
 800772e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007730:	e00c      	b.n	800774c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007732:	f7fc f815 	bl	8003760 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d905      	bls.n	800774c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e013      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
 8007744:	40021000 	.word	0x40021000
 8007748:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <HAL_RCC_OscConfig+0x7b0>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1ec      	bne.n	8007732 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <HAL_RCC_OscConfig+0x7b0>)
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	4905      	ldr	r1, [pc, #20]	; (8007774 <HAL_RCC_OscConfig+0x7b0>)
 800775e:	4b06      	ldr	r3, [pc, #24]	; (8007778 <HAL_RCC_OscConfig+0x7b4>)
 8007760:	4013      	ands	r3, r2
 8007762:	60cb      	str	r3, [r1, #12]
 8007764:	e001      	b.n	800776a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e000      	b.n	800776c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	40021000 	.word	0x40021000
 8007778:	feeefffc 	.word	0xfeeefffc

0800777c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e0e7      	b.n	8007960 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007790:	4b75      	ldr	r3, [pc, #468]	; (8007968 <HAL_RCC_ClockConfig+0x1ec>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	d910      	bls.n	80077c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800779e:	4b72      	ldr	r3, [pc, #456]	; (8007968 <HAL_RCC_ClockConfig+0x1ec>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f023 0207 	bic.w	r2, r3, #7
 80077a6:	4970      	ldr	r1, [pc, #448]	; (8007968 <HAL_RCC_ClockConfig+0x1ec>)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ae:	4b6e      	ldr	r3, [pc, #440]	; (8007968 <HAL_RCC_ClockConfig+0x1ec>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d001      	beq.n	80077c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e0cf      	b.n	8007960 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d010      	beq.n	80077ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	4b66      	ldr	r3, [pc, #408]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077d8:	429a      	cmp	r2, r3
 80077da:	d908      	bls.n	80077ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077dc:	4b63      	ldr	r3, [pc, #396]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	4960      	ldr	r1, [pc, #384]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d04c      	beq.n	8007894 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d107      	bne.n	8007812 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007802:	4b5a      	ldr	r3, [pc, #360]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d121      	bne.n	8007852 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e0a6      	b.n	8007960 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d107      	bne.n	800782a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800781a:	4b54      	ldr	r3, [pc, #336]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d115      	bne.n	8007852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e09a      	b.n	8007960 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d107      	bne.n	8007842 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007832:	4b4e      	ldr	r3, [pc, #312]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d109      	bne.n	8007852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e08e      	b.n	8007960 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007842:	4b4a      	ldr	r3, [pc, #296]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e086      	b.n	8007960 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007852:	4b46      	ldr	r3, [pc, #280]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f023 0203 	bic.w	r2, r3, #3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	4943      	ldr	r1, [pc, #268]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 8007860:	4313      	orrs	r3, r2
 8007862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007864:	f7fb ff7c 	bl	8003760 <HAL_GetTick>
 8007868:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800786a:	e00a      	b.n	8007882 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800786c:	f7fb ff78 	bl	8003760 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	f241 3288 	movw	r2, #5000	; 0x1388
 800787a:	4293      	cmp	r3, r2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e06e      	b.n	8007960 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007882:	4b3a      	ldr	r3, [pc, #232]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f003 020c 	and.w	r2, r3, #12
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	429a      	cmp	r2, r3
 8007892:	d1eb      	bne.n	800786c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d010      	beq.n	80078c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	4b31      	ldr	r3, [pc, #196]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d208      	bcs.n	80078c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078b0:	4b2e      	ldr	r3, [pc, #184]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	492b      	ldr	r1, [pc, #172]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078c2:	4b29      	ldr	r3, [pc, #164]	; (8007968 <HAL_RCC_ClockConfig+0x1ec>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d210      	bcs.n	80078f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d0:	4b25      	ldr	r3, [pc, #148]	; (8007968 <HAL_RCC_ClockConfig+0x1ec>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f023 0207 	bic.w	r2, r3, #7
 80078d8:	4923      	ldr	r1, [pc, #140]	; (8007968 <HAL_RCC_ClockConfig+0x1ec>)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e0:	4b21      	ldr	r3, [pc, #132]	; (8007968 <HAL_RCC_ClockConfig+0x1ec>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d001      	beq.n	80078f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e036      	b.n	8007960 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d008      	beq.n	8007910 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078fe:	4b1b      	ldr	r3, [pc, #108]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	4918      	ldr	r1, [pc, #96]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 800790c:	4313      	orrs	r3, r2
 800790e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800791c:	4b13      	ldr	r3, [pc, #76]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	4910      	ldr	r1, [pc, #64]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 800792c:	4313      	orrs	r3, r2
 800792e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007930:	f000 f824 	bl	800797c <HAL_RCC_GetSysClockFreq>
 8007934:	4602      	mov	r2, r0
 8007936:	4b0d      	ldr	r3, [pc, #52]	; (800796c <HAL_RCC_ClockConfig+0x1f0>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	091b      	lsrs	r3, r3, #4
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	490b      	ldr	r1, [pc, #44]	; (8007970 <HAL_RCC_ClockConfig+0x1f4>)
 8007942:	5ccb      	ldrb	r3, [r1, r3]
 8007944:	f003 031f 	and.w	r3, r3, #31
 8007948:	fa22 f303 	lsr.w	r3, r2, r3
 800794c:	4a09      	ldr	r2, [pc, #36]	; (8007974 <HAL_RCC_ClockConfig+0x1f8>)
 800794e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007950:	4b09      	ldr	r3, [pc, #36]	; (8007978 <HAL_RCC_ClockConfig+0x1fc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f7fa f8b5 	bl	8001ac4 <HAL_InitTick>
 800795a:	4603      	mov	r3, r0
 800795c:	72fb      	strb	r3, [r7, #11]

  return status;
 800795e:	7afb      	ldrb	r3, [r7, #11]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40022000 	.word	0x40022000
 800796c:	40021000 	.word	0x40021000
 8007970:	0801291c 	.word	0x0801291c
 8007974:	20000020 	.word	0x20000020
 8007978:	20000024 	.word	0x20000024

0800797c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800797c:	b480      	push	{r7}
 800797e:	b089      	sub	sp, #36	; 0x24
 8007980:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	61fb      	str	r3, [r7, #28]
 8007986:	2300      	movs	r3, #0
 8007988:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800798a:	4b3e      	ldr	r3, [pc, #248]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x108>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 030c 	and.w	r3, r3, #12
 8007992:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007994:	4b3b      	ldr	r3, [pc, #236]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f003 0303 	and.w	r3, r3, #3
 800799c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <HAL_RCC_GetSysClockFreq+0x34>
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	2b0c      	cmp	r3, #12
 80079a8:	d121      	bne.n	80079ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d11e      	bne.n	80079ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80079b0:	4b34      	ldr	r3, [pc, #208]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0308 	and.w	r3, r3, #8
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d107      	bne.n	80079cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80079bc:	4b31      	ldr	r3, [pc, #196]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80079be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079c2:	0a1b      	lsrs	r3, r3, #8
 80079c4:	f003 030f 	and.w	r3, r3, #15
 80079c8:	61fb      	str	r3, [r7, #28]
 80079ca:	e005      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80079cc:	4b2d      	ldr	r3, [pc, #180]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	091b      	lsrs	r3, r3, #4
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80079d8:	4a2b      	ldr	r2, [pc, #172]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x10c>)
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10d      	bne.n	8007a04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079ec:	e00a      	b.n	8007a04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d102      	bne.n	80079fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80079f4:	4b25      	ldr	r3, [pc, #148]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x110>)
 80079f6:	61bb      	str	r3, [r7, #24]
 80079f8:	e004      	b.n	8007a04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d101      	bne.n	8007a04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007a00:	4b23      	ldr	r3, [pc, #140]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8007a02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	2b0c      	cmp	r3, #12
 8007a08:	d134      	bne.n	8007a74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a0a:	4b1e      	ldr	r3, [pc, #120]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d003      	beq.n	8007a22 <HAL_RCC_GetSysClockFreq+0xa6>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d003      	beq.n	8007a28 <HAL_RCC_GetSysClockFreq+0xac>
 8007a20:	e005      	b.n	8007a2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007a22:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x110>)
 8007a24:	617b      	str	r3, [r7, #20]
      break;
 8007a26:	e005      	b.n	8007a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007a28:	4b19      	ldr	r3, [pc, #100]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8007a2a:	617b      	str	r3, [r7, #20]
      break;
 8007a2c:	e002      	b.n	8007a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	617b      	str	r3, [r7, #20]
      break;
 8007a32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a34:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	091b      	lsrs	r3, r3, #4
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	3301      	adds	r3, #1
 8007a40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007a42:	4b10      	ldr	r3, [pc, #64]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	0a1b      	lsrs	r3, r3, #8
 8007a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	fb03 f202 	mul.w	r2, r3, r2
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a5a:	4b0a      	ldr	r3, [pc, #40]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	0e5b      	lsrs	r3, r3, #25
 8007a60:	f003 0303 	and.w	r3, r3, #3
 8007a64:	3301      	adds	r3, #1
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007a74:	69bb      	ldr	r3, [r7, #24]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3724      	adds	r7, #36	; 0x24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	40021000 	.word	0x40021000
 8007a88:	08012934 	.word	0x08012934
 8007a8c:	00f42400 	.word	0x00f42400
 8007a90:	007a1200 	.word	0x007a1200

08007a94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a98:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	20000020 	.word	0x20000020

08007aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ab0:	f7ff fff0 	bl	8007a94 <HAL_RCC_GetHCLKFreq>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	0a1b      	lsrs	r3, r3, #8
 8007abc:	f003 0307 	and.w	r3, r3, #7
 8007ac0:	4904      	ldr	r1, [pc, #16]	; (8007ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ac2:	5ccb      	ldrb	r3, [r1, r3]
 8007ac4:	f003 031f 	and.w	r3, r3, #31
 8007ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	40021000 	.word	0x40021000
 8007ad4:	0801292c 	.word	0x0801292c

08007ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007adc:	f7ff ffda 	bl	8007a94 <HAL_RCC_GetHCLKFreq>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	4b06      	ldr	r3, [pc, #24]	; (8007afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	0adb      	lsrs	r3, r3, #11
 8007ae8:	f003 0307 	and.w	r3, r3, #7
 8007aec:	4904      	ldr	r1, [pc, #16]	; (8007b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007aee:	5ccb      	ldrb	r3, [r1, r3]
 8007af0:	f003 031f 	and.w	r3, r3, #31
 8007af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40021000 	.word	0x40021000
 8007b00:	0801292c 	.word	0x0801292c

08007b04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	220f      	movs	r2, #15
 8007b12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007b14:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f003 0203 	and.w	r2, r3, #3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007b20:	4b0f      	ldr	r3, [pc, #60]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007b38:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <HAL_RCC_GetClockConfig+0x5c>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	08db      	lsrs	r3, r3, #3
 8007b3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007b46:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <HAL_RCC_GetClockConfig+0x60>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0207 	and.w	r2, r3, #7
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	601a      	str	r2, [r3, #0]
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40021000 	.word	0x40021000
 8007b64:	40022000 	.word	0x40022000

08007b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007b70:	2300      	movs	r3, #0
 8007b72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b74:	4b2a      	ldr	r3, [pc, #168]	; (8007c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b80:	f7ff f8f0 	bl	8006d64 <HAL_PWREx_GetVoltageRange>
 8007b84:	6178      	str	r0, [r7, #20]
 8007b86:	e014      	b.n	8007bb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b88:	4b25      	ldr	r3, [pc, #148]	; (8007c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8c:	4a24      	ldr	r2, [pc, #144]	; (8007c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b92:	6593      	str	r3, [r2, #88]	; 0x58
 8007b94:	4b22      	ldr	r3, [pc, #136]	; (8007c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007ba0:	f7ff f8e0 	bl	8006d64 <HAL_PWREx_GetVoltageRange>
 8007ba4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007ba6:	4b1e      	ldr	r3, [pc, #120]	; (8007c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007baa:	4a1d      	ldr	r2, [pc, #116]	; (8007c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb8:	d10b      	bne.n	8007bd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b80      	cmp	r3, #128	; 0x80
 8007bbe:	d919      	bls.n	8007bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2ba0      	cmp	r3, #160	; 0xa0
 8007bc4:	d902      	bls.n	8007bcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	613b      	str	r3, [r7, #16]
 8007bca:	e013      	b.n	8007bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007bcc:	2301      	movs	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	e010      	b.n	8007bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b80      	cmp	r3, #128	; 0x80
 8007bd6:	d902      	bls.n	8007bde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007bd8:	2303      	movs	r3, #3
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	e00a      	b.n	8007bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b80      	cmp	r3, #128	; 0x80
 8007be2:	d102      	bne.n	8007bea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007be4:	2302      	movs	r3, #2
 8007be6:	613b      	str	r3, [r7, #16]
 8007be8:	e004      	b.n	8007bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b70      	cmp	r3, #112	; 0x70
 8007bee:	d101      	bne.n	8007bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007bf4:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f023 0207 	bic.w	r2, r3, #7
 8007bfc:	4909      	ldr	r1, [pc, #36]	; (8007c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007c04:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d001      	beq.n	8007c16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e000      	b.n	8007c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	40021000 	.word	0x40021000
 8007c24:	40022000 	.word	0x40022000

08007c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c30:	2300      	movs	r3, #0
 8007c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c34:	2300      	movs	r3, #0
 8007c36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d041      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007c4c:	d02a      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007c4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007c52:	d824      	bhi.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007c54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c58:	d008      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007c5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c5e:	d81e      	bhi.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00a      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c68:	d010      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007c6a:	e018      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007c6c:	4b86      	ldr	r3, [pc, #536]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	4a85      	ldr	r2, [pc, #532]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c78:	e015      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 facb 	bl	800821c <RCCEx_PLLSAI1_Config>
 8007c86:	4603      	mov	r3, r0
 8007c88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c8a:	e00c      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3320      	adds	r3, #32
 8007c90:	2100      	movs	r1, #0
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fbb6 	bl	8008404 <RCCEx_PLLSAI2_Config>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c9c:	e003      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8007ca2:	e000      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ca6:	7cfb      	ldrb	r3, [r7, #19]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10b      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cac:	4b76      	ldr	r3, [pc, #472]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cba:	4973      	ldr	r1, [pc, #460]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007cc2:	e001      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc4:	7cfb      	ldrb	r3, [r7, #19]
 8007cc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d041      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007cdc:	d02a      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007cde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ce2:	d824      	bhi.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ce8:	d008      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007cea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cee:	d81e      	bhi.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cf8:	d010      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007cfa:	e018      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007cfc:	4b62      	ldr	r3, [pc, #392]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	4a61      	ldr	r2, [pc, #388]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007d08:	e015      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	2100      	movs	r1, #0
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fa83 	bl	800821c <RCCEx_PLLSAI1_Config>
 8007d16:	4603      	mov	r3, r0
 8007d18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007d1a:	e00c      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	3320      	adds	r3, #32
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fb6e 	bl	8008404 <RCCEx_PLLSAI2_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007d2c:	e003      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	74fb      	strb	r3, [r7, #19]
      break;
 8007d32:	e000      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d36:	7cfb      	ldrb	r3, [r7, #19]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10b      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007d3c:	4b52      	ldr	r3, [pc, #328]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d4a:	494f      	ldr	r1, [pc, #316]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007d52:	e001      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d54:	7cfb      	ldrb	r3, [r7, #19]
 8007d56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 80a0 	beq.w	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d66:	2300      	movs	r3, #0
 8007d68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007d6a:	4b47      	ldr	r3, [pc, #284]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e000      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00d      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d80:	4b41      	ldr	r3, [pc, #260]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d84:	4a40      	ldr	r2, [pc, #256]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d8c:	4b3e      	ldr	r3, [pc, #248]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d94:	60bb      	str	r3, [r7, #8]
 8007d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d9c:	4b3b      	ldr	r3, [pc, #236]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a3a      	ldr	r2, [pc, #232]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007da6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007da8:	f7fb fcda 	bl	8003760 <HAL_GetTick>
 8007dac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007dae:	e009      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007db0:	f7fb fcd6 	bl	8003760 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d902      	bls.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	74fb      	strb	r3, [r7, #19]
        break;
 8007dc2:	e005      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007dc4:	4b31      	ldr	r3, [pc, #196]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0ef      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007dd0:	7cfb      	ldrb	r3, [r7, #19]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d15c      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007dd6:	4b2c      	ldr	r3, [pc, #176]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01f      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d019      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007df4:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e00:	4b21      	ldr	r3, [pc, #132]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e06:	4a20      	ldr	r2, [pc, #128]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e10:	4b1d      	ldr	r3, [pc, #116]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e16:	4a1c      	ldr	r2, [pc, #112]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e20:	4a19      	ldr	r2, [pc, #100]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d016      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e32:	f7fb fc95 	bl	8003760 <HAL_GetTick>
 8007e36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e38:	e00b      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e3a:	f7fb fc91 	bl	8003760 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d902      	bls.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	74fb      	strb	r3, [r7, #19]
            break;
 8007e50:	e006      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e52:	4b0d      	ldr	r3, [pc, #52]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0ec      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007e60:	7cfb      	ldrb	r3, [r7, #19]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10c      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e66:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e76:	4904      	ldr	r1, [pc, #16]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007e7e:	e009      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e80:	7cfb      	ldrb	r3, [r7, #19]
 8007e82:	74bb      	strb	r3, [r7, #18]
 8007e84:	e006      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007e86:	bf00      	nop
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e90:	7cfb      	ldrb	r3, [r7, #19]
 8007e92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e94:	7c7b      	ldrb	r3, [r7, #17]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d105      	bne.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e9a:	4b9e      	ldr	r3, [pc, #632]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9e:	4a9d      	ldr	r2, [pc, #628]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ea4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00a      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007eb2:	4b98      	ldr	r3, [pc, #608]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb8:	f023 0203 	bic.w	r2, r3, #3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	4994      	ldr	r1, [pc, #592]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00a      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ed4:	4b8f      	ldr	r3, [pc, #572]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eda:	f023 020c 	bic.w	r2, r3, #12
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee2:	498c      	ldr	r1, [pc, #560]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ef6:	4b87      	ldr	r3, [pc, #540]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	4983      	ldr	r1, [pc, #524]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f18:	4b7e      	ldr	r3, [pc, #504]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	497b      	ldr	r1, [pc, #492]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0310 	and.w	r3, r3, #16
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f3a:	4b76      	ldr	r3, [pc, #472]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f48:	4972      	ldr	r1, [pc, #456]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f5c:	4b6d      	ldr	r3, [pc, #436]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6a:	496a      	ldr	r1, [pc, #424]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f7e:	4b65      	ldr	r3, [pc, #404]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f8c:	4961      	ldr	r1, [pc, #388]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007fa0:	4b5c      	ldr	r3, [pc, #368]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fae:	4959      	ldr	r1, [pc, #356]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007fc2:	4b54      	ldr	r3, [pc, #336]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd0:	4950      	ldr	r1, [pc, #320]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00a      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007fe4:	4b4b      	ldr	r3, [pc, #300]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff2:	4948      	ldr	r1, [pc, #288]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008006:	4b43      	ldr	r3, [pc, #268]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008014:	493f      	ldr	r1, [pc, #252]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008016:	4313      	orrs	r3, r2
 8008018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d028      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008028:	4b3a      	ldr	r3, [pc, #232]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800802a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800802e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008036:	4937      	ldr	r1, [pc, #220]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008038:	4313      	orrs	r3, r2
 800803a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008046:	d106      	bne.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008048:	4b32      	ldr	r3, [pc, #200]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	4a31      	ldr	r2, [pc, #196]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800804e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008052:	60d3      	str	r3, [r2, #12]
 8008054:	e011      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800805a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800805e:	d10c      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3304      	adds	r3, #4
 8008064:	2101      	movs	r1, #1
 8008066:	4618      	mov	r0, r3
 8008068:	f000 f8d8 	bl	800821c <RCCEx_PLLSAI1_Config>
 800806c:	4603      	mov	r3, r0
 800806e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008070:	7cfb      	ldrb	r3, [r7, #19]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008076:	7cfb      	ldrb	r3, [r7, #19]
 8008078:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d028      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008086:	4b23      	ldr	r3, [pc, #140]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008094:	491f      	ldr	r1, [pc, #124]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008096:	4313      	orrs	r3, r2
 8008098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080a4:	d106      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080a6:	4b1b      	ldr	r3, [pc, #108]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	4a1a      	ldr	r2, [pc, #104]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080b0:	60d3      	str	r3, [r2, #12]
 80080b2:	e011      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080bc:	d10c      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3304      	adds	r3, #4
 80080c2:	2101      	movs	r1, #1
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f8a9 	bl	800821c <RCCEx_PLLSAI1_Config>
 80080ca:	4603      	mov	r3, r0
 80080cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80080ce:	7cfb      	ldrb	r3, [r7, #19]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80080d4:	7cfb      	ldrb	r3, [r7, #19]
 80080d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d02b      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080e4:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f2:	4908      	ldr	r1, [pc, #32]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008102:	d109      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008104:	4b03      	ldr	r3, [pc, #12]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	4a02      	ldr	r2, [pc, #8]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800810a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800810e:	60d3      	str	r3, [r2, #12]
 8008110:	e014      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008112:	bf00      	nop
 8008114:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800811c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008120:	d10c      	bne.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3304      	adds	r3, #4
 8008126:	2101      	movs	r1, #1
 8008128:	4618      	mov	r0, r3
 800812a:	f000 f877 	bl	800821c <RCCEx_PLLSAI1_Config>
 800812e:	4603      	mov	r3, r0
 8008130:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008132:	7cfb      	ldrb	r3, [r7, #19]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008138:	7cfb      	ldrb	r3, [r7, #19]
 800813a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d02f      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008148:	4b2b      	ldr	r3, [pc, #172]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800814a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008156:	4928      	ldr	r1, [pc, #160]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008158:	4313      	orrs	r3, r2
 800815a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008166:	d10d      	bne.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3304      	adds	r3, #4
 800816c:	2102      	movs	r1, #2
 800816e:	4618      	mov	r0, r3
 8008170:	f000 f854 	bl	800821c <RCCEx_PLLSAI1_Config>
 8008174:	4603      	mov	r3, r0
 8008176:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008178:	7cfb      	ldrb	r3, [r7, #19]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d014      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800817e:	7cfb      	ldrb	r3, [r7, #19]
 8008180:	74bb      	strb	r3, [r7, #18]
 8008182:	e011      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800818c:	d10c      	bne.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3320      	adds	r3, #32
 8008192:	2102      	movs	r1, #2
 8008194:	4618      	mov	r0, r3
 8008196:	f000 f935 	bl	8008404 <RCCEx_PLLSAI2_Config>
 800819a:	4603      	mov	r3, r0
 800819c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800819e:	7cfb      	ldrb	r3, [r7, #19]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80081a4:	7cfb      	ldrb	r3, [r7, #19]
 80081a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80081b4:	4b10      	ldr	r3, [pc, #64]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081c2:	490d      	ldr	r1, [pc, #52]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80081d6:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80081d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081e6:	4904      	ldr	r1, [pc, #16]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80081ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	40021000 	.word	0x40021000

080081fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a04      	ldr	r2, [pc, #16]	; (8008218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008206:	f043 0304 	orr.w	r3, r3, #4
 800820a:	6013      	str	r3, [r2, #0]
}
 800820c:	bf00      	nop
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	40021000 	.word	0x40021000

0800821c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800822a:	4b75      	ldr	r3, [pc, #468]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d018      	beq.n	8008268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008236:	4b72      	ldr	r3, [pc, #456]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f003 0203 	and.w	r2, r3, #3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d10d      	bne.n	8008262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
       ||
 800824a:	2b00      	cmp	r3, #0
 800824c:	d009      	beq.n	8008262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800824e:	4b6c      	ldr	r3, [pc, #432]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	091b      	lsrs	r3, r3, #4
 8008254:	f003 0307 	and.w	r3, r3, #7
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
       ||
 800825e:	429a      	cmp	r2, r3
 8008260:	d047      	beq.n	80082f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	73fb      	strb	r3, [r7, #15]
 8008266:	e044      	b.n	80082f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b03      	cmp	r3, #3
 800826e:	d018      	beq.n	80082a2 <RCCEx_PLLSAI1_Config+0x86>
 8008270:	2b03      	cmp	r3, #3
 8008272:	d825      	bhi.n	80082c0 <RCCEx_PLLSAI1_Config+0xa4>
 8008274:	2b01      	cmp	r3, #1
 8008276:	d002      	beq.n	800827e <RCCEx_PLLSAI1_Config+0x62>
 8008278:	2b02      	cmp	r3, #2
 800827a:	d009      	beq.n	8008290 <RCCEx_PLLSAI1_Config+0x74>
 800827c:	e020      	b.n	80082c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800827e:	4b60      	ldr	r3, [pc, #384]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d11d      	bne.n	80082c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800828e:	e01a      	b.n	80082c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008290:	4b5b      	ldr	r3, [pc, #364]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008298:	2b00      	cmp	r3, #0
 800829a:	d116      	bne.n	80082ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082a0:	e013      	b.n	80082ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80082a2:	4b57      	ldr	r3, [pc, #348]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10f      	bne.n	80082ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80082ae:	4b54      	ldr	r3, [pc, #336]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082be:	e006      	b.n	80082ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
      break;
 80082c4:	e004      	b.n	80082d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80082c6:	bf00      	nop
 80082c8:	e002      	b.n	80082d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80082ca:	bf00      	nop
 80082cc:	e000      	b.n	80082d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80082ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10d      	bne.n	80082f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80082d6:	4b4a      	ldr	r3, [pc, #296]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6819      	ldr	r1, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	3b01      	subs	r3, #1
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	430b      	orrs	r3, r1
 80082ec:	4944      	ldr	r1, [pc, #272]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d17d      	bne.n	80083f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80082f8:	4b41      	ldr	r3, [pc, #260]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a40      	ldr	r2, [pc, #256]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008304:	f7fb fa2c 	bl	8003760 <HAL_GetTick>
 8008308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800830a:	e009      	b.n	8008320 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800830c:	f7fb fa28 	bl	8003760 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	2b02      	cmp	r3, #2
 8008318:	d902      	bls.n	8008320 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	73fb      	strb	r3, [r7, #15]
        break;
 800831e:	e005      	b.n	800832c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008320:	4b37      	ldr	r3, [pc, #220]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1ef      	bne.n	800830c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d160      	bne.n	80083f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d111      	bne.n	800835c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008338:	4b31      	ldr	r3, [pc, #196]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6892      	ldr	r2, [r2, #8]
 8008348:	0211      	lsls	r1, r2, #8
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	68d2      	ldr	r2, [r2, #12]
 800834e:	0912      	lsrs	r2, r2, #4
 8008350:	0452      	lsls	r2, r2, #17
 8008352:	430a      	orrs	r2, r1
 8008354:	492a      	ldr	r1, [pc, #168]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008356:	4313      	orrs	r3, r2
 8008358:	610b      	str	r3, [r1, #16]
 800835a:	e027      	b.n	80083ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d112      	bne.n	8008388 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008362:	4b27      	ldr	r3, [pc, #156]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800836a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6892      	ldr	r2, [r2, #8]
 8008372:	0211      	lsls	r1, r2, #8
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6912      	ldr	r2, [r2, #16]
 8008378:	0852      	lsrs	r2, r2, #1
 800837a:	3a01      	subs	r2, #1
 800837c:	0552      	lsls	r2, r2, #21
 800837e:	430a      	orrs	r2, r1
 8008380:	491f      	ldr	r1, [pc, #124]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008382:	4313      	orrs	r3, r2
 8008384:	610b      	str	r3, [r1, #16]
 8008386:	e011      	b.n	80083ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008388:	4b1d      	ldr	r3, [pc, #116]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008390:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6892      	ldr	r2, [r2, #8]
 8008398:	0211      	lsls	r1, r2, #8
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	6952      	ldr	r2, [r2, #20]
 800839e:	0852      	lsrs	r2, r2, #1
 80083a0:	3a01      	subs	r2, #1
 80083a2:	0652      	lsls	r2, r2, #25
 80083a4:	430a      	orrs	r2, r1
 80083a6:	4916      	ldr	r1, [pc, #88]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80083ac:	4b14      	ldr	r3, [pc, #80]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a13      	ldr	r2, [pc, #76]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b8:	f7fb f9d2 	bl	8003760 <HAL_GetTick>
 80083bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80083be:	e009      	b.n	80083d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083c0:	f7fb f9ce 	bl	8003760 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d902      	bls.n	80083d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	73fb      	strb	r3, [r7, #15]
          break;
 80083d2:	e005      	b.n	80083e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80083d4:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0ef      	beq.n	80083c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80083e6:	4b06      	ldr	r3, [pc, #24]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083e8:	691a      	ldr	r2, [r3, #16]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	4904      	ldr	r1, [pc, #16]	; (8008400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	40021000 	.word	0x40021000

08008404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008412:	4b6a      	ldr	r3, [pc, #424]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d018      	beq.n	8008450 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800841e:	4b67      	ldr	r3, [pc, #412]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f003 0203 	and.w	r2, r3, #3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	429a      	cmp	r2, r3
 800842c:	d10d      	bne.n	800844a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
       ||
 8008432:	2b00      	cmp	r3, #0
 8008434:	d009      	beq.n	800844a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008436:	4b61      	ldr	r3, [pc, #388]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	091b      	lsrs	r3, r3, #4
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
       ||
 8008446:	429a      	cmp	r2, r3
 8008448:	d047      	beq.n	80084da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	73fb      	strb	r3, [r7, #15]
 800844e:	e044      	b.n	80084da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b03      	cmp	r3, #3
 8008456:	d018      	beq.n	800848a <RCCEx_PLLSAI2_Config+0x86>
 8008458:	2b03      	cmp	r3, #3
 800845a:	d825      	bhi.n	80084a8 <RCCEx_PLLSAI2_Config+0xa4>
 800845c:	2b01      	cmp	r3, #1
 800845e:	d002      	beq.n	8008466 <RCCEx_PLLSAI2_Config+0x62>
 8008460:	2b02      	cmp	r3, #2
 8008462:	d009      	beq.n	8008478 <RCCEx_PLLSAI2_Config+0x74>
 8008464:	e020      	b.n	80084a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008466:	4b55      	ldr	r3, [pc, #340]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d11d      	bne.n	80084ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008476:	e01a      	b.n	80084ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008478:	4b50      	ldr	r3, [pc, #320]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008480:	2b00      	cmp	r3, #0
 8008482:	d116      	bne.n	80084b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008488:	e013      	b.n	80084b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800848a:	4b4c      	ldr	r3, [pc, #304]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10f      	bne.n	80084b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008496:	4b49      	ldr	r3, [pc, #292]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d109      	bne.n	80084b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084a6:	e006      	b.n	80084b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	73fb      	strb	r3, [r7, #15]
      break;
 80084ac:	e004      	b.n	80084b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80084ae:	bf00      	nop
 80084b0:	e002      	b.n	80084b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80084b2:	bf00      	nop
 80084b4:	e000      	b.n	80084b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80084b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10d      	bne.n	80084da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80084be:	4b3f      	ldr	r3, [pc, #252]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6819      	ldr	r1, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	430b      	orrs	r3, r1
 80084d4:	4939      	ldr	r1, [pc, #228]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d167      	bne.n	80085b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80084e0:	4b36      	ldr	r3, [pc, #216]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a35      	ldr	r2, [pc, #212]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80084e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ec:	f7fb f938 	bl	8003760 <HAL_GetTick>
 80084f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80084f2:	e009      	b.n	8008508 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80084f4:	f7fb f934 	bl	8003760 <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d902      	bls.n	8008508 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	73fb      	strb	r3, [r7, #15]
        break;
 8008506:	e005      	b.n	8008514 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008508:	4b2c      	ldr	r3, [pc, #176]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1ef      	bne.n	80084f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d14a      	bne.n	80085b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d111      	bne.n	8008544 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008520:	4b26      	ldr	r3, [pc, #152]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6892      	ldr	r2, [r2, #8]
 8008530:	0211      	lsls	r1, r2, #8
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	68d2      	ldr	r2, [r2, #12]
 8008536:	0912      	lsrs	r2, r2, #4
 8008538:	0452      	lsls	r2, r2, #17
 800853a:	430a      	orrs	r2, r1
 800853c:	491f      	ldr	r1, [pc, #124]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800853e:	4313      	orrs	r3, r2
 8008540:	614b      	str	r3, [r1, #20]
 8008542:	e011      	b.n	8008568 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008544:	4b1d      	ldr	r3, [pc, #116]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800854c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	6892      	ldr	r2, [r2, #8]
 8008554:	0211      	lsls	r1, r2, #8
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6912      	ldr	r2, [r2, #16]
 800855a:	0852      	lsrs	r2, r2, #1
 800855c:	3a01      	subs	r2, #1
 800855e:	0652      	lsls	r2, r2, #25
 8008560:	430a      	orrs	r2, r1
 8008562:	4916      	ldr	r1, [pc, #88]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008564:	4313      	orrs	r3, r2
 8008566:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008568:	4b14      	ldr	r3, [pc, #80]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a13      	ldr	r2, [pc, #76]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800856e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008574:	f7fb f8f4 	bl	8003760 <HAL_GetTick>
 8008578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800857a:	e009      	b.n	8008590 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800857c:	f7fb f8f0 	bl	8003760 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b02      	cmp	r3, #2
 8008588:	d902      	bls.n	8008590 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	73fb      	strb	r3, [r7, #15]
          break;
 800858e:	e005      	b.n	800859c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008590:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0ef      	beq.n	800857c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d106      	bne.n	80085b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80085a2:	4b06      	ldr	r3, [pc, #24]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80085a4:	695a      	ldr	r2, [r3, #20]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	4904      	ldr	r1, [pc, #16]	; (80085bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	40021000 	.word	0x40021000

080085c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e095      	b.n	80086fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d108      	bne.n	80085ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085e2:	d009      	beq.n	80085f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	61da      	str	r2, [r3, #28]
 80085ea:	e005      	b.n	80085f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7f9 f8a8 	bl	8001768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800862e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008638:	d902      	bls.n	8008640 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800863a:	2300      	movs	r3, #0
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	e002      	b.n	8008646 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008644:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800864e:	d007      	beq.n	8008660 <HAL_SPI_Init+0xa0>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008658:	d002      	beq.n	8008660 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008670:	431a      	orrs	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	431a      	orrs	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	431a      	orrs	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800868e:	431a      	orrs	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a2:	ea42 0103 	orr.w	r1, r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	0c1b      	lsrs	r3, r3, #16
 80086bc:	f003 0204 	and.w	r2, r3, #4
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	f003 0310 	and.w	r3, r3, #16
 80086c8:	431a      	orrs	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ce:	f003 0308 	and.w	r3, r3, #8
 80086d2:	431a      	orrs	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80086dc:	ea42 0103 	orr.w	r1, r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e01a      	b.n	800874e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2202      	movs	r2, #2
 800871c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800872e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7f9 f865 	bl	8001800 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b088      	sub	sp, #32
 800875a:	af02      	add	r7, sp, #8
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	603b      	str	r3, [r7, #0]
 8008762:	4613      	mov	r3, r2
 8008764:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008772:	d112      	bne.n	800879a <HAL_SPI_Receive+0x44>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10e      	bne.n	800879a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2204      	movs	r2, #4
 8008780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008784:	88fa      	ldrh	r2, [r7, #6]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	4613      	mov	r3, r2
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 f910 	bl	80089b6 <HAL_SPI_TransmitReceive>
 8008796:	4603      	mov	r3, r0
 8008798:	e109      	b.n	80089ae <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <HAL_SPI_Receive+0x52>
 80087a4:	2302      	movs	r3, #2
 80087a6:	e102      	b.n	80089ae <HAL_SPI_Receive+0x258>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087b0:	f7fa ffd6 	bl	8003760 <HAL_GetTick>
 80087b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d002      	beq.n	80087c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80087c2:	2302      	movs	r3, #2
 80087c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087c6:	e0e9      	b.n	800899c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d002      	beq.n	80087d4 <HAL_SPI_Receive+0x7e>
 80087ce:	88fb      	ldrh	r3, [r7, #6]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d102      	bne.n	80087da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087d8:	e0e0      	b.n	800899c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2204      	movs	r2, #4
 80087de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	88fa      	ldrh	r2, [r7, #6]
 80087f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	88fa      	ldrh	r2, [r7, #6]
 80087fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008824:	d908      	bls.n	8008838 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008834:	605a      	str	r2, [r3, #4]
 8008836:	e007      	b.n	8008848 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008846:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008850:	d10f      	bne.n	8008872 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008860:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008870:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887c:	2b40      	cmp	r3, #64	; 0x40
 800887e:	d007      	beq.n	8008890 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800888e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008898:	d867      	bhi.n	800896a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800889a:	e030      	b.n	80088fe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d117      	bne.n	80088da <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f103 020c 	add.w	r2, r3, #12
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	7812      	ldrb	r2, [r2, #0]
 80088b8:	b2d2      	uxtb	r2, r2
 80088ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	3b01      	subs	r3, #1
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80088d8:	e011      	b.n	80088fe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088da:	f7fa ff41 	bl	8003760 <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d803      	bhi.n	80088f2 <HAL_SPI_Receive+0x19c>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f0:	d102      	bne.n	80088f8 <HAL_SPI_Receive+0x1a2>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80088fc:	e04e      	b.n	800899c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008904:	b29b      	uxth	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1c8      	bne.n	800889c <HAL_SPI_Receive+0x146>
 800890a:	e034      	b.n	8008976 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b01      	cmp	r3, #1
 8008918:	d115      	bne.n	8008946 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008924:	b292      	uxth	r2, r2
 8008926:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892c:	1c9a      	adds	r2, r3, #2
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008938:	b29b      	uxth	r3, r3
 800893a:	3b01      	subs	r3, #1
 800893c:	b29a      	uxth	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008944:	e011      	b.n	800896a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008946:	f7fa ff0b 	bl	8003760 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	429a      	cmp	r2, r3
 8008954:	d803      	bhi.n	800895e <HAL_SPI_Receive+0x208>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d102      	bne.n	8008964 <HAL_SPI_Receive+0x20e>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d102      	bne.n	800896a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008968:	e018      	b.n	800899c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008970:	b29b      	uxth	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1ca      	bne.n	800890c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f001 f802 	bl	8009984 <SPI_EndRxTransaction>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2220      	movs	r2, #32
 800898a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	75fb      	strb	r3, [r7, #23]
 8008998:	e000      	b.n	800899c <HAL_SPI_Receive+0x246>
  }

error :
 800899a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b08a      	sub	sp, #40	; 0x28
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	607a      	str	r2, [r7, #4]
 80089c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80089c4:	2301      	movs	r3, #1
 80089c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d101      	bne.n	80089dc <HAL_SPI_TransmitReceive+0x26>
 80089d8:	2302      	movs	r3, #2
 80089da:	e1fb      	b.n	8008dd4 <HAL_SPI_TransmitReceive+0x41e>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089e4:	f7fa febc 	bl	8003760 <HAL_GetTick>
 80089e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80089f8:	887b      	ldrh	r3, [r7, #2]
 80089fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80089fc:	887b      	ldrh	r3, [r7, #2]
 80089fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a00:	7efb      	ldrb	r3, [r7, #27]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d00e      	beq.n	8008a24 <HAL_SPI_TransmitReceive+0x6e>
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a0c:	d106      	bne.n	8008a1c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d102      	bne.n	8008a1c <HAL_SPI_TransmitReceive+0x66>
 8008a16:	7efb      	ldrb	r3, [r7, #27]
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d003      	beq.n	8008a24 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008a22:	e1cd      	b.n	8008dc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d005      	beq.n	8008a36 <HAL_SPI_TransmitReceive+0x80>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_SPI_TransmitReceive+0x80>
 8008a30:	887b      	ldrh	r3, [r7, #2]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d103      	bne.n	8008a3e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008a3c:	e1c0      	b.n	8008dc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	d003      	beq.n	8008a52 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2205      	movs	r2, #5
 8008a4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	887a      	ldrh	r2, [r7, #2]
 8008a62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	887a      	ldrh	r2, [r7, #2]
 8008a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	887a      	ldrh	r2, [r7, #2]
 8008a78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	887a      	ldrh	r2, [r7, #2]
 8008a7e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a94:	d802      	bhi.n	8008a9c <HAL_SPI_TransmitReceive+0xe6>
 8008a96:	8a3b      	ldrh	r3, [r7, #16]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d908      	bls.n	8008aae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008aaa:	605a      	str	r2, [r3, #4]
 8008aac:	e007      	b.n	8008abe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008abc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac8:	2b40      	cmp	r3, #64	; 0x40
 8008aca:	d007      	beq.n	8008adc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ada:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ae4:	d97c      	bls.n	8008be0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <HAL_SPI_TransmitReceive+0x13e>
 8008aee:	8a7b      	ldrh	r3, [r7, #18]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d169      	bne.n	8008bc8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af8:	881a      	ldrh	r2, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	1c9a      	adds	r2, r3, #2
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b18:	e056      	b.n	8008bc8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d11b      	bne.n	8008b60 <HAL_SPI_TransmitReceive+0x1aa>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d016      	beq.n	8008b60 <HAL_SPI_TransmitReceive+0x1aa>
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d113      	bne.n	8008b60 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3c:	881a      	ldrh	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b48:	1c9a      	adds	r2, r3, #2
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	3b01      	subs	r3, #1
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d11c      	bne.n	8008ba8 <HAL_SPI_TransmitReceive+0x1f2>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d016      	beq.n	8008ba8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	b292      	uxth	r2, r2
 8008b86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8c:	1c9a      	adds	r2, r3, #2
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ba8:	f7fa fdda 	bl	8003760 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d807      	bhi.n	8008bc8 <HAL_SPI_TransmitReceive+0x212>
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbe:	d003      	beq.n	8008bc8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008bc6:	e0fb      	b.n	8008dc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1a3      	bne.n	8008b1a <HAL_SPI_TransmitReceive+0x164>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d19d      	bne.n	8008b1a <HAL_SPI_TransmitReceive+0x164>
 8008bde:	e0df      	b.n	8008da0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_SPI_TransmitReceive+0x23a>
 8008be8:	8a7b      	ldrh	r3, [r7, #18]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	f040 80cb 	bne.w	8008d86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d912      	bls.n	8008c20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfe:	881a      	ldrh	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	1c9a      	adds	r2, r3, #2
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b02      	subs	r3, #2
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c1e:	e0b2      	b.n	8008d86 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	7812      	ldrb	r2, [r2, #0]
 8008c2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c46:	e09e      	b.n	8008d86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d134      	bne.n	8008cc0 <HAL_SPI_TransmitReceive+0x30a>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d02f      	beq.n	8008cc0 <HAL_SPI_TransmitReceive+0x30a>
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d12c      	bne.n	8008cc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d912      	bls.n	8008c96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c74:	881a      	ldrh	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	1c9a      	adds	r2, r3, #2
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	3b02      	subs	r3, #2
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c94:	e012      	b.n	8008cbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	330c      	adds	r3, #12
 8008ca0:	7812      	ldrb	r2, [r2, #0]
 8008ca2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d148      	bne.n	8008d60 <HAL_SPI_TransmitReceive+0x3aa>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d042      	beq.n	8008d60 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d923      	bls.n	8008d2e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf0:	b292      	uxth	r2, r2
 8008cf2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	1c9a      	adds	r2, r3, #2
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	3b02      	subs	r3, #2
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d81f      	bhi.n	8008d5c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d2a:	605a      	str	r2, [r3, #4]
 8008d2c:	e016      	b.n	8008d5c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f103 020c 	add.w	r2, r3, #12
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3a:	7812      	ldrb	r2, [r2, #0]
 8008d3c:	b2d2      	uxtb	r2, r2
 8008d3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	3b01      	subs	r3, #1
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d60:	f7fa fcfe 	bl	8003760 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d803      	bhi.n	8008d78 <HAL_SPI_TransmitReceive+0x3c2>
 8008d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d76:	d102      	bne.n	8008d7e <HAL_SPI_TransmitReceive+0x3c8>
 8008d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d103      	bne.n	8008d86 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008d84:	e01c      	b.n	8008dc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f47f af5b 	bne.w	8008c48 <HAL_SPI_TransmitReceive+0x292>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f47f af54 	bne.w	8008c48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 fe45 	bl	8009a34 <SPI_EndRxTxTransaction>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d006      	beq.n	8008dbe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2220      	movs	r2, #32
 8008dba:	661a      	str	r2, [r3, #96]	; 0x60
 8008dbc:	e000      	b.n	8008dc0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008dbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3728      	adds	r7, #40	; 0x28
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	4613      	mov	r3, r2
 8008de8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d101      	bne.n	8008dfc <HAL_SPI_Transmit_IT+0x20>
 8008df8:	2302      	movs	r3, #2
 8008dfa:	e072      	b.n	8008ee2 <HAL_SPI_Transmit_IT+0x106>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d002      	beq.n	8008e10 <HAL_SPI_Transmit_IT+0x34>
 8008e0a:	88fb      	ldrh	r3, [r7, #6]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d102      	bne.n	8008e16 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e14:	e060      	b.n	8008ed8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d002      	beq.n	8008e28 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8008e22:	2302      	movs	r3, #2
 8008e24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e26:	e057      	b.n	8008ed8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2203      	movs	r2, #3
 8008e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	88fa      	ldrh	r2, [r7, #6]
 8008e40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	88fa      	ldrh	r2, [r7, #6]
 8008e46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e6c:	d903      	bls.n	8008e76 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4a1f      	ldr	r2, [pc, #124]	; (8008ef0 <HAL_SPI_Transmit_IT+0x114>)
 8008e72:	651a      	str	r2, [r3, #80]	; 0x50
 8008e74:	e002      	b.n	8008e7c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4a1e      	ldr	r2, [pc, #120]	; (8008ef4 <HAL_SPI_Transmit_IT+0x118>)
 8008e7a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e84:	d10f      	bne.n	8008ea6 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ea4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8008eb4:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec0:	2b40      	cmp	r3, #64	; 0x40
 8008ec2:	d008      	beq.n	8008ed6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	e000      	b.n	8008ed8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8008ed6:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	371c      	adds	r7, #28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	08009703 	.word	0x08009703
 8008ef4:	080096bd 	.word	0x080096bd

08008ef8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	4613      	mov	r3, r2
 8008f04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d110      	bne.n	8008f34 <HAL_SPI_Receive_IT+0x3c>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f1a:	d10b      	bne.n	8008f34 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2204      	movs	r2, #4
 8008f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8008f24:	88fb      	ldrh	r3, [r7, #6]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	68b9      	ldr	r1, [r7, #8]
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f894 	bl	8009058 <HAL_SPI_TransmitReceive_IT>
 8008f30:	4603      	mov	r3, r0
 8008f32:	e089      	b.n	8009048 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d101      	bne.n	8008f42 <HAL_SPI_Receive_IT+0x4a>
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e082      	b.n	8009048 <HAL_SPI_Receive_IT+0x150>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d002      	beq.n	8008f5c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8008f56:	2302      	movs	r3, #2
 8008f58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f5a:	e070      	b.n	800903e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <HAL_SPI_Receive_IT+0x70>
 8008f62:	88fb      	ldrh	r3, [r7, #6]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f6c:	e067      	b.n	800903e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2204      	movs	r2, #4
 8008f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	88fa      	ldrh	r2, [r7, #6]
 8008f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	88fa      	ldrh	r2, [r7, #6]
 8008f8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fb2:	d90b      	bls.n	8008fcc <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fc2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a22      	ldr	r2, [pc, #136]	; (8009050 <HAL_SPI_Receive_IT+0x158>)
 8008fc8:	64da      	str	r2, [r3, #76]	; 0x4c
 8008fca:	e00a      	b.n	8008fe2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008fda:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4a1d      	ldr	r2, [pc, #116]	; (8009054 <HAL_SPI_Receive_IT+0x15c>)
 8008fe0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fea:	d10f      	bne.n	800900c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ffa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800900a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800901a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009026:	2b40      	cmp	r3, #64	; 0x40
 8009028:	d008      	beq.n	800903c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	e000      	b.n	800903e <HAL_SPI_Receive_IT+0x146>
  }

error :
 800903c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009046:	7dfb      	ldrb	r3, [r7, #23]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	08009671 	.word	0x08009671
 8009054:	08009621 	.word	0x08009621

08009058 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009070:	2b01      	cmp	r3, #1
 8009072:	d101      	bne.n	8009078 <HAL_SPI_TransmitReceive_IT+0x20>
 8009074:	2302      	movs	r3, #2
 8009076:	e091      	b.n	800919c <HAL_SPI_TransmitReceive_IT+0x144>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009086:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800908e:	7dbb      	ldrb	r3, [r7, #22]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d00d      	beq.n	80090b0 <HAL_SPI_TransmitReceive_IT+0x58>
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800909a:	d106      	bne.n	80090aa <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d102      	bne.n	80090aa <HAL_SPI_TransmitReceive_IT+0x52>
 80090a4:	7dbb      	ldrb	r3, [r7, #22]
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d002      	beq.n	80090b0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80090aa:	2302      	movs	r3, #2
 80090ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80090ae:	e070      	b.n	8009192 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d005      	beq.n	80090c2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d002      	beq.n	80090c2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80090bc:	887b      	ldrh	r3, [r7, #2]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d102      	bne.n	80090c8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80090c6:	e064      	b.n	8009192 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	d003      	beq.n	80090dc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2205      	movs	r2, #5
 80090d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	887a      	ldrh	r2, [r7, #2]
 80090ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	887a      	ldrh	r2, [r7, #2]
 80090f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	887a      	ldrh	r2, [r7, #2]
 80090fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	887a      	ldrh	r2, [r7, #2]
 8009106:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009112:	d906      	bls.n	8009122 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4a24      	ldr	r2, [pc, #144]	; (80091a8 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009118:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4a23      	ldr	r2, [pc, #140]	; (80091ac <HAL_SPI_TransmitReceive_IT+0x154>)
 800911e:	651a      	str	r2, [r3, #80]	; 0x50
 8009120:	e005      	b.n	800912e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4a22      	ldr	r2, [pc, #136]	; (80091b0 <HAL_SPI_TransmitReceive_IT+0x158>)
 8009126:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	4a22      	ldr	r2, [pc, #136]	; (80091b4 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800912c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009136:	d802      	bhi.n	800913e <HAL_SPI_TransmitReceive_IT+0xe6>
 8009138:	887b      	ldrh	r3, [r7, #2]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d908      	bls.n	8009150 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800914c:	605a      	str	r2, [r3, #4]
 800914e:	e007      	b.n	8009160 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800915e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800916e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800917a:	2b40      	cmp	r3, #64	; 0x40
 800917c:	d008      	beq.n	8009190 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	e000      	b.n	8009192 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009190:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800919a:	7dfb      	ldrb	r3, [r7, #23]
}
 800919c:	4618      	mov	r0, r3
 800919e:	371c      	adds	r7, #28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	0800955b 	.word	0x0800955b
 80091ac:	080095c1 	.word	0x080095c1
 80091b0:	0800940b 	.word	0x0800940b
 80091b4:	080094c9 	.word	0x080094c9

080091b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	099b      	lsrs	r3, r3, #6
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10f      	bne.n	80091fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	099b      	lsrs	r3, r3, #6
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d004      	beq.n	80091fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	4798      	blx	r3
    return;
 80091fa:	e0d7      	b.n	80093ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	085b      	lsrs	r3, r3, #1
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00a      	beq.n	800921e <HAL_SPI_IRQHandler+0x66>
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	09db      	lsrs	r3, r3, #7
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d004      	beq.n	800921e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	4798      	blx	r3
    return;
 800921c:	e0c6      	b.n	80093ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	095b      	lsrs	r3, r3, #5
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10c      	bne.n	8009244 <HAL_SPI_IRQHandler+0x8c>
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	099b      	lsrs	r3, r3, #6
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d106      	bne.n	8009244 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	0a1b      	lsrs	r3, r3, #8
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 80b4 	beq.w	80093ac <HAL_SPI_IRQHandler+0x1f4>
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	095b      	lsrs	r3, r3, #5
 8009248:	f003 0301 	and.w	r3, r3, #1
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 80ad 	beq.w	80093ac <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	099b      	lsrs	r3, r3, #6
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d023      	beq.n	80092a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b03      	cmp	r3, #3
 8009268:	d011      	beq.n	800928e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800926e:	f043 0204 	orr.w	r2, r3, #4
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009276:	2300      	movs	r3, #0
 8009278:	617b      	str	r3, [r7, #20]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	617b      	str	r3, [r7, #20]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	617b      	str	r3, [r7, #20]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	e00b      	b.n	80092a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800928e:	2300      	movs	r3, #0
 8009290:	613b      	str	r3, [r7, #16]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	613b      	str	r3, [r7, #16]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	613b      	str	r3, [r7, #16]
 80092a2:	693b      	ldr	r3, [r7, #16]
        return;
 80092a4:	e082      	b.n	80093ac <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	095b      	lsrs	r3, r3, #5
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d014      	beq.n	80092dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092b6:	f043 0201 	orr.w	r2, r3, #1
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092d8:	601a      	str	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	0a1b      	lsrs	r3, r3, #8
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00c      	beq.n	8009302 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ec:	f043 0208 	orr.w	r2, r3, #8
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80092f4:	2300      	movs	r3, #0
 80092f6:	60bb      	str	r3, [r7, #8]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	60bb      	str	r3, [r7, #8]
 8009300:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009306:	2b00      	cmp	r3, #0
 8009308:	d04f      	beq.n	80093aa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009318:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d104      	bne.n	8009336 <HAL_SPI_IRQHandler+0x17e>
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d034      	beq.n	80093a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0203 	bic.w	r2, r2, #3
 8009344:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800934a:	2b00      	cmp	r3, #0
 800934c:	d011      	beq.n	8009372 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009352:	4a18      	ldr	r2, [pc, #96]	; (80093b4 <HAL_SPI_IRQHandler+0x1fc>)
 8009354:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935a:	4618      	mov	r0, r3
 800935c:	f7fa fdfa 	bl	8003f54 <HAL_DMA_Abort_IT>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d005      	beq.n	8009372 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800936a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009376:	2b00      	cmp	r3, #0
 8009378:	d016      	beq.n	80093a8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937e:	4a0d      	ldr	r2, [pc, #52]	; (80093b4 <HAL_SPI_IRQHandler+0x1fc>)
 8009380:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009386:	4618      	mov	r0, r3
 8009388:	f7fa fde4 	bl	8003f54 <HAL_DMA_Abort_IT>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00a      	beq.n	80093a8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009396:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800939e:	e003      	b.n	80093a8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f813 	bl	80093cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80093a6:	e000      	b.n	80093aa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80093a8:	bf00      	nop
    return;
 80093aa:	bf00      	nop
  }
}
 80093ac:	3720      	adds	r7, #32
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	080093e1 	.word	0x080093e1

080093b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff ffe5 	bl	80093cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009402:	bf00      	nop
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009418:	b29b      	uxth	r3, r3
 800941a:	2b01      	cmp	r3, #1
 800941c:	d923      	bls.n	8009466 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68da      	ldr	r2, [r3, #12]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009428:	b292      	uxth	r2, r2
 800942a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009430:	1c9a      	adds	r2, r3, #2
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b02      	subs	r3, #2
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800944e:	b29b      	uxth	r3, r3
 8009450:	2b01      	cmp	r3, #1
 8009452:	d11f      	bne.n	8009494 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009462:	605a      	str	r2, [r3, #4]
 8009464:	e016      	b.n	8009494 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f103 020c 	add.w	r2, r3, #12
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009472:	7812      	ldrb	r2, [r2, #0]
 8009474:	b2d2      	uxtb	r2, r2
 8009476:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947c:	1c5a      	adds	r2, r3, #1
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b01      	subs	r3, #1
 800948c:	b29a      	uxth	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800949a:	b29b      	uxth	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10f      	bne.n	80094c0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80094ae:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d102      	bne.n	80094c0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fb00 	bl	8009ac0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d912      	bls.n	8009500 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094de:	881a      	ldrh	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ea:	1c9a      	adds	r2, r3, #2
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	3b02      	subs	r3, #2
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094fe:	e012      	b.n	8009526 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	330c      	adds	r3, #12
 800950a:	7812      	ldrb	r2, [r2, #0]
 800950c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800951c:	b29b      	uxth	r3, r3
 800951e:	3b01      	subs	r3, #1
 8009520:	b29a      	uxth	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800952a:	b29b      	uxth	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d110      	bne.n	8009552 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800953e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009546:	b29b      	uxth	r3, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fab7 	bl	8009ac0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956c:	b292      	uxth	r2, r2
 800956e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009574:	1c9a      	adds	r2, r3, #2
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009592:	b29b      	uxth	r3, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10f      	bne.n	80095b8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095a6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d102      	bne.n	80095b8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fa84 	bl	8009ac0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095cc:	881a      	ldrh	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d8:	1c9a      	adds	r2, r3, #2
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d110      	bne.n	8009618 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009604:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800960c:	b29b      	uxth	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d102      	bne.n	8009618 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fa54 	bl	8009ac0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f103 020c 	add.w	r2, r3, #12
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009634:	7812      	ldrb	r2, [r2, #0]
 8009636:	b2d2      	uxtb	r2, r2
 8009638:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	1c5a      	adds	r2, r3, #1
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800964a:	b29b      	uxth	r3, r3
 800964c:	3b01      	subs	r3, #1
 800964e:	b29a      	uxth	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800965c:	b29b      	uxth	r3, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d102      	bne.n	8009668 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fa6e 	bl	8009b44 <SPI_CloseRx_ISR>
  }
}
 8009668:	bf00      	nop
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	b292      	uxth	r2, r2
 8009684:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968a:	1c9a      	adds	r2, r3, #2
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d102      	bne.n	80096b4 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fa48 	bl	8009b44 <SPI_CloseRx_ISR>
  }
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	330c      	adds	r3, #12
 80096ce:	7812      	ldrb	r2, [r2, #0]
 80096d0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d102      	bne.n	80096fa <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fa55 	bl	8009ba4 <SPI_CloseTx_ISR>
  }
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970e:	881a      	ldrh	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	1c9a      	adds	r2, r3, #2
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009724:	b29b      	uxth	r3, r3
 8009726:	3b01      	subs	r3, #1
 8009728:	b29a      	uxth	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009732:	b29b      	uxth	r3, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	d102      	bne.n	800973e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fa33 	bl	8009ba4 <SPI_CloseTx_ISR>
  }
}
 800973e:	bf00      	nop
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	4613      	mov	r3, r2
 8009756:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009758:	f7fa f802 	bl	8003760 <HAL_GetTick>
 800975c:	4602      	mov	r2, r0
 800975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009760:	1a9b      	subs	r3, r3, r2
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	4413      	add	r3, r2
 8009766:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009768:	f7f9 fffa 	bl	8003760 <HAL_GetTick>
 800976c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800976e:	4b39      	ldr	r3, [pc, #228]	; (8009854 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	015b      	lsls	r3, r3, #5
 8009774:	0d1b      	lsrs	r3, r3, #20
 8009776:	69fa      	ldr	r2, [r7, #28]
 8009778:	fb02 f303 	mul.w	r3, r2, r3
 800977c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800977e:	e054      	b.n	800982a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009786:	d050      	beq.n	800982a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009788:	f7f9 ffea 	bl	8003760 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	69fa      	ldr	r2, [r7, #28]
 8009794:	429a      	cmp	r2, r3
 8009796:	d902      	bls.n	800979e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d13d      	bne.n	800981a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097b6:	d111      	bne.n	80097dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097c0:	d004      	beq.n	80097cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ca:	d107      	bne.n	80097dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e4:	d10f      	bne.n	8009806 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009804:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e017      	b.n	800984a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d101      	bne.n	8009824 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	3b01      	subs	r3, #1
 8009828:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	689a      	ldr	r2, [r3, #8]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4013      	ands	r3, r2
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	429a      	cmp	r2, r3
 8009838:	bf0c      	ite	eq
 800983a:	2301      	moveq	r3, #1
 800983c:	2300      	movne	r3, #0
 800983e:	b2db      	uxtb	r3, r3
 8009840:	461a      	mov	r2, r3
 8009842:	79fb      	ldrb	r3, [r7, #7]
 8009844:	429a      	cmp	r2, r3
 8009846:	d19b      	bne.n	8009780 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3720      	adds	r7, #32
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	20000020 	.word	0x20000020

08009858 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08a      	sub	sp, #40	; 0x28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800986a:	f7f9 ff79 	bl	8003760 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	1a9b      	subs	r3, r3, r2
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	4413      	add	r3, r2
 8009878:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800987a:	f7f9 ff71 	bl	8003760 <HAL_GetTick>
 800987e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	330c      	adds	r3, #12
 8009886:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009888:	4b3d      	ldr	r3, [pc, #244]	; (8009980 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	00da      	lsls	r2, r3, #3
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	0d1b      	lsrs	r3, r3, #20
 8009898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800989a:	fb02 f303 	mul.w	r3, r2, r3
 800989e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80098a0:	e060      	b.n	8009964 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80098a8:	d107      	bne.n	80098ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d104      	bne.n	80098ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80098b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c0:	d050      	beq.n	8009964 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098c2:	f7f9 ff4d 	bl	8003760 <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d902      	bls.n	80098d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d13d      	bne.n	8009954 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098f0:	d111      	bne.n	8009916 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098fa:	d004      	beq.n	8009906 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009904:	d107      	bne.n	8009916 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009914:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800991e:	d10f      	bne.n	8009940 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800992e:	601a      	str	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800993e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e010      	b.n	8009976 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800995a:	2300      	movs	r3, #0
 800995c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	3b01      	subs	r3, #1
 8009962:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4013      	ands	r3, r2
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	429a      	cmp	r2, r3
 8009972:	d196      	bne.n	80098a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3728      	adds	r7, #40	; 0x28
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	20000020 	.word	0x20000020

08009984 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af02      	add	r7, sp, #8
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009998:	d111      	bne.n	80099be <SPI_EndRxTransaction+0x3a>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099a2:	d004      	beq.n	80099ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ac:	d107      	bne.n	80099be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2200      	movs	r2, #0
 80099c6:	2180      	movs	r1, #128	; 0x80
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f7ff febd 	bl	8009748 <SPI_WaitFlagStateUntilTimeout>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d007      	beq.n	80099e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099d8:	f043 0220 	orr.w	r2, r3, #32
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	e023      	b.n	8009a2c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ec:	d11d      	bne.n	8009a2a <SPI_EndRxTransaction+0xa6>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099f6:	d004      	beq.n	8009a02 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a00:	d113      	bne.n	8009a2a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f7ff ff22 	bl	8009858 <SPI_WaitFifoStateUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d007      	beq.n	8009a2a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a1e:	f043 0220 	orr.w	r2, r3, #32
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e000      	b.n	8009a2c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7ff ff03 	bl	8009858 <SPI_WaitFifoStateUntilTimeout>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d007      	beq.n	8009a68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a5c:	f043 0220 	orr.w	r2, r3, #32
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e027      	b.n	8009ab8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2180      	movs	r1, #128	; 0x80
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f7ff fe68 	bl	8009748 <SPI_WaitFlagStateUntilTimeout>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d007      	beq.n	8009a8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a82:	f043 0220 	orr.w	r2, r3, #32
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e014      	b.n	8009ab8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7ff fedc 	bl	8009858 <SPI_WaitFifoStateUntilTimeout>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aaa:	f043 0220 	orr.w	r2, r3, #32
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e000      	b.n	8009ab8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ac8:	f7f9 fe4a 	bl	8003760 <HAL_GetTick>
 8009acc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f022 0220 	bic.w	r2, r2, #32
 8009adc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	2164      	movs	r1, #100	; 0x64
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff ffa6 	bl	8009a34 <SPI_EndRxTxTransaction>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d005      	beq.n	8009afa <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009af2:	f043 0220 	orr.w	r2, r3, #32
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d115      	bne.n	8009b2e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b04      	cmp	r3, #4
 8009b0c:	d107      	bne.n	8009b1e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f006 ff08 	bl	801092c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009b1c:	e00e      	b.n	8009b3c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7ff fc46 	bl	80093b8 <HAL_SPI_TxRxCpltCallback>
}
 8009b2c:	e006      	b.n	8009b3c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff fc48 	bl	80093cc <HAL_SPI_ErrorCallback>
}
 8009b3c:	bf00      	nop
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685a      	ldr	r2, [r3, #4]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009b5a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009b5c:	f7f9 fe00 	bl	8003760 <HAL_GetTick>
 8009b60:	4603      	mov	r3, r0
 8009b62:	461a      	mov	r2, r3
 8009b64:	2164      	movs	r1, #100	; 0x64
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7ff ff0c 	bl	8009984 <SPI_EndRxTransaction>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d005      	beq.n	8009b7e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b76:	f043 0220 	orr.w	r2, r3, #32
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d103      	bne.n	8009b96 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f006 fecc 	bl	801092c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009b94:	e002      	b.n	8009b9c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff fc18 	bl	80093cc <HAL_SPI_ErrorCallback>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bac:	f7f9 fdd8 	bl	8003760 <HAL_GetTick>
 8009bb0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009bc0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	2164      	movs	r1, #100	; 0x64
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff ff34 	bl	8009a34 <SPI_EndRxTxTransaction>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d005      	beq.n	8009bde <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bd6:	f043 0220 	orr.w	r2, r3, #32
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10a      	bne.n	8009bfc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009be6:	2300      	movs	r3, #0
 8009be8:	60bb      	str	r3, [r7, #8]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	60bb      	str	r3, [r7, #8]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	60bb      	str	r3, [r7, #8]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d003      	beq.n	8009c14 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7ff fbdd 	bl	80093cc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009c12:	e002      	b.n	8009c1a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f006 fea1 	bl	801095c <HAL_SPI_TxCpltCallback>
}
 8009c1a:	bf00      	nop
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b082      	sub	sp, #8
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e049      	b.n	8009cc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d106      	bne.n	8009c4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f841 	bl	8009cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2202      	movs	r2, #2
 8009c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	4619      	mov	r1, r3
 8009c60:	4610      	mov	r0, r2
 8009c62:	f000 f9f7 	bl	800a054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d001      	beq.n	8009cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e04f      	b.n	8009d9c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68da      	ldr	r2, [r3, #12]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f042 0201 	orr.w	r2, r2, #1
 8009d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a23      	ldr	r2, [pc, #140]	; (8009da8 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d01d      	beq.n	8009d5a <HAL_TIM_Base_Start_IT+0x76>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d26:	d018      	beq.n	8009d5a <HAL_TIM_Base_Start_IT+0x76>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a1f      	ldr	r2, [pc, #124]	; (8009dac <HAL_TIM_Base_Start_IT+0xc8>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d013      	beq.n	8009d5a <HAL_TIM_Base_Start_IT+0x76>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a1e      	ldr	r2, [pc, #120]	; (8009db0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00e      	beq.n	8009d5a <HAL_TIM_Base_Start_IT+0x76>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a1c      	ldr	r2, [pc, #112]	; (8009db4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d009      	beq.n	8009d5a <HAL_TIM_Base_Start_IT+0x76>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a1b      	ldr	r2, [pc, #108]	; (8009db8 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d004      	beq.n	8009d5a <HAL_TIM_Base_Start_IT+0x76>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a19      	ldr	r2, [pc, #100]	; (8009dbc <HAL_TIM_Base_Start_IT+0xd8>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d115      	bne.n	8009d86 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689a      	ldr	r2, [r3, #8]
 8009d60:	4b17      	ldr	r3, [pc, #92]	; (8009dc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009d62:	4013      	ands	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b06      	cmp	r3, #6
 8009d6a:	d015      	beq.n	8009d98 <HAL_TIM_Base_Start_IT+0xb4>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d72:	d011      	beq.n	8009d98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f042 0201 	orr.w	r2, r2, #1
 8009d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d84:	e008      	b.n	8009d98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f042 0201 	orr.w	r2, r2, #1
 8009d94:	601a      	str	r2, [r3, #0]
 8009d96:	e000      	b.n	8009d9a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	40012c00 	.word	0x40012c00
 8009dac:	40000400 	.word	0x40000400
 8009db0:	40000800 	.word	0x40000800
 8009db4:	40000c00 	.word	0x40000c00
 8009db8:	40013400 	.word	0x40013400
 8009dbc:	40014000 	.word	0x40014000
 8009dc0:	00010007 	.word	0x00010007

08009dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d122      	bne.n	8009e20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	f003 0302 	and.w	r3, r3, #2
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d11b      	bne.n	8009e20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f06f 0202 	mvn.w	r2, #2
 8009df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	f003 0303 	and.w	r3, r3, #3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f905 	bl	800a016 <HAL_TIM_IC_CaptureCallback>
 8009e0c:	e005      	b.n	8009e1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f8f7 	bl	800a002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f908 	bl	800a02a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	f003 0304 	and.w	r3, r3, #4
 8009e2a:	2b04      	cmp	r3, #4
 8009e2c:	d122      	bne.n	8009e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b04      	cmp	r3, #4
 8009e3a:	d11b      	bne.n	8009e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f06f 0204 	mvn.w	r2, #4
 8009e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2202      	movs	r2, #2
 8009e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f8db 	bl	800a016 <HAL_TIM_IC_CaptureCallback>
 8009e60:	e005      	b.n	8009e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f8cd 	bl	800a002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f8de 	bl	800a02a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	f003 0308 	and.w	r3, r3, #8
 8009e7e:	2b08      	cmp	r3, #8
 8009e80:	d122      	bne.n	8009ec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f003 0308 	and.w	r3, r3, #8
 8009e8c:	2b08      	cmp	r3, #8
 8009e8e:	d11b      	bne.n	8009ec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f06f 0208 	mvn.w	r2, #8
 8009e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2204      	movs	r2, #4
 8009e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f8b1 	bl	800a016 <HAL_TIM_IC_CaptureCallback>
 8009eb4:	e005      	b.n	8009ec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f8a3 	bl	800a002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f8b4 	bl	800a02a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	f003 0310 	and.w	r3, r3, #16
 8009ed2:	2b10      	cmp	r3, #16
 8009ed4:	d122      	bne.n	8009f1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	f003 0310 	and.w	r3, r3, #16
 8009ee0:	2b10      	cmp	r3, #16
 8009ee2:	d11b      	bne.n	8009f1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f06f 0210 	mvn.w	r2, #16
 8009eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2208      	movs	r2, #8
 8009ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	69db      	ldr	r3, [r3, #28]
 8009efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d003      	beq.n	8009f0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f887 	bl	800a016 <HAL_TIM_IC_CaptureCallback>
 8009f08:	e005      	b.n	8009f16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f879 	bl	800a002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f88a 	bl	800a02a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d10e      	bne.n	8009f48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d107      	bne.n	8009f48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f06f 0201 	mvn.w	r2, #1
 8009f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7f7 f976 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f52:	2b80      	cmp	r3, #128	; 0x80
 8009f54:	d10e      	bne.n	8009f74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f60:	2b80      	cmp	r3, #128	; 0x80
 8009f62:	d107      	bne.n	8009f74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f914 	bl	800a19c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f82:	d10e      	bne.n	8009fa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f8e:	2b80      	cmp	r3, #128	; 0x80
 8009f90:	d107      	bne.n	8009fa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f907 	bl	800a1b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fac:	2b40      	cmp	r3, #64	; 0x40
 8009fae:	d10e      	bne.n	8009fce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fba:	2b40      	cmp	r3, #64	; 0x40
 8009fbc:	d107      	bne.n	8009fce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f838 	bl	800a03e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	f003 0320 	and.w	r3, r3, #32
 8009fd8:	2b20      	cmp	r3, #32
 8009fda:	d10e      	bne.n	8009ffa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f003 0320 	and.w	r3, r3, #32
 8009fe6:	2b20      	cmp	r3, #32
 8009fe8:	d107      	bne.n	8009ffa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f06f 0220 	mvn.w	r2, #32
 8009ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f8c7 	bl	800a188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a002:	b480      	push	{r7}
 800a004:	b083      	sub	sp, #12
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a00a:	bf00      	nop
 800a00c:	370c      	adds	r7, #12
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a016:	b480      	push	{r7}
 800a018:	b083      	sub	sp, #12
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a01e:	bf00      	nop
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a032:	bf00      	nop
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a03e:	b480      	push	{r7}
 800a040:	b083      	sub	sp, #12
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
	...

0800a054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a40      	ldr	r2, [pc, #256]	; (800a168 <TIM_Base_SetConfig+0x114>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d013      	beq.n	800a094 <TIM_Base_SetConfig+0x40>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a072:	d00f      	beq.n	800a094 <TIM_Base_SetConfig+0x40>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a3d      	ldr	r2, [pc, #244]	; (800a16c <TIM_Base_SetConfig+0x118>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d00b      	beq.n	800a094 <TIM_Base_SetConfig+0x40>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a3c      	ldr	r2, [pc, #240]	; (800a170 <TIM_Base_SetConfig+0x11c>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d007      	beq.n	800a094 <TIM_Base_SetConfig+0x40>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a3b      	ldr	r2, [pc, #236]	; (800a174 <TIM_Base_SetConfig+0x120>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d003      	beq.n	800a094 <TIM_Base_SetConfig+0x40>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a3a      	ldr	r2, [pc, #232]	; (800a178 <TIM_Base_SetConfig+0x124>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d108      	bne.n	800a0a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a09a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a2f      	ldr	r2, [pc, #188]	; (800a168 <TIM_Base_SetConfig+0x114>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d01f      	beq.n	800a0ee <TIM_Base_SetConfig+0x9a>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b4:	d01b      	beq.n	800a0ee <TIM_Base_SetConfig+0x9a>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a2c      	ldr	r2, [pc, #176]	; (800a16c <TIM_Base_SetConfig+0x118>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d017      	beq.n	800a0ee <TIM_Base_SetConfig+0x9a>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a2b      	ldr	r2, [pc, #172]	; (800a170 <TIM_Base_SetConfig+0x11c>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d013      	beq.n	800a0ee <TIM_Base_SetConfig+0x9a>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a2a      	ldr	r2, [pc, #168]	; (800a174 <TIM_Base_SetConfig+0x120>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d00f      	beq.n	800a0ee <TIM_Base_SetConfig+0x9a>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a29      	ldr	r2, [pc, #164]	; (800a178 <TIM_Base_SetConfig+0x124>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d00b      	beq.n	800a0ee <TIM_Base_SetConfig+0x9a>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a28      	ldr	r2, [pc, #160]	; (800a17c <TIM_Base_SetConfig+0x128>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d007      	beq.n	800a0ee <TIM_Base_SetConfig+0x9a>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a27      	ldr	r2, [pc, #156]	; (800a180 <TIM_Base_SetConfig+0x12c>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d003      	beq.n	800a0ee <TIM_Base_SetConfig+0x9a>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a26      	ldr	r2, [pc, #152]	; (800a184 <TIM_Base_SetConfig+0x130>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d108      	bne.n	800a100 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	689a      	ldr	r2, [r3, #8]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a10      	ldr	r2, [pc, #64]	; (800a168 <TIM_Base_SetConfig+0x114>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d00f      	beq.n	800a14c <TIM_Base_SetConfig+0xf8>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a12      	ldr	r2, [pc, #72]	; (800a178 <TIM_Base_SetConfig+0x124>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d00b      	beq.n	800a14c <TIM_Base_SetConfig+0xf8>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a11      	ldr	r2, [pc, #68]	; (800a17c <TIM_Base_SetConfig+0x128>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d007      	beq.n	800a14c <TIM_Base_SetConfig+0xf8>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a10      	ldr	r2, [pc, #64]	; (800a180 <TIM_Base_SetConfig+0x12c>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d003      	beq.n	800a14c <TIM_Base_SetConfig+0xf8>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a0f      	ldr	r2, [pc, #60]	; (800a184 <TIM_Base_SetConfig+0x130>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d103      	bne.n	800a154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	691a      	ldr	r2, [r3, #16]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	615a      	str	r2, [r3, #20]
}
 800a15a:	bf00      	nop
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40012c00 	.word	0x40012c00
 800a16c:	40000400 	.word	0x40000400
 800a170:	40000800 	.word	0x40000800
 800a174:	40000c00 	.word	0x40000c00
 800a178:	40013400 	.word	0x40013400
 800a17c:	40014000 	.word	0x40014000
 800a180:	40014400 	.word	0x40014400
 800a184:	40014800 	.word	0x40014800

0800a188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e040      	b.n	800a258 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d106      	bne.n	800a1ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7f7 fb2c 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2224      	movs	r2, #36	; 0x24
 800a1f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f022 0201 	bic.w	r2, r2, #1
 800a200:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f82c 	bl	800a260 <UART_SetConfig>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d101      	bne.n	800a212 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e022      	b.n	800a258 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a216:	2b00      	cmp	r3, #0
 800a218:	d002      	beq.n	800a220 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fad8 	bl	800a7d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685a      	ldr	r2, [r3, #4]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a22e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	689a      	ldr	r2, [r3, #8]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a23e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f042 0201 	orr.w	r2, r2, #1
 800a24e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fb5f 	bl	800a914 <UART_CheckIdleState>
 800a256:	4603      	mov	r3, r0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a264:	b08a      	sub	sp, #40	; 0x28
 800a266:	af00      	add	r7, sp, #0
 800a268:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	689a      	ldr	r2, [r3, #8]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	431a      	orrs	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	431a      	orrs	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	4313      	orrs	r3, r2
 800a286:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	4ba4      	ldr	r3, [pc, #656]	; (800a520 <UART_SetConfig+0x2c0>)
 800a290:	4013      	ands	r3, r2
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	6812      	ldr	r2, [r2, #0]
 800a296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a298:	430b      	orrs	r3, r1
 800a29a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	68da      	ldr	r2, [r3, #12]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	430a      	orrs	r2, r1
 800a2b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a99      	ldr	r2, [pc, #612]	; (800a524 <UART_SetConfig+0x2c4>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d004      	beq.n	800a2cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a90      	ldr	r2, [pc, #576]	; (800a528 <UART_SetConfig+0x2c8>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d126      	bne.n	800a338 <UART_SetConfig+0xd8>
 800a2ea:	4b90      	ldr	r3, [pc, #576]	; (800a52c <UART_SetConfig+0x2cc>)
 800a2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f0:	f003 0303 	and.w	r3, r3, #3
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d81b      	bhi.n	800a330 <UART_SetConfig+0xd0>
 800a2f8:	a201      	add	r2, pc, #4	; (adr r2, 800a300 <UART_SetConfig+0xa0>)
 800a2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fe:	bf00      	nop
 800a300:	0800a311 	.word	0x0800a311
 800a304:	0800a321 	.word	0x0800a321
 800a308:	0800a319 	.word	0x0800a319
 800a30c:	0800a329 	.word	0x0800a329
 800a310:	2301      	movs	r3, #1
 800a312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a316:	e116      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a318:	2302      	movs	r3, #2
 800a31a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a31e:	e112      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a320:	2304      	movs	r3, #4
 800a322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a326:	e10e      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a328:	2308      	movs	r3, #8
 800a32a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a32e:	e10a      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a330:	2310      	movs	r3, #16
 800a332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a336:	e106      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a7c      	ldr	r2, [pc, #496]	; (800a530 <UART_SetConfig+0x2d0>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d138      	bne.n	800a3b4 <UART_SetConfig+0x154>
 800a342:	4b7a      	ldr	r3, [pc, #488]	; (800a52c <UART_SetConfig+0x2cc>)
 800a344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a348:	f003 030c 	and.w	r3, r3, #12
 800a34c:	2b0c      	cmp	r3, #12
 800a34e:	d82d      	bhi.n	800a3ac <UART_SetConfig+0x14c>
 800a350:	a201      	add	r2, pc, #4	; (adr r2, 800a358 <UART_SetConfig+0xf8>)
 800a352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a356:	bf00      	nop
 800a358:	0800a38d 	.word	0x0800a38d
 800a35c:	0800a3ad 	.word	0x0800a3ad
 800a360:	0800a3ad 	.word	0x0800a3ad
 800a364:	0800a3ad 	.word	0x0800a3ad
 800a368:	0800a39d 	.word	0x0800a39d
 800a36c:	0800a3ad 	.word	0x0800a3ad
 800a370:	0800a3ad 	.word	0x0800a3ad
 800a374:	0800a3ad 	.word	0x0800a3ad
 800a378:	0800a395 	.word	0x0800a395
 800a37c:	0800a3ad 	.word	0x0800a3ad
 800a380:	0800a3ad 	.word	0x0800a3ad
 800a384:	0800a3ad 	.word	0x0800a3ad
 800a388:	0800a3a5 	.word	0x0800a3a5
 800a38c:	2300      	movs	r3, #0
 800a38e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a392:	e0d8      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a394:	2302      	movs	r3, #2
 800a396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a39a:	e0d4      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a39c:	2304      	movs	r3, #4
 800a39e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3a2:	e0d0      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a3a4:	2308      	movs	r3, #8
 800a3a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3aa:	e0cc      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a3ac:	2310      	movs	r3, #16
 800a3ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3b2:	e0c8      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a5e      	ldr	r2, [pc, #376]	; (800a534 <UART_SetConfig+0x2d4>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d125      	bne.n	800a40a <UART_SetConfig+0x1aa>
 800a3be:	4b5b      	ldr	r3, [pc, #364]	; (800a52c <UART_SetConfig+0x2cc>)
 800a3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a3c8:	2b30      	cmp	r3, #48	; 0x30
 800a3ca:	d016      	beq.n	800a3fa <UART_SetConfig+0x19a>
 800a3cc:	2b30      	cmp	r3, #48	; 0x30
 800a3ce:	d818      	bhi.n	800a402 <UART_SetConfig+0x1a2>
 800a3d0:	2b20      	cmp	r3, #32
 800a3d2:	d00a      	beq.n	800a3ea <UART_SetConfig+0x18a>
 800a3d4:	2b20      	cmp	r3, #32
 800a3d6:	d814      	bhi.n	800a402 <UART_SetConfig+0x1a2>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <UART_SetConfig+0x182>
 800a3dc:	2b10      	cmp	r3, #16
 800a3de:	d008      	beq.n	800a3f2 <UART_SetConfig+0x192>
 800a3e0:	e00f      	b.n	800a402 <UART_SetConfig+0x1a2>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3e8:	e0ad      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3f0:	e0a9      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a3f2:	2304      	movs	r3, #4
 800a3f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3f8:	e0a5      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a3fa:	2308      	movs	r3, #8
 800a3fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a400:	e0a1      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a402:	2310      	movs	r3, #16
 800a404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a408:	e09d      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a4a      	ldr	r2, [pc, #296]	; (800a538 <UART_SetConfig+0x2d8>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d125      	bne.n	800a460 <UART_SetConfig+0x200>
 800a414:	4b45      	ldr	r3, [pc, #276]	; (800a52c <UART_SetConfig+0x2cc>)
 800a416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a41e:	2bc0      	cmp	r3, #192	; 0xc0
 800a420:	d016      	beq.n	800a450 <UART_SetConfig+0x1f0>
 800a422:	2bc0      	cmp	r3, #192	; 0xc0
 800a424:	d818      	bhi.n	800a458 <UART_SetConfig+0x1f8>
 800a426:	2b80      	cmp	r3, #128	; 0x80
 800a428:	d00a      	beq.n	800a440 <UART_SetConfig+0x1e0>
 800a42a:	2b80      	cmp	r3, #128	; 0x80
 800a42c:	d814      	bhi.n	800a458 <UART_SetConfig+0x1f8>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d002      	beq.n	800a438 <UART_SetConfig+0x1d8>
 800a432:	2b40      	cmp	r3, #64	; 0x40
 800a434:	d008      	beq.n	800a448 <UART_SetConfig+0x1e8>
 800a436:	e00f      	b.n	800a458 <UART_SetConfig+0x1f8>
 800a438:	2300      	movs	r3, #0
 800a43a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a43e:	e082      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a440:	2302      	movs	r3, #2
 800a442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a446:	e07e      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a448:	2304      	movs	r3, #4
 800a44a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a44e:	e07a      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a450:	2308      	movs	r3, #8
 800a452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a456:	e076      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a458:	2310      	movs	r3, #16
 800a45a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a45e:	e072      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a35      	ldr	r2, [pc, #212]	; (800a53c <UART_SetConfig+0x2dc>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d12a      	bne.n	800a4c0 <UART_SetConfig+0x260>
 800a46a:	4b30      	ldr	r3, [pc, #192]	; (800a52c <UART_SetConfig+0x2cc>)
 800a46c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a478:	d01a      	beq.n	800a4b0 <UART_SetConfig+0x250>
 800a47a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a47e:	d81b      	bhi.n	800a4b8 <UART_SetConfig+0x258>
 800a480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a484:	d00c      	beq.n	800a4a0 <UART_SetConfig+0x240>
 800a486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a48a:	d815      	bhi.n	800a4b8 <UART_SetConfig+0x258>
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <UART_SetConfig+0x238>
 800a490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a494:	d008      	beq.n	800a4a8 <UART_SetConfig+0x248>
 800a496:	e00f      	b.n	800a4b8 <UART_SetConfig+0x258>
 800a498:	2300      	movs	r3, #0
 800a49a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a49e:	e052      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4a6:	e04e      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a4a8:	2304      	movs	r3, #4
 800a4aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4ae:	e04a      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a4b0:	2308      	movs	r3, #8
 800a4b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4b6:	e046      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a4b8:	2310      	movs	r3, #16
 800a4ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4be:	e042      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a17      	ldr	r2, [pc, #92]	; (800a524 <UART_SetConfig+0x2c4>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d13a      	bne.n	800a540 <UART_SetConfig+0x2e0>
 800a4ca:	4b18      	ldr	r3, [pc, #96]	; (800a52c <UART_SetConfig+0x2cc>)
 800a4cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a4d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4d8:	d01a      	beq.n	800a510 <UART_SetConfig+0x2b0>
 800a4da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4de:	d81b      	bhi.n	800a518 <UART_SetConfig+0x2b8>
 800a4e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4e4:	d00c      	beq.n	800a500 <UART_SetConfig+0x2a0>
 800a4e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4ea:	d815      	bhi.n	800a518 <UART_SetConfig+0x2b8>
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d003      	beq.n	800a4f8 <UART_SetConfig+0x298>
 800a4f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4f4:	d008      	beq.n	800a508 <UART_SetConfig+0x2a8>
 800a4f6:	e00f      	b.n	800a518 <UART_SetConfig+0x2b8>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4fe:	e022      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a500:	2302      	movs	r3, #2
 800a502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a506:	e01e      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a508:	2304      	movs	r3, #4
 800a50a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a50e:	e01a      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a510:	2308      	movs	r3, #8
 800a512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a516:	e016      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a518:	2310      	movs	r3, #16
 800a51a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a51e:	e012      	b.n	800a546 <UART_SetConfig+0x2e6>
 800a520:	efff69f3 	.word	0xefff69f3
 800a524:	40008000 	.word	0x40008000
 800a528:	40013800 	.word	0x40013800
 800a52c:	40021000 	.word	0x40021000
 800a530:	40004400 	.word	0x40004400
 800a534:	40004800 	.word	0x40004800
 800a538:	40004c00 	.word	0x40004c00
 800a53c:	40005000 	.word	0x40005000
 800a540:	2310      	movs	r3, #16
 800a542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a9f      	ldr	r2, [pc, #636]	; (800a7c8 <UART_SetConfig+0x568>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d17a      	bne.n	800a646 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a554:	2b08      	cmp	r3, #8
 800a556:	d824      	bhi.n	800a5a2 <UART_SetConfig+0x342>
 800a558:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <UART_SetConfig+0x300>)
 800a55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55e:	bf00      	nop
 800a560:	0800a585 	.word	0x0800a585
 800a564:	0800a5a3 	.word	0x0800a5a3
 800a568:	0800a58d 	.word	0x0800a58d
 800a56c:	0800a5a3 	.word	0x0800a5a3
 800a570:	0800a593 	.word	0x0800a593
 800a574:	0800a5a3 	.word	0x0800a5a3
 800a578:	0800a5a3 	.word	0x0800a5a3
 800a57c:	0800a5a3 	.word	0x0800a5a3
 800a580:	0800a59b 	.word	0x0800a59b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a584:	f7fd fa92 	bl	8007aac <HAL_RCC_GetPCLK1Freq>
 800a588:	61f8      	str	r0, [r7, #28]
        break;
 800a58a:	e010      	b.n	800a5ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a58c:	4b8f      	ldr	r3, [pc, #572]	; (800a7cc <UART_SetConfig+0x56c>)
 800a58e:	61fb      	str	r3, [r7, #28]
        break;
 800a590:	e00d      	b.n	800a5ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a592:	f7fd f9f3 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800a596:	61f8      	str	r0, [r7, #28]
        break;
 800a598:	e009      	b.n	800a5ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a59a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a59e:	61fb      	str	r3, [r7, #28]
        break;
 800a5a0:	e005      	b.n	800a5ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a5ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 80fb 	beq.w	800a7ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	4413      	add	r3, r2
 800a5c0:	69fa      	ldr	r2, [r7, #28]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d305      	bcc.n	800a5d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a5cc:	69fa      	ldr	r2, [r7, #28]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d903      	bls.n	800a5da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a5d8:	e0e8      	b.n	800a7ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	461c      	mov	r4, r3
 800a5e0:	4615      	mov	r5, r2
 800a5e2:	f04f 0200 	mov.w	r2, #0
 800a5e6:	f04f 0300 	mov.w	r3, #0
 800a5ea:	022b      	lsls	r3, r5, #8
 800a5ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a5f0:	0222      	lsls	r2, r4, #8
 800a5f2:	68f9      	ldr	r1, [r7, #12]
 800a5f4:	6849      	ldr	r1, [r1, #4]
 800a5f6:	0849      	lsrs	r1, r1, #1
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	4688      	mov	r8, r1
 800a5fc:	4681      	mov	r9, r0
 800a5fe:	eb12 0a08 	adds.w	sl, r2, r8
 800a602:	eb43 0b09 	adc.w	fp, r3, r9
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	603b      	str	r3, [r7, #0]
 800a60e:	607a      	str	r2, [r7, #4]
 800a610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a614:	4650      	mov	r0, sl
 800a616:	4659      	mov	r1, fp
 800a618:	f7f5 fe7a 	bl	8000310 <__aeabi_uldivmod>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4613      	mov	r3, r2
 800a622:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a62a:	d308      	bcc.n	800a63e <UART_SetConfig+0x3de>
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a632:	d204      	bcs.n	800a63e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	69ba      	ldr	r2, [r7, #24]
 800a63a:	60da      	str	r2, [r3, #12]
 800a63c:	e0b6      	b.n	800a7ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a644:	e0b2      	b.n	800a7ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a64e:	d15e      	bne.n	800a70e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a654:	2b08      	cmp	r3, #8
 800a656:	d828      	bhi.n	800a6aa <UART_SetConfig+0x44a>
 800a658:	a201      	add	r2, pc, #4	; (adr r2, 800a660 <UART_SetConfig+0x400>)
 800a65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65e:	bf00      	nop
 800a660:	0800a685 	.word	0x0800a685
 800a664:	0800a68d 	.word	0x0800a68d
 800a668:	0800a695 	.word	0x0800a695
 800a66c:	0800a6ab 	.word	0x0800a6ab
 800a670:	0800a69b 	.word	0x0800a69b
 800a674:	0800a6ab 	.word	0x0800a6ab
 800a678:	0800a6ab 	.word	0x0800a6ab
 800a67c:	0800a6ab 	.word	0x0800a6ab
 800a680:	0800a6a3 	.word	0x0800a6a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a684:	f7fd fa12 	bl	8007aac <HAL_RCC_GetPCLK1Freq>
 800a688:	61f8      	str	r0, [r7, #28]
        break;
 800a68a:	e014      	b.n	800a6b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a68c:	f7fd fa24 	bl	8007ad8 <HAL_RCC_GetPCLK2Freq>
 800a690:	61f8      	str	r0, [r7, #28]
        break;
 800a692:	e010      	b.n	800a6b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a694:	4b4d      	ldr	r3, [pc, #308]	; (800a7cc <UART_SetConfig+0x56c>)
 800a696:	61fb      	str	r3, [r7, #28]
        break;
 800a698:	e00d      	b.n	800a6b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a69a:	f7fd f96f 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800a69e:	61f8      	str	r0, [r7, #28]
        break;
 800a6a0:	e009      	b.n	800a6b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6a6:	61fb      	str	r3, [r7, #28]
        break;
 800a6a8:	e005      	b.n	800a6b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a6b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d077      	beq.n	800a7ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	005a      	lsls	r2, r3, #1
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	085b      	lsrs	r3, r3, #1
 800a6c6:	441a      	add	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	2b0f      	cmp	r3, #15
 800a6d6:	d916      	bls.n	800a706 <UART_SetConfig+0x4a6>
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6de:	d212      	bcs.n	800a706 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	f023 030f 	bic.w	r3, r3, #15
 800a6e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	085b      	lsrs	r3, r3, #1
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	f003 0307 	and.w	r3, r3, #7
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	8afb      	ldrh	r3, [r7, #22]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	8afa      	ldrh	r2, [r7, #22]
 800a702:	60da      	str	r2, [r3, #12]
 800a704:	e052      	b.n	800a7ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a70c:	e04e      	b.n	800a7ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a70e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a712:	2b08      	cmp	r3, #8
 800a714:	d827      	bhi.n	800a766 <UART_SetConfig+0x506>
 800a716:	a201      	add	r2, pc, #4	; (adr r2, 800a71c <UART_SetConfig+0x4bc>)
 800a718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71c:	0800a741 	.word	0x0800a741
 800a720:	0800a749 	.word	0x0800a749
 800a724:	0800a751 	.word	0x0800a751
 800a728:	0800a767 	.word	0x0800a767
 800a72c:	0800a757 	.word	0x0800a757
 800a730:	0800a767 	.word	0x0800a767
 800a734:	0800a767 	.word	0x0800a767
 800a738:	0800a767 	.word	0x0800a767
 800a73c:	0800a75f 	.word	0x0800a75f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a740:	f7fd f9b4 	bl	8007aac <HAL_RCC_GetPCLK1Freq>
 800a744:	61f8      	str	r0, [r7, #28]
        break;
 800a746:	e014      	b.n	800a772 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a748:	f7fd f9c6 	bl	8007ad8 <HAL_RCC_GetPCLK2Freq>
 800a74c:	61f8      	str	r0, [r7, #28]
        break;
 800a74e:	e010      	b.n	800a772 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a750:	4b1e      	ldr	r3, [pc, #120]	; (800a7cc <UART_SetConfig+0x56c>)
 800a752:	61fb      	str	r3, [r7, #28]
        break;
 800a754:	e00d      	b.n	800a772 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a756:	f7fd f911 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800a75a:	61f8      	str	r0, [r7, #28]
        break;
 800a75c:	e009      	b.n	800a772 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a75e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a762:	61fb      	str	r3, [r7, #28]
        break;
 800a764:	e005      	b.n	800a772 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a770:	bf00      	nop
    }

    if (pclk != 0U)
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d019      	beq.n	800a7ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	085a      	lsrs	r2, r3, #1
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	441a      	add	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	2b0f      	cmp	r3, #15
 800a790:	d909      	bls.n	800a7a6 <UART_SetConfig+0x546>
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a798:	d205      	bcs.n	800a7a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	60da      	str	r2, [r3, #12]
 800a7a4:	e002      	b.n	800a7ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a7b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3728      	adds	r7, #40	; 0x28
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7c6:	bf00      	nop
 800a7c8:	40008000 	.word	0x40008000
 800a7cc:	00f42400 	.word	0x00f42400

0800a7d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00a      	beq.n	800a7fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00a      	beq.n	800a81c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	430a      	orrs	r2, r1
 800a81a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	f003 0304 	and.w	r3, r3, #4
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00a      	beq.n	800a83e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a842:	f003 0308 	and.w	r3, r3, #8
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00a      	beq.n	800a860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	430a      	orrs	r2, r1
 800a85e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	f003 0310 	and.w	r3, r3, #16
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00a      	beq.n	800a882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	430a      	orrs	r2, r1
 800a880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	f003 0320 	and.w	r3, r3, #32
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00a      	beq.n	800a8a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	430a      	orrs	r2, r1
 800a8a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d01a      	beq.n	800a8e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8ce:	d10a      	bne.n	800a8e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	430a      	orrs	r2, r1
 800a8e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00a      	beq.n	800a908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	430a      	orrs	r2, r1
 800a906:	605a      	str	r2, [r3, #4]
  }
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af02      	add	r7, sp, #8
 800a91a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a924:	f7f8 ff1c 	bl	8003760 <HAL_GetTick>
 800a928:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0308 	and.w	r3, r3, #8
 800a934:	2b08      	cmp	r3, #8
 800a936:	d10e      	bne.n	800a956 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f82d 	bl	800a9a6 <UART_WaitOnFlagUntilTimeout>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e023      	b.n	800a99e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 0304 	and.w	r3, r3, #4
 800a960:	2b04      	cmp	r3, #4
 800a962:	d10e      	bne.n	800a982 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f817 	bl	800a9a6 <UART_WaitOnFlagUntilTimeout>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a97e:	2303      	movs	r3, #3
 800a980:	e00d      	b.n	800a99e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2220      	movs	r2, #32
 800a986:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2220      	movs	r2, #32
 800a98c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b09c      	sub	sp, #112	; 0x70
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	60f8      	str	r0, [r7, #12]
 800a9ae:	60b9      	str	r1, [r7, #8]
 800a9b0:	603b      	str	r3, [r7, #0]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9b6:	e0a5      	b.n	800ab04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9be:	f000 80a1 	beq.w	800ab04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9c2:	f7f8 fecd 	bl	8003760 <HAL_GetTick>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d302      	bcc.n	800a9d8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a9d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d13e      	bne.n	800aa56 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e0:	e853 3f00 	ldrex	r3, [r3]
 800a9e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9ec:	667b      	str	r3, [r7, #100]	; 0x64
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9fe:	e841 2300 	strex	r3, r2, [r1]
 800aa02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aa04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1e6      	bne.n	800a9d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1c:	f023 0301 	bic.w	r3, r3, #1
 800aa20:	663b      	str	r3, [r7, #96]	; 0x60
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3308      	adds	r3, #8
 800aa28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa2a:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa32:	e841 2300 	strex	r3, r2, [r1]
 800aa36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1e5      	bne.n	800aa0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2220      	movs	r2, #32
 800aa42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2220      	movs	r2, #32
 800aa48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e067      	b.n	800ab26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 0304 	and.w	r3, r3, #4
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d04f      	beq.n	800ab04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa72:	d147      	bne.n	800ab04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa7c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	e853 3f00 	ldrex	r3, [r3]
 800aa8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa92:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa9c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aaa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaa4:	e841 2300 	strex	r3, r2, [r1]
 800aaa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1e6      	bne.n	800aa7e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3308      	adds	r3, #8
 800aab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	e853 3f00 	ldrex	r3, [r3]
 800aabe:	613b      	str	r3, [r7, #16]
   return(result);
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	f023 0301 	bic.w	r3, r3, #1
 800aac6:	66bb      	str	r3, [r7, #104]	; 0x68
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3308      	adds	r3, #8
 800aace:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aad0:	623a      	str	r2, [r7, #32]
 800aad2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad4:	69f9      	ldr	r1, [r7, #28]
 800aad6:	6a3a      	ldr	r2, [r7, #32]
 800aad8:	e841 2300 	strex	r3, r2, [r1]
 800aadc:	61bb      	str	r3, [r7, #24]
   return(result);
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e5      	bne.n	800aab0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2220      	movs	r2, #32
 800aae8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2220      	movs	r2, #32
 800aaee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2220      	movs	r2, #32
 800aaf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ab00:	2303      	movs	r3, #3
 800ab02:	e010      	b.n	800ab26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	69da      	ldr	r2, [r3, #28]
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	bf0c      	ite	eq
 800ab14:	2301      	moveq	r3, #1
 800ab16:	2300      	movne	r3, #0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	f43f af4a 	beq.w	800a9b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3770      	adds	r7, #112	; 0x70
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab2e:	b084      	sub	sp, #16
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	f107 001c 	add.w	r0, r7, #28
 800ab3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fa6f 	bl	800b030 <USB_CoreReset>
 800ab52:	4603      	mov	r3, r0
 800ab54:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800ab56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d106      	bne.n	800ab6a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	639a      	str	r2, [r3, #56]	; 0x38
 800ab68:	e005      	b.n	800ab76 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab82:	b004      	add	sp, #16
 800ab84:	4770      	bx	lr

0800ab86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f023 0201 	bic.w	r2, r3, #1
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800abb4:	2300      	movs	r3, #0
 800abb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d115      	bne.n	800abf6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800abd6:	2001      	movs	r0, #1
 800abd8:	f7f8 fdce 	bl	8003778 <HAL_Delay>
      ms++;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3301      	adds	r3, #1
 800abe0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fa16 	bl	800b014 <USB_GetMode>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b01      	cmp	r3, #1
 800abec:	d01e      	beq.n	800ac2c <USB_SetCurrentMode+0x84>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2b31      	cmp	r3, #49	; 0x31
 800abf2:	d9f0      	bls.n	800abd6 <USB_SetCurrentMode+0x2e>
 800abf4:	e01a      	b.n	800ac2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800abf6:	78fb      	ldrb	r3, [r7, #3]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d115      	bne.n	800ac28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac08:	2001      	movs	r0, #1
 800ac0a:	f7f8 fdb5 	bl	8003778 <HAL_Delay>
      ms++;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	3301      	adds	r3, #1
 800ac12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f9fd 	bl	800b014 <USB_GetMode>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <USB_SetCurrentMode+0x84>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2b31      	cmp	r3, #49	; 0x31
 800ac24:	d9f0      	bls.n	800ac08 <USB_SetCurrentMode+0x60>
 800ac26:	e001      	b.n	800ac2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e005      	b.n	800ac38 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2b32      	cmp	r3, #50	; 0x32
 800ac30:	d101      	bne.n	800ac36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e000      	b.n	800ac38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac40:	b084      	sub	sp, #16
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b086      	sub	sp, #24
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ac4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	613b      	str	r3, [r7, #16]
 800ac5e:	e009      	b.n	800ac74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	3340      	adds	r3, #64	; 0x40
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	4413      	add	r3, r2
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	3301      	adds	r3, #1
 800ac72:	613b      	str	r3, [r7, #16]
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	2b0e      	cmp	r3, #14
 800ac78:	d9f2      	bls.n	800ac60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d11c      	bne.n	800acba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac8e:	f043 0302 	orr.w	r3, r3, #2
 800ac92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	e005      	b.n	800acc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800accc:	461a      	mov	r2, r3
 800acce:	2300      	movs	r3, #0
 800acd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd8:	4619      	mov	r1, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace0:	461a      	mov	r2, r3
 800ace2:	680b      	ldr	r3, [r1, #0]
 800ace4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ace6:	2103      	movs	r1, #3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f959 	bl	800afa0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800acee:	2110      	movs	r1, #16
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f8f1 	bl	800aed8 <USB_FlushTxFifo>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f91d 	bl	800af40 <USB_FlushRxFifo>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad16:	461a      	mov	r2, r3
 800ad18:	2300      	movs	r3, #0
 800ad1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad22:	461a      	mov	r2, r3
 800ad24:	2300      	movs	r3, #0
 800ad26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad2e:	461a      	mov	r2, r3
 800ad30:	2300      	movs	r3, #0
 800ad32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad34:	2300      	movs	r3, #0
 800ad36:	613b      	str	r3, [r7, #16]
 800ad38:	e043      	b.n	800adc2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	015a      	lsls	r2, r3, #5
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	4413      	add	r3, r2
 800ad42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad50:	d118      	bne.n	800ad84 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10a      	bne.n	800ad6e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad64:	461a      	mov	r2, r3
 800ad66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	e013      	b.n	800ad96 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	015a      	lsls	r2, r3, #5
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	4413      	add	r3, r2
 800ad76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ad80:	6013      	str	r3, [r2, #0]
 800ad82:	e008      	b.n	800ad96 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	015a      	lsls	r2, r3, #5
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad90:	461a      	mov	r2, r3
 800ad92:	2300      	movs	r3, #0
 800ad94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	015a      	lsls	r2, r3, #5
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ada2:	461a      	mov	r2, r3
 800ada4:	2300      	movs	r3, #0
 800ada6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb4:	461a      	mov	r2, r3
 800adb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800adba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	3301      	adds	r3, #1
 800adc0:	613b      	str	r3, [r7, #16]
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d3b7      	bcc.n	800ad3a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adca:	2300      	movs	r3, #0
 800adcc:	613b      	str	r3, [r7, #16]
 800adce:	e043      	b.n	800ae58 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4413      	add	r3, r2
 800add8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ade2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ade6:	d118      	bne.n	800ae1a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10a      	bne.n	800ae04 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfa:	461a      	mov	r2, r3
 800adfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	e013      	b.n	800ae2c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae10:	461a      	mov	r2, r3
 800ae12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	e008      	b.n	800ae2c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	015a      	lsls	r2, r3, #5
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	4413      	add	r3, r2
 800ae22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae26:	461a      	mov	r2, r3
 800ae28:	2300      	movs	r3, #0
 800ae2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	015a      	lsls	r2, r3, #5
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4413      	add	r3, r2
 800ae34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae38:	461a      	mov	r2, r3
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	015a      	lsls	r2, r3, #5
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	3301      	adds	r3, #1
 800ae56:	613b      	str	r3, [r7, #16]
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d3b7      	bcc.n	800add0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ae80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	f043 0210 	orr.w	r2, r3, #16
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	699a      	ldr	r2, [r3, #24]
 800ae92:	4b10      	ldr	r3, [pc, #64]	; (800aed4 <USB_DevInit+0x294>)
 800ae94:	4313      	orrs	r3, r2
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ae9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d005      	beq.n	800aeac <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	f043 0208 	orr.w	r2, r3, #8
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aeac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d107      	bne.n	800aec2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aeba:	f043 0304 	orr.w	r3, r3, #4
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aece:	b004      	add	sp, #16
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	803c3800 	.word	0x803c3800

0800aed8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aee2:	2300      	movs	r3, #0
 800aee4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3301      	adds	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	4a13      	ldr	r2, [pc, #76]	; (800af3c <USB_FlushTxFifo+0x64>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d901      	bls.n	800aef8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e01b      	b.n	800af30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	daf2      	bge.n	800aee6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	019b      	lsls	r3, r3, #6
 800af08:	f043 0220 	orr.w	r2, r3, #32
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	3301      	adds	r3, #1
 800af14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	4a08      	ldr	r2, [pc, #32]	; (800af3c <USB_FlushTxFifo+0x64>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d901      	bls.n	800af22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e006      	b.n	800af30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	f003 0320 	and.w	r3, r3, #32
 800af2a:	2b20      	cmp	r3, #32
 800af2c:	d0f0      	beq.n	800af10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	00030d40 	.word	0x00030d40

0800af40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af48:	2300      	movs	r3, #0
 800af4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	3301      	adds	r3, #1
 800af50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	4a11      	ldr	r2, [pc, #68]	; (800af9c <USB_FlushRxFifo+0x5c>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d901      	bls.n	800af5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	e018      	b.n	800af90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	daf2      	bge.n	800af4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2210      	movs	r2, #16
 800af6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	3301      	adds	r3, #1
 800af74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	4a08      	ldr	r2, [pc, #32]	; (800af9c <USB_FlushRxFifo+0x5c>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d901      	bls.n	800af82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e006      	b.n	800af90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	f003 0310 	and.w	r3, r3, #16
 800af8a:	2b10      	cmp	r3, #16
 800af8c:	d0f0      	beq.n	800af70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	00030d40 	.word	0x00030d40

0800afa0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	78fb      	ldrb	r3, [r7, #3]
 800afba:	68f9      	ldr	r1, [r7, #12]
 800afbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afc0:	4313      	orrs	r3, r2
 800afc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr

0800afd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800afd2:	b480      	push	{r7}
 800afd4:	b085      	sub	sp, #20
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800afec:	f023 0303 	bic.w	r3, r3, #3
 800aff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b000:	f043 0302 	orr.w	r3, r3, #2
 800b004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	695b      	ldr	r3, [r3, #20]
 800b020:	f003 0301 	and.w	r3, r3, #1
}
 800b024:	4618      	mov	r0, r3
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b038:	2300      	movs	r3, #0
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3301      	adds	r3, #1
 800b040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	4a13      	ldr	r2, [pc, #76]	; (800b094 <USB_CoreReset+0x64>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d901      	bls.n	800b04e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b04a:	2303      	movs	r3, #3
 800b04c:	e01b      	b.n	800b086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	daf2      	bge.n	800b03c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b056:	2300      	movs	r3, #0
 800b058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	f043 0201 	orr.w	r2, r3, #1
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	3301      	adds	r3, #1
 800b06a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4a09      	ldr	r2, [pc, #36]	; (800b094 <USB_CoreReset+0x64>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d901      	bls.n	800b078 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b074:	2303      	movs	r3, #3
 800b076:	e006      	b.n	800b086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	2b01      	cmp	r3, #1
 800b082:	d0f0      	beq.n	800b066 <USB_CoreReset+0x36>

  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3714      	adds	r7, #20
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	00030d40 	.word	0x00030d40

0800b098 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b0a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0aa:	2b84      	cmp	r3, #132	; 0x84
 800b0ac:	d005      	beq.n	800b0ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b0ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	3303      	adds	r3, #3
 800b0b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0ce:	f3ef 8305 	mrs	r3, IPSR
 800b0d2:	607b      	str	r3, [r7, #4]
  return(result);
 800b0d4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	bf14      	ite	ne
 800b0da:	2301      	movne	r3, #1
 800b0dc:	2300      	moveq	r3, #0
 800b0de:	b2db      	uxtb	r3, r3
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b0f0:	f001 fb3e 	bl	800c770 <vTaskStartScheduler>
  
  return osOK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b0fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0fc:	b089      	sub	sp, #36	; 0x24
 800b0fe:	af04      	add	r7, sp, #16
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	695b      	ldr	r3, [r3, #20]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d020      	beq.n	800b14e <osThreadCreate+0x54>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d01c      	beq.n	800b14e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	685c      	ldr	r4, [r3, #4]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681d      	ldr	r5, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	691e      	ldr	r6, [r3, #16]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff ffb6 	bl	800b098 <makeFreeRtosPriority>
 800b12c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	695b      	ldr	r3, [r3, #20]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b136:	9202      	str	r2, [sp, #8]
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	9100      	str	r1, [sp, #0]
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	4632      	mov	r2, r6
 800b140:	4629      	mov	r1, r5
 800b142:	4620      	mov	r0, r4
 800b144:	f001 f914 	bl	800c370 <xTaskCreateStatic>
 800b148:	4603      	mov	r3, r0
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	e01c      	b.n	800b188 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685c      	ldr	r4, [r3, #4]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b15a:	b29e      	uxth	r6, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b162:	4618      	mov	r0, r3
 800b164:	f7ff ff98 	bl	800b098 <makeFreeRtosPriority>
 800b168:	4602      	mov	r2, r0
 800b16a:	f107 030c 	add.w	r3, r7, #12
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	9200      	str	r2, [sp, #0]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	4632      	mov	r2, r6
 800b176:	4629      	mov	r1, r5
 800b178:	4620      	mov	r0, r4
 800b17a:	f001 f956 	bl	800c42a <xTaskCreate>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b01      	cmp	r3, #1
 800b182:	d001      	beq.n	800b188 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b184:	2300      	movs	r3, #0
 800b186:	e000      	b.n	800b18a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b188:	68fb      	ldr	r3, [r7, #12]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b192 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d001      	beq.n	800b1a8 <osDelay+0x16>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	e000      	b.n	800b1aa <osDelay+0x18>
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 faa8 	bl	800c700 <vTaskDelay>
  
  return osOK;
 800b1b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b082      	sub	sp, #8
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d007      	beq.n	800b1da <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	2001      	movs	r0, #1
 800b1d2:	f000 fb92 	bl	800b8fa <xQueueCreateMutexStatic>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	e003      	b.n	800b1e2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b1da:	2001      	movs	r0, #1
 800b1dc:	f000 fb75 	bl	800b8ca <xQueueCreateMutex>
 800b1e0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <osMutexWait+0x18>
    return osErrorParameter;
 800b200:	2380      	movs	r3, #128	; 0x80
 800b202:	e03a      	b.n	800b27a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20e:	d103      	bne.n	800b218 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b210:	f04f 33ff 	mov.w	r3, #4294967295
 800b214:	60fb      	str	r3, [r7, #12]
 800b216:	e009      	b.n	800b22c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d006      	beq.n	800b22c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <osMutexWait+0x40>
      ticks = 1;
 800b228:	2301      	movs	r3, #1
 800b22a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b22c:	f7ff ff4c 	bl	800b0c8 <inHandlerMode>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d017      	beq.n	800b266 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b236:	f107 0308 	add.w	r3, r7, #8
 800b23a:	461a      	mov	r2, r3
 800b23c:	2100      	movs	r1, #0
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fe7a 	bl	800bf38 <xQueueReceiveFromISR>
 800b244:	4603      	mov	r3, r0
 800b246:	2b01      	cmp	r3, #1
 800b248:	d001      	beq.n	800b24e <osMutexWait+0x62>
      return osErrorOS;
 800b24a:	23ff      	movs	r3, #255	; 0xff
 800b24c:	e015      	b.n	800b27a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d011      	beq.n	800b278 <osMutexWait+0x8c>
 800b254:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <osMutexWait+0x98>)
 800b256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b25a:	601a      	str	r2, [r3, #0]
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	e008      	b.n	800b278 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b266:	68f9      	ldr	r1, [r7, #12]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fd29 	bl	800bcc0 <xQueueSemaphoreTake>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b01      	cmp	r3, #1
 800b272:	d001      	beq.n	800b278 <osMutexWait+0x8c>
    return osErrorOS;
 800b274:	23ff      	movs	r3, #255	; 0xff
 800b276:	e000      	b.n	800b27a <osMutexWait+0x8e>
  }
  
  return osOK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	e000ed04 	.word	0xe000ed04

0800b288 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b294:	2300      	movs	r3, #0
 800b296:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b298:	f7ff ff16 	bl	800b0c8 <inHandlerMode>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d016      	beq.n	800b2d0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b2a2:	f107 0308 	add.w	r3, r7, #8
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fc67 	bl	800bb7c <xQueueGiveFromISR>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d001      	beq.n	800b2b8 <osMutexRelease+0x30>
      return osErrorOS;
 800b2b4:	23ff      	movs	r3, #255	; 0xff
 800b2b6:	e017      	b.n	800b2e8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d013      	beq.n	800b2e6 <osMutexRelease+0x5e>
 800b2be:	4b0c      	ldr	r3, [pc, #48]	; (800b2f0 <osMutexRelease+0x68>)
 800b2c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2c4:	601a      	str	r2, [r3, #0]
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	e00a      	b.n	800b2e6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fb2a 	bl	800b930 <xQueueGenericSend>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d001      	beq.n	800b2e6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b2e2:	23ff      	movs	r3, #255	; 0xff
 800b2e4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	e000ed04 	.word	0xe000ed04

0800b2f4 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b2fc:	f7ff fee4 	bl	800b0c8 <inHandlerMode>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <osMutexDelete+0x16>
    return osErrorISR;
 800b306:	2382      	movs	r3, #130	; 0x82
 800b308:	e003      	b.n	800b312 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 feb2 	bl	800c074 <vQueueDelete>

  return osOK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b086      	sub	sp, #24
 800b31e:	af02      	add	r7, sp, #8
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00f      	beq.n	800b34c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d10a      	bne.n	800b348 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	2203      	movs	r2, #3
 800b338:	9200      	str	r2, [sp, #0]
 800b33a:	2200      	movs	r2, #0
 800b33c:	2100      	movs	r1, #0
 800b33e:	2001      	movs	r0, #1
 800b340:	f000 f9d2 	bl	800b6e8 <xQueueGenericCreateStatic>
 800b344:	4603      	mov	r3, r0
 800b346:	e016      	b.n	800b376 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b348:	2300      	movs	r3, #0
 800b34a:	e014      	b.n	800b376 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d110      	bne.n	800b374 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b352:	2203      	movs	r2, #3
 800b354:	2100      	movs	r1, #0
 800b356:	2001      	movs	r0, #1
 800b358:	f000 fa3e 	bl	800b7d8 <xQueueGenericCreate>
 800b35c:	60f8      	str	r0, [r7, #12]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d005      	beq.n	800b370 <osSemaphoreCreate+0x56>
 800b364:	2300      	movs	r3, #0
 800b366:	2200      	movs	r2, #0
 800b368:	2100      	movs	r1, #0
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f000 fae0 	bl	800b930 <xQueueGenericSend>
      return sema;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	e000      	b.n	800b376 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b374:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
	...

0800b380 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b38a:	2300      	movs	r3, #0
 800b38c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d101      	bne.n	800b398 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b394:	2380      	movs	r3, #128	; 0x80
 800b396:	e03a      	b.n	800b40e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a2:	d103      	bne.n	800b3ac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a8:	60fb      	str	r3, [r7, #12]
 800b3aa:	e009      	b.n	800b3c0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d006      	beq.n	800b3c0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <osSemaphoreWait+0x40>
      ticks = 1;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b3c0:	f7ff fe82 	bl	800b0c8 <inHandlerMode>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d017      	beq.n	800b3fa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b3ca:	f107 0308 	add.w	r3, r7, #8
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fdb0 	bl	800bf38 <xQueueReceiveFromISR>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d001      	beq.n	800b3e2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b3de:	23ff      	movs	r3, #255	; 0xff
 800b3e0:	e015      	b.n	800b40e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d011      	beq.n	800b40c <osSemaphoreWait+0x8c>
 800b3e8:	4b0b      	ldr	r3, [pc, #44]	; (800b418 <osSemaphoreWait+0x98>)
 800b3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	e008      	b.n	800b40c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b3fa:	68f9      	ldr	r1, [r7, #12]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fc5f 	bl	800bcc0 <xQueueSemaphoreTake>
 800b402:	4603      	mov	r3, r0
 800b404:	2b01      	cmp	r3, #1
 800b406:	d001      	beq.n	800b40c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b408:	23ff      	movs	r3, #255	; 0xff
 800b40a:	e000      	b.n	800b40e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	e000ed04 	.word	0xe000ed04

0800b41c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b424:	2300      	movs	r3, #0
 800b426:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b428:	2300      	movs	r3, #0
 800b42a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b42c:	f7ff fe4c 	bl	800b0c8 <inHandlerMode>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d016      	beq.n	800b464 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b436:	f107 0308 	add.w	r3, r7, #8
 800b43a:	4619      	mov	r1, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fb9d 	bl	800bb7c <xQueueGiveFromISR>
 800b442:	4603      	mov	r3, r0
 800b444:	2b01      	cmp	r3, #1
 800b446:	d001      	beq.n	800b44c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b448:	23ff      	movs	r3, #255	; 0xff
 800b44a:	e017      	b.n	800b47c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d013      	beq.n	800b47a <osSemaphoreRelease+0x5e>
 800b452:	4b0c      	ldr	r3, [pc, #48]	; (800b484 <osSemaphoreRelease+0x68>)
 800b454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	e00a      	b.n	800b47a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b464:	2300      	movs	r3, #0
 800b466:	2200      	movs	r2, #0
 800b468:	2100      	movs	r1, #0
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fa60 	bl	800b930 <xQueueGenericSend>
 800b470:	4603      	mov	r3, r0
 800b472:	2b01      	cmp	r3, #1
 800b474:	d001      	beq.n	800b47a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b476:	23ff      	movs	r3, #255	; 0xff
 800b478:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b47a:	68fb      	ldr	r3, [r7, #12]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	e000ed04 	.word	0xe000ed04

0800b488 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b490:	f7ff fe1a 	bl	800b0c8 <inHandlerMode>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d001      	beq.n	800b49e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b49a:	2382      	movs	r3, #130	; 0x82
 800b49c:	e003      	b.n	800b4a6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 fde8 	bl	800c074 <vQueueDelete>

  return osOK; 
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f103 0208 	add.w	r2, r3, #8
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f103 0208 	add.w	r2, r3, #8
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f103 0208 	add.w	r2, r3, #8
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4e2:	bf00      	nop
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b083      	sub	sp, #12
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	689a      	ldr	r2, [r3, #8]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	601a      	str	r2, [r3, #0]
}
 800b544:	bf00      	nop
 800b546:	3714      	adds	r7, #20
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b566:	d103      	bne.n	800b570 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	60fb      	str	r3, [r7, #12]
 800b56e:	e00c      	b.n	800b58a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3308      	adds	r3, #8
 800b574:	60fb      	str	r3, [r7, #12]
 800b576:	e002      	b.n	800b57e <vListInsert+0x2e>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	429a      	cmp	r2, r3
 800b588:	d2f6      	bcs.n	800b578 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	1c5a      	adds	r2, r3, #1
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	601a      	str	r2, [r3, #0]
}
 800b5b6:	bf00      	nop
 800b5b8:	3714      	adds	r7, #20
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b085      	sub	sp, #20
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	6892      	ldr	r2, [r2, #8]
 800b5d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	6852      	ldr	r2, [r2, #4]
 800b5e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d103      	bne.n	800b5f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	689a      	ldr	r2, [r3, #8]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	1e5a      	subs	r2, r3, #1
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3714      	adds	r7, #20
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
	...

0800b618 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b642:	f002 f857 	bl	800d6f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64e:	68f9      	ldr	r1, [r7, #12]
 800b650:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b652:	fb01 f303 	mul.w	r3, r1, r3
 800b656:	441a      	add	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b672:	3b01      	subs	r3, #1
 800b674:	68f9      	ldr	r1, [r7, #12]
 800b676:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b678:	fb01 f303 	mul.w	r3, r1, r3
 800b67c:	441a      	add	r2, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	22ff      	movs	r2, #255	; 0xff
 800b686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	22ff      	movs	r2, #255	; 0xff
 800b68e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d114      	bne.n	800b6c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d01a      	beq.n	800b6d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	3310      	adds	r3, #16
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f001 faf5 	bl	800cc94 <xTaskRemoveFromEventList>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d012      	beq.n	800b6d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b6b0:	4b0c      	ldr	r3, [pc, #48]	; (800b6e4 <xQueueGenericReset+0xcc>)
 800b6b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	e009      	b.n	800b6d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3310      	adds	r3, #16
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7ff fef1 	bl	800b4ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	3324      	adds	r3, #36	; 0x24
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff feec 	bl	800b4ae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b6d6:	f002 f83d 	bl	800d754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b6da:	2301      	movs	r3, #1
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	e000ed04 	.word	0xe000ed04

0800b6e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b08e      	sub	sp, #56	; 0x38
 800b6ec:	af02      	add	r7, sp, #8
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
 800b6f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b70e:	bf00      	nop
 800b710:	e7fe      	b.n	800b710 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10a      	bne.n	800b72e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71c:	f383 8811 	msr	BASEPRI, r3
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b72a:	bf00      	nop
 800b72c:	e7fe      	b.n	800b72c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <xQueueGenericCreateStatic+0x52>
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <xQueueGenericCreateStatic+0x56>
 800b73a:	2301      	movs	r3, #1
 800b73c:	e000      	b.n	800b740 <xQueueGenericCreateStatic+0x58>
 800b73e:	2300      	movs	r3, #0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10a      	bne.n	800b75a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	623b      	str	r3, [r7, #32]
}
 800b756:	bf00      	nop
 800b758:	e7fe      	b.n	800b758 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d102      	bne.n	800b766 <xQueueGenericCreateStatic+0x7e>
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <xQueueGenericCreateStatic+0x82>
 800b766:	2301      	movs	r3, #1
 800b768:	e000      	b.n	800b76c <xQueueGenericCreateStatic+0x84>
 800b76a:	2300      	movs	r3, #0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10a      	bne.n	800b786 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b774:	f383 8811 	msr	BASEPRI, r3
 800b778:	f3bf 8f6f 	isb	sy
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	61fb      	str	r3, [r7, #28]
}
 800b782:	bf00      	nop
 800b784:	e7fe      	b.n	800b784 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b786:	2348      	movs	r3, #72	; 0x48
 800b788:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	2b48      	cmp	r3, #72	; 0x48
 800b78e:	d00a      	beq.n	800b7a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b794:	f383 8811 	msr	BASEPRI, r3
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	61bb      	str	r3, [r7, #24]
}
 800b7a2:	bf00      	nop
 800b7a4:	e7fe      	b.n	800b7a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b7a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00d      	beq.n	800b7ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	68b9      	ldr	r1, [r7, #8]
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 f83f 	bl	800b84c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3730      	adds	r7, #48	; 0x30
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08a      	sub	sp, #40	; 0x28
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10a      	bne.n	800b802 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	613b      	str	r3, [r7, #16]
}
 800b7fe:	bf00      	nop
 800b800:	e7fe      	b.n	800b800 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	fb02 f303 	mul.w	r3, r2, r3
 800b80a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	3348      	adds	r3, #72	; 0x48
 800b810:	4618      	mov	r0, r3
 800b812:	f002 f891 	bl	800d938 <pvPortMalloc>
 800b816:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d011      	beq.n	800b842 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	3348      	adds	r3, #72	; 0x48
 800b826:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b830:	79fa      	ldrb	r2, [r7, #7]
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	4613      	mov	r3, r2
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	68b9      	ldr	r1, [r7, #8]
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 f805 	bl	800b84c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b842:	69bb      	ldr	r3, [r7, #24]
	}
 800b844:	4618      	mov	r0, r3
 800b846:	3720      	adds	r7, #32
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d103      	bne.n	800b868 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	69ba      	ldr	r2, [r7, #24]
 800b864:	601a      	str	r2, [r3, #0]
 800b866:	e002      	b.n	800b86e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b87a:	2101      	movs	r1, #1
 800b87c:	69b8      	ldr	r0, [r7, #24]
 800b87e:	f7ff fecb 	bl	800b618 <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800b882:	78fb      	ldrb	r3, [r7, #3]
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	68f9      	ldr	r1, [r7, #12]
 800b888:	2073      	movs	r0, #115	; 0x73
 800b88a:	f003 f8eb 	bl	800ea64 <SEGGER_SYSVIEW_RecordU32x3>
}
 800b88e:	bf00      	nop
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00e      	beq.n	800b8c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 f837 	bl	800b930 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b086      	sub	sp, #24
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	617b      	str	r3, [r7, #20]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b8dc:	79fb      	ldrb	r3, [r7, #7]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	6939      	ldr	r1, [r7, #16]
 800b8e2:	6978      	ldr	r0, [r7, #20]
 800b8e4:	f7ff ff78 	bl	800b7d8 <xQueueGenericCreate>
 800b8e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f7ff ffd3 	bl	800b896 <prvInitialiseMutex>

		return xNewQueue;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
	}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3718      	adds	r7, #24
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b088      	sub	sp, #32
 800b8fe:	af02      	add	r7, sp, #8
 800b900:	4603      	mov	r3, r0
 800b902:	6039      	str	r1, [r7, #0]
 800b904:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b906:	2301      	movs	r3, #1
 800b908:	617b      	str	r3, [r7, #20]
 800b90a:	2300      	movs	r3, #0
 800b90c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2200      	movs	r2, #0
 800b916:	6939      	ldr	r1, [r7, #16]
 800b918:	6978      	ldr	r0, [r7, #20]
 800b91a:	f7ff fee5 	bl	800b6e8 <xQueueGenericCreateStatic>
 800b91e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7ff ffb8 	bl	800b896 <prvInitialiseMutex>

		return xNewQueue;
 800b926:	68fb      	ldr	r3, [r7, #12]
	}
 800b928:	4618      	mov	r0, r3
 800b92a:	3718      	adds	r7, #24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b090      	sub	sp, #64	; 0x40
 800b934:	af02      	add	r7, sp, #8
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]
 800b93c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b93e:	2300      	movs	r3, #0
 800b940:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10a      	bne.n	800b962 <xQueueGenericSend+0x32>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b95e:	bf00      	nop
 800b960:	e7fe      	b.n	800b960 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d103      	bne.n	800b970 <xQueueGenericSend+0x40>
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d101      	bne.n	800b974 <xQueueGenericSend+0x44>
 800b970:	2301      	movs	r3, #1
 800b972:	e000      	b.n	800b976 <xQueueGenericSend+0x46>
 800b974:	2300      	movs	r3, #0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10a      	bne.n	800b990 <xQueueGenericSend+0x60>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b98c:	bf00      	nop
 800b98e:	e7fe      	b.n	800b98e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	2b02      	cmp	r3, #2
 800b994:	d103      	bne.n	800b99e <xQueueGenericSend+0x6e>
 800b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d101      	bne.n	800b9a2 <xQueueGenericSend+0x72>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e000      	b.n	800b9a4 <xQueueGenericSend+0x74>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10a      	bne.n	800b9be <xQueueGenericSend+0x8e>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	623b      	str	r3, [r7, #32]
}
 800b9ba:	bf00      	nop
 800b9bc:	e7fe      	b.n	800b9bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9be:	f001 fb2d 	bl	800d01c <xTaskGetSchedulerState>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d102      	bne.n	800b9ce <xQueueGenericSend+0x9e>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <xQueueGenericSend+0xa2>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e000      	b.n	800b9d4 <xQueueGenericSend+0xa4>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10a      	bne.n	800b9ee <xQueueGenericSend+0xbe>
	__asm volatile
 800b9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9dc:	f383 8811 	msr	BASEPRI, r3
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	61fb      	str	r3, [r7, #28]
}
 800b9ea:	bf00      	nop
 800b9ec:	e7fe      	b.n	800b9ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9ee:	f001 fe81 	bl	800d6f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d302      	bcc.n	800ba04 <xQueueGenericSend+0xd4>
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d136      	bne.n	800ba72 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	4618      	mov	r0, r3
 800ba08:	f003 fce8 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	460b      	mov	r3, r1
 800ba16:	4601      	mov	r1, r0
 800ba18:	205a      	movs	r0, #90	; 0x5a
 800ba1a:	f003 f899 	bl	800eb50 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	68b9      	ldr	r1, [r7, #8]
 800ba22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba24:	f000 fb6a 	bl	800c0fc <prvCopyDataToQueue>
 800ba28:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d010      	beq.n	800ba54 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba34:	3324      	adds	r3, #36	; 0x24
 800ba36:	4618      	mov	r0, r3
 800ba38:	f001 f92c 	bl	800cc94 <xTaskRemoveFromEventList>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d013      	beq.n	800ba6a <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba42:	4b4d      	ldr	r3, [pc, #308]	; (800bb78 <xQueueGenericSend+0x248>)
 800ba44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba48:	601a      	str	r2, [r3, #0]
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	e00a      	b.n	800ba6a <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d007      	beq.n	800ba6a <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba5a:	4b47      	ldr	r3, [pc, #284]	; (800bb78 <xQueueGenericSend+0x248>)
 800ba5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba60:	601a      	str	r2, [r3, #0]
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba6a:	f001 fe73 	bl	800d754 <vPortExitCritical>
				return pdPASS;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e07d      	b.n	800bb6e <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d110      	bne.n	800ba9a <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba78:	f001 fe6c 	bl	800d754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f003 fcac 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	6879      	ldr	r1, [r7, #4]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4601      	mov	r1, r0
 800ba90:	205a      	movs	r0, #90	; 0x5a
 800ba92:	f003 f85d 	bl	800eb50 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800ba96:	2300      	movs	r3, #0
 800ba98:	e069      	b.n	800bb6e <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d106      	bne.n	800baae <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800baa0:	f107 0314 	add.w	r3, r7, #20
 800baa4:	4618      	mov	r0, r3
 800baa6:	f001 f95b 	bl	800cd60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800baaa:	2301      	movs	r3, #1
 800baac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800baae:	f001 fe51 	bl	800d754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bab2:	f000 fed9 	bl	800c868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bab6:	f001 fe1d 	bl	800d6f4 <vPortEnterCritical>
 800baba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bac0:	b25b      	sxtb	r3, r3
 800bac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac6:	d103      	bne.n	800bad0 <xQueueGenericSend+0x1a0>
 800bac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bad6:	b25b      	sxtb	r3, r3
 800bad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800badc:	d103      	bne.n	800bae6 <xQueueGenericSend+0x1b6>
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bae6:	f001 fe35 	bl	800d754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800baea:	1d3a      	adds	r2, r7, #4
 800baec:	f107 0314 	add.w	r3, r7, #20
 800baf0:	4611      	mov	r1, r2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f001 f94a 	bl	800cd8c <xTaskCheckForTimeOut>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d124      	bne.n	800bb48 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bafe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb00:	f000 fbf4 	bl	800c2ec <prvIsQueueFull>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d018      	beq.n	800bb3c <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	3310      	adds	r3, #16
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	4611      	mov	r1, r2
 800bb12:	4618      	mov	r0, r3
 800bb14:	f001 f89a 	bl	800cc4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb1a:	f000 fb7f 	bl	800c21c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb1e:	f000 feb1 	bl	800c884 <xTaskResumeAll>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f47f af62 	bne.w	800b9ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bb2a:	4b13      	ldr	r3, [pc, #76]	; (800bb78 <xQueueGenericSend+0x248>)
 800bb2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb30:	601a      	str	r2, [r3, #0]
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	e758      	b.n	800b9ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb3e:	f000 fb6d 	bl	800c21c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb42:	f000 fe9f 	bl	800c884 <xTaskResumeAll>
 800bb46:	e752      	b.n	800b9ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb4a:	f000 fb67 	bl	800c21c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb4e:	f000 fe99 	bl	800c884 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	4618      	mov	r0, r3
 800bb56:	f003 fc41 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	6879      	ldr	r1, [r7, #4]
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	9300      	str	r3, [sp, #0]
 800bb62:	460b      	mov	r3, r1
 800bb64:	4601      	mov	r1, r0
 800bb66:	205a      	movs	r0, #90	; 0x5a
 800bb68:	f002 fff2 	bl	800eb50 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800bb6c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3738      	adds	r7, #56	; 0x38
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	e000ed04 	.word	0xe000ed04

0800bb7c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b08e      	sub	sp, #56	; 0x38
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10a      	bne.n	800bba6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	623b      	str	r3, [r7, #32]
}
 800bba2:	bf00      	nop
 800bba4:	e7fe      	b.n	800bba4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00a      	beq.n	800bbc4 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	61fb      	str	r3, [r7, #28]
}
 800bbc0:	bf00      	nop
 800bbc2:	e7fe      	b.n	800bbc2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d103      	bne.n	800bbd4 <xQueueGiveFromISR+0x58>
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <xQueueGiveFromISR+0x5c>
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e000      	b.n	800bbda <xQueueGiveFromISR+0x5e>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d10a      	bne.n	800bbf4 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe2:	f383 8811 	msr	BASEPRI, r3
 800bbe6:	f3bf 8f6f 	isb	sy
 800bbea:	f3bf 8f4f 	dsb	sy
 800bbee:	61bb      	str	r3, [r7, #24]
}
 800bbf0:	bf00      	nop
 800bbf2:	e7fe      	b.n	800bbf2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbf4:	f001 fe60 	bl	800d8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bbf8:	f3ef 8211 	mrs	r2, BASEPRI
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	617a      	str	r2, [r7, #20]
 800bc0e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc10:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc12:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc18:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d235      	bcs.n	800bc90 <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc30:	4618      	mov	r0, r3
 800bc32:	f003 fbd3 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800bc36:	4601      	mov	r1, r0
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	2060      	movs	r0, #96	; 0x60
 800bc3e:	f002 feb7 	bl	800e9b0 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc44:	1c5a      	adds	r2, r3, #1
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc52:	d112      	bne.n	800bc7a <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d016      	beq.n	800bc8a <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	3324      	adds	r3, #36	; 0x24
 800bc60:	4618      	mov	r0, r3
 800bc62:	f001 f817 	bl	800cc94 <xTaskRemoveFromEventList>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00e      	beq.n	800bc8a <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00b      	beq.n	800bc8a <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2201      	movs	r2, #1
 800bc76:	601a      	str	r2, [r3, #0]
 800bc78:	e007      	b.n	800bc8a <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc7e:	3301      	adds	r3, #1
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	b25a      	sxtb	r2, r3
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc8e:	e00b      	b.n	800bca8 <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800bc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc92:	4618      	mov	r0, r3
 800bc94:	f003 fba2 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800bc98:	4601      	mov	r1, r0
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	2060      	movs	r0, #96	; 0x60
 800bca0:	f002 fe86 	bl	800e9b0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	637b      	str	r3, [r7, #52]	; 0x34
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bcb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3738      	adds	r7, #56	; 0x38
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
	...

0800bcc0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bcc0:	b590      	push	{r4, r7, lr}
 800bcc2:	b091      	sub	sp, #68	; 0x44
 800bcc4:	af02      	add	r7, sp, #8
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcca:	2300      	movs	r3, #0
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10a      	bne.n	800bcf2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	623b      	str	r3, [r7, #32]
}
 800bcee:	bf00      	nop
 800bcf0:	e7fe      	b.n	800bcf0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00a      	beq.n	800bd10 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	61fb      	str	r3, [r7, #28]
}
 800bd0c:	bf00      	nop
 800bd0e:	e7fe      	b.n	800bd0e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd10:	f001 f984 	bl	800d01c <xTaskGetSchedulerState>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d102      	bne.n	800bd20 <xQueueSemaphoreTake+0x60>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d101      	bne.n	800bd24 <xQueueSemaphoreTake+0x64>
 800bd20:	2301      	movs	r3, #1
 800bd22:	e000      	b.n	800bd26 <xQueueSemaphoreTake+0x66>
 800bd24:	2300      	movs	r3, #0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10a      	bne.n	800bd40 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	61bb      	str	r3, [r7, #24]
}
 800bd3c:	bf00      	nop
 800bd3e:	e7fe      	b.n	800bd3e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd40:	f001 fcd8 	bl	800d6f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd48:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d034      	beq.n	800bdba <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	4618      	mov	r0, r3
 800bd54:	f003 fb42 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800bd58:	4604      	mov	r4, r0
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	f003 fb3e 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800bd60:	4602      	mov	r2, r0
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2101      	movs	r1, #1
 800bd66:	9100      	str	r1, [sp, #0]
 800bd68:	4621      	mov	r1, r4
 800bd6a:	205c      	movs	r0, #92	; 0x5c
 800bd6c:	f002 fef0 	bl	800eb50 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	1e5a      	subs	r2, r3, #1
 800bd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d104      	bne.n	800bd8a <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bd80:	f001 fb0e 	bl	800d3a0 <pvTaskIncrementMutexHeldCount>
 800bd84:	4602      	mov	r2, r0
 800bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd88:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00f      	beq.n	800bdb2 <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd94:	3310      	adds	r3, #16
 800bd96:	4618      	mov	r0, r3
 800bd98:	f000 ff7c 	bl	800cc94 <xTaskRemoveFromEventList>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d007      	beq.n	800bdb2 <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bda2:	4b64      	ldr	r3, [pc, #400]	; (800bf34 <xQueueSemaphoreTake+0x274>)
 800bda4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bdb2:	f001 fccf 	bl	800d754 <vPortExitCritical>
				return pdPASS;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e0b7      	b.n	800bf2a <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d121      	bne.n	800be04 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00a      	beq.n	800bddc <xQueueSemaphoreTake+0x11c>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	617b      	str	r3, [r7, #20]
}
 800bdd8:	bf00      	nop
 800bdda:	e7fe      	b.n	800bdda <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bddc:	f001 fcba 	bl	800d754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800bde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde2:	4618      	mov	r0, r3
 800bde4:	f003 fafa 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800bde8:	4604      	mov	r4, r0
 800bdea:	2000      	movs	r0, #0
 800bdec:	f003 faf6 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2101      	movs	r1, #1
 800bdf6:	9100      	str	r1, [sp, #0]
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	205c      	movs	r0, #92	; 0x5c
 800bdfc:	f002 fea8 	bl	800eb50 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800be00:	2300      	movs	r3, #0
 800be02:	e092      	b.n	800bf2a <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be06:	2b00      	cmp	r3, #0
 800be08:	d106      	bne.n	800be18 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be0a:	f107 030c 	add.w	r3, r7, #12
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 ffa6 	bl	800cd60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be14:	2301      	movs	r3, #1
 800be16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be18:	f001 fc9c 	bl	800d754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be1c:	f000 fd24 	bl	800c868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be20:	f001 fc68 	bl	800d6f4 <vPortEnterCritical>
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be2a:	b25b      	sxtb	r3, r3
 800be2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be30:	d103      	bne.n	800be3a <xQueueSemaphoreTake+0x17a>
 800be32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be34:	2200      	movs	r2, #0
 800be36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be40:	b25b      	sxtb	r3, r3
 800be42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be46:	d103      	bne.n	800be50 <xQueueSemaphoreTake+0x190>
 800be48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4a:	2200      	movs	r2, #0
 800be4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be50:	f001 fc80 	bl	800d754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be54:	463a      	mov	r2, r7
 800be56:	f107 030c 	add.w	r3, r7, #12
 800be5a:	4611      	mov	r1, r2
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 ff95 	bl	800cd8c <xTaskCheckForTimeOut>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d132      	bne.n	800bece <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be6a:	f000 fa29 	bl	800c2c0 <prvIsQueueEmpty>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d026      	beq.n	800bec2 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d109      	bne.n	800be90 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 800be7c:	f001 fc3a 	bl	800d6f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	4618      	mov	r0, r3
 800be86:	f001 f8e7 	bl	800d058 <xTaskPriorityInherit>
 800be8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800be8c:	f001 fc62 	bl	800d754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	3324      	adds	r3, #36	; 0x24
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	4611      	mov	r1, r2
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fed7 	bl	800cc4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bea0:	f000 f9bc 	bl	800c21c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bea4:	f000 fcee 	bl	800c884 <xTaskResumeAll>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f47f af48 	bne.w	800bd40 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800beb0:	4b20      	ldr	r3, [pc, #128]	; (800bf34 <xQueueSemaphoreTake+0x274>)
 800beb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beb6:	601a      	str	r2, [r3, #0]
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	e73e      	b.n	800bd40 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bec4:	f000 f9aa 	bl	800c21c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bec8:	f000 fcdc 	bl	800c884 <xTaskResumeAll>
 800becc:	e738      	b.n	800bd40 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bece:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bed0:	f000 f9a4 	bl	800c21c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bed4:	f000 fcd6 	bl	800c884 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beda:	f000 f9f1 	bl	800c2c0 <prvIsQueueEmpty>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f43f af2d 	beq.w	800bd40 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00d      	beq.n	800bf08 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 800beec:	f001 fc02 	bl	800d6f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bef0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bef2:	f000 f8eb 	bl	800c0cc <prvGetDisinheritPriorityAfterTimeout>
 800bef6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800befe:	4618      	mov	r0, r3
 800bf00:	f001 f9b6 	bl	800d270 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bf04:	f001 fc26 	bl	800d754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f003 fa66 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800bf10:	4604      	mov	r4, r0
 800bf12:	2000      	movs	r0, #0
 800bf14:	f003 fa62 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	9100      	str	r1, [sp, #0]
 800bf20:	4621      	mov	r1, r4
 800bf22:	205c      	movs	r0, #92	; 0x5c
 800bf24:	f002 fe14 	bl	800eb50 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800bf28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	373c      	adds	r7, #60	; 0x3c
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd90      	pop	{r4, r7, pc}
 800bf32:	bf00      	nop
 800bf34:	e000ed04 	.word	0xe000ed04

0800bf38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bf38:	b590      	push	{r4, r7, lr}
 800bf3a:	b08f      	sub	sp, #60	; 0x3c
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10a      	bne.n	800bf64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	623b      	str	r3, [r7, #32]
}
 800bf60:	bf00      	nop
 800bf62:	e7fe      	b.n	800bf62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d103      	bne.n	800bf72 <xQueueReceiveFromISR+0x3a>
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <xQueueReceiveFromISR+0x3e>
 800bf72:	2301      	movs	r3, #1
 800bf74:	e000      	b.n	800bf78 <xQueueReceiveFromISR+0x40>
 800bf76:	2300      	movs	r3, #0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10a      	bne.n	800bf92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	61fb      	str	r3, [r7, #28]
}
 800bf8e:	bf00      	nop
 800bf90:	e7fe      	b.n	800bf90 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf92:	f001 fc91 	bl	800d8b8 <vPortValidateInterruptPriority>
	__asm volatile
 800bf96:	f3ef 8211 	mrs	r2, BASEPRI
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	61ba      	str	r2, [r7, #24]
 800bfac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bfae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d03e      	beq.n	800c03c <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f003 fa06 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f003 fa01 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4621      	mov	r1, r4
 800bfe0:	2062      	movs	r0, #98	; 0x62
 800bfe2:	f002 fd3f 	bl	800ea64 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfea:	f000 f8f1 	bl	800c1d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff0:	1e5a      	subs	r2, r3, #1
 800bff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bff6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffe:	d112      	bne.n	800c026 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d016      	beq.n	800c036 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	3310      	adds	r3, #16
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 fe41 	bl	800cc94 <xTaskRemoveFromEventList>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00e      	beq.n	800c036 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00b      	beq.n	800c036 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2201      	movs	r2, #1
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	e007      	b.n	800c036 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c02a:	3301      	adds	r3, #1
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	b25a      	sxtb	r2, r3
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c036:	2301      	movs	r3, #1
 800c038:	637b      	str	r3, [r7, #52]	; 0x34
 800c03a:	e010      	b.n	800c05e <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800c040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c042:	4618      	mov	r0, r3
 800c044:	f003 f9ca 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800c048:	4604      	mov	r4, r0
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f003 f9c5 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800c052:	4602      	mov	r2, r0
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4621      	mov	r1, r4
 800c058:	2062      	movs	r0, #98	; 0x62
 800c05a:	f002 fd03 	bl	800ea64 <SEGGER_SYSVIEW_RecordU32x3>
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	f383 8811 	msr	BASEPRI, r3
}
 800c068:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	373c      	adds	r7, #60	; 0x3c
 800c070:	46bd      	mov	sp, r7
 800c072:	bd90      	pop	{r4, r7, pc}

0800c074 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10a      	bne.n	800c09c <vQueueDelete+0x28>
	__asm volatile
 800c086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	60bb      	str	r3, [r7, #8]
}
 800c098:	bf00      	nop
 800c09a:	e7fe      	b.n	800c09a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f003 f99c 	bl	800f3dc <SEGGER_SYSVIEW_ShrinkId>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	205f      	movs	r0, #95	; 0x5f
 800c0aa:	f002 fc45 	bl	800e938 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f000 f934 	bl	800c31c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d102      	bne.n	800c0c4 <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f001 fd06 	bl	800dad0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c0c4:	bf00      	nop
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d006      	beq.n	800c0ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f1c3 0307 	rsb	r3, r3, #7
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	e001      	b.n	800c0ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
	}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c108:	2300      	movs	r3, #0
 800c10a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c110:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10d      	bne.n	800c136 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d14d      	bne.n	800c1be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	4618      	mov	r0, r3
 800c128:	f001 f814 	bl	800d154 <xTaskPriorityDisinherit>
 800c12c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	609a      	str	r2, [r3, #8]
 800c134:	e043      	b.n	800c1be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d119      	bne.n	800c170 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6858      	ldr	r0, [r3, #4]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c144:	461a      	mov	r2, r3
 800c146:	68b9      	ldr	r1, [r7, #8]
 800c148:	f004 fe11 	bl	8010d6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	685a      	ldr	r2, [r3, #4]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c154:	441a      	add	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	685a      	ldr	r2, [r3, #4]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	429a      	cmp	r2, r3
 800c164:	d32b      	bcc.n	800c1be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	605a      	str	r2, [r3, #4]
 800c16e:	e026      	b.n	800c1be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	68d8      	ldr	r0, [r3, #12]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c178:	461a      	mov	r2, r3
 800c17a:	68b9      	ldr	r1, [r7, #8]
 800c17c:	f004 fdf7 	bl	8010d6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	68da      	ldr	r2, [r3, #12]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c188:	425b      	negs	r3, r3
 800c18a:	441a      	add	r2, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	68da      	ldr	r2, [r3, #12]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d207      	bcs.n	800c1ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	689a      	ldr	r2, [r3, #8]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a4:	425b      	negs	r3, r3
 800c1a6:	441a      	add	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d105      	bne.n	800c1be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	1c5a      	adds	r2, r3, #1
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c1c6:	697b      	ldr	r3, [r7, #20]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3718      	adds	r7, #24
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d018      	beq.n	800c214 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68da      	ldr	r2, [r3, #12]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	441a      	add	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	68da      	ldr	r2, [r3, #12]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d303      	bcc.n	800c204 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68d9      	ldr	r1, [r3, #12]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20c:	461a      	mov	r2, r3
 800c20e:	6838      	ldr	r0, [r7, #0]
 800c210:	f004 fdad 	bl	8010d6e <memcpy>
	}
}
 800c214:	bf00      	nop
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c224:	f001 fa66 	bl	800d6f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c22e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c230:	e011      	b.n	800c256 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c236:	2b00      	cmp	r3, #0
 800c238:	d012      	beq.n	800c260 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	3324      	adds	r3, #36	; 0x24
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fd28 	bl	800cc94 <xTaskRemoveFromEventList>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d001      	beq.n	800c24e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c24a:	f000 fe01 	bl	800ce50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
 800c250:	3b01      	subs	r3, #1
 800c252:	b2db      	uxtb	r3, r3
 800c254:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	dce9      	bgt.n	800c232 <prvUnlockQueue+0x16>
 800c25e:	e000      	b.n	800c262 <prvUnlockQueue+0x46>
					break;
 800c260:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	22ff      	movs	r2, #255	; 0xff
 800c266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c26a:	f001 fa73 	bl	800d754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c26e:	f001 fa41 	bl	800d6f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c278:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c27a:	e011      	b.n	800c2a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d012      	beq.n	800c2aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	3310      	adds	r3, #16
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 fd03 	bl	800cc94 <xTaskRemoveFromEventList>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c294:	f000 fddc 	bl	800ce50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c298:	7bbb      	ldrb	r3, [r7, #14]
 800c29a:	3b01      	subs	r3, #1
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	dce9      	bgt.n	800c27c <prvUnlockQueue+0x60>
 800c2a8:	e000      	b.n	800c2ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c2aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	22ff      	movs	r2, #255	; 0xff
 800c2b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c2b4:	f001 fa4e 	bl	800d754 <vPortExitCritical>
}
 800c2b8:	bf00      	nop
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c2c8:	f001 fa14 	bl	800d6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d102      	bne.n	800c2da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	e001      	b.n	800c2de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c2de:	f001 fa39 	bl	800d754 <vPortExitCritical>

	return xReturn;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c2f4:	f001 f9fe 	bl	800d6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c300:	429a      	cmp	r2, r3
 800c302:	d102      	bne.n	800c30a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c304:	2301      	movs	r3, #1
 800c306:	60fb      	str	r3, [r7, #12]
 800c308:	e001      	b.n	800c30e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c30a:	2300      	movs	r3, #0
 800c30c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c30e:	f001 fa21 	bl	800d754 <vPortExitCritical>

	return xReturn;
 800c312:	68fb      	ldr	r3, [r7, #12]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c324:	2300      	movs	r3, #0
 800c326:	60fb      	str	r3, [r7, #12]
 800c328:	e016      	b.n	800c358 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c32a:	4a10      	ldr	r2, [pc, #64]	; (800c36c <vQueueUnregisterQueue+0x50>)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	00db      	lsls	r3, r3, #3
 800c330:	4413      	add	r3, r2
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	429a      	cmp	r2, r3
 800c338:	d10b      	bne.n	800c352 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c33a:	4a0c      	ldr	r2, [pc, #48]	; (800c36c <vQueueUnregisterQueue+0x50>)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2100      	movs	r1, #0
 800c340:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c344:	4a09      	ldr	r2, [pc, #36]	; (800c36c <vQueueUnregisterQueue+0x50>)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	00db      	lsls	r3, r3, #3
 800c34a:	4413      	add	r3, r2
 800c34c:	2200      	movs	r2, #0
 800c34e:	605a      	str	r2, [r3, #4]
				break;
 800c350:	e006      	b.n	800c360 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3301      	adds	r3, #1
 800c356:	60fb      	str	r3, [r7, #12]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2b07      	cmp	r3, #7
 800c35c:	d9e5      	bls.n	800c32a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c35e:	bf00      	nop
 800c360:	bf00      	nop
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	20000d34 	.word	0x20000d34

0800c370 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c370:	b580      	push	{r7, lr}
 800c372:	b08e      	sub	sp, #56	; 0x38
 800c374:	af04      	add	r7, sp, #16
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
 800c37c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10a      	bne.n	800c39a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c388:	f383 8811 	msr	BASEPRI, r3
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	623b      	str	r3, [r7, #32]
}
 800c396:	bf00      	nop
 800c398:	e7fe      	b.n	800c398 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10a      	bne.n	800c3b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	61fb      	str	r3, [r7, #28]
}
 800c3b2:	bf00      	nop
 800c3b4:	e7fe      	b.n	800c3b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c3b6:	23b4      	movs	r3, #180	; 0xb4
 800c3b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	2bb4      	cmp	r3, #180	; 0xb4
 800c3be:	d00a      	beq.n	800c3d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	61bb      	str	r3, [r7, #24]
}
 800c3d2:	bf00      	nop
 800c3d4:	e7fe      	b.n	800c3d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c3d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d01e      	beq.n	800c41c <xTaskCreateStatic+0xac>
 800c3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d01b      	beq.n	800c41c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	2202      	movs	r2, #2
 800c3f2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	9303      	str	r3, [sp, #12]
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fc:	9302      	str	r3, [sp, #8]
 800c3fe:	f107 0314 	add.w	r3, r7, #20
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	68b9      	ldr	r1, [r7, #8]
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f000 f850 	bl	800c4b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c416:	f000 f8eb 	bl	800c5f0 <prvAddNewTaskToReadyList>
 800c41a:	e001      	b.n	800c420 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c41c:	2300      	movs	r3, #0
 800c41e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c420:	697b      	ldr	r3, [r7, #20]
	}
 800c422:	4618      	mov	r0, r3
 800c424:	3728      	adds	r7, #40	; 0x28
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b08c      	sub	sp, #48	; 0x30
 800c42e:	af04      	add	r7, sp, #16
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	603b      	str	r3, [r7, #0]
 800c436:	4613      	mov	r3, r2
 800c438:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c43a:	88fb      	ldrh	r3, [r7, #6]
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4618      	mov	r0, r3
 800c440:	f001 fa7a 	bl	800d938 <pvPortMalloc>
 800c444:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00e      	beq.n	800c46a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c44c:	20b4      	movs	r0, #180	; 0xb4
 800c44e:	f001 fa73 	bl	800d938 <pvPortMalloc>
 800c452:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d003      	beq.n	800c462 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	697a      	ldr	r2, [r7, #20]
 800c45e:	631a      	str	r2, [r3, #48]	; 0x30
 800c460:	e005      	b.n	800c46e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c462:	6978      	ldr	r0, [r7, #20]
 800c464:	f001 fb34 	bl	800dad0 <vPortFree>
 800c468:	e001      	b.n	800c46e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d017      	beq.n	800c4a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	2200      	movs	r2, #0
 800c478:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c47c:	88fa      	ldrh	r2, [r7, #6]
 800c47e:	2300      	movs	r3, #0
 800c480:	9303      	str	r3, [sp, #12]
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	9302      	str	r3, [sp, #8]
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c488:	9301      	str	r3, [sp, #4]
 800c48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	68b9      	ldr	r1, [r7, #8]
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f000 f80e 	bl	800c4b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c498:	69f8      	ldr	r0, [r7, #28]
 800c49a:	f000 f8a9 	bl	800c5f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	61bb      	str	r3, [r7, #24]
 800c4a2:	e002      	b.n	800c4aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c4aa:	69bb      	ldr	r3, [r7, #24]
	}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3720      	adds	r7, #32
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b088      	sub	sp, #32
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	f023 0307 	bic.w	r3, r3, #7
 800c4da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	f003 0307 	and.w	r3, r3, #7
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00a      	beq.n	800c4fc <prvInitialiseNewTask+0x48>
	__asm volatile
 800c4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	617b      	str	r3, [r7, #20]
}
 800c4f8:	bf00      	nop
 800c4fa:	e7fe      	b.n	800c4fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d01f      	beq.n	800c542 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c502:	2300      	movs	r3, #0
 800c504:	61fb      	str	r3, [r7, #28]
 800c506:	e012      	b.n	800c52e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	4413      	add	r3, r2
 800c50e:	7819      	ldrb	r1, [r3, #0]
 800c510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	4413      	add	r3, r2
 800c516:	3334      	adds	r3, #52	; 0x34
 800c518:	460a      	mov	r2, r1
 800c51a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	4413      	add	r3, r2
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d006      	beq.n	800c536 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	3301      	adds	r3, #1
 800c52c:	61fb      	str	r3, [r7, #28]
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	2b0f      	cmp	r3, #15
 800c532:	d9e9      	bls.n	800c508 <prvInitialiseNewTask+0x54>
 800c534:	e000      	b.n	800c538 <prvInitialiseNewTask+0x84>
			{
				break;
 800c536:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c540:	e003      	b.n	800c54a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54c:	2b06      	cmp	r3, #6
 800c54e:	d901      	bls.n	800c554 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c550:	2306      	movs	r3, #6
 800c552:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c558:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c55e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c562:	2200      	movs	r2, #0
 800c564:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c568:	3304      	adds	r3, #4
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe ffbf 	bl	800b4ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	3318      	adds	r3, #24
 800c574:	4618      	mov	r0, r3
 800c576:	f7fe ffba 	bl	800b4ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c57e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c582:	f1c3 0207 	rsb	r2, r3, #7
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c58e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	2200      	movs	r2, #0
 800c594:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59a:	2200      	movs	r2, #0
 800c59c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a2:	334c      	adds	r3, #76	; 0x4c
 800c5a4:	2260      	movs	r2, #96	; 0x60
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f004 fbee 	bl	8010d8a <memset>
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b0:	4a0c      	ldr	r2, [pc, #48]	; (800c5e4 <prvInitialiseNewTask+0x130>)
 800c5b2:	651a      	str	r2, [r3, #80]	; 0x50
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b6:	4a0c      	ldr	r2, [pc, #48]	; (800c5e8 <prvInitialiseNewTask+0x134>)
 800c5b8:	655a      	str	r2, [r3, #84]	; 0x54
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5bc:	4a0b      	ldr	r2, [pc, #44]	; (800c5ec <prvInitialiseNewTask+0x138>)
 800c5be:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	68f9      	ldr	r1, [r7, #12]
 800c5c4:	69b8      	ldr	r0, [r7, #24]
 800c5c6:	f000 ff65 	bl	800d494 <pxPortInitialiseStack>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d002      	beq.n	800c5dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5dc:	bf00      	nop
 800c5de:	3720      	adds	r7, #32
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	080129c0 	.word	0x080129c0
 800c5e8:	080129e0 	.word	0x080129e0
 800c5ec:	080129a0 	.word	0x080129a0

0800c5f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5f0:	b5b0      	push	{r4, r5, r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af02      	add	r7, sp, #8
 800c5f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5f8:	f001 f87c 	bl	800d6f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c5fc:	4b39      	ldr	r3, [pc, #228]	; (800c6e4 <prvAddNewTaskToReadyList+0xf4>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3301      	adds	r3, #1
 800c602:	4a38      	ldr	r2, [pc, #224]	; (800c6e4 <prvAddNewTaskToReadyList+0xf4>)
 800c604:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c606:	4b38      	ldr	r3, [pc, #224]	; (800c6e8 <prvAddNewTaskToReadyList+0xf8>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d109      	bne.n	800c622 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c60e:	4a36      	ldr	r2, [pc, #216]	; (800c6e8 <prvAddNewTaskToReadyList+0xf8>)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c614:	4b33      	ldr	r3, [pc, #204]	; (800c6e4 <prvAddNewTaskToReadyList+0xf4>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d110      	bne.n	800c63e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c61c:	f000 fc3c 	bl	800ce98 <prvInitialiseTaskLists>
 800c620:	e00d      	b.n	800c63e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c622:	4b32      	ldr	r3, [pc, #200]	; (800c6ec <prvAddNewTaskToReadyList+0xfc>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d109      	bne.n	800c63e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c62a:	4b2f      	ldr	r3, [pc, #188]	; (800c6e8 <prvAddNewTaskToReadyList+0xf8>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c634:	429a      	cmp	r2, r3
 800c636:	d802      	bhi.n	800c63e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c638:	4a2b      	ldr	r2, [pc, #172]	; (800c6e8 <prvAddNewTaskToReadyList+0xf8>)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c63e:	4b2c      	ldr	r3, [pc, #176]	; (800c6f0 <prvAddNewTaskToReadyList+0x100>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	3301      	adds	r3, #1
 800c644:	4a2a      	ldr	r2, [pc, #168]	; (800c6f0 <prvAddNewTaskToReadyList+0x100>)
 800c646:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d016      	beq.n	800c67c <prvAddNewTaskToReadyList+0x8c>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4618      	mov	r0, r3
 800c652:	f002 fdf7 	bl	800f244 <SEGGER_SYSVIEW_OnTaskCreate>
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c666:	461d      	mov	r5, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	461c      	mov	r4, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c672:	1ae3      	subs	r3, r4, r3
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	462b      	mov	r3, r5
 800c678:	f003 f8be 	bl	800f7f8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4618      	mov	r0, r3
 800c680:	f002 fe68 	bl	800f354 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c688:	2201      	movs	r2, #1
 800c68a:	409a      	lsls	r2, r3
 800c68c:	4b19      	ldr	r3, [pc, #100]	; (800c6f4 <prvAddNewTaskToReadyList+0x104>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4313      	orrs	r3, r2
 800c692:	4a18      	ldr	r2, [pc, #96]	; (800c6f4 <prvAddNewTaskToReadyList+0x104>)
 800c694:	6013      	str	r3, [r2, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c69a:	4613      	mov	r3, r2
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	4413      	add	r3, r2
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	4a15      	ldr	r2, [pc, #84]	; (800c6f8 <prvAddNewTaskToReadyList+0x108>)
 800c6a4:	441a      	add	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	f7fe ff2b 	bl	800b508 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c6b2:	f001 f84f 	bl	800d754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c6b6:	4b0d      	ldr	r3, [pc, #52]	; (800c6ec <prvAddNewTaskToReadyList+0xfc>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00e      	beq.n	800c6dc <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c6be:	4b0a      	ldr	r3, [pc, #40]	; (800c6e8 <prvAddNewTaskToReadyList+0xf8>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d207      	bcs.n	800c6dc <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c6cc:	4b0b      	ldr	r3, [pc, #44]	; (800c6fc <prvAddNewTaskToReadyList+0x10c>)
 800c6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6dc:	bf00      	nop
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c6e4:	20000e74 	.word	0x20000e74
 800c6e8:	20000d74 	.word	0x20000d74
 800c6ec:	20000e80 	.word	0x20000e80
 800c6f0:	20000e90 	.word	0x20000e90
 800c6f4:	20000e7c 	.word	0x20000e7c
 800c6f8:	20000d78 	.word	0x20000d78
 800c6fc:	e000ed04 	.word	0xe000ed04

0800c700 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c708:	2300      	movs	r3, #0
 800c70a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d01b      	beq.n	800c74a <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c712:	4b15      	ldr	r3, [pc, #84]	; (800c768 <vTaskDelay+0x68>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00a      	beq.n	800c730 <vTaskDelay+0x30>
	__asm volatile
 800c71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71e:	f383 8811 	msr	BASEPRI, r3
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	f3bf 8f4f 	dsb	sy
 800c72a:	60bb      	str	r3, [r7, #8]
}
 800c72c:	bf00      	nop
 800c72e:	e7fe      	b.n	800c72e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c730:	f000 f89a 	bl	800c868 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800c734:	6879      	ldr	r1, [r7, #4]
 800c736:	2023      	movs	r0, #35	; 0x23
 800c738:	f002 f8fe 	bl	800e938 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c73c:	2100      	movs	r1, #0
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fe42 	bl	800d3c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c744:	f000 f89e 	bl	800c884 <xTaskResumeAll>
 800c748:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d107      	bne.n	800c760 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 800c750:	4b06      	ldr	r3, [pc, #24]	; (800c76c <vTaskDelay+0x6c>)
 800c752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c756:	601a      	str	r2, [r3, #0]
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c760:	bf00      	nop
 800c762:	3710      	adds	r7, #16
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	20000e9c 	.word	0x20000e9c
 800c76c:	e000ed04 	.word	0xe000ed04

0800c770 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b08a      	sub	sp, #40	; 0x28
 800c774:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c776:	2300      	movs	r3, #0
 800c778:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c77a:	2300      	movs	r3, #0
 800c77c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c77e:	463a      	mov	r2, r7
 800c780:	1d39      	adds	r1, r7, #4
 800c782:	f107 0308 	add.w	r3, r7, #8
 800c786:	4618      	mov	r0, r3
 800c788:	f7f4 f898 	bl	80008bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c78c:	6839      	ldr	r1, [r7, #0]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	68ba      	ldr	r2, [r7, #8]
 800c792:	9202      	str	r2, [sp, #8]
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	2300      	movs	r3, #0
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	2300      	movs	r3, #0
 800c79c:	460a      	mov	r2, r1
 800c79e:	492a      	ldr	r1, [pc, #168]	; (800c848 <vTaskStartScheduler+0xd8>)
 800c7a0:	482a      	ldr	r0, [pc, #168]	; (800c84c <vTaskStartScheduler+0xdc>)
 800c7a2:	f7ff fde5 	bl	800c370 <xTaskCreateStatic>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	4a29      	ldr	r2, [pc, #164]	; (800c850 <vTaskStartScheduler+0xe0>)
 800c7aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c7ac:	4b28      	ldr	r3, [pc, #160]	; (800c850 <vTaskStartScheduler+0xe0>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	617b      	str	r3, [r7, #20]
 800c7b8:	e001      	b.n	800c7be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d12e      	bne.n	800c822 <vTaskStartScheduler+0xb2>
	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	613b      	str	r3, [r7, #16]
}
 800c7d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c7d8:	4b1e      	ldr	r3, [pc, #120]	; (800c854 <vTaskStartScheduler+0xe4>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	334c      	adds	r3, #76	; 0x4c
 800c7de:	4a1e      	ldr	r2, [pc, #120]	; (800c858 <vTaskStartScheduler+0xe8>)
 800c7e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c7e2:	4b1e      	ldr	r3, [pc, #120]	; (800c85c <vTaskStartScheduler+0xec>)
 800c7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c7ea:	4b1d      	ldr	r3, [pc, #116]	; (800c860 <vTaskStartScheduler+0xf0>)
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c7f0:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <vTaskStartScheduler+0xf4>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800c7f6:	4b17      	ldr	r3, [pc, #92]	; (800c854 <vTaskStartScheduler+0xe4>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	3334      	adds	r3, #52	; 0x34
 800c7fc:	2205      	movs	r2, #5
 800c7fe:	4912      	ldr	r1, [pc, #72]	; (800c848 <vTaskStartScheduler+0xd8>)
 800c800:	4618      	mov	r0, r3
 800c802:	f004 faa4 	bl	8010d4e <memcmp>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d005      	beq.n	800c818 <vTaskStartScheduler+0xa8>
 800c80c:	4b11      	ldr	r3, [pc, #68]	; (800c854 <vTaskStartScheduler+0xe4>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4618      	mov	r0, r3
 800c812:	f002 fd5b 	bl	800f2cc <SEGGER_SYSVIEW_OnTaskStartExec>
 800c816:	e001      	b.n	800c81c <vTaskStartScheduler+0xac>
 800c818:	f002 fcf8 	bl	800f20c <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c81c:	f000 fec8 	bl	800d5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c820:	e00e      	b.n	800c840 <vTaskStartScheduler+0xd0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c828:	d10a      	bne.n	800c840 <vTaskStartScheduler+0xd0>
	__asm volatile
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	60fb      	str	r3, [r7, #12]
}
 800c83c:	bf00      	nop
 800c83e:	e7fe      	b.n	800c83e <vTaskStartScheduler+0xce>
}
 800c840:	bf00      	nop
 800c842:	3718      	adds	r7, #24
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	080123f8 	.word	0x080123f8
 800c84c:	0800ce69 	.word	0x0800ce69
 800c850:	20000e98 	.word	0x20000e98
 800c854:	20000d74 	.word	0x20000d74
 800c858:	20000030 	.word	0x20000030
 800c85c:	20000e94 	.word	0x20000e94
 800c860:	20000e80 	.word	0x20000e80
 800c864:	20000e78 	.word	0x20000e78

0800c868 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c868:	b480      	push	{r7}
 800c86a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c86c:	4b04      	ldr	r3, [pc, #16]	; (800c880 <vTaskSuspendAll+0x18>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3301      	adds	r3, #1
 800c872:	4a03      	ldr	r2, [pc, #12]	; (800c880 <vTaskSuspendAll+0x18>)
 800c874:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c876:	bf00      	nop
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr
 800c880:	20000e9c 	.word	0x20000e9c

0800c884 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c88a:	2300      	movs	r3, #0
 800c88c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c88e:	2300      	movs	r3, #0
 800c890:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c892:	4b43      	ldr	r3, [pc, #268]	; (800c9a0 <xTaskResumeAll+0x11c>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10a      	bne.n	800c8b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	603b      	str	r3, [r7, #0]
}
 800c8ac:	bf00      	nop
 800c8ae:	e7fe      	b.n	800c8ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c8b0:	f000 ff20 	bl	800d6f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c8b4:	4b3a      	ldr	r3, [pc, #232]	; (800c9a0 <xTaskResumeAll+0x11c>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	4a39      	ldr	r2, [pc, #228]	; (800c9a0 <xTaskResumeAll+0x11c>)
 800c8bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8be:	4b38      	ldr	r3, [pc, #224]	; (800c9a0 <xTaskResumeAll+0x11c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d165      	bne.n	800c992 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c8c6:	4b37      	ldr	r3, [pc, #220]	; (800c9a4 <xTaskResumeAll+0x120>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d061      	beq.n	800c992 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8ce:	e032      	b.n	800c936 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8d0:	4b35      	ldr	r3, [pc, #212]	; (800c9a8 <xTaskResumeAll+0x124>)
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	3318      	adds	r3, #24
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7fe fe70 	bl	800b5c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fe fe6b 	bl	800b5c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f002 fd30 	bl	800f354 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	409a      	lsls	r2, r3
 800c8fc:	4b2b      	ldr	r3, [pc, #172]	; (800c9ac <xTaskResumeAll+0x128>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4313      	orrs	r3, r2
 800c902:	4a2a      	ldr	r2, [pc, #168]	; (800c9ac <xTaskResumeAll+0x128>)
 800c904:	6013      	str	r3, [r2, #0]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c90a:	4613      	mov	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	4a27      	ldr	r2, [pc, #156]	; (800c9b0 <xTaskResumeAll+0x12c>)
 800c914:	441a      	add	r2, r3
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3304      	adds	r3, #4
 800c91a:	4619      	mov	r1, r3
 800c91c:	4610      	mov	r0, r2
 800c91e:	f7fe fdf3 	bl	800b508 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c926:	4b23      	ldr	r3, [pc, #140]	; (800c9b4 <xTaskResumeAll+0x130>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d302      	bcc.n	800c936 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800c930:	4b21      	ldr	r3, [pc, #132]	; (800c9b8 <xTaskResumeAll+0x134>)
 800c932:	2201      	movs	r2, #1
 800c934:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c936:	4b1c      	ldr	r3, [pc, #112]	; (800c9a8 <xTaskResumeAll+0x124>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1c8      	bne.n	800c8d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c944:	f000 fb4a 	bl	800cfdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c948:	4b1c      	ldr	r3, [pc, #112]	; (800c9bc <xTaskResumeAll+0x138>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d010      	beq.n	800c976 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c954:	f000 f848 	bl	800c9e8 <xTaskIncrementTick>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d002      	beq.n	800c964 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800c95e:	4b16      	ldr	r3, [pc, #88]	; (800c9b8 <xTaskResumeAll+0x134>)
 800c960:	2201      	movs	r2, #1
 800c962:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	3b01      	subs	r3, #1
 800c968:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1f1      	bne.n	800c954 <xTaskResumeAll+0xd0>

						xPendedTicks = 0;
 800c970:	4b12      	ldr	r3, [pc, #72]	; (800c9bc <xTaskResumeAll+0x138>)
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c976:	4b10      	ldr	r3, [pc, #64]	; (800c9b8 <xTaskResumeAll+0x134>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d009      	beq.n	800c992 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c97e:	2301      	movs	r3, #1
 800c980:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c982:	4b0f      	ldr	r3, [pc, #60]	; (800c9c0 <xTaskResumeAll+0x13c>)
 800c984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c992:	f000 fedf 	bl	800d754 <vPortExitCritical>

	return xAlreadyYielded;
 800c996:	68bb      	ldr	r3, [r7, #8]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	20000e9c 	.word	0x20000e9c
 800c9a4:	20000e74 	.word	0x20000e74
 800c9a8:	20000e34 	.word	0x20000e34
 800c9ac:	20000e7c 	.word	0x20000e7c
 800c9b0:	20000d78 	.word	0x20000d78
 800c9b4:	20000d74 	.word	0x20000d74
 800c9b8:	20000e88 	.word	0x20000e88
 800c9bc:	20000e84 	.word	0x20000e84
 800c9c0:	e000ed04 	.word	0xe000ed04

0800c9c4 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c9ca:	f000 ff75 	bl	800d8b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c9d2:	4b04      	ldr	r3, [pc, #16]	; (800c9e4 <xTaskGetTickCountFromISR+0x20>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9d8:	683b      	ldr	r3, [r7, #0]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	20000e78 	.word	0x20000e78

0800c9e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9f2:	4b50      	ldr	r3, [pc, #320]	; (800cb34 <xTaskIncrementTick+0x14c>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f040 8092 	bne.w	800cb20 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c9fc:	4b4e      	ldr	r3, [pc, #312]	; (800cb38 <xTaskIncrementTick+0x150>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	3301      	adds	r3, #1
 800ca02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca04:	4a4c      	ldr	r2, [pc, #304]	; (800cb38 <xTaskIncrementTick+0x150>)
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d120      	bne.n	800ca52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca10:	4b4a      	ldr	r3, [pc, #296]	; (800cb3c <xTaskIncrementTick+0x154>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00a      	beq.n	800ca30 <xTaskIncrementTick+0x48>
	__asm volatile
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	f383 8811 	msr	BASEPRI, r3
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	603b      	str	r3, [r7, #0]
}
 800ca2c:	bf00      	nop
 800ca2e:	e7fe      	b.n	800ca2e <xTaskIncrementTick+0x46>
 800ca30:	4b42      	ldr	r3, [pc, #264]	; (800cb3c <xTaskIncrementTick+0x154>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	60fb      	str	r3, [r7, #12]
 800ca36:	4b42      	ldr	r3, [pc, #264]	; (800cb40 <xTaskIncrementTick+0x158>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a40      	ldr	r2, [pc, #256]	; (800cb3c <xTaskIncrementTick+0x154>)
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	4a40      	ldr	r2, [pc, #256]	; (800cb40 <xTaskIncrementTick+0x158>)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6013      	str	r3, [r2, #0]
 800ca44:	4b3f      	ldr	r3, [pc, #252]	; (800cb44 <xTaskIncrementTick+0x15c>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	4a3e      	ldr	r2, [pc, #248]	; (800cb44 <xTaskIncrementTick+0x15c>)
 800ca4c:	6013      	str	r3, [r2, #0]
 800ca4e:	f000 fac5 	bl	800cfdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca52:	4b3d      	ldr	r3, [pc, #244]	; (800cb48 <xTaskIncrementTick+0x160>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	693a      	ldr	r2, [r7, #16]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d34c      	bcc.n	800caf6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca5c:	4b37      	ldr	r3, [pc, #220]	; (800cb3c <xTaskIncrementTick+0x154>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d104      	bne.n	800ca70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca66:	4b38      	ldr	r3, [pc, #224]	; (800cb48 <xTaskIncrementTick+0x160>)
 800ca68:	f04f 32ff 	mov.w	r2, #4294967295
 800ca6c:	601a      	str	r2, [r3, #0]
					break;
 800ca6e:	e042      	b.n	800caf6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca70:	4b32      	ldr	r3, [pc, #200]	; (800cb3c <xTaskIncrementTick+0x154>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca80:	693a      	ldr	r2, [r7, #16]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d203      	bcs.n	800ca90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca88:	4a2f      	ldr	r2, [pc, #188]	; (800cb48 <xTaskIncrementTick+0x160>)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca8e:	e032      	b.n	800caf6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	3304      	adds	r3, #4
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fe fd94 	bl	800b5c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d004      	beq.n	800caac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	3318      	adds	r3, #24
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7fe fd8b 	bl	800b5c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	4618      	mov	r0, r3
 800cab0:	f002 fc50 	bl	800f354 <SEGGER_SYSVIEW_OnTaskStartReady>
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab8:	2201      	movs	r2, #1
 800caba:	409a      	lsls	r2, r3
 800cabc:	4b23      	ldr	r3, [pc, #140]	; (800cb4c <xTaskIncrementTick+0x164>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4313      	orrs	r3, r2
 800cac2:	4a22      	ldr	r2, [pc, #136]	; (800cb4c <xTaskIncrementTick+0x164>)
 800cac4:	6013      	str	r3, [r2, #0]
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caca:	4613      	mov	r3, r2
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	4413      	add	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4a1f      	ldr	r2, [pc, #124]	; (800cb50 <xTaskIncrementTick+0x168>)
 800cad4:	441a      	add	r2, r3
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	3304      	adds	r3, #4
 800cada:	4619      	mov	r1, r3
 800cadc:	4610      	mov	r0, r2
 800cade:	f7fe fd13 	bl	800b508 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae6:	4b1b      	ldr	r3, [pc, #108]	; (800cb54 <xTaskIncrementTick+0x16c>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caec:	429a      	cmp	r2, r3
 800caee:	d3b5      	bcc.n	800ca5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800caf0:	2301      	movs	r3, #1
 800caf2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800caf4:	e7b2      	b.n	800ca5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800caf6:	4b17      	ldr	r3, [pc, #92]	; (800cb54 <xTaskIncrementTick+0x16c>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cafc:	4914      	ldr	r1, [pc, #80]	; (800cb50 <xTaskIncrementTick+0x168>)
 800cafe:	4613      	mov	r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	4413      	add	r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	440b      	add	r3, r1
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d901      	bls.n	800cb12 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cb12:	4b11      	ldr	r3, [pc, #68]	; (800cb58 <xTaskIncrementTick+0x170>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	617b      	str	r3, [r7, #20]
 800cb1e:	e004      	b.n	800cb2a <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cb20:	4b0e      	ldr	r3, [pc, #56]	; (800cb5c <xTaskIncrementTick+0x174>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	3301      	adds	r3, #1
 800cb26:	4a0d      	ldr	r2, [pc, #52]	; (800cb5c <xTaskIncrementTick+0x174>)
 800cb28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cb2a:	697b      	ldr	r3, [r7, #20]
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3718      	adds	r7, #24
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	20000e9c 	.word	0x20000e9c
 800cb38:	20000e78 	.word	0x20000e78
 800cb3c:	20000e2c 	.word	0x20000e2c
 800cb40:	20000e30 	.word	0x20000e30
 800cb44:	20000e8c 	.word	0x20000e8c
 800cb48:	20000e94 	.word	0x20000e94
 800cb4c:	20000e7c 	.word	0x20000e7c
 800cb50:	20000d78 	.word	0x20000d78
 800cb54:	20000d74 	.word	0x20000d74
 800cb58:	20000e88 	.word	0x20000e88
 800cb5c:	20000e84 	.word	0x20000e84

0800cb60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb66:	4b32      	ldr	r3, [pc, #200]	; (800cc30 <vTaskSwitchContext+0xd0>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb6e:	4b31      	ldr	r3, [pc, #196]	; (800cc34 <vTaskSwitchContext+0xd4>)
 800cb70:	2201      	movs	r2, #1
 800cb72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb74:	e057      	b.n	800cc26 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800cb76:	4b2f      	ldr	r3, [pc, #188]	; (800cc34 <vTaskSwitchContext+0xd4>)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb7c:	4b2e      	ldr	r3, [pc, #184]	; (800cc38 <vTaskSwitchContext+0xd8>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	fab3 f383 	clz	r3, r3
 800cb88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cb8a:	7afb      	ldrb	r3, [r7, #11]
 800cb8c:	f1c3 031f 	rsb	r3, r3, #31
 800cb90:	617b      	str	r3, [r7, #20]
 800cb92:	492a      	ldr	r1, [pc, #168]	; (800cc3c <vTaskSwitchContext+0xdc>)
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	4613      	mov	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4413      	add	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	440b      	add	r3, r1
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d10a      	bne.n	800cbbc <vTaskSwitchContext+0x5c>
	__asm volatile
 800cba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbaa:	f383 8811 	msr	BASEPRI, r3
 800cbae:	f3bf 8f6f 	isb	sy
 800cbb2:	f3bf 8f4f 	dsb	sy
 800cbb6:	607b      	str	r3, [r7, #4]
}
 800cbb8:	bf00      	nop
 800cbba:	e7fe      	b.n	800cbba <vTaskSwitchContext+0x5a>
 800cbbc:	697a      	ldr	r2, [r7, #20]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	4a1d      	ldr	r2, [pc, #116]	; (800cc3c <vTaskSwitchContext+0xdc>)
 800cbc8:	4413      	add	r3, r2
 800cbca:	613b      	str	r3, [r7, #16]
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	685a      	ldr	r2, [r3, #4]
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	605a      	str	r2, [r3, #4]
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	685a      	ldr	r2, [r3, #4]
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	3308      	adds	r3, #8
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d104      	bne.n	800cbec <vTaskSwitchContext+0x8c>
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	685a      	ldr	r2, [r3, #4]
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	605a      	str	r2, [r3, #4]
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	4a13      	ldr	r2, [pc, #76]	; (800cc40 <vTaskSwitchContext+0xe0>)
 800cbf4:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800cbf6:	4b12      	ldr	r3, [pc, #72]	; (800cc40 <vTaskSwitchContext+0xe0>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3334      	adds	r3, #52	; 0x34
 800cbfc:	2205      	movs	r2, #5
 800cbfe:	4911      	ldr	r1, [pc, #68]	; (800cc44 <vTaskSwitchContext+0xe4>)
 800cc00:	4618      	mov	r0, r3
 800cc02:	f004 f8a4 	bl	8010d4e <memcmp>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d005      	beq.n	800cc18 <vTaskSwitchContext+0xb8>
 800cc0c:	4b0c      	ldr	r3, [pc, #48]	; (800cc40 <vTaskSwitchContext+0xe0>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f002 fb5b 	bl	800f2cc <SEGGER_SYSVIEW_OnTaskStartExec>
 800cc16:	e001      	b.n	800cc1c <vTaskSwitchContext+0xbc>
 800cc18:	f002 faf8 	bl	800f20c <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cc1c:	4b08      	ldr	r3, [pc, #32]	; (800cc40 <vTaskSwitchContext+0xe0>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	334c      	adds	r3, #76	; 0x4c
 800cc22:	4a09      	ldr	r2, [pc, #36]	; (800cc48 <vTaskSwitchContext+0xe8>)
 800cc24:	6013      	str	r3, [r2, #0]
}
 800cc26:	bf00      	nop
 800cc28:	3718      	adds	r7, #24
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	20000e9c 	.word	0x20000e9c
 800cc34:	20000e88 	.word	0x20000e88
 800cc38:	20000e7c 	.word	0x20000e7c
 800cc3c:	20000d78 	.word	0x20000d78
 800cc40:	20000d74 	.word	0x20000d74
 800cc44:	080123f8 	.word	0x080123f8
 800cc48:	20000030 	.word	0x20000030

0800cc4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10a      	bne.n	800cc72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	60fb      	str	r3, [r7, #12]
}
 800cc6e:	bf00      	nop
 800cc70:	e7fe      	b.n	800cc70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc72:	4b07      	ldr	r3, [pc, #28]	; (800cc90 <vTaskPlaceOnEventList+0x44>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	3318      	adds	r3, #24
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f7fe fc68 	bl	800b550 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc80:	2101      	movs	r1, #1
 800cc82:	6838      	ldr	r0, [r7, #0]
 800cc84:	f000 fba0 	bl	800d3c8 <prvAddCurrentTaskToDelayedList>
}
 800cc88:	bf00      	nop
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	20000d74 	.word	0x20000d74

0800cc94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d10a      	bne.n	800ccc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ccaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	60fb      	str	r3, [r7, #12]
}
 800ccbc:	bf00      	nop
 800ccbe:	e7fe      	b.n	800ccbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	3318      	adds	r3, #24
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7fe fc7c 	bl	800b5c2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccca:	4b1f      	ldr	r3, [pc, #124]	; (800cd48 <xTaskRemoveFromEventList+0xb4>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d120      	bne.n	800cd14 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	3304      	adds	r3, #4
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fe fc73 	bl	800b5c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f002 fb38 	bl	800f354 <SEGGER_SYSVIEW_OnTaskStartReady>
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce8:	2201      	movs	r2, #1
 800ccea:	409a      	lsls	r2, r3
 800ccec:	4b17      	ldr	r3, [pc, #92]	; (800cd4c <xTaskRemoveFromEventList+0xb8>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	4a16      	ldr	r2, [pc, #88]	; (800cd4c <xTaskRemoveFromEventList+0xb8>)
 800ccf4:	6013      	str	r3, [r2, #0]
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	4413      	add	r3, r2
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4a13      	ldr	r2, [pc, #76]	; (800cd50 <xTaskRemoveFromEventList+0xbc>)
 800cd04:	441a      	add	r2, r3
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	f7fe fbfb 	bl	800b508 <vListInsertEnd>
 800cd12:	e005      	b.n	800cd20 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	3318      	adds	r3, #24
 800cd18:	4619      	mov	r1, r3
 800cd1a:	480e      	ldr	r0, [pc, #56]	; (800cd54 <xTaskRemoveFromEventList+0xc0>)
 800cd1c:	f7fe fbf4 	bl	800b508 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd24:	4b0c      	ldr	r3, [pc, #48]	; (800cd58 <xTaskRemoveFromEventList+0xc4>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d905      	bls.n	800cd3a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd32:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <xTaskRemoveFromEventList+0xc8>)
 800cd34:	2201      	movs	r2, #1
 800cd36:	601a      	str	r2, [r3, #0]
 800cd38:	e001      	b.n	800cd3e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd3e:	697b      	ldr	r3, [r7, #20]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	20000e9c 	.word	0x20000e9c
 800cd4c:	20000e7c 	.word	0x20000e7c
 800cd50:	20000d78 	.word	0x20000d78
 800cd54:	20000e34 	.word	0x20000e34
 800cd58:	20000d74 	.word	0x20000d74
 800cd5c:	20000e88 	.word	0x20000e88

0800cd60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd68:	4b06      	ldr	r3, [pc, #24]	; (800cd84 <vTaskInternalSetTimeOutState+0x24>)
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd70:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <vTaskInternalSetTimeOutState+0x28>)
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	605a      	str	r2, [r3, #4]
}
 800cd78:	bf00      	nop
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr
 800cd84:	20000e8c 	.word	0x20000e8c
 800cd88:	20000e78 	.word	0x20000e78

0800cd8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b088      	sub	sp, #32
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10a      	bne.n	800cdb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	613b      	str	r3, [r7, #16]
}
 800cdae:	bf00      	nop
 800cdb0:	e7fe      	b.n	800cdb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10a      	bne.n	800cdce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbc:	f383 8811 	msr	BASEPRI, r3
 800cdc0:	f3bf 8f6f 	isb	sy
 800cdc4:	f3bf 8f4f 	dsb	sy
 800cdc8:	60fb      	str	r3, [r7, #12]
}
 800cdca:	bf00      	nop
 800cdcc:	e7fe      	b.n	800cdcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cdce:	f000 fc91 	bl	800d6f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cdd2:	4b1d      	ldr	r3, [pc, #116]	; (800ce48 <xTaskCheckForTimeOut+0xbc>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	69ba      	ldr	r2, [r7, #24]
 800cdde:	1ad3      	subs	r3, r2, r3
 800cde0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdea:	d102      	bne.n	800cdf2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cdec:	2300      	movs	r3, #0
 800cdee:	61fb      	str	r3, [r7, #28]
 800cdf0:	e023      	b.n	800ce3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	4b15      	ldr	r3, [pc, #84]	; (800ce4c <xTaskCheckForTimeOut+0xc0>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d007      	beq.n	800ce0e <xTaskCheckForTimeOut+0x82>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	69ba      	ldr	r2, [r7, #24]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d302      	bcc.n	800ce0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	61fb      	str	r3, [r7, #28]
 800ce0c:	e015      	b.n	800ce3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d20b      	bcs.n	800ce30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	1ad2      	subs	r2, r2, r3
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7ff ff9b 	bl	800cd60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	61fb      	str	r3, [r7, #28]
 800ce2e:	e004      	b.n	800ce3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	2200      	movs	r2, #0
 800ce34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce36:	2301      	movs	r3, #1
 800ce38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce3a:	f000 fc8b 	bl	800d754 <vPortExitCritical>

	return xReturn;
 800ce3e:	69fb      	ldr	r3, [r7, #28]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3720      	adds	r7, #32
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	20000e78 	.word	0x20000e78
 800ce4c:	20000e8c 	.word	0x20000e8c

0800ce50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce50:	b480      	push	{r7}
 800ce52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce54:	4b03      	ldr	r3, [pc, #12]	; (800ce64 <vTaskMissedYield+0x14>)
 800ce56:	2201      	movs	r2, #1
 800ce58:	601a      	str	r2, [r3, #0]
}
 800ce5a:	bf00      	nop
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr
 800ce64:	20000e88 	.word	0x20000e88

0800ce68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce70:	f000 f852 	bl	800cf18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce74:	4b06      	ldr	r3, [pc, #24]	; (800ce90 <prvIdleTask+0x28>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d9f9      	bls.n	800ce70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ce7c:	4b05      	ldr	r3, [pc, #20]	; (800ce94 <prvIdleTask+0x2c>)
 800ce7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce82:	601a      	str	r2, [r3, #0]
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ce8c:	e7f0      	b.n	800ce70 <prvIdleTask+0x8>
 800ce8e:	bf00      	nop
 800ce90:	20000d78 	.word	0x20000d78
 800ce94:	e000ed04 	.word	0xe000ed04

0800ce98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce9e:	2300      	movs	r3, #0
 800cea0:	607b      	str	r3, [r7, #4]
 800cea2:	e00c      	b.n	800cebe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	4613      	mov	r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4413      	add	r3, r2
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4a12      	ldr	r2, [pc, #72]	; (800cef8 <prvInitialiseTaskLists+0x60>)
 800ceb0:	4413      	add	r3, r2
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe fafb 	bl	800b4ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3301      	adds	r3, #1
 800cebc:	607b      	str	r3, [r7, #4]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b06      	cmp	r3, #6
 800cec2:	d9ef      	bls.n	800cea4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cec4:	480d      	ldr	r0, [pc, #52]	; (800cefc <prvInitialiseTaskLists+0x64>)
 800cec6:	f7fe faf2 	bl	800b4ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ceca:	480d      	ldr	r0, [pc, #52]	; (800cf00 <prvInitialiseTaskLists+0x68>)
 800cecc:	f7fe faef 	bl	800b4ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ced0:	480c      	ldr	r0, [pc, #48]	; (800cf04 <prvInitialiseTaskLists+0x6c>)
 800ced2:	f7fe faec 	bl	800b4ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ced6:	480c      	ldr	r0, [pc, #48]	; (800cf08 <prvInitialiseTaskLists+0x70>)
 800ced8:	f7fe fae9 	bl	800b4ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cedc:	480b      	ldr	r0, [pc, #44]	; (800cf0c <prvInitialiseTaskLists+0x74>)
 800cede:	f7fe fae6 	bl	800b4ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cee2:	4b0b      	ldr	r3, [pc, #44]	; (800cf10 <prvInitialiseTaskLists+0x78>)
 800cee4:	4a05      	ldr	r2, [pc, #20]	; (800cefc <prvInitialiseTaskLists+0x64>)
 800cee6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cee8:	4b0a      	ldr	r3, [pc, #40]	; (800cf14 <prvInitialiseTaskLists+0x7c>)
 800ceea:	4a05      	ldr	r2, [pc, #20]	; (800cf00 <prvInitialiseTaskLists+0x68>)
 800ceec:	601a      	str	r2, [r3, #0]
}
 800ceee:	bf00      	nop
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	20000d78 	.word	0x20000d78
 800cefc:	20000e04 	.word	0x20000e04
 800cf00:	20000e18 	.word	0x20000e18
 800cf04:	20000e34 	.word	0x20000e34
 800cf08:	20000e48 	.word	0x20000e48
 800cf0c:	20000e60 	.word	0x20000e60
 800cf10:	20000e2c 	.word	0x20000e2c
 800cf14:	20000e30 	.word	0x20000e30

0800cf18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf1e:	e019      	b.n	800cf54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cf20:	f000 fbe8 	bl	800d6f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf24:	4b10      	ldr	r3, [pc, #64]	; (800cf68 <prvCheckTasksWaitingTermination+0x50>)
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	3304      	adds	r3, #4
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7fe fb46 	bl	800b5c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf36:	4b0d      	ldr	r3, [pc, #52]	; (800cf6c <prvCheckTasksWaitingTermination+0x54>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	4a0b      	ldr	r2, [pc, #44]	; (800cf6c <prvCheckTasksWaitingTermination+0x54>)
 800cf3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf40:	4b0b      	ldr	r3, [pc, #44]	; (800cf70 <prvCheckTasksWaitingTermination+0x58>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	3b01      	subs	r3, #1
 800cf46:	4a0a      	ldr	r2, [pc, #40]	; (800cf70 <prvCheckTasksWaitingTermination+0x58>)
 800cf48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf4a:	f000 fc03 	bl	800d754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 f810 	bl	800cf74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf54:	4b06      	ldr	r3, [pc, #24]	; (800cf70 <prvCheckTasksWaitingTermination+0x58>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d1e1      	bne.n	800cf20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf5c:	bf00      	nop
 800cf5e:	bf00      	nop
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	20000e48 	.word	0x20000e48
 800cf6c:	20000e74 	.word	0x20000e74
 800cf70:	20000e5c 	.word	0x20000e5c

0800cf74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	334c      	adds	r3, #76	; 0x4c
 800cf80:	4618      	mov	r0, r3
 800cf82:	f004 f83b 	bl	8010ffc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d108      	bne.n	800cfa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf94:	4618      	mov	r0, r3
 800cf96:	f000 fd9b 	bl	800dad0 <vPortFree>
				vPortFree( pxTCB );
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 fd98 	bl	800dad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cfa0:	e018      	b.n	800cfd4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d103      	bne.n	800cfb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 fd8f 	bl	800dad0 <vPortFree>
	}
 800cfb2:	e00f      	b.n	800cfd4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cfba:	2b02      	cmp	r3, #2
 800cfbc:	d00a      	beq.n	800cfd4 <prvDeleteTCB+0x60>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	60fb      	str	r3, [r7, #12]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <prvDeleteTCB+0x5e>
	}
 800cfd4:	bf00      	nop
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfe2:	4b0c      	ldr	r3, [pc, #48]	; (800d014 <prvResetNextTaskUnblockTime+0x38>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d104      	bne.n	800cff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cfec:	4b0a      	ldr	r3, [pc, #40]	; (800d018 <prvResetNextTaskUnblockTime+0x3c>)
 800cfee:	f04f 32ff 	mov.w	r2, #4294967295
 800cff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cff4:	e008      	b.n	800d008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cff6:	4b07      	ldr	r3, [pc, #28]	; (800d014 <prvResetNextTaskUnblockTime+0x38>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	4a04      	ldr	r2, [pc, #16]	; (800d018 <prvResetNextTaskUnblockTime+0x3c>)
 800d006:	6013      	str	r3, [r2, #0]
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr
 800d014:	20000e2c 	.word	0x20000e2c
 800d018:	20000e94 	.word	0x20000e94

0800d01c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d022:	4b0b      	ldr	r3, [pc, #44]	; (800d050 <xTaskGetSchedulerState+0x34>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d102      	bne.n	800d030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d02a:	2301      	movs	r3, #1
 800d02c:	607b      	str	r3, [r7, #4]
 800d02e:	e008      	b.n	800d042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d030:	4b08      	ldr	r3, [pc, #32]	; (800d054 <xTaskGetSchedulerState+0x38>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d102      	bne.n	800d03e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d038:	2302      	movs	r3, #2
 800d03a:	607b      	str	r3, [r7, #4]
 800d03c:	e001      	b.n	800d042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d03e:	2300      	movs	r3, #0
 800d040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d042:	687b      	ldr	r3, [r7, #4]
	}
 800d044:	4618      	mov	r0, r3
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr
 800d050:	20000e80 	.word	0x20000e80
 800d054:	20000e9c 	.word	0x20000e9c

0800d058 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d064:	2300      	movs	r3, #0
 800d066:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d067      	beq.n	800d13e <xTaskPriorityInherit+0xe6>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d072:	4b35      	ldr	r3, [pc, #212]	; (800d148 <xTaskPriorityInherit+0xf0>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d078:	429a      	cmp	r2, r3
 800d07a:	d257      	bcs.n	800d12c <xTaskPriorityInherit+0xd4>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	699b      	ldr	r3, [r3, #24]
 800d080:	2b00      	cmp	r3, #0
 800d082:	db06      	blt.n	800d092 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d084:	4b30      	ldr	r3, [pc, #192]	; (800d148 <xTaskPriorityInherit+0xf0>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08a:	f1c3 0207 	rsb	r2, r3, #7
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	6959      	ldr	r1, [r3, #20]
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d09a:	4613      	mov	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4413      	add	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4a2a      	ldr	r2, [pc, #168]	; (800d14c <xTaskPriorityInherit+0xf4>)
 800d0a4:	4413      	add	r3, r2
 800d0a6:	4299      	cmp	r1, r3
 800d0a8:	d133      	bne.n	800d112 <xTaskPriorityInherit+0xba>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fe fa87 	bl	800b5c2 <uxListRemove>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10a      	bne.n	800d0d0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0be:	2201      	movs	r2, #1
 800d0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c4:	43da      	mvns	r2, r3
 800d0c6:	4b22      	ldr	r3, [pc, #136]	; (800d150 <xTaskPriorityInherit+0xf8>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	4a20      	ldr	r2, [pc, #128]	; (800d150 <xTaskPriorityInherit+0xf8>)
 800d0ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0d0:	4b1d      	ldr	r3, [pc, #116]	; (800d148 <xTaskPriorityInherit+0xf0>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f002 f939 	bl	800f354 <SEGGER_SYSVIEW_OnTaskStartReady>
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	409a      	lsls	r2, r3
 800d0ea:	4b19      	ldr	r3, [pc, #100]	; (800d150 <xTaskPriorityInherit+0xf8>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	4a17      	ldr	r2, [pc, #92]	; (800d150 <xTaskPriorityInherit+0xf8>)
 800d0f2:	6013      	str	r3, [r2, #0]
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	4413      	add	r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	4a12      	ldr	r2, [pc, #72]	; (800d14c <xTaskPriorityInherit+0xf4>)
 800d102:	441a      	add	r2, r3
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	3304      	adds	r3, #4
 800d108:	4619      	mov	r1, r3
 800d10a:	4610      	mov	r0, r2
 800d10c:	f7fe f9fc 	bl	800b508 <vListInsertEnd>
 800d110:	e004      	b.n	800d11c <xTaskPriorityInherit+0xc4>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d112:	4b0d      	ldr	r3, [pc, #52]	; (800d148 <xTaskPriorityInherit+0xf0>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	4619      	mov	r1, r3
 800d120:	2049      	movs	r0, #73	; 0x49
 800d122:	f001 fc09 	bl	800e938 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d126:	2301      	movs	r3, #1
 800d128:	60fb      	str	r3, [r7, #12]
 800d12a:	e008      	b.n	800d13e <xTaskPriorityInherit+0xe6>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d130:	4b05      	ldr	r3, [pc, #20]	; (800d148 <xTaskPriorityInherit+0xf0>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d136:	429a      	cmp	r2, r3
 800d138:	d201      	bcs.n	800d13e <xTaskPriorityInherit+0xe6>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d13a:	2301      	movs	r3, #1
 800d13c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d13e:	68fb      	ldr	r3, [r7, #12]
	}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	20000d74 	.word	0x20000d74
 800d14c:	20000d78 	.word	0x20000d78
 800d150:	20000e7c 	.word	0x20000e7c

0800d154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d154:	b580      	push	{r7, lr}
 800d156:	b086      	sub	sp, #24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d160:	2300      	movs	r3, #0
 800d162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d077      	beq.n	800d25a <xTaskPriorityDisinherit+0x106>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d16a:	4b3e      	ldr	r3, [pc, #248]	; (800d264 <xTaskPriorityDisinherit+0x110>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	693a      	ldr	r2, [r7, #16]
 800d170:	429a      	cmp	r2, r3
 800d172:	d00a      	beq.n	800d18a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	60fb      	str	r3, [r7, #12]
}
 800d186:	bf00      	nop
 800d188:	e7fe      	b.n	800d188 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10a      	bne.n	800d1a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	60bb      	str	r3, [r7, #8]
}
 800d1a4:	bf00      	nop
 800d1a6:	e7fe      	b.n	800d1a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1ac:	1e5a      	subs	r2, r3, #1
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d04d      	beq.n	800d25a <xTaskPriorityDisinherit+0x106>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d149      	bne.n	800d25a <xTaskPriorityDisinherit+0x106>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe f9f9 	bl	800b5c2 <uxListRemove>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d115      	bne.n	800d202 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1da:	4923      	ldr	r1, [pc, #140]	; (800d268 <xTaskPriorityDisinherit+0x114>)
 800d1dc:	4613      	mov	r3, r2
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	440b      	add	r3, r1
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10a      	bne.n	800d202 <xTaskPriorityDisinherit+0xae>
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f6:	43da      	mvns	r2, r3
 800d1f8:	4b1c      	ldr	r3, [pc, #112]	; (800d26c <xTaskPriorityDisinherit+0x118>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	4a1b      	ldr	r2, [pc, #108]	; (800d26c <xTaskPriorityDisinherit+0x118>)
 800d200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	4619      	mov	r1, r3
 800d206:	204a      	movs	r0, #74	; 0x4a
 800d208:	f001 fb96 	bl	800e938 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d218:	f1c3 0207 	rsb	r2, r3, #7
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	4618      	mov	r0, r3
 800d224:	f002 f896 	bl	800f354 <SEGGER_SYSVIEW_OnTaskStartReady>
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22c:	2201      	movs	r2, #1
 800d22e:	409a      	lsls	r2, r3
 800d230:	4b0e      	ldr	r3, [pc, #56]	; (800d26c <xTaskPriorityDisinherit+0x118>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4313      	orrs	r3, r2
 800d236:	4a0d      	ldr	r2, [pc, #52]	; (800d26c <xTaskPriorityDisinherit+0x118>)
 800d238:	6013      	str	r3, [r2, #0]
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d23e:	4613      	mov	r3, r2
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	4413      	add	r3, r2
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	4a08      	ldr	r2, [pc, #32]	; (800d268 <xTaskPriorityDisinherit+0x114>)
 800d248:	441a      	add	r2, r3
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	3304      	adds	r3, #4
 800d24e:	4619      	mov	r1, r3
 800d250:	4610      	mov	r0, r2
 800d252:	f7fe f959 	bl	800b508 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d256:	2301      	movs	r3, #1
 800d258:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d25a:	697b      	ldr	r3, [r7, #20]
	}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3718      	adds	r7, #24
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	20000d74 	.word	0x20000d74
 800d268:	20000d78 	.word	0x20000d78
 800d26c:	20000e7c 	.word	0x20000e7c

0800d270 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d270:	b580      	push	{r7, lr}
 800d272:	b088      	sub	sp, #32
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d27e:	2301      	movs	r3, #1
 800d280:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 8081 	beq.w	800d38c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10a      	bne.n	800d2a8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	60fb      	str	r3, [r7, #12]
}
 800d2a4:	bf00      	nop
 800d2a6:	e7fe      	b.n	800d2a6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d902      	bls.n	800d2b8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	61fb      	str	r3, [r7, #28]
 800d2b6:	e002      	b.n	800d2be <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2bc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c2:	69fa      	ldr	r2, [r7, #28]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d061      	beq.n	800d38c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2cc:	697a      	ldr	r2, [r7, #20]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d15c      	bne.n	800d38c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d2d2:	4b30      	ldr	r3, [pc, #192]	; (800d394 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	69ba      	ldr	r2, [r7, #24]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d10a      	bne.n	800d2f2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800d2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e0:	f383 8811 	msr	BASEPRI, r3
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	f3bf 8f4f 	dsb	sy
 800d2ec:	60bb      	str	r3, [r7, #8]
}
 800d2ee:	bf00      	nop
 800d2f0:	e7fe      	b.n	800d2f0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	204a      	movs	r0, #74	; 0x4a
 800d2f8:	f001 fb1e 	bl	800e938 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d300:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	69fa      	ldr	r2, [r7, #28]
 800d306:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	699b      	ldr	r3, [r3, #24]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	db04      	blt.n	800d31a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	f1c3 0207 	rsb	r2, r3, #7
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	6959      	ldr	r1, [r3, #20]
 800d31e:	693a      	ldr	r2, [r7, #16]
 800d320:	4613      	mov	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4a1b      	ldr	r2, [pc, #108]	; (800d398 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d32a:	4413      	add	r3, r2
 800d32c:	4299      	cmp	r1, r3
 800d32e:	d12d      	bne.n	800d38c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	3304      	adds	r3, #4
 800d334:	4618      	mov	r0, r3
 800d336:	f7fe f944 	bl	800b5c2 <uxListRemove>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10a      	bne.n	800d356 <vTaskPriorityDisinheritAfterTimeout+0xe6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d344:	2201      	movs	r2, #1
 800d346:	fa02 f303 	lsl.w	r3, r2, r3
 800d34a:	43da      	mvns	r2, r3
 800d34c:	4b13      	ldr	r3, [pc, #76]	; (800d39c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4013      	ands	r3, r2
 800d352:	4a12      	ldr	r2, [pc, #72]	; (800d39c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d354:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	4618      	mov	r0, r3
 800d35a:	f001 fffb 	bl	800f354 <SEGGER_SYSVIEW_OnTaskStartReady>
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d362:	2201      	movs	r2, #1
 800d364:	409a      	lsls	r2, r3
 800d366:	4b0d      	ldr	r3, [pc, #52]	; (800d39c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4313      	orrs	r3, r2
 800d36c:	4a0b      	ldr	r2, [pc, #44]	; (800d39c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d36e:	6013      	str	r3, [r2, #0]
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d374:	4613      	mov	r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	4413      	add	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4a06      	ldr	r2, [pc, #24]	; (800d398 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d37e:	441a      	add	r2, r3
 800d380:	69bb      	ldr	r3, [r7, #24]
 800d382:	3304      	adds	r3, #4
 800d384:	4619      	mov	r1, r3
 800d386:	4610      	mov	r0, r2
 800d388:	f7fe f8be 	bl	800b508 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d38c:	bf00      	nop
 800d38e:	3720      	adds	r7, #32
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	20000d74 	.word	0x20000d74
 800d398:	20000d78 	.word	0x20000d78
 800d39c:	20000e7c 	.word	0x20000e7c

0800d3a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d3a0:	b480      	push	{r7}
 800d3a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d3a4:	4b07      	ldr	r3, [pc, #28]	; (800d3c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d004      	beq.n	800d3b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d3ac:	4b05      	ldr	r3, [pc, #20]	; (800d3c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3b2:	3201      	adds	r2, #1
 800d3b4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d3b6:	4b03      	ldr	r3, [pc, #12]	; (800d3c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
	}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr
 800d3c4:	20000d74 	.word	0x20000d74

0800d3c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d3d2:	4b29      	ldr	r3, [pc, #164]	; (800d478 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3d8:	4b28      	ldr	r3, [pc, #160]	; (800d47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fe f8ef 	bl	800b5c2 <uxListRemove>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10b      	bne.n	800d402 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d3ea:	4b24      	ldr	r3, [pc, #144]	; (800d47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d3f6:	43da      	mvns	r2, r3
 800d3f8:	4b21      	ldr	r3, [pc, #132]	; (800d480 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	4a20      	ldr	r2, [pc, #128]	; (800d480 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d400:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d408:	d10a      	bne.n	800d420 <prvAddCurrentTaskToDelayedList+0x58>
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d007      	beq.n	800d420 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d410:	4b1a      	ldr	r3, [pc, #104]	; (800d47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3304      	adds	r3, #4
 800d416:	4619      	mov	r1, r3
 800d418:	481a      	ldr	r0, [pc, #104]	; (800d484 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d41a:	f7fe f875 	bl	800b508 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d41e:	e026      	b.n	800d46e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	4413      	add	r3, r2
 800d426:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d428:	4b14      	ldr	r3, [pc, #80]	; (800d47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	429a      	cmp	r2, r3
 800d436:	d209      	bcs.n	800d44c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d438:	4b13      	ldr	r3, [pc, #76]	; (800d488 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	4b0f      	ldr	r3, [pc, #60]	; (800d47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	3304      	adds	r3, #4
 800d442:	4619      	mov	r1, r3
 800d444:	4610      	mov	r0, r2
 800d446:	f7fe f883 	bl	800b550 <vListInsert>
}
 800d44a:	e010      	b.n	800d46e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d44c:	4b0f      	ldr	r3, [pc, #60]	; (800d48c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	4b0a      	ldr	r3, [pc, #40]	; (800d47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	3304      	adds	r3, #4
 800d456:	4619      	mov	r1, r3
 800d458:	4610      	mov	r0, r2
 800d45a:	f7fe f879 	bl	800b550 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d45e:	4b0c      	ldr	r3, [pc, #48]	; (800d490 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	429a      	cmp	r2, r3
 800d466:	d202      	bcs.n	800d46e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d468:	4a09      	ldr	r2, [pc, #36]	; (800d490 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	6013      	str	r3, [r2, #0]
}
 800d46e:	bf00      	nop
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	20000e78 	.word	0x20000e78
 800d47c:	20000d74 	.word	0x20000d74
 800d480:	20000e7c 	.word	0x20000e7c
 800d484:	20000e60 	.word	0x20000e60
 800d488:	20000e30 	.word	0x20000e30
 800d48c:	20000e2c 	.word	0x20000e2c
 800d490:	20000e94 	.word	0x20000e94

0800d494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	3b04      	subs	r3, #4
 800d4a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d4ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	3b04      	subs	r3, #4
 800d4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	f023 0201 	bic.w	r2, r3, #1
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3b04      	subs	r3, #4
 800d4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4c4:	4a0c      	ldr	r2, [pc, #48]	; (800d4f8 <pxPortInitialiseStack+0x64>)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3b14      	subs	r3, #20
 800d4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	3b04      	subs	r3, #4
 800d4da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f06f 0202 	mvn.w	r2, #2
 800d4e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	3b20      	subs	r3, #32
 800d4e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3714      	adds	r7, #20
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	0800d4fd 	.word	0x0800d4fd

0800d4fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b085      	sub	sp, #20
 800d500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d502:	2300      	movs	r3, #0
 800d504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d506:	4b12      	ldr	r3, [pc, #72]	; (800d550 <prvTaskExitError+0x54>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d50e:	d00a      	beq.n	800d526 <prvTaskExitError+0x2a>
	__asm volatile
 800d510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	60fb      	str	r3, [r7, #12]
}
 800d522:	bf00      	nop
 800d524:	e7fe      	b.n	800d524 <prvTaskExitError+0x28>
	__asm volatile
 800d526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	60bb      	str	r3, [r7, #8]
}
 800d538:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d53a:	bf00      	nop
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d0fc      	beq.n	800d53c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d542:	bf00      	nop
 800d544:	bf00      	nop
 800d546:	3714      	adds	r7, #20
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr
 800d550:	2000002c 	.word	0x2000002c
	...

0800d560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d560:	4b07      	ldr	r3, [pc, #28]	; (800d580 <pxCurrentTCBConst2>)
 800d562:	6819      	ldr	r1, [r3, #0]
 800d564:	6808      	ldr	r0, [r1, #0]
 800d566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56a:	f380 8809 	msr	PSP, r0
 800d56e:	f3bf 8f6f 	isb	sy
 800d572:	f04f 0000 	mov.w	r0, #0
 800d576:	f380 8811 	msr	BASEPRI, r0
 800d57a:	4770      	bx	lr
 800d57c:	f3af 8000 	nop.w

0800d580 <pxCurrentTCBConst2>:
 800d580:	20000d74 	.word	0x20000d74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d584:	bf00      	nop
 800d586:	bf00      	nop

0800d588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d588:	4808      	ldr	r0, [pc, #32]	; (800d5ac <prvPortStartFirstTask+0x24>)
 800d58a:	6800      	ldr	r0, [r0, #0]
 800d58c:	6800      	ldr	r0, [r0, #0]
 800d58e:	f380 8808 	msr	MSP, r0
 800d592:	f04f 0000 	mov.w	r0, #0
 800d596:	f380 8814 	msr	CONTROL, r0
 800d59a:	b662      	cpsie	i
 800d59c:	b661      	cpsie	f
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	df00      	svc	0
 800d5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5aa:	bf00      	nop
 800d5ac:	e000ed08 	.word	0xe000ed08

0800d5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b086      	sub	sp, #24
 800d5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d5b6:	4b46      	ldr	r3, [pc, #280]	; (800d6d0 <xPortStartScheduler+0x120>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a46      	ldr	r2, [pc, #280]	; (800d6d4 <xPortStartScheduler+0x124>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d10a      	bne.n	800d5d6 <xPortStartScheduler+0x26>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	613b      	str	r3, [r7, #16]
}
 800d5d2:	bf00      	nop
 800d5d4:	e7fe      	b.n	800d5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5d6:	4b3e      	ldr	r3, [pc, #248]	; (800d6d0 <xPortStartScheduler+0x120>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a3f      	ldr	r2, [pc, #252]	; (800d6d8 <xPortStartScheduler+0x128>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d10a      	bne.n	800d5f6 <xPortStartScheduler+0x46>
	__asm volatile
 800d5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	60fb      	str	r3, [r7, #12]
}
 800d5f2:	bf00      	nop
 800d5f4:	e7fe      	b.n	800d5f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d5f6:	4b39      	ldr	r3, [pc, #228]	; (800d6dc <xPortStartScheduler+0x12c>)
 800d5f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	22ff      	movs	r2, #255	; 0xff
 800d606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d610:	78fb      	ldrb	r3, [r7, #3]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	4b31      	ldr	r3, [pc, #196]	; (800d6e0 <xPortStartScheduler+0x130>)
 800d61c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d61e:	4b31      	ldr	r3, [pc, #196]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d620:	2207      	movs	r2, #7
 800d622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d624:	e009      	b.n	800d63a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d626:	4b2f      	ldr	r3, [pc, #188]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3b01      	subs	r3, #1
 800d62c:	4a2d      	ldr	r2, [pc, #180]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d62e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d630:	78fb      	ldrb	r3, [r7, #3]
 800d632:	b2db      	uxtb	r3, r3
 800d634:	005b      	lsls	r3, r3, #1
 800d636:	b2db      	uxtb	r3, r3
 800d638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d63a:	78fb      	ldrb	r3, [r7, #3]
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d642:	2b80      	cmp	r3, #128	; 0x80
 800d644:	d0ef      	beq.n	800d626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d646:	4b27      	ldr	r3, [pc, #156]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f1c3 0307 	rsb	r3, r3, #7
 800d64e:	2b04      	cmp	r3, #4
 800d650:	d00a      	beq.n	800d668 <xPortStartScheduler+0xb8>
	__asm volatile
 800d652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d656:	f383 8811 	msr	BASEPRI, r3
 800d65a:	f3bf 8f6f 	isb	sy
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	60bb      	str	r3, [r7, #8]
}
 800d664:	bf00      	nop
 800d666:	e7fe      	b.n	800d666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d668:	4b1e      	ldr	r3, [pc, #120]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	021b      	lsls	r3, r3, #8
 800d66e:	4a1d      	ldr	r2, [pc, #116]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d672:	4b1c      	ldr	r3, [pc, #112]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d67a:	4a1a      	ldr	r2, [pc, #104]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d67c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	b2da      	uxtb	r2, r3
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d686:	4b18      	ldr	r3, [pc, #96]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a17      	ldr	r2, [pc, #92]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d68c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d692:	4b15      	ldr	r3, [pc, #84]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a14      	ldr	r2, [pc, #80]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d69c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d69e:	f000 f8dd 	bl	800d85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d6a2:	4b12      	ldr	r3, [pc, #72]	; (800d6ec <xPortStartScheduler+0x13c>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d6a8:	f000 f8fc 	bl	800d8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d6ac:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <xPortStartScheduler+0x140>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a0f      	ldr	r2, [pc, #60]	; (800d6f0 <xPortStartScheduler+0x140>)
 800d6b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d6b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d6b8:	f7ff ff66 	bl	800d588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d6bc:	f7ff fa50 	bl	800cb60 <vTaskSwitchContext>
	prvTaskExitError();
 800d6c0:	f7ff ff1c 	bl	800d4fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3718      	adds	r7, #24
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	e000ed00 	.word	0xe000ed00
 800d6d4:	410fc271 	.word	0x410fc271
 800d6d8:	410fc270 	.word	0x410fc270
 800d6dc:	e000e400 	.word	0xe000e400
 800d6e0:	20000ea0 	.word	0x20000ea0
 800d6e4:	20000ea4 	.word	0x20000ea4
 800d6e8:	e000ed20 	.word	0xe000ed20
 800d6ec:	2000002c 	.word	0x2000002c
 800d6f0:	e000ef34 	.word	0xe000ef34

0800d6f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
	__asm volatile
 800d6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	607b      	str	r3, [r7, #4]
}
 800d70c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d70e:	4b0f      	ldr	r3, [pc, #60]	; (800d74c <vPortEnterCritical+0x58>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	3301      	adds	r3, #1
 800d714:	4a0d      	ldr	r2, [pc, #52]	; (800d74c <vPortEnterCritical+0x58>)
 800d716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d718:	4b0c      	ldr	r3, [pc, #48]	; (800d74c <vPortEnterCritical+0x58>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d10f      	bne.n	800d740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d720:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <vPortEnterCritical+0x5c>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	b2db      	uxtb	r3, r3
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00a      	beq.n	800d740 <vPortEnterCritical+0x4c>
	__asm volatile
 800d72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	603b      	str	r3, [r7, #0]
}
 800d73c:	bf00      	nop
 800d73e:	e7fe      	b.n	800d73e <vPortEnterCritical+0x4a>
	}
}
 800d740:	bf00      	nop
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	2000002c 	.word	0x2000002c
 800d750:	e000ed04 	.word	0xe000ed04

0800d754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d75a:	4b12      	ldr	r3, [pc, #72]	; (800d7a4 <vPortExitCritical+0x50>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d10a      	bne.n	800d778 <vPortExitCritical+0x24>
	__asm volatile
 800d762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d766:	f383 8811 	msr	BASEPRI, r3
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	607b      	str	r3, [r7, #4]
}
 800d774:	bf00      	nop
 800d776:	e7fe      	b.n	800d776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d778:	4b0a      	ldr	r3, [pc, #40]	; (800d7a4 <vPortExitCritical+0x50>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	3b01      	subs	r3, #1
 800d77e:	4a09      	ldr	r2, [pc, #36]	; (800d7a4 <vPortExitCritical+0x50>)
 800d780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d782:	4b08      	ldr	r3, [pc, #32]	; (800d7a4 <vPortExitCritical+0x50>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d105      	bne.n	800d796 <vPortExitCritical+0x42>
 800d78a:	2300      	movs	r3, #0
 800d78c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	f383 8811 	msr	BASEPRI, r3
}
 800d794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d796:	bf00      	nop
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	2000002c 	.word	0x2000002c
	...

0800d7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d7b0:	f3ef 8009 	mrs	r0, PSP
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	4b15      	ldr	r3, [pc, #84]	; (800d810 <pxCurrentTCBConst>)
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	f01e 0f10 	tst.w	lr, #16
 800d7c0:	bf08      	it	eq
 800d7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ca:	6010      	str	r0, [r2, #0]
 800d7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d7d4:	f380 8811 	msr	BASEPRI, r0
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f7ff f9be 	bl	800cb60 <vTaskSwitchContext>
 800d7e4:	f04f 0000 	mov.w	r0, #0
 800d7e8:	f380 8811 	msr	BASEPRI, r0
 800d7ec:	bc09      	pop	{r0, r3}
 800d7ee:	6819      	ldr	r1, [r3, #0]
 800d7f0:	6808      	ldr	r0, [r1, #0]
 800d7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f6:	f01e 0f10 	tst.w	lr, #16
 800d7fa:	bf08      	it	eq
 800d7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d800:	f380 8809 	msr	PSP, r0
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	f3af 8000 	nop.w

0800d810 <pxCurrentTCBConst>:
 800d810:	20000d74 	.word	0x20000d74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d814:	bf00      	nop
 800d816:	bf00      	nop

0800d818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
	__asm volatile
 800d81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	607b      	str	r3, [r7, #4]
}
 800d830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d832:	f7ff f8d9 	bl	800c9e8 <xTaskIncrementTick>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d83c:	4b06      	ldr	r3, [pc, #24]	; (800d858 <SysTick_Handler+0x40>)
 800d83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d842:	601a      	str	r2, [r3, #0]
 800d844:	2300      	movs	r3, #0
 800d846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	f383 8811 	msr	BASEPRI, r3
}
 800d84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d850:	bf00      	nop
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	e000ed04 	.word	0xe000ed04

0800d85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d85c:	b480      	push	{r7}
 800d85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d860:	4b0b      	ldr	r3, [pc, #44]	; (800d890 <vPortSetupTimerInterrupt+0x34>)
 800d862:	2200      	movs	r2, #0
 800d864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d866:	4b0b      	ldr	r3, [pc, #44]	; (800d894 <vPortSetupTimerInterrupt+0x38>)
 800d868:	2200      	movs	r2, #0
 800d86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d86c:	4b0a      	ldr	r3, [pc, #40]	; (800d898 <vPortSetupTimerInterrupt+0x3c>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a0a      	ldr	r2, [pc, #40]	; (800d89c <vPortSetupTimerInterrupt+0x40>)
 800d872:	fba2 2303 	umull	r2, r3, r2, r3
 800d876:	099b      	lsrs	r3, r3, #6
 800d878:	4a09      	ldr	r2, [pc, #36]	; (800d8a0 <vPortSetupTimerInterrupt+0x44>)
 800d87a:	3b01      	subs	r3, #1
 800d87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d87e:	4b04      	ldr	r3, [pc, #16]	; (800d890 <vPortSetupTimerInterrupt+0x34>)
 800d880:	2207      	movs	r2, #7
 800d882:	601a      	str	r2, [r3, #0]
}
 800d884:	bf00      	nop
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	e000e010 	.word	0xe000e010
 800d894:	e000e018 	.word	0xe000e018
 800d898:	20000020 	.word	0x20000020
 800d89c:	10624dd3 	.word	0x10624dd3
 800d8a0:	e000e014 	.word	0xe000e014

0800d8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d8b4 <vPortEnableVFP+0x10>
 800d8a8:	6801      	ldr	r1, [r0, #0]
 800d8aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d8ae:	6001      	str	r1, [r0, #0]
 800d8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d8b2:	bf00      	nop
 800d8b4:	e000ed88 	.word	0xe000ed88

0800d8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d8be:	f3ef 8305 	mrs	r3, IPSR
 800d8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2b0f      	cmp	r3, #15
 800d8c8:	d914      	bls.n	800d8f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8ca:	4a17      	ldr	r2, [pc, #92]	; (800d928 <vPortValidateInterruptPriority+0x70>)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8d4:	4b15      	ldr	r3, [pc, #84]	; (800d92c <vPortValidateInterruptPriority+0x74>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	7afa      	ldrb	r2, [r7, #11]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d20a      	bcs.n	800d8f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	607b      	str	r3, [r7, #4]
}
 800d8f0:	bf00      	nop
 800d8f2:	e7fe      	b.n	800d8f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d8f4:	4b0e      	ldr	r3, [pc, #56]	; (800d930 <vPortValidateInterruptPriority+0x78>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d8fc:	4b0d      	ldr	r3, [pc, #52]	; (800d934 <vPortValidateInterruptPriority+0x7c>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	429a      	cmp	r2, r3
 800d902:	d90a      	bls.n	800d91a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	603b      	str	r3, [r7, #0]
}
 800d916:	bf00      	nop
 800d918:	e7fe      	b.n	800d918 <vPortValidateInterruptPriority+0x60>
	}
 800d91a:	bf00      	nop
 800d91c:	3714      	adds	r7, #20
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	e000e3f0 	.word	0xe000e3f0
 800d92c:	20000ea0 	.word	0x20000ea0
 800d930:	e000ed0c 	.word	0xe000ed0c
 800d934:	20000ea4 	.word	0x20000ea4

0800d938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b08a      	sub	sp, #40	; 0x28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d940:	2300      	movs	r3, #0
 800d942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d944:	f7fe ff90 	bl	800c868 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d948:	4b5b      	ldr	r3, [pc, #364]	; (800dab8 <pvPortMalloc+0x180>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d950:	f000 f920 	bl	800db94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d954:	4b59      	ldr	r3, [pc, #356]	; (800dabc <pvPortMalloc+0x184>)
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	4013      	ands	r3, r2
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f040 8093 	bne.w	800da88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d01d      	beq.n	800d9a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d968:	2208      	movs	r2, #8
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4413      	add	r3, r2
 800d96e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f003 0307 	and.w	r3, r3, #7
 800d976:	2b00      	cmp	r3, #0
 800d978:	d014      	beq.n	800d9a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f023 0307 	bic.w	r3, r3, #7
 800d980:	3308      	adds	r3, #8
 800d982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f003 0307 	and.w	r3, r3, #7
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00a      	beq.n	800d9a4 <pvPortMalloc+0x6c>
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	617b      	str	r3, [r7, #20]
}
 800d9a0:	bf00      	nop
 800d9a2:	e7fe      	b.n	800d9a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d06e      	beq.n	800da88 <pvPortMalloc+0x150>
 800d9aa:	4b45      	ldr	r3, [pc, #276]	; (800dac0 <pvPortMalloc+0x188>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d869      	bhi.n	800da88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d9b4:	4b43      	ldr	r3, [pc, #268]	; (800dac4 <pvPortMalloc+0x18c>)
 800d9b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d9b8:	4b42      	ldr	r3, [pc, #264]	; (800dac4 <pvPortMalloc+0x18c>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9be:	e004      	b.n	800d9ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d903      	bls.n	800d9dc <pvPortMalloc+0xa4>
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1f1      	bne.n	800d9c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9dc:	4b36      	ldr	r3, [pc, #216]	; (800dab8 <pvPortMalloc+0x180>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d050      	beq.n	800da88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2208      	movs	r2, #8
 800d9ec:	4413      	add	r3, r2
 800d9ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fa:	685a      	ldr	r2, [r3, #4]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	1ad2      	subs	r2, r2, r3
 800da00:	2308      	movs	r3, #8
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	429a      	cmp	r2, r3
 800da06:	d91f      	bls.n	800da48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4413      	add	r3, r2
 800da0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	f003 0307 	and.w	r3, r3, #7
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00a      	beq.n	800da30 <pvPortMalloc+0xf8>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	613b      	str	r3, [r7, #16]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	685a      	ldr	r2, [r3, #4]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	1ad2      	subs	r2, r2, r3
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da42:	69b8      	ldr	r0, [r7, #24]
 800da44:	f000 f908 	bl	800dc58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da48:	4b1d      	ldr	r3, [pc, #116]	; (800dac0 <pvPortMalloc+0x188>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	4a1b      	ldr	r2, [pc, #108]	; (800dac0 <pvPortMalloc+0x188>)
 800da54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da56:	4b1a      	ldr	r3, [pc, #104]	; (800dac0 <pvPortMalloc+0x188>)
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	4b1b      	ldr	r3, [pc, #108]	; (800dac8 <pvPortMalloc+0x190>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d203      	bcs.n	800da6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da62:	4b17      	ldr	r3, [pc, #92]	; (800dac0 <pvPortMalloc+0x188>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a18      	ldr	r2, [pc, #96]	; (800dac8 <pvPortMalloc+0x190>)
 800da68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6c:	685a      	ldr	r2, [r3, #4]
 800da6e:	4b13      	ldr	r3, [pc, #76]	; (800dabc <pvPortMalloc+0x184>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	431a      	orrs	r2, r3
 800da74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	2200      	movs	r2, #0
 800da7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800da7e:	4b13      	ldr	r3, [pc, #76]	; (800dacc <pvPortMalloc+0x194>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	3301      	adds	r3, #1
 800da84:	4a11      	ldr	r2, [pc, #68]	; (800dacc <pvPortMalloc+0x194>)
 800da86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da88:	f7fe fefc 	bl	800c884 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	f003 0307 	and.w	r3, r3, #7
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00a      	beq.n	800daac <pvPortMalloc+0x174>
	__asm volatile
 800da96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9a:	f383 8811 	msr	BASEPRI, r3
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	60fb      	str	r3, [r7, #12]
}
 800daa8:	bf00      	nop
 800daaa:	e7fe      	b.n	800daaa <pvPortMalloc+0x172>
	return pvReturn;
 800daac:	69fb      	ldr	r3, [r7, #28]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3728      	adds	r7, #40	; 0x28
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	20001a68 	.word	0x20001a68
 800dabc:	20001a7c 	.word	0x20001a7c
 800dac0:	20001a6c 	.word	0x20001a6c
 800dac4:	20001a60 	.word	0x20001a60
 800dac8:	20001a70 	.word	0x20001a70
 800dacc:	20001a74 	.word	0x20001a74

0800dad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d04d      	beq.n	800db7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dae2:	2308      	movs	r3, #8
 800dae4:	425b      	negs	r3, r3
 800dae6:	697a      	ldr	r2, [r7, #20]
 800dae8:	4413      	add	r3, r2
 800daea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	685a      	ldr	r2, [r3, #4]
 800daf4:	4b24      	ldr	r3, [pc, #144]	; (800db88 <vPortFree+0xb8>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4013      	ands	r3, r2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d10a      	bne.n	800db14 <vPortFree+0x44>
	__asm volatile
 800dafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	60fb      	str	r3, [r7, #12]
}
 800db10:	bf00      	nop
 800db12:	e7fe      	b.n	800db12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00a      	beq.n	800db32 <vPortFree+0x62>
	__asm volatile
 800db1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db20:	f383 8811 	msr	BASEPRI, r3
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	60bb      	str	r3, [r7, #8]
}
 800db2e:	bf00      	nop
 800db30:	e7fe      	b.n	800db30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	685a      	ldr	r2, [r3, #4]
 800db36:	4b14      	ldr	r3, [pc, #80]	; (800db88 <vPortFree+0xb8>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4013      	ands	r3, r2
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d01e      	beq.n	800db7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d11a      	bne.n	800db7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	4b0e      	ldr	r3, [pc, #56]	; (800db88 <vPortFree+0xb8>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	43db      	mvns	r3, r3
 800db52:	401a      	ands	r2, r3
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db58:	f7fe fe86 	bl	800c868 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	685a      	ldr	r2, [r3, #4]
 800db60:	4b0a      	ldr	r3, [pc, #40]	; (800db8c <vPortFree+0xbc>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4413      	add	r3, r2
 800db66:	4a09      	ldr	r2, [pc, #36]	; (800db8c <vPortFree+0xbc>)
 800db68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db6a:	6938      	ldr	r0, [r7, #16]
 800db6c:	f000 f874 	bl	800dc58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db70:	4b07      	ldr	r3, [pc, #28]	; (800db90 <vPortFree+0xc0>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3301      	adds	r3, #1
 800db76:	4a06      	ldr	r2, [pc, #24]	; (800db90 <vPortFree+0xc0>)
 800db78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800db7a:	f7fe fe83 	bl	800c884 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db7e:	bf00      	nop
 800db80:	3718      	adds	r7, #24
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	20001a7c 	.word	0x20001a7c
 800db8c:	20001a6c 	.word	0x20001a6c
 800db90:	20001a78 	.word	0x20001a78

0800db94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800db9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dba0:	4b27      	ldr	r3, [pc, #156]	; (800dc40 <prvHeapInit+0xac>)
 800dba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f003 0307 	and.w	r3, r3, #7
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00c      	beq.n	800dbc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	3307      	adds	r3, #7
 800dbb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f023 0307 	bic.w	r3, r3, #7
 800dbba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	4a1f      	ldr	r2, [pc, #124]	; (800dc40 <prvHeapInit+0xac>)
 800dbc4:	4413      	add	r3, r2
 800dbc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbcc:	4a1d      	ldr	r2, [pc, #116]	; (800dc44 <prvHeapInit+0xb0>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbd2:	4b1c      	ldr	r3, [pc, #112]	; (800dc44 <prvHeapInit+0xb0>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	4413      	add	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dbe0:	2208      	movs	r2, #8
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	1a9b      	subs	r3, r3, r2
 800dbe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f023 0307 	bic.w	r3, r3, #7
 800dbee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	4a15      	ldr	r2, [pc, #84]	; (800dc48 <prvHeapInit+0xb4>)
 800dbf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dbf6:	4b14      	ldr	r3, [pc, #80]	; (800dc48 <prvHeapInit+0xb4>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dbfe:	4b12      	ldr	r3, [pc, #72]	; (800dc48 <prvHeapInit+0xb4>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2200      	movs	r2, #0
 800dc04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	1ad2      	subs	r2, r2, r3
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc14:	4b0c      	ldr	r3, [pc, #48]	; (800dc48 <prvHeapInit+0xb4>)
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	4a0a      	ldr	r2, [pc, #40]	; (800dc4c <prvHeapInit+0xb8>)
 800dc22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	4a09      	ldr	r2, [pc, #36]	; (800dc50 <prvHeapInit+0xbc>)
 800dc2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc2c:	4b09      	ldr	r3, [pc, #36]	; (800dc54 <prvHeapInit+0xc0>)
 800dc2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc32:	601a      	str	r2, [r3, #0]
}
 800dc34:	bf00      	nop
 800dc36:	3714      	adds	r7, #20
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	20000ea8 	.word	0x20000ea8
 800dc44:	20001a60 	.word	0x20001a60
 800dc48:	20001a68 	.word	0x20001a68
 800dc4c:	20001a70 	.word	0x20001a70
 800dc50:	20001a6c 	.word	0x20001a6c
 800dc54:	20001a7c 	.word	0x20001a7c

0800dc58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b085      	sub	sp, #20
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc60:	4b28      	ldr	r3, [pc, #160]	; (800dd04 <prvInsertBlockIntoFreeList+0xac>)
 800dc62:	60fb      	str	r3, [r7, #12]
 800dc64:	e002      	b.n	800dc6c <prvInsertBlockIntoFreeList+0x14>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	60fb      	str	r3, [r7, #12]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d8f7      	bhi.n	800dc66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	68ba      	ldr	r2, [r7, #8]
 800dc80:	4413      	add	r3, r2
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d108      	bne.n	800dc9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	685a      	ldr	r2, [r3, #4]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	441a      	add	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	68ba      	ldr	r2, [r7, #8]
 800dca4:	441a      	add	r2, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d118      	bne.n	800dce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	4b15      	ldr	r3, [pc, #84]	; (800dd08 <prvInsertBlockIntoFreeList+0xb0>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d00d      	beq.n	800dcd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	685a      	ldr	r2, [r3, #4]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	441a      	add	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	601a      	str	r2, [r3, #0]
 800dcd4:	e008      	b.n	800dce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dcd6:	4b0c      	ldr	r3, [pc, #48]	; (800dd08 <prvInsertBlockIntoFreeList+0xb0>)
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	e003      	b.n	800dce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d002      	beq.n	800dcf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcf6:	bf00      	nop
 800dcf8:	3714      	adds	r7, #20
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	20001a60 	.word	0x20001a60
 800dd08:	20001a68 	.word	0x20001a68

0800dd0c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800dd12:	4b21      	ldr	r3, [pc, #132]	; (800dd98 <_DoInit+0x8c>)
 800dd14:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2203      	movs	r2, #3
 800dd1a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2203      	movs	r2, #3
 800dd20:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a1d      	ldr	r2, [pc, #116]	; (800dd9c <_DoInit+0x90>)
 800dd26:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4a1d      	ldr	r2, [pc, #116]	; (800dda0 <_DoInit+0x94>)
 800dd2c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dd34:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4a14      	ldr	r2, [pc, #80]	; (800dd9c <_DoInit+0x90>)
 800dd4c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4a14      	ldr	r2, [pc, #80]	; (800dda4 <_DoInit+0x98>)
 800dd52:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2210      	movs	r2, #16
 800dd58:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3307      	adds	r3, #7
 800dd70:	4a0d      	ldr	r2, [pc, #52]	; (800dda8 <_DoInit+0x9c>)
 800dd72:	6810      	ldr	r0, [r2, #0]
 800dd74:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4a0c      	ldr	r2, [pc, #48]	; (800ddac <_DoInit+0xa0>)
 800dd7a:	6810      	ldr	r0, [r2, #0]
 800dd7c:	6018      	str	r0, [r3, #0]
 800dd7e:	8891      	ldrh	r1, [r2, #4]
 800dd80:	7992      	ldrb	r2, [r2, #6]
 800dd82:	8099      	strh	r1, [r3, #4]
 800dd84:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2220      	movs	r2, #32
 800dd8a:	719a      	strb	r2, [r3, #6]
}
 800dd8c:	bf00      	nop
 800dd8e:	370c      	adds	r7, #12
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr
 800dd98:	20001a80 	.word	0x20001a80
 800dd9c:	08012400 	.word	0x08012400
 800dda0:	20001b28 	.word	0x20001b28
 800dda4:	20001f28 	.word	0x20001f28
 800dda8:	0801240c 	.word	0x0801240c
 800ddac:	08012410 	.word	0x08012410

0800ddb0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	691b      	ldr	r3, [r3, #16]
 800ddca:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 800ddcc:	693a      	ldr	r2, [r7, #16]
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d905      	bls.n	800dde0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	3b01      	subs	r3, #1
 800dddc:	61fb      	str	r3, [r7, #28]
 800ddde:	e007      	b.n	800ddf0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	689a      	ldr	r2, [r3, #8]
 800dde4:	6939      	ldr	r1, [r7, #16]
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	1acb      	subs	r3, r1, r3
 800ddea:	4413      	add	r3, r2
 800ddec:	3b01      	subs	r3, #1
 800ddee:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	689a      	ldr	r2, [r3, #8]
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	69fa      	ldr	r2, [r7, #28]
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	bf28      	it	cs
 800ddfe:	4613      	movcs	r3, r2
 800de00:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800de02:	69fa      	ldr	r2, [r7, #28]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4293      	cmp	r3, r2
 800de08:	bf28      	it	cs
 800de0a:	4613      	movcs	r3, r2
 800de0c:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	685a      	ldr	r2, [r3, #4]
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	4413      	add	r3, r2
 800de16:	69fa      	ldr	r2, [r7, #28]
 800de18:	68b9      	ldr	r1, [r7, #8]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f002 ffa7 	bl	8010d6e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800de20:	69ba      	ldr	r2, [r7, #24]
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	4413      	add	r3, r2
 800de26:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 800de28:	68ba      	ldr	r2, [r7, #8]
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	4413      	add	r3, r2
 800de2e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	1ad3      	subs	r3, r2, r3
 800de36:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800de38:	697a      	ldr	r2, [r7, #20]
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	4413      	add	r3, r2
 800de3e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	697a      	ldr	r2, [r7, #20]
 800de46:	429a      	cmp	r2, r3
 800de48:	d101      	bne.n	800de4e <_WriteBlocking+0x9e>
      WrOff = 0u;
 800de4a:	2300      	movs	r3, #0
 800de4c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	697a      	ldr	r2, [r7, #20]
 800de52:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d1b5      	bne.n	800ddc6 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800de5a:	69bb      	ldr	r3, [r7, #24]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3720      	adds	r7, #32
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	689a      	ldr	r2, [r3, #8]
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800de80:	69ba      	ldr	r2, [r7, #24]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	429a      	cmp	r2, r3
 800de86:	d90e      	bls.n	800dea6 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	685a      	ldr	r2, [r3, #4]
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	4413      	add	r3, r2
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	68b9      	ldr	r1, [r7, #8]
 800de94:	4618      	mov	r0, r3
 800de96:	f002 ff6a 	bl	8010d6e <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 800de9a:	69fa      	ldr	r2, [r7, #28]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	441a      	add	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800dea4:	e01a      	b.n	800dedc <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	685a      	ldr	r2, [r3, #4]
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	4413      	add	r3, r2
 800deb2:	697a      	ldr	r2, [r7, #20]
 800deb4:	68b9      	ldr	r1, [r7, #8]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f002 ff59 	bl	8010d6e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6858      	ldr	r0, [r3, #4]
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	4413      	add	r3, r2
 800dece:	697a      	ldr	r2, [r7, #20]
 800ded0:	4619      	mov	r1, r3
 800ded2:	f002 ff4c 	bl	8010d6e <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	697a      	ldr	r2, [r7, #20]
 800deda:	60da      	str	r2, [r3, #12]
}
 800dedc:	bf00      	nop
 800dede:	3720      	adds	r7, #32
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800dee4:	b480      	push	{r7}
 800dee6:	b087      	sub	sp, #28
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800def8:	693a      	ldr	r2, [r7, #16]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	429a      	cmp	r2, r3
 800defe:	d808      	bhi.n	800df12 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	689a      	ldr	r2, [r3, #8]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	1ad2      	subs	r2, r2, r3
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	4413      	add	r3, r2
 800df0c:	3b01      	subs	r3, #1
 800df0e:	617b      	str	r3, [r7, #20]
 800df10:	e004      	b.n	800df1c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800df12:	693a      	ldr	r2, [r7, #16]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	1ad3      	subs	r3, r2, r3
 800df18:	3b01      	subs	r3, #1
 800df1a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800df1c:	697b      	ldr	r3, [r7, #20]
}
 800df1e:	4618      	mov	r0, r3
 800df20:	371c      	adds	r7, #28
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr
	...

0800df2c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b08a      	sub	sp, #40	; 0x28
 800df30:	af00      	add	r7, sp, #0
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800df38:	4b3c      	ldr	r3, [pc, #240]	; (800e02c <SEGGER_RTT_ReadNoLock+0x100>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d101      	bne.n	800df44 <SEGGER_RTT_ReadNoLock+0x18>
 800df40:	f7ff fee4 	bl	800dd0c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	4613      	mov	r3, r2
 800df48:	005b      	lsls	r3, r3, #1
 800df4a:	4413      	add	r3, r2
 800df4c:	00db      	lsls	r3, r3, #3
 800df4e:	3360      	adds	r3, #96	; 0x60
 800df50:	4a36      	ldr	r2, [pc, #216]	; (800e02c <SEGGER_RTT_ReadNoLock+0x100>)
 800df52:	4413      	add	r3, r2
 800df54:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800df66:	2300      	movs	r3, #0
 800df68:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800df6a:	6a3a      	ldr	r2, [r7, #32]
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d92a      	bls.n	800dfc8 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	689a      	ldr	r2, [r3, #8]
 800df76:	6a3b      	ldr	r3, [r7, #32]
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4293      	cmp	r3, r2
 800df82:	bf28      	it	cs
 800df84:	4613      	movcs	r3, r2
 800df86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	6a3b      	ldr	r3, [r7, #32]
 800df8e:	4413      	add	r3, r2
 800df90:	693a      	ldr	r2, [r7, #16]
 800df92:	4619      	mov	r1, r3
 800df94:	69f8      	ldr	r0, [r7, #28]
 800df96:	f002 feea 	bl	8010d6e <memcpy>
    NumBytesRead += NumBytesRem;
 800df9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	4413      	add	r3, r2
 800dfa0:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800dfa2:	69fa      	ldr	r2, [r7, #28]
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	1ad3      	subs	r3, r2, r3
 800dfb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800dfb2:	6a3a      	ldr	r2, [r7, #32]
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	6a3a      	ldr	r2, [r7, #32]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d101      	bne.n	800dfc8 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800dfc8:	697a      	ldr	r2, [r7, #20]
 800dfca:	6a3b      	ldr	r3, [r7, #32]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800dfd0:	693a      	ldr	r2, [r7, #16]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	bf28      	it	cs
 800dfd8:	4613      	movcs	r3, r2
 800dfda:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d018      	beq.n	800e014 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	685a      	ldr	r2, [r3, #4]
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	4413      	add	r3, r2
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	4619      	mov	r1, r3
 800dfee:	69f8      	ldr	r0, [r7, #28]
 800dff0:	f002 febd 	bl	8010d6e <memcpy>
    NumBytesRead += NumBytesRem;
 800dff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	4413      	add	r3, r2
 800dffa:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800dffc:	69fa      	ldr	r2, [r7, #28]
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	4413      	add	r3, r2
 800e002:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800e00c:	6a3a      	ldr	r2, [r7, #32]
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	4413      	add	r3, r2
 800e012:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	2b00      	cmp	r3, #0
 800e018:	d002      	beq.n	800e020 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	6a3a      	ldr	r2, [r7, #32]
 800e01e:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e022:	4618      	mov	r0, r3
 800e024:	3728      	adds	r7, #40	; 0x28
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20001a80 	.word	0x20001a80

0800e030 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800e030:	b580      	push	{r7, lr}
 800e032:	b088      	sub	sp, #32
 800e034:	af00      	add	r7, sp, #0
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	1c5a      	adds	r2, r3, #1
 800e044:	4613      	mov	r3, r2
 800e046:	005b      	lsls	r3, r3, #1
 800e048:	4413      	add	r3, r2
 800e04a:	00db      	lsls	r3, r3, #3
 800e04c:	4a1f      	ldr	r2, [pc, #124]	; (800e0cc <SEGGER_RTT_WriteNoLock+0x9c>)
 800e04e:	4413      	add	r3, r2
 800e050:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	695b      	ldr	r3, [r3, #20]
 800e056:	2b02      	cmp	r3, #2
 800e058:	d029      	beq.n	800e0ae <SEGGER_RTT_WriteNoLock+0x7e>
 800e05a:	2b02      	cmp	r3, #2
 800e05c:	d82e      	bhi.n	800e0bc <SEGGER_RTT_WriteNoLock+0x8c>
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d002      	beq.n	800e068 <SEGGER_RTT_WriteNoLock+0x38>
 800e062:	2b01      	cmp	r3, #1
 800e064:	d013      	beq.n	800e08e <SEGGER_RTT_WriteNoLock+0x5e>
 800e066:	e029      	b.n	800e0bc <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800e068:	6978      	ldr	r0, [r7, #20]
 800e06a:	f7ff ff3b 	bl	800dee4 <_GetAvailWriteSpace>
 800e06e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800e070:	693a      	ldr	r2, [r7, #16]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	429a      	cmp	r2, r3
 800e076:	d202      	bcs.n	800e07e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800e078:	2300      	movs	r3, #0
 800e07a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800e07c:	e021      	b.n	800e0c2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	69b9      	ldr	r1, [r7, #24]
 800e086:	6978      	ldr	r0, [r7, #20]
 800e088:	f7ff feec 	bl	800de64 <_WriteNoCheck>
    break;
 800e08c:	e019      	b.n	800e0c2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800e08e:	6978      	ldr	r0, [r7, #20]
 800e090:	f7ff ff28 	bl	800dee4 <_GetAvailWriteSpace>
 800e094:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	4293      	cmp	r3, r2
 800e09c:	bf28      	it	cs
 800e09e:	4613      	movcs	r3, r2
 800e0a0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800e0a2:	69fa      	ldr	r2, [r7, #28]
 800e0a4:	69b9      	ldr	r1, [r7, #24]
 800e0a6:	6978      	ldr	r0, [r7, #20]
 800e0a8:	f7ff fedc 	bl	800de64 <_WriteNoCheck>
    break;
 800e0ac:	e009      	b.n	800e0c2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	69b9      	ldr	r1, [r7, #24]
 800e0b2:	6978      	ldr	r0, [r7, #20]
 800e0b4:	f7ff fe7c 	bl	800ddb0 <_WriteBlocking>
 800e0b8:	61f8      	str	r0, [r7, #28]
    break;
 800e0ba:	e002      	b.n	800e0c2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	61fb      	str	r3, [r7, #28]
    break;
 800e0c0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800e0c2:	69fb      	ldr	r3, [r7, #28]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3720      	adds	r7, #32
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	20001a80 	.word	0x20001a80

0800e0d0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b086      	sub	sp, #24
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 800e0dc:	4b0d      	ldr	r3, [pc, #52]	; (800e114 <SEGGER_RTT_Write+0x44>)
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d101      	bne.n	800e0e8 <SEGGER_RTT_Write+0x18>
 800e0e4:	f7ff fe12 	bl	800dd0c <_DoInit>
  SEGGER_RTT_LOCK();
 800e0e8:	f3ef 8311 	mrs	r3, BASEPRI
 800e0ec:	f04f 0120 	mov.w	r1, #32
 800e0f0:	f381 8811 	msr	BASEPRI, r1
 800e0f4:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	68b9      	ldr	r1, [r7, #8]
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f7ff ff98 	bl	800e030 <SEGGER_RTT_WriteNoLock>
 800e100:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 800e108:	693b      	ldr	r3, [r7, #16]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3718      	adds	r7, #24
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	20001a80 	.word	0x20001a80

0800e118 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800e118:	b580      	push	{r7, lr}
 800e11a:	b086      	sub	sp, #24
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	607a      	str	r2, [r7, #4]
 800e124:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800e126:	4b30      	ldr	r3, [pc, #192]	; (800e1e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800e12e:	f7ff fded 	bl	800dd0c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800e132:	4b2d      	ldr	r3, [pc, #180]	; (800e1e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	461a      	mov	r2, r3
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d24c      	bcs.n	800e1d8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800e13e:	f3ef 8311 	mrs	r3, BASEPRI
 800e142:	f04f 0120 	mov.w	r1, #32
 800e146:	f381 8811 	msr	BASEPRI, r1
 800e14a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d032      	beq.n	800e1b8 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800e152:	4925      	ldr	r1, [pc, #148]	; (800e1e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	1c5a      	adds	r2, r3, #1
 800e158:	4613      	mov	r3, r2
 800e15a:	005b      	lsls	r3, r3, #1
 800e15c:	4413      	add	r3, r2
 800e15e:	00db      	lsls	r3, r3, #3
 800e160:	440b      	add	r3, r1
 800e162:	68ba      	ldr	r2, [r7, #8]
 800e164:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800e166:	4920      	ldr	r1, [pc, #128]	; (800e1e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	1c5a      	adds	r2, r3, #1
 800e16c:	4613      	mov	r3, r2
 800e16e:	005b      	lsls	r3, r3, #1
 800e170:	4413      	add	r3, r2
 800e172:	00db      	lsls	r3, r3, #3
 800e174:	440b      	add	r3, r1
 800e176:	3304      	adds	r3, #4
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800e17c:	491a      	ldr	r1, [pc, #104]	; (800e1e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	4613      	mov	r3, r2
 800e182:	005b      	lsls	r3, r3, #1
 800e184:	4413      	add	r3, r2
 800e186:	00db      	lsls	r3, r3, #3
 800e188:	440b      	add	r3, r1
 800e18a:	3320      	adds	r3, #32
 800e18c:	683a      	ldr	r2, [r7, #0]
 800e18e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800e190:	4915      	ldr	r1, [pc, #84]	; (800e1e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	4613      	mov	r3, r2
 800e196:	005b      	lsls	r3, r3, #1
 800e198:	4413      	add	r3, r2
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	440b      	add	r3, r1
 800e19e:	3328      	adds	r3, #40	; 0x28
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800e1a4:	4910      	ldr	r1, [pc, #64]	; (800e1e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e1a6:	68fa      	ldr	r2, [r7, #12]
 800e1a8:	4613      	mov	r3, r2
 800e1aa:	005b      	lsls	r3, r3, #1
 800e1ac:	4413      	add	r3, r2
 800e1ae:	00db      	lsls	r3, r3, #3
 800e1b0:	440b      	add	r3, r1
 800e1b2:	3324      	adds	r3, #36	; 0x24
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800e1b8:	490b      	ldr	r1, [pc, #44]	; (800e1e8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	005b      	lsls	r3, r3, #1
 800e1c0:	4413      	add	r3, r2
 800e1c2:	00db      	lsls	r3, r3, #3
 800e1c4:	440b      	add	r3, r1
 800e1c6:	332c      	adds	r3, #44	; 0x2c
 800e1c8:	6a3a      	ldr	r2, [r7, #32]
 800e1ca:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	617b      	str	r3, [r7, #20]
 800e1d6:	e002      	b.n	800e1de <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800e1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1dc:	617b      	str	r3, [r7, #20]
  }
  return r;
 800e1de:	697b      	ldr	r3, [r7, #20]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3718      	adds	r7, #24
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	20001a80 	.word	0x20001a80

0800e1ec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b086      	sub	sp, #24
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	607a      	str	r2, [r7, #4]
 800e1f8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800e1fa:	4b30      	ldr	r3, [pc, #192]	; (800e2bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d101      	bne.n	800e206 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800e202:	f7ff fd83 	bl	800dd0c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800e206:	4b2d      	ldr	r3, [pc, #180]	; (800e2bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e208:	695b      	ldr	r3, [r3, #20]
 800e20a:	461a      	mov	r2, r3
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	4293      	cmp	r3, r2
 800e210:	d24b      	bcs.n	800e2aa <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800e212:	f3ef 8311 	mrs	r3, BASEPRI
 800e216:	f04f 0120 	mov.w	r1, #32
 800e21a:	f381 8811 	msr	BASEPRI, r1
 800e21e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d031      	beq.n	800e28a <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800e226:	4925      	ldr	r1, [pc, #148]	; (800e2bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	4613      	mov	r3, r2
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	4413      	add	r3, r2
 800e230:	00db      	lsls	r3, r3, #3
 800e232:	440b      	add	r3, r1
 800e234:	3360      	adds	r3, #96	; 0x60
 800e236:	68ba      	ldr	r2, [r7, #8]
 800e238:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800e23a:	4920      	ldr	r1, [pc, #128]	; (800e2bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	4613      	mov	r3, r2
 800e240:	005b      	lsls	r3, r3, #1
 800e242:	4413      	add	r3, r2
 800e244:	00db      	lsls	r3, r3, #3
 800e246:	440b      	add	r3, r1
 800e248:	3364      	adds	r3, #100	; 0x64
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800e24e:	491b      	ldr	r1, [pc, #108]	; (800e2bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e250:	68fa      	ldr	r2, [r7, #12]
 800e252:	4613      	mov	r3, r2
 800e254:	005b      	lsls	r3, r3, #1
 800e256:	4413      	add	r3, r2
 800e258:	00db      	lsls	r3, r3, #3
 800e25a:	440b      	add	r3, r1
 800e25c:	3368      	adds	r3, #104	; 0x68
 800e25e:	683a      	ldr	r2, [r7, #0]
 800e260:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800e262:	4916      	ldr	r1, [pc, #88]	; (800e2bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	4613      	mov	r3, r2
 800e268:	005b      	lsls	r3, r3, #1
 800e26a:	4413      	add	r3, r2
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	440b      	add	r3, r1
 800e270:	3370      	adds	r3, #112	; 0x70
 800e272:	2200      	movs	r2, #0
 800e274:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800e276:	4911      	ldr	r1, [pc, #68]	; (800e2bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	4613      	mov	r3, r2
 800e27c:	005b      	lsls	r3, r3, #1
 800e27e:	4413      	add	r3, r2
 800e280:	00db      	lsls	r3, r3, #3
 800e282:	440b      	add	r3, r1
 800e284:	336c      	adds	r3, #108	; 0x6c
 800e286:	2200      	movs	r2, #0
 800e288:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800e28a:	490c      	ldr	r1, [pc, #48]	; (800e2bc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	4613      	mov	r3, r2
 800e290:	005b      	lsls	r3, r3, #1
 800e292:	4413      	add	r3, r2
 800e294:	00db      	lsls	r3, r3, #3
 800e296:	440b      	add	r3, r1
 800e298:	3374      	adds	r3, #116	; 0x74
 800e29a:	6a3a      	ldr	r2, [r7, #32]
 800e29c:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	617b      	str	r3, [r7, #20]
 800e2a8:	e002      	b.n	800e2b0 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800e2aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ae:	617b      	str	r3, [r7, #20]
  }
  return r;
 800e2b0:	697b      	ldr	r3, [r7, #20]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3718      	adds	r7, #24
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	20001a80 	.word	0x20001a80

0800e2c0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
int _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	607a      	str	r2, [r7, #4]
 800e2cc:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800e2ce:	683a      	ldr	r2, [r7, #0]
 800e2d0:	6879      	ldr	r1, [r7, #4]
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	f7ff fefc 	bl	800e0d0 <SEGGER_RTT_Write>
  return len;
 800e2d8:	683b      	ldr	r3, [r7, #0]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800e2e2:	b480      	push	{r7}
 800e2e4:	b087      	sub	sp, #28
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	60f8      	str	r0, [r7, #12]
 800e2ea:	60b9      	str	r1, [r7, #8]
 800e2ec:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800e2f2:	e002      	b.n	800e2fa <_EncodeStr+0x18>
    Len++;
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800e2fa:	68ba      	ldr	r2, [r7, #8]
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	4413      	add	r3, r2
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1f6      	bne.n	800e2f4 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800e306:	693a      	ldr	r2, [r7, #16]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d901      	bls.n	800e312 <_EncodeStr+0x30>
    Len = Limit;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	2bfe      	cmp	r3, #254	; 0xfe
 800e316:	d806      	bhi.n	800e326 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	60fa      	str	r2, [r7, #12]
 800e31e:	693a      	ldr	r2, [r7, #16]
 800e320:	b2d2      	uxtb	r2, r2
 800e322:	701a      	strb	r2, [r3, #0]
 800e324:	e011      	b.n	800e34a <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	1c5a      	adds	r2, r3, #1
 800e32a:	60fa      	str	r2, [r7, #12]
 800e32c:	22ff      	movs	r2, #255	; 0xff
 800e32e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	1c5a      	adds	r2, r3, #1
 800e334:	60fa      	str	r2, [r7, #12]
 800e336:	693a      	ldr	r2, [r7, #16]
 800e338:	b2d2      	uxtb	r2, r2
 800e33a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	0a19      	lsrs	r1, r3, #8
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	1c5a      	adds	r2, r3, #1
 800e344:	60fa      	str	r2, [r7, #12]
 800e346:	b2ca      	uxtb	r2, r1
 800e348:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800e34a:	2300      	movs	r3, #0
 800e34c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800e34e:	e00a      	b.n	800e366 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	1c53      	adds	r3, r2, #1
 800e354:	60bb      	str	r3, [r7, #8]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	1c59      	adds	r1, r3, #1
 800e35a:	60f9      	str	r1, [r7, #12]
 800e35c:	7812      	ldrb	r2, [r2, #0]
 800e35e:	701a      	strb	r2, [r3, #0]
    n++;
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	3301      	adds	r3, #1
 800e364:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800e366:	697a      	ldr	r2, [r7, #20]
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d3f0      	bcc.n	800e350 <_EncodeStr+0x6e>
  }
  return pPayload;
 800e36e:	68fb      	ldr	r3, [r7, #12]
}
 800e370:	4618      	mov	r0, r3
 800e372:	371c      	adds	r7, #28
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr

0800e37c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	3304      	adds	r3, #4
}
 800e388:	4618      	mov	r0, r3
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e39a:	1cfb      	adds	r3, r7, #3
 800e39c:	2201      	movs	r2, #1
 800e39e:	4619      	mov	r1, r3
 800e3a0:	2001      	movs	r0, #1
 800e3a2:	f7ff fdc3 	bl	800df2c <SEGGER_RTT_ReadNoLock>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	dd4c      	ble.n	800e44a <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 800e3b0:	78fb      	ldrb	r3, [r7, #3]
 800e3b2:	2b07      	cmp	r3, #7
 800e3b4:	dc16      	bgt.n	800e3e4 <_HandleIncomingPacket+0x50>
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	dd3c      	ble.n	800e434 <_HandleIncomingPacket+0xa0>
 800e3ba:	3b01      	subs	r3, #1
 800e3bc:	2b06      	cmp	r3, #6
 800e3be:	d839      	bhi.n	800e434 <_HandleIncomingPacket+0xa0>
 800e3c0:	a201      	add	r2, pc, #4	; (adr r2, 800e3c8 <_HandleIncomingPacket+0x34>)
 800e3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c6:	bf00      	nop
 800e3c8:	0800e3eb 	.word	0x0800e3eb
 800e3cc:	0800e3f1 	.word	0x0800e3f1
 800e3d0:	0800e3f7 	.word	0x0800e3f7
 800e3d4:	0800e3fd 	.word	0x0800e3fd
 800e3d8:	0800e403 	.word	0x0800e403
 800e3dc:	0800e409 	.word	0x0800e409
 800e3e0:	0800e40f 	.word	0x0800e40f
 800e3e4:	2b80      	cmp	r3, #128	; 0x80
 800e3e6:	d015      	beq.n	800e414 <_HandleIncomingPacket+0x80>
 800e3e8:	e024      	b.n	800e434 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800e3ea:	f000 fc43 	bl	800ec74 <SEGGER_SYSVIEW_Start>
      break;
 800e3ee:	e031      	b.n	800e454 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800e3f0:	f000 fcfc 	bl	800edec <SEGGER_SYSVIEW_Stop>
      break;
 800e3f4:	e02e      	b.n	800e454 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800e3f6:	f000 fed7 	bl	800f1a8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800e3fa:	e02b      	b.n	800e454 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800e3fc:	f000 fe9c 	bl	800f138 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800e400:	e028      	b.n	800e454 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800e402:	f000 fd19 	bl	800ee38 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800e406:	e025      	b.n	800e454 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800e408:	f001 f898 	bl	800f53c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800e40c:	e022      	b.n	800e454 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800e40e:	f001 f877 	bl	800f500 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800e412:	e01f      	b.n	800e454 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e414:	1cfb      	adds	r3, r7, #3
 800e416:	2201      	movs	r2, #1
 800e418:	4619      	mov	r1, r3
 800e41a:	2001      	movs	r0, #1
 800e41c:	f7ff fd86 	bl	800df2c <SEGGER_RTT_ReadNoLock>
 800e420:	4603      	mov	r3, r0
 800e422:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	dd11      	ble.n	800e44e <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800e42a:	78fb      	ldrb	r3, [r7, #3]
 800e42c:	4618      	mov	r0, r3
 800e42e:	f000 ffe7 	bl	800f400 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800e432:	e00c      	b.n	800e44e <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800e434:	78fb      	ldrb	r3, [r7, #3]
 800e436:	b25b      	sxtb	r3, r3
 800e438:	2b00      	cmp	r3, #0
 800e43a:	da0a      	bge.n	800e452 <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e43c:	1cfb      	adds	r3, r7, #3
 800e43e:	2201      	movs	r2, #1
 800e440:	4619      	mov	r1, r3
 800e442:	2001      	movs	r0, #1
 800e444:	f7ff fd72 	bl	800df2c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800e448:	e003      	b.n	800e452 <_HandleIncomingPacket+0xbe>
    }
  }
 800e44a:	bf00      	nop
 800e44c:	e002      	b.n	800e454 <_HandleIncomingPacket+0xc0>
      break;
 800e44e:	bf00      	nop
 800e450:	e000      	b.n	800e454 <_HandleIncomingPacket+0xc0>
      break;
 800e452:	bf00      	nop
}
 800e454:	bf00      	nop
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b08c      	sub	sp, #48	; 0x30
 800e460:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800e462:	2301      	movs	r3, #1
 800e464:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800e466:	1d3b      	adds	r3, r7, #4
 800e468:	3301      	adds	r3, #1
 800e46a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e470:	4b30      	ldr	r3, [pc, #192]	; (800e534 <_TrySendOverflowPacket+0xd8>)
 800e472:	695b      	ldr	r3, [r3, #20]
 800e474:	62bb      	str	r3, [r7, #40]	; 0x28
 800e476:	e00b      	b.n	800e490 <_TrySendOverflowPacket+0x34>
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47e:	1c59      	adds	r1, r3, #1
 800e480:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e486:	b2d2      	uxtb	r2, r2
 800e488:	701a      	strb	r2, [r3, #0]
 800e48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48c:	09db      	lsrs	r3, r3, #7
 800e48e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	2b7f      	cmp	r3, #127	; 0x7f
 800e494:	d8f0      	bhi.n	800e478 <_TrySendOverflowPacket+0x1c>
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e498:	1c5a      	adds	r2, r3, #1
 800e49a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e49c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e49e:	b2d2      	uxtb	r2, r2
 800e4a0:	701a      	strb	r2, [r3, #0]
 800e4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e4a6:	4b24      	ldr	r3, [pc, #144]	; (800e538 <_TrySendOverflowPacket+0xdc>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800e4ac:	4b21      	ldr	r3, [pc, #132]	; (800e534 <_TrySendOverflowPacket+0xd8>)
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	69ba      	ldr	r2, [r7, #24]
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	627b      	str	r3, [r7, #36]	; 0x24
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	623b      	str	r3, [r7, #32]
 800e4be:	e00b      	b.n	800e4d8 <_TrySendOverflowPacket+0x7c>
 800e4c0:	6a3b      	ldr	r3, [r7, #32]
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c6:	1c59      	adds	r1, r3, #1
 800e4c8:	6279      	str	r1, [r7, #36]	; 0x24
 800e4ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e4ce:	b2d2      	uxtb	r2, r2
 800e4d0:	701a      	strb	r2, [r3, #0]
 800e4d2:	6a3b      	ldr	r3, [r7, #32]
 800e4d4:	09db      	lsrs	r3, r3, #7
 800e4d6:	623b      	str	r3, [r7, #32]
 800e4d8:	6a3b      	ldr	r3, [r7, #32]
 800e4da:	2b7f      	cmp	r3, #127	; 0x7f
 800e4dc:	d8f0      	bhi.n	800e4c0 <_TrySendOverflowPacket+0x64>
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	1c5a      	adds	r2, r3, #1
 800e4e2:	627a      	str	r2, [r7, #36]	; 0x24
 800e4e4:	6a3a      	ldr	r2, [r7, #32]
 800e4e6:	b2d2      	uxtb	r2, r2
 800e4e8:	701a      	strb	r2, [r3, #0]
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800e4ee:	1d3b      	adds	r3, r7, #4
 800e4f0:	69fa      	ldr	r2, [r7, #28]
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	1d3b      	adds	r3, r7, #4
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	2001      	movs	r0, #1
 800e4fc:	f7f1 fe68 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800e500:	4603      	mov	r3, r0
 800e502:	613b      	str	r3, [r7, #16]
  if (Status) {
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d009      	beq.n	800e51e <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800e50a:	4a0a      	ldr	r2, [pc, #40]	; (800e534 <_TrySendOverflowPacket+0xd8>)
 800e50c:	69bb      	ldr	r3, [r7, #24]
 800e50e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800e510:	4b08      	ldr	r3, [pc, #32]	; (800e534 <_TrySendOverflowPacket+0xd8>)
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	3b01      	subs	r3, #1
 800e516:	b2da      	uxtb	r2, r3
 800e518:	4b06      	ldr	r3, [pc, #24]	; (800e534 <_TrySendOverflowPacket+0xd8>)
 800e51a:	701a      	strb	r2, [r3, #0]
 800e51c:	e004      	b.n	800e528 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800e51e:	4b05      	ldr	r3, [pc, #20]	; (800e534 <_TrySendOverflowPacket+0xd8>)
 800e520:	695b      	ldr	r3, [r3, #20]
 800e522:	3301      	adds	r3, #1
 800e524:	4a03      	ldr	r2, [pc, #12]	; (800e534 <_TrySendOverflowPacket+0xd8>)
 800e526:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800e528:	693b      	ldr	r3, [r7, #16]
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3730      	adds	r7, #48	; 0x30
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	20002340 	.word	0x20002340
 800e538:	e0001004 	.word	0xe0001004

0800e53c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b08a      	sub	sp, #40	; 0x28
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800e548:	4b63      	ldr	r3, [pc, #396]	; (800e6d8 <_SendPacket+0x19c>)
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d010      	beq.n	800e572 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800e550:	4b61      	ldr	r3, [pc, #388]	; (800e6d8 <_SendPacket+0x19c>)
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 80a1 	beq.w	800e69c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800e55a:	4b5f      	ldr	r3, [pc, #380]	; (800e6d8 <_SendPacket+0x19c>)
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d109      	bne.n	800e576 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800e562:	f7ff ff7b 	bl	800e45c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800e566:	4b5c      	ldr	r3, [pc, #368]	; (800e6d8 <_SendPacket+0x19c>)
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	f040 8098 	bne.w	800e6a0 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800e570:	e001      	b.n	800e576 <_SendPacket+0x3a>
    goto Send;
 800e572:	bf00      	nop
 800e574:	e000      	b.n	800e578 <_SendPacket+0x3c>
Send:
 800e576:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2b1f      	cmp	r3, #31
 800e57c:	d809      	bhi.n	800e592 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800e57e:	4b56      	ldr	r3, [pc, #344]	; (800e6d8 <_SendPacket+0x19c>)
 800e580:	69da      	ldr	r2, [r3, #28]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	fa22 f303 	lsr.w	r3, r2, r3
 800e588:	f003 0301 	and.w	r3, r3, #1
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f040 8089 	bne.w	800e6a4 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2b17      	cmp	r3, #23
 800e596:	d807      	bhi.n	800e5a8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	3b01      	subs	r3, #1
 800e59c:	60fb      	str	r3, [r7, #12]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	701a      	strb	r2, [r3, #0]
 800e5a6:	e03d      	b.n	800e624 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800e5a8:	68ba      	ldr	r2, [r7, #8]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	2b7f      	cmp	r3, #127	; 0x7f
 800e5b4:	d912      	bls.n	800e5dc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	09da      	lsrs	r2, r3, #7
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	60fb      	str	r3, [r7, #12]
 800e5c0:	b2d2      	uxtb	r2, r2
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	3a01      	subs	r2, #1
 800e5ce:	60fa      	str	r2, [r7, #12]
 800e5d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e5d4:	b2da      	uxtb	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	701a      	strb	r2, [r3, #0]
 800e5da:	e006      	b.n	800e5ea <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	60fb      	str	r3, [r7, #12]
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2b7f      	cmp	r3, #127	; 0x7f
 800e5ee:	d912      	bls.n	800e616 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	09da      	lsrs	r2, r3, #7
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	60fb      	str	r3, [r7, #12]
 800e5fa:	b2d2      	uxtb	r2, r2
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	b2db      	uxtb	r3, r3
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	3a01      	subs	r2, #1
 800e608:	60fa      	str	r2, [r7, #12]
 800e60a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e60e:	b2da      	uxtb	r2, r3
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	701a      	strb	r2, [r3, #0]
 800e614:	e006      	b.n	800e624 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	3b01      	subs	r3, #1
 800e61a:	60fb      	str	r3, [r7, #12]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	b2da      	uxtb	r2, r3
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e624:	4b2d      	ldr	r3, [pc, #180]	; (800e6dc <_SendPacket+0x1a0>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800e62a:	4b2b      	ldr	r3, [pc, #172]	; (800e6d8 <_SendPacket+0x19c>)
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	69ba      	ldr	r2, [r7, #24]
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	627b      	str	r3, [r7, #36]	; 0x24
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	623b      	str	r3, [r7, #32]
 800e63c:	e00b      	b.n	800e656 <_SendPacket+0x11a>
 800e63e:	6a3b      	ldr	r3, [r7, #32]
 800e640:	b2da      	uxtb	r2, r3
 800e642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e644:	1c59      	adds	r1, r3, #1
 800e646:	6279      	str	r1, [r7, #36]	; 0x24
 800e648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e64c:	b2d2      	uxtb	r2, r2
 800e64e:	701a      	strb	r2, [r3, #0]
 800e650:	6a3b      	ldr	r3, [r7, #32]
 800e652:	09db      	lsrs	r3, r3, #7
 800e654:	623b      	str	r3, [r7, #32]
 800e656:	6a3b      	ldr	r3, [r7, #32]
 800e658:	2b7f      	cmp	r3, #127	; 0x7f
 800e65a:	d8f0      	bhi.n	800e63e <_SendPacket+0x102>
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	627a      	str	r2, [r7, #36]	; 0x24
 800e662:	6a3a      	ldr	r2, [r7, #32]
 800e664:	b2d2      	uxtb	r2, r2
 800e666:	701a      	strb	r2, [r3, #0]
 800e668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	1ad3      	subs	r3, r2, r3
 800e672:	461a      	mov	r2, r3
 800e674:	68f9      	ldr	r1, [r7, #12]
 800e676:	2001      	movs	r0, #1
 800e678:	f7f1 fdaa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800e67c:	4603      	mov	r3, r0
 800e67e:	613b      	str	r3, [r7, #16]
  if (Status) {
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d003      	beq.n	800e68e <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800e686:	4a14      	ldr	r2, [pc, #80]	; (800e6d8 <_SendPacket+0x19c>)
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	60d3      	str	r3, [r2, #12]
 800e68c:	e00b      	b.n	800e6a6 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800e68e:	4b12      	ldr	r3, [pc, #72]	; (800e6d8 <_SendPacket+0x19c>)
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	3301      	adds	r3, #1
 800e694:	b2da      	uxtb	r2, r3
 800e696:	4b10      	ldr	r3, [pc, #64]	; (800e6d8 <_SendPacket+0x19c>)
 800e698:	701a      	strb	r2, [r3, #0]
 800e69a:	e004      	b.n	800e6a6 <_SendPacket+0x16a>
    goto SendDone;
 800e69c:	bf00      	nop
 800e69e:	e002      	b.n	800e6a6 <_SendPacket+0x16a>
      goto SendDone;
 800e6a0:	bf00      	nop
 800e6a2:	e000      	b.n	800e6a6 <_SendPacket+0x16a>
      goto SendDone;
 800e6a4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800e6a6:	4b0e      	ldr	r3, [pc, #56]	; (800e6e0 <_SendPacket+0x1a4>)
 800e6a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800e6ac:	4b0c      	ldr	r3, [pc, #48]	; (800e6e0 <_SendPacket+0x1a4>)
 800e6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d00b      	beq.n	800e6ce <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800e6b6:	4b08      	ldr	r3, [pc, #32]	; (800e6d8 <_SendPacket+0x19c>)
 800e6b8:	789b      	ldrb	r3, [r3, #2]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d107      	bne.n	800e6ce <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800e6be:	4b06      	ldr	r3, [pc, #24]	; (800e6d8 <_SendPacket+0x19c>)
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800e6c4:	f7ff fe66 	bl	800e394 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800e6c8:	4b03      	ldr	r3, [pc, #12]	; (800e6d8 <_SendPacket+0x19c>)
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800e6ce:	bf00      	nop
 800e6d0:	3728      	adds	r7, #40	; 0x28
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	20002340 	.word	0x20002340
 800e6dc:	e0001004 	.word	0xe0001004
 800e6e0:	20001a80 	.word	0x20001a80

0800e6e4 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b0a2      	sub	sp, #136	; 0x88
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 800e6fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 800e706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d01d      	beq.n	800e74a <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800e70e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e712:	2b25      	cmp	r3, #37	; 0x25
 800e714:	d1f1      	bne.n	800e6fa <_VPrintHost+0x16>
      c = *p;
 800e716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	1d19      	adds	r1, r3, #4
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	6011      	str	r1, [r2, #0]
 800e728:	6819      	ldr	r1, [r3, #0]
 800e72a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e72e:	1c5a      	adds	r2, r3, #1
 800e730:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e734:	460a      	mov	r2, r1
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	3388      	adds	r3, #136	; 0x88
 800e73a:	443b      	add	r3, r7
 800e73c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800e740:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e744:	2b10      	cmp	r3, #16
 800e746:	d002      	beq.n	800e74e <_VPrintHost+0x6a>
    c = *p++;
 800e748:	e7d7      	b.n	800e6fa <_VPrintHost+0x16>
      break;
 800e74a:	bf00      	nop
 800e74c:	e000      	b.n	800e750 <_VPrintHost+0x6c>
        break;
 800e74e:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800e750:	f3ef 8311 	mrs	r3, BASEPRI
 800e754:	f04f 0120 	mov.w	r1, #32
 800e758:	f381 8811 	msr	BASEPRI, r1
 800e75c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e75e:	483f      	ldr	r0, [pc, #252]	; (800e85c <_VPrintHost+0x178>)
 800e760:	f7ff fe0c 	bl	800e37c <_PreparePacket>
 800e764:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e766:	2280      	movs	r2, #128	; 0x80
 800e768:	68f9      	ldr	r1, [r7, #12]
 800e76a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e76c:	f7ff fdb9 	bl	800e2e2 <_EncodeStr>
 800e770:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 800e772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e774:	677b      	str	r3, [r7, #116]	; 0x74
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	673b      	str	r3, [r7, #112]	; 0x70
 800e77a:	e00b      	b.n	800e794 <_VPrintHost+0xb0>
 800e77c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e77e:	b2da      	uxtb	r2, r3
 800e780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e782:	1c59      	adds	r1, r3, #1
 800e784:	6779      	str	r1, [r7, #116]	; 0x74
 800e786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e78a:	b2d2      	uxtb	r2, r2
 800e78c:	701a      	strb	r2, [r3, #0]
 800e78e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e790:	09db      	lsrs	r3, r3, #7
 800e792:	673b      	str	r3, [r7, #112]	; 0x70
 800e794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e796:	2b7f      	cmp	r3, #127	; 0x7f
 800e798:	d8f0      	bhi.n	800e77c <_VPrintHost+0x98>
 800e79a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e79c:	1c5a      	adds	r2, r3, #1
 800e79e:	677a      	str	r2, [r7, #116]	; 0x74
 800e7a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e7a2:	b2d2      	uxtb	r2, r2
 800e7a4:	701a      	strb	r2, [r3, #0]
 800e7a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e7a8:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 800e7aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e7ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e7b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7b4:	e00b      	b.n	800e7ce <_VPrintHost+0xea>
 800e7b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7b8:	b2da      	uxtb	r2, r3
 800e7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7bc:	1c59      	adds	r1, r3, #1
 800e7be:	66f9      	str	r1, [r7, #108]	; 0x6c
 800e7c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e7c4:	b2d2      	uxtb	r2, r2
 800e7c6:	701a      	strb	r2, [r3, #0]
 800e7c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7ca:	09db      	lsrs	r3, r3, #7
 800e7cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7d0:	2b7f      	cmp	r3, #127	; 0x7f
 800e7d2:	d8f0      	bhi.n	800e7b6 <_VPrintHost+0xd2>
 800e7d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7d6:	1c5a      	adds	r2, r3, #1
 800e7d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e7da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e7dc:	b2d2      	uxtb	r2, r2
 800e7de:	701a      	strb	r2, [r3, #0]
 800e7e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e2:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 800e7e4:	f107 0314 	add.w	r3, r7, #20
 800e7e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800e7ec:	e022      	b.n	800e834 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800e7ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7f0:	667b      	str	r3, [r7, #100]	; 0x64
 800e7f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	663b      	str	r3, [r7, #96]	; 0x60
 800e7fa:	e00b      	b.n	800e814 <_VPrintHost+0x130>
 800e7fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7fe:	b2da      	uxtb	r2, r3
 800e800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e802:	1c59      	adds	r1, r3, #1
 800e804:	6679      	str	r1, [r7, #100]	; 0x64
 800e806:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e80a:	b2d2      	uxtb	r2, r2
 800e80c:	701a      	strb	r2, [r3, #0]
 800e80e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e810:	09db      	lsrs	r3, r3, #7
 800e812:	663b      	str	r3, [r7, #96]	; 0x60
 800e814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e816:	2b7f      	cmp	r3, #127	; 0x7f
 800e818:	d8f0      	bhi.n	800e7fc <_VPrintHost+0x118>
 800e81a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e81c:	1c5a      	adds	r2, r3, #1
 800e81e:	667a      	str	r2, [r7, #100]	; 0x64
 800e820:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e822:	b2d2      	uxtb	r2, r2
 800e824:	701a      	strb	r2, [r3, #0]
 800e826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e828:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 800e82a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e82e:	3304      	adds	r3, #4
 800e830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800e834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e838:	1e5a      	subs	r2, r3, #1
 800e83a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1d5      	bne.n	800e7ee <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800e842:	221a      	movs	r2, #26
 800e844:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e846:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e848:	f7ff fe78 	bl	800e53c <_SendPacket>
    RECORD_END();
 800e84c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e84e:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800e852:	2300      	movs	r3, #0
}
 800e854:	4618      	mov	r0, r3
 800e856:	3788      	adds	r7, #136	; 0x88
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	20002370 	.word	0x20002370

0800e860 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800e860:	b580      	push	{r7, lr}
 800e862:	b086      	sub	sp, #24
 800e864:	af02      	add	r7, sp, #8
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	607a      	str	r2, [r7, #4]
 800e86c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e86e:	2300      	movs	r3, #0
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e876:	4a14      	ldr	r2, [pc, #80]	; (800e8c8 <SEGGER_SYSVIEW_Init+0x68>)
 800e878:	4914      	ldr	r1, [pc, #80]	; (800e8cc <SEGGER_SYSVIEW_Init+0x6c>)
 800e87a:	2001      	movs	r0, #1
 800e87c:	f7ff fc4c 	bl	800e118 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e880:	2300      	movs	r3, #0
 800e882:	9300      	str	r3, [sp, #0]
 800e884:	2308      	movs	r3, #8
 800e886:	4a12      	ldr	r2, [pc, #72]	; (800e8d0 <SEGGER_SYSVIEW_Init+0x70>)
 800e888:	4910      	ldr	r1, [pc, #64]	; (800e8cc <SEGGER_SYSVIEW_Init+0x6c>)
 800e88a:	2001      	movs	r0, #1
 800e88c:	f7ff fcae 	bl	800e1ec <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800e890:	4b10      	ldr	r3, [pc, #64]	; (800e8d4 <SEGGER_SYSVIEW_Init+0x74>)
 800e892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e896:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e898:	4b0f      	ldr	r3, [pc, #60]	; (800e8d8 <SEGGER_SYSVIEW_Init+0x78>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4a0d      	ldr	r2, [pc, #52]	; (800e8d4 <SEGGER_SYSVIEW_Init+0x74>)
 800e89e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800e8a0:	4a0c      	ldr	r2, [pc, #48]	; (800e8d4 <SEGGER_SYSVIEW_Init+0x74>)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800e8a6:	4a0b      	ldr	r2, [pc, #44]	; (800e8d4 <SEGGER_SYSVIEW_Init+0x74>)
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800e8ac:	4a09      	ldr	r2, [pc, #36]	; (800e8d4 <SEGGER_SYSVIEW_Init+0x74>)
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800e8b2:	4a08      	ldr	r2, [pc, #32]	; (800e8d4 <SEGGER_SYSVIEW_Init+0x74>)
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800e8b8:	4b06      	ldr	r3, [pc, #24]	; (800e8d4 <SEGGER_SYSVIEW_Init+0x74>)
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800e8be:	bf00      	nop
 800e8c0:	3710      	adds	r7, #16
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	20001f38 	.word	0x20001f38
 800e8cc:	08012418 	.word	0x08012418
 800e8d0:	20002338 	.word	0x20002338
 800e8d4:	20002340 	.word	0x20002340
 800e8d8:	e0001004 	.word	0xe0001004

0800e8dc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800e8e4:	4a04      	ldr	r2, [pc, #16]	; (800e8f8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6113      	str	r3, [r2, #16]
}
 800e8ea:	bf00      	nop
 800e8ec:	370c      	adds	r7, #12
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop
 800e8f8:	20002340 	.word	0x20002340

0800e8fc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800e904:	f3ef 8311 	mrs	r3, BASEPRI
 800e908:	f04f 0120 	mov.w	r1, #32
 800e90c:	f381 8811 	msr	BASEPRI, r1
 800e910:	60fb      	str	r3, [r7, #12]
 800e912:	4808      	ldr	r0, [pc, #32]	; (800e934 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800e914:	f7ff fd32 	bl	800e37c <_PreparePacket>
 800e918:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	68b9      	ldr	r1, [r7, #8]
 800e91e:	68b8      	ldr	r0, [r7, #8]
 800e920:	f7ff fe0c 	bl	800e53c <_SendPacket>
  RECORD_END();
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f383 8811 	msr	BASEPRI, r3
}
 800e92a:	bf00      	nop
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	20002370 	.word	0x20002370

0800e938 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800e938:	b580      	push	{r7, lr}
 800e93a:	b088      	sub	sp, #32
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e942:	f3ef 8311 	mrs	r3, BASEPRI
 800e946:	f04f 0120 	mov.w	r1, #32
 800e94a:	f381 8811 	msr	BASEPRI, r1
 800e94e:	617b      	str	r3, [r7, #20]
 800e950:	4816      	ldr	r0, [pc, #88]	; (800e9ac <SEGGER_SYSVIEW_RecordU32+0x74>)
 800e952:	f7ff fd13 	bl	800e37c <_PreparePacket>
 800e956:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	61fb      	str	r3, [r7, #28]
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	61bb      	str	r3, [r7, #24]
 800e964:	e00b      	b.n	800e97e <SEGGER_SYSVIEW_RecordU32+0x46>
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	b2da      	uxtb	r2, r3
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	1c59      	adds	r1, r3, #1
 800e96e:	61f9      	str	r1, [r7, #28]
 800e970:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e974:	b2d2      	uxtb	r2, r2
 800e976:	701a      	strb	r2, [r3, #0]
 800e978:	69bb      	ldr	r3, [r7, #24]
 800e97a:	09db      	lsrs	r3, r3, #7
 800e97c:	61bb      	str	r3, [r7, #24]
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	2b7f      	cmp	r3, #127	; 0x7f
 800e982:	d8f0      	bhi.n	800e966 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	1c5a      	adds	r2, r3, #1
 800e988:	61fa      	str	r2, [r7, #28]
 800e98a:	69ba      	ldr	r2, [r7, #24]
 800e98c:	b2d2      	uxtb	r2, r2
 800e98e:	701a      	strb	r2, [r3, #0]
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	68f9      	ldr	r1, [r7, #12]
 800e998:	6938      	ldr	r0, [r7, #16]
 800e99a:	f7ff fdcf 	bl	800e53c <_SendPacket>
  RECORD_END();
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	f383 8811 	msr	BASEPRI, r3
}
 800e9a4:	bf00      	nop
 800e9a6:	3720      	adds	r7, #32
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	20002370 	.word	0x20002370

0800e9b0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b08c      	sub	sp, #48	; 0x30
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800e9bc:	f3ef 8311 	mrs	r3, BASEPRI
 800e9c0:	f04f 0120 	mov.w	r1, #32
 800e9c4:	f381 8811 	msr	BASEPRI, r1
 800e9c8:	61fb      	str	r3, [r7, #28]
 800e9ca:	4825      	ldr	r0, [pc, #148]	; (800ea60 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800e9cc:	f7ff fcd6 	bl	800e37c <_PreparePacket>
 800e9d0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9de:	e00b      	b.n	800e9f8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800e9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e2:	b2da      	uxtb	r2, r3
 800e9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e6:	1c59      	adds	r1, r3, #1
 800e9e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e9ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e9ee:	b2d2      	uxtb	r2, r2
 800e9f0:	701a      	strb	r2, [r3, #0]
 800e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f4:	09db      	lsrs	r3, r3, #7
 800e9f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fa:	2b7f      	cmp	r3, #127	; 0x7f
 800e9fc:	d8f0      	bhi.n	800e9e0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800e9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea00:	1c5a      	adds	r2, r3, #1
 800ea02:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea06:	b2d2      	uxtb	r2, r2
 800ea08:	701a      	strb	r2, [r3, #0]
 800ea0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	627b      	str	r3, [r7, #36]	; 0x24
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	623b      	str	r3, [r7, #32]
 800ea16:	e00b      	b.n	800ea30 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800ea18:	6a3b      	ldr	r3, [r7, #32]
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1e:	1c59      	adds	r1, r3, #1
 800ea20:	6279      	str	r1, [r7, #36]	; 0x24
 800ea22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea26:	b2d2      	uxtb	r2, r2
 800ea28:	701a      	strb	r2, [r3, #0]
 800ea2a:	6a3b      	ldr	r3, [r7, #32]
 800ea2c:	09db      	lsrs	r3, r3, #7
 800ea2e:	623b      	str	r3, [r7, #32]
 800ea30:	6a3b      	ldr	r3, [r7, #32]
 800ea32:	2b7f      	cmp	r3, #127	; 0x7f
 800ea34:	d8f0      	bhi.n	800ea18 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800ea36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	627a      	str	r2, [r7, #36]	; 0x24
 800ea3c:	6a3a      	ldr	r2, [r7, #32]
 800ea3e:	b2d2      	uxtb	r2, r2
 800ea40:	701a      	strb	r2, [r3, #0]
 800ea42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea44:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	6979      	ldr	r1, [r7, #20]
 800ea4a:	69b8      	ldr	r0, [r7, #24]
 800ea4c:	f7ff fd76 	bl	800e53c <_SendPacket>
  RECORD_END();
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	f383 8811 	msr	BASEPRI, r3
}
 800ea56:	bf00      	nop
 800ea58:	3730      	adds	r7, #48	; 0x30
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	20002370 	.word	0x20002370

0800ea64 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b08e      	sub	sp, #56	; 0x38
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
 800ea70:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800ea72:	f3ef 8311 	mrs	r3, BASEPRI
 800ea76:	f04f 0120 	mov.w	r1, #32
 800ea7a:	f381 8811 	msr	BASEPRI, r1
 800ea7e:	61fb      	str	r3, [r7, #28]
 800ea80:	4832      	ldr	r0, [pc, #200]	; (800eb4c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800ea82:	f7ff fc7b 	bl	800e37c <_PreparePacket>
 800ea86:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	633b      	str	r3, [r7, #48]	; 0x30
 800ea94:	e00b      	b.n	800eaae <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800ea96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea98:	b2da      	uxtb	r2, r3
 800ea9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea9c:	1c59      	adds	r1, r3, #1
 800ea9e:	6379      	str	r1, [r7, #52]	; 0x34
 800eaa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eaa4:	b2d2      	uxtb	r2, r2
 800eaa6:	701a      	strb	r2, [r3, #0]
 800eaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaaa:	09db      	lsrs	r3, r3, #7
 800eaac:	633b      	str	r3, [r7, #48]	; 0x30
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	2b7f      	cmp	r3, #127	; 0x7f
 800eab2:	d8f0      	bhi.n	800ea96 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800eab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab6:	1c5a      	adds	r2, r3, #1
 800eab8:	637a      	str	r2, [r7, #52]	; 0x34
 800eaba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eabc:	b2d2      	uxtb	r2, r2
 800eabe:	701a      	strb	r2, [r3, #0]
 800eac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eac2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	62bb      	str	r3, [r7, #40]	; 0x28
 800eacc:	e00b      	b.n	800eae6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800eace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead0:	b2da      	uxtb	r2, r3
 800ead2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead4:	1c59      	adds	r1, r3, #1
 800ead6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ead8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eadc:	b2d2      	uxtb	r2, r2
 800eade:	701a      	strb	r2, [r3, #0]
 800eae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae2:	09db      	lsrs	r3, r3, #7
 800eae4:	62bb      	str	r3, [r7, #40]	; 0x28
 800eae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae8:	2b7f      	cmp	r3, #127	; 0x7f
 800eaea:	d8f0      	bhi.n	800eace <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800eaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eaf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaf4:	b2d2      	uxtb	r2, r2
 800eaf6:	701a      	strb	r2, [r3, #0]
 800eaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	627b      	str	r3, [r7, #36]	; 0x24
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	623b      	str	r3, [r7, #32]
 800eb04:	e00b      	b.n	800eb1e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800eb06:	6a3b      	ldr	r3, [r7, #32]
 800eb08:	b2da      	uxtb	r2, r3
 800eb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0c:	1c59      	adds	r1, r3, #1
 800eb0e:	6279      	str	r1, [r7, #36]	; 0x24
 800eb10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eb14:	b2d2      	uxtb	r2, r2
 800eb16:	701a      	strb	r2, [r3, #0]
 800eb18:	6a3b      	ldr	r3, [r7, #32]
 800eb1a:	09db      	lsrs	r3, r3, #7
 800eb1c:	623b      	str	r3, [r7, #32]
 800eb1e:	6a3b      	ldr	r3, [r7, #32]
 800eb20:	2b7f      	cmp	r3, #127	; 0x7f
 800eb22:	d8f0      	bhi.n	800eb06 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800eb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb26:	1c5a      	adds	r2, r3, #1
 800eb28:	627a      	str	r2, [r7, #36]	; 0x24
 800eb2a:	6a3a      	ldr	r2, [r7, #32]
 800eb2c:	b2d2      	uxtb	r2, r2
 800eb2e:	701a      	strb	r2, [r3, #0]
 800eb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb32:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	6979      	ldr	r1, [r7, #20]
 800eb38:	69b8      	ldr	r0, [r7, #24]
 800eb3a:	f7ff fcff 	bl	800e53c <_SendPacket>
  RECORD_END();
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	f383 8811 	msr	BASEPRI, r3
}
 800eb44:	bf00      	nop
 800eb46:	3738      	adds	r7, #56	; 0x38
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	20002370 	.word	0x20002370

0800eb50 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b090      	sub	sp, #64	; 0x40
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800eb5e:	f3ef 8311 	mrs	r3, BASEPRI
 800eb62:	f04f 0120 	mov.w	r1, #32
 800eb66:	f381 8811 	msr	BASEPRI, r1
 800eb6a:	61fb      	str	r3, [r7, #28]
 800eb6c:	4840      	ldr	r0, [pc, #256]	; (800ec70 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800eb6e:	f7ff fc05 	bl	800e37c <_PreparePacket>
 800eb72:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb80:	e00b      	b.n	800eb9a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800eb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb84:	b2da      	uxtb	r2, r3
 800eb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb88:	1c59      	adds	r1, r3, #1
 800eb8a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800eb8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eb90:	b2d2      	uxtb	r2, r2
 800eb92:	701a      	strb	r2, [r3, #0]
 800eb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb96:	09db      	lsrs	r3, r3, #7
 800eb98:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9c:	2b7f      	cmp	r3, #127	; 0x7f
 800eb9e:	d8f0      	bhi.n	800eb82 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800eba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eba2:	1c5a      	adds	r2, r3, #1
 800eba4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eba8:	b2d2      	uxtb	r2, r2
 800ebaa:	701a      	strb	r2, [r3, #0]
 800ebac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	637b      	str	r3, [r7, #52]	; 0x34
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	633b      	str	r3, [r7, #48]	; 0x30
 800ebb8:	e00b      	b.n	800ebd2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	b2da      	uxtb	r2, r3
 800ebbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc0:	1c59      	adds	r1, r3, #1
 800ebc2:	6379      	str	r1, [r7, #52]	; 0x34
 800ebc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ebc8:	b2d2      	uxtb	r2, r2
 800ebca:	701a      	strb	r2, [r3, #0]
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebce:	09db      	lsrs	r3, r3, #7
 800ebd0:	633b      	str	r3, [r7, #48]	; 0x30
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	2b7f      	cmp	r3, #127	; 0x7f
 800ebd6:	d8f0      	bhi.n	800ebba <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800ebd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebda:	1c5a      	adds	r2, r3, #1
 800ebdc:	637a      	str	r2, [r7, #52]	; 0x34
 800ebde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebe0:	b2d2      	uxtb	r2, r2
 800ebe2:	701a      	strb	r2, [r3, #0]
 800ebe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebf0:	e00b      	b.n	800ec0a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800ebf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf4:	b2da      	uxtb	r2, r3
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	1c59      	adds	r1, r3, #1
 800ebfa:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ebfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ec00:	b2d2      	uxtb	r2, r2
 800ec02:	701a      	strb	r2, [r3, #0]
 800ec04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec06:	09db      	lsrs	r3, r3, #7
 800ec08:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	2b7f      	cmp	r3, #127	; 0x7f
 800ec0e:	d8f0      	bhi.n	800ebf2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800ec10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec12:	1c5a      	adds	r2, r3, #1
 800ec14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec18:	b2d2      	uxtb	r2, r2
 800ec1a:	701a      	strb	r2, [r3, #0]
 800ec1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	627b      	str	r3, [r7, #36]	; 0x24
 800ec24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec26:	623b      	str	r3, [r7, #32]
 800ec28:	e00b      	b.n	800ec42 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800ec2a:	6a3b      	ldr	r3, [r7, #32]
 800ec2c:	b2da      	uxtb	r2, r3
 800ec2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec30:	1c59      	adds	r1, r3, #1
 800ec32:	6279      	str	r1, [r7, #36]	; 0x24
 800ec34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ec38:	b2d2      	uxtb	r2, r2
 800ec3a:	701a      	strb	r2, [r3, #0]
 800ec3c:	6a3b      	ldr	r3, [r7, #32]
 800ec3e:	09db      	lsrs	r3, r3, #7
 800ec40:	623b      	str	r3, [r7, #32]
 800ec42:	6a3b      	ldr	r3, [r7, #32]
 800ec44:	2b7f      	cmp	r3, #127	; 0x7f
 800ec46:	d8f0      	bhi.n	800ec2a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800ec48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4a:	1c5a      	adds	r2, r3, #1
 800ec4c:	627a      	str	r2, [r7, #36]	; 0x24
 800ec4e:	6a3a      	ldr	r2, [r7, #32]
 800ec50:	b2d2      	uxtb	r2, r2
 800ec52:	701a      	strb	r2, [r3, #0]
 800ec54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec56:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ec58:	68fa      	ldr	r2, [r7, #12]
 800ec5a:	6979      	ldr	r1, [r7, #20]
 800ec5c:	69b8      	ldr	r0, [r7, #24]
 800ec5e:	f7ff fc6d 	bl	800e53c <_SendPacket>
  RECORD_END();
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	f383 8811 	msr	BASEPRI, r3
}
 800ec68:	bf00      	nop
 800ec6a:	3740      	adds	r7, #64	; 0x40
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	20002370 	.word	0x20002370

0800ec74 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b08c      	sub	sp, #48	; 0x30
 800ec78:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800ec7a:	4b59      	ldr	r3, [pc, #356]	; (800ede0 <SEGGER_SYSVIEW_Start+0x16c>)
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f040 80aa 	bne.w	800edd8 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800ec84:	4b56      	ldr	r3, [pc, #344]	; (800ede0 <SEGGER_SYSVIEW_Start+0x16c>)
 800ec86:	2201      	movs	r2, #1
 800ec88:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800ec8a:	f3ef 8311 	mrs	r3, BASEPRI
 800ec8e:	f04f 0120 	mov.w	r1, #32
 800ec92:	f381 8811 	msr	BASEPRI, r1
 800ec96:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800ec98:	220a      	movs	r2, #10
 800ec9a:	4952      	ldr	r1, [pc, #328]	; (800ede4 <SEGGER_SYSVIEW_Start+0x170>)
 800ec9c:	2001      	movs	r0, #1
 800ec9e:	f7f1 fa97 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800eca8:	200a      	movs	r0, #10
 800ecaa:	f7ff fe27 	bl	800e8fc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ecae:	f3ef 8311 	mrs	r3, BASEPRI
 800ecb2:	f04f 0120 	mov.w	r1, #32
 800ecb6:	f381 8811 	msr	BASEPRI, r1
 800ecba:	60bb      	str	r3, [r7, #8]
 800ecbc:	484a      	ldr	r0, [pc, #296]	; (800ede8 <SEGGER_SYSVIEW_Start+0x174>)
 800ecbe:	f7ff fb5d 	bl	800e37c <_PreparePacket>
 800ecc2:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eccc:	4b44      	ldr	r3, [pc, #272]	; (800ede0 <SEGGER_SYSVIEW_Start+0x16c>)
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecd2:	e00b      	b.n	800ecec <SEGGER_SYSVIEW_Start+0x78>
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	b2da      	uxtb	r2, r3
 800ecd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecda:	1c59      	adds	r1, r3, #1
 800ecdc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ecde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ece2:	b2d2      	uxtb	r2, r2
 800ece4:	701a      	strb	r2, [r3, #0]
 800ece6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece8:	09db      	lsrs	r3, r3, #7
 800ecea:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecee:	2b7f      	cmp	r3, #127	; 0x7f
 800ecf0:	d8f0      	bhi.n	800ecd4 <SEGGER_SYSVIEW_Start+0x60>
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	1c5a      	adds	r2, r3, #1
 800ecf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ecf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecfa:	b2d2      	uxtb	r2, r2
 800ecfc:	701a      	strb	r2, [r3, #0]
 800ecfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed00:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	627b      	str	r3, [r7, #36]	; 0x24
 800ed06:	4b36      	ldr	r3, [pc, #216]	; (800ede0 <SEGGER_SYSVIEW_Start+0x16c>)
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	623b      	str	r3, [r7, #32]
 800ed0c:	e00b      	b.n	800ed26 <SEGGER_SYSVIEW_Start+0xb2>
 800ed0e:	6a3b      	ldr	r3, [r7, #32]
 800ed10:	b2da      	uxtb	r2, r3
 800ed12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed14:	1c59      	adds	r1, r3, #1
 800ed16:	6279      	str	r1, [r7, #36]	; 0x24
 800ed18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed1c:	b2d2      	uxtb	r2, r2
 800ed1e:	701a      	strb	r2, [r3, #0]
 800ed20:	6a3b      	ldr	r3, [r7, #32]
 800ed22:	09db      	lsrs	r3, r3, #7
 800ed24:	623b      	str	r3, [r7, #32]
 800ed26:	6a3b      	ldr	r3, [r7, #32]
 800ed28:	2b7f      	cmp	r3, #127	; 0x7f
 800ed2a:	d8f0      	bhi.n	800ed0e <SEGGER_SYSVIEW_Start+0x9a>
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2e:	1c5a      	adds	r2, r3, #1
 800ed30:	627a      	str	r2, [r7, #36]	; 0x24
 800ed32:	6a3a      	ldr	r2, [r7, #32]
 800ed34:	b2d2      	uxtb	r2, r2
 800ed36:	701a      	strb	r2, [r3, #0]
 800ed38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	61fb      	str	r3, [r7, #28]
 800ed40:	4b27      	ldr	r3, [pc, #156]	; (800ede0 <SEGGER_SYSVIEW_Start+0x16c>)
 800ed42:	691b      	ldr	r3, [r3, #16]
 800ed44:	61bb      	str	r3, [r7, #24]
 800ed46:	e00b      	b.n	800ed60 <SEGGER_SYSVIEW_Start+0xec>
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	b2da      	uxtb	r2, r3
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	1c59      	adds	r1, r3, #1
 800ed50:	61f9      	str	r1, [r7, #28]
 800ed52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed56:	b2d2      	uxtb	r2, r2
 800ed58:	701a      	strb	r2, [r3, #0]
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	09db      	lsrs	r3, r3, #7
 800ed5e:	61bb      	str	r3, [r7, #24]
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	2b7f      	cmp	r3, #127	; 0x7f
 800ed64:	d8f0      	bhi.n	800ed48 <SEGGER_SYSVIEW_Start+0xd4>
 800ed66:	69fb      	ldr	r3, [r7, #28]
 800ed68:	1c5a      	adds	r2, r3, #1
 800ed6a:	61fa      	str	r2, [r7, #28]
 800ed6c:	69ba      	ldr	r2, [r7, #24]
 800ed6e:	b2d2      	uxtb	r2, r2
 800ed70:	701a      	strb	r2, [r3, #0]
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	617b      	str	r3, [r7, #20]
 800ed7a:	2302      	movs	r3, #2
 800ed7c:	613b      	str	r3, [r7, #16]
 800ed7e:	e00b      	b.n	800ed98 <SEGGER_SYSVIEW_Start+0x124>
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	b2da      	uxtb	r2, r3
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	1c59      	adds	r1, r3, #1
 800ed88:	6179      	str	r1, [r7, #20]
 800ed8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed8e:	b2d2      	uxtb	r2, r2
 800ed90:	701a      	strb	r2, [r3, #0]
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	09db      	lsrs	r3, r3, #7
 800ed96:	613b      	str	r3, [r7, #16]
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	2b7f      	cmp	r3, #127	; 0x7f
 800ed9c:	d8f0      	bhi.n	800ed80 <SEGGER_SYSVIEW_Start+0x10c>
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	1c5a      	adds	r2, r3, #1
 800eda2:	617a      	str	r2, [r7, #20]
 800eda4:	693a      	ldr	r2, [r7, #16]
 800eda6:	b2d2      	uxtb	r2, r2
 800eda8:	701a      	strb	r2, [r3, #0]
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800edae:	2218      	movs	r2, #24
 800edb0:	6839      	ldr	r1, [r7, #0]
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7ff fbc2 	bl	800e53c <_SendPacket>
      RECORD_END();
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800edbe:	4b08      	ldr	r3, [pc, #32]	; (800ede0 <SEGGER_SYSVIEW_Start+0x16c>)
 800edc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d002      	beq.n	800edcc <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800edc6:	4b06      	ldr	r3, [pc, #24]	; (800ede0 <SEGGER_SYSVIEW_Start+0x16c>)
 800edc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edca:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800edcc:	f000 f9ec 	bl	800f1a8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800edd0:	f000 f9b2 	bl	800f138 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800edd4:	f000 fbb2 	bl	800f53c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800edd8:	bf00      	nop
 800edda:	3730      	adds	r7, #48	; 0x30
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}
 800ede0:	20002340 	.word	0x20002340
 800ede4:	08012964 	.word	0x08012964
 800ede8:	20002370 	.word	0x20002370

0800edec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800edf2:	f3ef 8311 	mrs	r3, BASEPRI
 800edf6:	f04f 0120 	mov.w	r1, #32
 800edfa:	f381 8811 	msr	BASEPRI, r1
 800edfe:	607b      	str	r3, [r7, #4]
 800ee00:	480b      	ldr	r0, [pc, #44]	; (800ee30 <SEGGER_SYSVIEW_Stop+0x44>)
 800ee02:	f7ff fabb 	bl	800e37c <_PreparePacket>
 800ee06:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800ee08:	4b0a      	ldr	r3, [pc, #40]	; (800ee34 <SEGGER_SYSVIEW_Stop+0x48>)
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d007      	beq.n	800ee20 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800ee10:	220b      	movs	r2, #11
 800ee12:	6839      	ldr	r1, [r7, #0]
 800ee14:	6838      	ldr	r0, [r7, #0]
 800ee16:	f7ff fb91 	bl	800e53c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800ee1a:	4b06      	ldr	r3, [pc, #24]	; (800ee34 <SEGGER_SYSVIEW_Stop+0x48>)
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f383 8811 	msr	BASEPRI, r3
}
 800ee26:	bf00      	nop
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	20002370 	.word	0x20002370
 800ee34:	20002340 	.word	0x20002340

0800ee38 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b08c      	sub	sp, #48	; 0x30
 800ee3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ee3e:	f3ef 8311 	mrs	r3, BASEPRI
 800ee42:	f04f 0120 	mov.w	r1, #32
 800ee46:	f381 8811 	msr	BASEPRI, r1
 800ee4a:	60fb      	str	r3, [r7, #12]
 800ee4c:	4845      	ldr	r0, [pc, #276]	; (800ef64 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800ee4e:	f7ff fa95 	bl	800e37c <_PreparePacket>
 800ee52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee5c:	4b42      	ldr	r3, [pc, #264]	; (800ef68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee62:	e00b      	b.n	800ee7c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800ee64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee66:	b2da      	uxtb	r2, r3
 800ee68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6a:	1c59      	adds	r1, r3, #1
 800ee6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ee6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ee72:	b2d2      	uxtb	r2, r2
 800ee74:	701a      	strb	r2, [r3, #0]
 800ee76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee78:	09db      	lsrs	r3, r3, #7
 800ee7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7e:	2b7f      	cmp	r3, #127	; 0x7f
 800ee80:	d8f0      	bhi.n	800ee64 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800ee82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee84:	1c5a      	adds	r2, r3, #1
 800ee86:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ee88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee8a:	b2d2      	uxtb	r2, r2
 800ee8c:	701a      	strb	r2, [r3, #0]
 800ee8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	627b      	str	r3, [r7, #36]	; 0x24
 800ee96:	4b34      	ldr	r3, [pc, #208]	; (800ef68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	623b      	str	r3, [r7, #32]
 800ee9c:	e00b      	b.n	800eeb6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800ee9e:	6a3b      	ldr	r3, [r7, #32]
 800eea0:	b2da      	uxtb	r2, r3
 800eea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea4:	1c59      	adds	r1, r3, #1
 800eea6:	6279      	str	r1, [r7, #36]	; 0x24
 800eea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eeac:	b2d2      	uxtb	r2, r2
 800eeae:	701a      	strb	r2, [r3, #0]
 800eeb0:	6a3b      	ldr	r3, [r7, #32]
 800eeb2:	09db      	lsrs	r3, r3, #7
 800eeb4:	623b      	str	r3, [r7, #32]
 800eeb6:	6a3b      	ldr	r3, [r7, #32]
 800eeb8:	2b7f      	cmp	r3, #127	; 0x7f
 800eeba:	d8f0      	bhi.n	800ee9e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800eebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebe:	1c5a      	adds	r2, r3, #1
 800eec0:	627a      	str	r2, [r7, #36]	; 0x24
 800eec2:	6a3a      	ldr	r2, [r7, #32]
 800eec4:	b2d2      	uxtb	r2, r2
 800eec6:	701a      	strb	r2, [r3, #0]
 800eec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	61fb      	str	r3, [r7, #28]
 800eed0:	4b25      	ldr	r3, [pc, #148]	; (800ef68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800eed2:	691b      	ldr	r3, [r3, #16]
 800eed4:	61bb      	str	r3, [r7, #24]
 800eed6:	e00b      	b.n	800eef0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	b2da      	uxtb	r2, r3
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	1c59      	adds	r1, r3, #1
 800eee0:	61f9      	str	r1, [r7, #28]
 800eee2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eee6:	b2d2      	uxtb	r2, r2
 800eee8:	701a      	strb	r2, [r3, #0]
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	09db      	lsrs	r3, r3, #7
 800eeee:	61bb      	str	r3, [r7, #24]
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	2b7f      	cmp	r3, #127	; 0x7f
 800eef4:	d8f0      	bhi.n	800eed8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	1c5a      	adds	r2, r3, #1
 800eefa:	61fa      	str	r2, [r7, #28]
 800eefc:	69ba      	ldr	r2, [r7, #24]
 800eefe:	b2d2      	uxtb	r2, r2
 800ef00:	701a      	strb	r2, [r3, #0]
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	617b      	str	r3, [r7, #20]
 800ef0a:	2302      	movs	r3, #2
 800ef0c:	613b      	str	r3, [r7, #16]
 800ef0e:	e00b      	b.n	800ef28 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	b2da      	uxtb	r2, r3
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	1c59      	adds	r1, r3, #1
 800ef18:	6179      	str	r1, [r7, #20]
 800ef1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ef1e:	b2d2      	uxtb	r2, r2
 800ef20:	701a      	strb	r2, [r3, #0]
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	09db      	lsrs	r3, r3, #7
 800ef26:	613b      	str	r3, [r7, #16]
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	2b7f      	cmp	r3, #127	; 0x7f
 800ef2c:	d8f0      	bhi.n	800ef10 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	1c5a      	adds	r2, r3, #1
 800ef32:	617a      	str	r2, [r7, #20]
 800ef34:	693a      	ldr	r2, [r7, #16]
 800ef36:	b2d2      	uxtb	r2, r2
 800ef38:	701a      	strb	r2, [r3, #0]
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ef3e:	2218      	movs	r2, #24
 800ef40:	6879      	ldr	r1, [r7, #4]
 800ef42:	68b8      	ldr	r0, [r7, #8]
 800ef44:	f7ff fafa 	bl	800e53c <_SendPacket>
  RECORD_END();
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ef4e:	4b06      	ldr	r3, [pc, #24]	; (800ef68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ef50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d002      	beq.n	800ef5c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800ef56:	4b04      	ldr	r3, [pc, #16]	; (800ef68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ef58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5a:	4798      	blx	r3
  }
}
 800ef5c:	bf00      	nop
 800ef5e:	3730      	adds	r7, #48	; 0x30
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	20002370 	.word	0x20002370
 800ef68:	20002340 	.word	0x20002340

0800ef6c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b092      	sub	sp, #72	; 0x48
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800ef74:	f3ef 8311 	mrs	r3, BASEPRI
 800ef78:	f04f 0120 	mov.w	r1, #32
 800ef7c:	f381 8811 	msr	BASEPRI, r1
 800ef80:	617b      	str	r3, [r7, #20]
 800ef82:	486b      	ldr	r0, [pc, #428]	; (800f130 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800ef84:	f7ff f9fa 	bl	800e37c <_PreparePacket>
 800ef88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	647b      	str	r3, [r7, #68]	; 0x44
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	4b67      	ldr	r3, [pc, #412]	; (800f134 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800ef98:	691b      	ldr	r3, [r3, #16]
 800ef9a:	1ad3      	subs	r3, r2, r3
 800ef9c:	089b      	lsrs	r3, r3, #2
 800ef9e:	643b      	str	r3, [r7, #64]	; 0x40
 800efa0:	e00b      	b.n	800efba <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800efa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa4:	b2da      	uxtb	r2, r3
 800efa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efa8:	1c59      	adds	r1, r3, #1
 800efaa:	6479      	str	r1, [r7, #68]	; 0x44
 800efac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800efb0:	b2d2      	uxtb	r2, r2
 800efb2:	701a      	strb	r2, [r3, #0]
 800efb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb6:	09db      	lsrs	r3, r3, #7
 800efb8:	643b      	str	r3, [r7, #64]	; 0x40
 800efba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efbc:	2b7f      	cmp	r3, #127	; 0x7f
 800efbe:	d8f0      	bhi.n	800efa2 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800efc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efc2:	1c5a      	adds	r2, r3, #1
 800efc4:	647a      	str	r2, [r7, #68]	; 0x44
 800efc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800efc8:	b2d2      	uxtb	r2, r2
 800efca:	701a      	strb	r2, [r3, #0]
 800efcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800efda:	e00b      	b.n	800eff4 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800efdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efde:	b2da      	uxtb	r2, r3
 800efe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efe2:	1c59      	adds	r1, r3, #1
 800efe4:	63f9      	str	r1, [r7, #60]	; 0x3c
 800efe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800efea:	b2d2      	uxtb	r2, r2
 800efec:	701a      	strb	r2, [r3, #0]
 800efee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff0:	09db      	lsrs	r3, r3, #7
 800eff2:	63bb      	str	r3, [r7, #56]	; 0x38
 800eff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff6:	2b7f      	cmp	r3, #127	; 0x7f
 800eff8:	d8f0      	bhi.n	800efdc <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800effa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800effc:	1c5a      	adds	r2, r3, #1
 800effe:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f002:	b2d2      	uxtb	r2, r2
 800f004:	701a      	strb	r2, [r3, #0]
 800f006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f008:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	2220      	movs	r2, #32
 800f010:	4619      	mov	r1, r3
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f7ff f965 	bl	800e2e2 <_EncodeStr>
 800f018:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800f01a:	2209      	movs	r2, #9
 800f01c:	68f9      	ldr	r1, [r7, #12]
 800f01e:	6938      	ldr	r0, [r7, #16]
 800f020:	f7ff fa8c 	bl	800e53c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	637b      	str	r3, [r7, #52]	; 0x34
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	4b40      	ldr	r3, [pc, #256]	; (800f134 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800f032:	691b      	ldr	r3, [r3, #16]
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	089b      	lsrs	r3, r3, #2
 800f038:	633b      	str	r3, [r7, #48]	; 0x30
 800f03a:	e00b      	b.n	800f054 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800f03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03e:	b2da      	uxtb	r2, r3
 800f040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f042:	1c59      	adds	r1, r3, #1
 800f044:	6379      	str	r1, [r7, #52]	; 0x34
 800f046:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f04a:	b2d2      	uxtb	r2, r2
 800f04c:	701a      	strb	r2, [r3, #0]
 800f04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f050:	09db      	lsrs	r3, r3, #7
 800f052:	633b      	str	r3, [r7, #48]	; 0x30
 800f054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f056:	2b7f      	cmp	r3, #127	; 0x7f
 800f058:	d8f0      	bhi.n	800f03c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800f05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f05c:	1c5a      	adds	r2, r3, #1
 800f05e:	637a      	str	r2, [r7, #52]	; 0x34
 800f060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f062:	b2d2      	uxtb	r2, r2
 800f064:	701a      	strb	r2, [r3, #0]
 800f066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f068:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	62bb      	str	r3, [r7, #40]	; 0x28
 800f074:	e00b      	b.n	800f08e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800f076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f078:	b2da      	uxtb	r2, r3
 800f07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07c:	1c59      	adds	r1, r3, #1
 800f07e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800f080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f084:	b2d2      	uxtb	r2, r2
 800f086:	701a      	strb	r2, [r3, #0]
 800f088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f08a:	09db      	lsrs	r3, r3, #7
 800f08c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f090:	2b7f      	cmp	r3, #127	; 0x7f
 800f092:	d8f0      	bhi.n	800f076 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800f094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f096:	1c5a      	adds	r2, r3, #1
 800f098:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f09a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f09c:	b2d2      	uxtb	r2, r2
 800f09e:	701a      	strb	r2, [r3, #0]
 800f0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	627b      	str	r3, [r7, #36]	; 0x24
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	691b      	ldr	r3, [r3, #16]
 800f0ac:	623b      	str	r3, [r7, #32]
 800f0ae:	e00b      	b.n	800f0c8 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800f0b0:	6a3b      	ldr	r3, [r7, #32]
 800f0b2:	b2da      	uxtb	r2, r3
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	1c59      	adds	r1, r3, #1
 800f0b8:	6279      	str	r1, [r7, #36]	; 0x24
 800f0ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f0be:	b2d2      	uxtb	r2, r2
 800f0c0:	701a      	strb	r2, [r3, #0]
 800f0c2:	6a3b      	ldr	r3, [r7, #32]
 800f0c4:	09db      	lsrs	r3, r3, #7
 800f0c6:	623b      	str	r3, [r7, #32]
 800f0c8:	6a3b      	ldr	r3, [r7, #32]
 800f0ca:	2b7f      	cmp	r3, #127	; 0x7f
 800f0cc:	d8f0      	bhi.n	800f0b0 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d0:	1c5a      	adds	r2, r3, #1
 800f0d2:	627a      	str	r2, [r7, #36]	; 0x24
 800f0d4:	6a3a      	ldr	r2, [r7, #32]
 800f0d6:	b2d2      	uxtb	r2, r2
 800f0d8:	701a      	strb	r2, [r3, #0]
 800f0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	61fb      	str	r3, [r7, #28]
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	61bb      	str	r3, [r7, #24]
 800f0e6:	e00b      	b.n	800f100 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800f0e8:	69bb      	ldr	r3, [r7, #24]
 800f0ea:	b2da      	uxtb	r2, r3
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	1c59      	adds	r1, r3, #1
 800f0f0:	61f9      	str	r1, [r7, #28]
 800f0f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f0f6:	b2d2      	uxtb	r2, r2
 800f0f8:	701a      	strb	r2, [r3, #0]
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	09db      	lsrs	r3, r3, #7
 800f0fe:	61bb      	str	r3, [r7, #24]
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	2b7f      	cmp	r3, #127	; 0x7f
 800f104:	d8f0      	bhi.n	800f0e8 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	1c5a      	adds	r2, r3, #1
 800f10a:	61fa      	str	r2, [r7, #28]
 800f10c:	69ba      	ldr	r2, [r7, #24]
 800f10e:	b2d2      	uxtb	r2, r2
 800f110:	701a      	strb	r2, [r3, #0]
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800f116:	2215      	movs	r2, #21
 800f118:	68f9      	ldr	r1, [r7, #12]
 800f11a:	6938      	ldr	r0, [r7, #16]
 800f11c:	f7ff fa0e 	bl	800e53c <_SendPacket>
  RECORD_END();
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	f383 8811 	msr	BASEPRI, r3
}
 800f126:	bf00      	nop
 800f128:	3748      	adds	r7, #72	; 0x48
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	20002370 	.word	0x20002370
 800f134:	20002340 	.word	0x20002340

0800f138 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800f138:	b580      	push	{r7, lr}
 800f13a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800f13c:	4b07      	ldr	r3, [pc, #28]	; (800f15c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800f13e:	6a1b      	ldr	r3, [r3, #32]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d008      	beq.n	800f156 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800f144:	4b05      	ldr	r3, [pc, #20]	; (800f15c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800f146:	6a1b      	ldr	r3, [r3, #32]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d003      	beq.n	800f156 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800f14e:	4b03      	ldr	r3, [pc, #12]	; (800f15c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800f150:	6a1b      	ldr	r3, [r3, #32]
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	4798      	blx	r3
  }
}
 800f156:	bf00      	nop
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop
 800f15c:	20002340 	.word	0x20002340

0800f160 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800f160:	b580      	push	{r7, lr}
 800f162:	b086      	sub	sp, #24
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f168:	f3ef 8311 	mrs	r3, BASEPRI
 800f16c:	f04f 0120 	mov.w	r1, #32
 800f170:	f381 8811 	msr	BASEPRI, r1
 800f174:	617b      	str	r3, [r7, #20]
 800f176:	480b      	ldr	r0, [pc, #44]	; (800f1a4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800f178:	f7ff f900 	bl	800e37c <_PreparePacket>
 800f17c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f17e:	2280      	movs	r2, #128	; 0x80
 800f180:	6879      	ldr	r1, [r7, #4]
 800f182:	6938      	ldr	r0, [r7, #16]
 800f184:	f7ff f8ad 	bl	800e2e2 <_EncodeStr>
 800f188:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800f18a:	220e      	movs	r2, #14
 800f18c:	68f9      	ldr	r1, [r7, #12]
 800f18e:	6938      	ldr	r0, [r7, #16]
 800f190:	f7ff f9d4 	bl	800e53c <_SendPacket>
  RECORD_END();
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	f383 8811 	msr	BASEPRI, r3
}
 800f19a:	bf00      	nop
 800f19c:	3718      	adds	r7, #24
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	20002370 	.word	0x20002370

0800f1a8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800f1a8:	b590      	push	{r4, r7, lr}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800f1ae:	4b15      	ldr	r3, [pc, #84]	; (800f204 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f1b0:	6a1b      	ldr	r3, [r3, #32]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d01a      	beq.n	800f1ec <SEGGER_SYSVIEW_RecordSystime+0x44>
 800f1b6:	4b13      	ldr	r3, [pc, #76]	; (800f204 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f1b8:	6a1b      	ldr	r3, [r3, #32]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d015      	beq.n	800f1ec <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800f1c0:	4b10      	ldr	r3, [pc, #64]	; (800f204 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f1c2:	6a1b      	ldr	r3, [r3, #32]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	4798      	blx	r3
 800f1c8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800f1cc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800f1ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1d2:	f04f 0200 	mov.w	r2, #0
 800f1d6:	f04f 0300 	mov.w	r3, #0
 800f1da:	000a      	movs	r2, r1
 800f1dc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800f1de:	4613      	mov	r3, r2
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	200d      	movs	r0, #13
 800f1e6:	f7ff fbe3 	bl	800e9b0 <SEGGER_SYSVIEW_RecordU32x2>
 800f1ea:	e006      	b.n	800f1fa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800f1ec:	4b06      	ldr	r3, [pc, #24]	; (800f208 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	200c      	movs	r0, #12
 800f1f4:	f7ff fba0 	bl	800e938 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800f1f8:	bf00      	nop
 800f1fa:	bf00      	nop
 800f1fc:	370c      	adds	r7, #12
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd90      	pop	{r4, r7, pc}
 800f202:	bf00      	nop
 800f204:	20002340 	.word	0x20002340
 800f208:	e0001004 	.word	0xe0001004

0800f20c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f212:	f3ef 8311 	mrs	r3, BASEPRI
 800f216:	f04f 0120 	mov.w	r1, #32
 800f21a:	f381 8811 	msr	BASEPRI, r1
 800f21e:	607b      	str	r3, [r7, #4]
 800f220:	4807      	ldr	r0, [pc, #28]	; (800f240 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800f222:	f7ff f8ab 	bl	800e37c <_PreparePacket>
 800f226:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800f228:	2211      	movs	r2, #17
 800f22a:	6839      	ldr	r1, [r7, #0]
 800f22c:	6838      	ldr	r0, [r7, #0]
 800f22e:	f7ff f985 	bl	800e53c <_SendPacket>
  RECORD_END();
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f383 8811 	msr	BASEPRI, r3
}
 800f238:	bf00      	nop
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	20002370 	.word	0x20002370

0800f244 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800f244:	b580      	push	{r7, lr}
 800f246:	b088      	sub	sp, #32
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f24c:	f3ef 8311 	mrs	r3, BASEPRI
 800f250:	f04f 0120 	mov.w	r1, #32
 800f254:	f381 8811 	msr	BASEPRI, r1
 800f258:	617b      	str	r3, [r7, #20]
 800f25a:	481a      	ldr	r0, [pc, #104]	; (800f2c4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800f25c:	f7ff f88e 	bl	800e37c <_PreparePacket>
 800f260:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f266:	4b18      	ldr	r3, [pc, #96]	; (800f2c8 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800f268:	691b      	ldr	r3, [r3, #16]
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	1ad3      	subs	r3, r2, r3
 800f26e:	089b      	lsrs	r3, r3, #2
 800f270:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	61fb      	str	r3, [r7, #28]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	61bb      	str	r3, [r7, #24]
 800f27a:	e00b      	b.n	800f294 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	b2da      	uxtb	r2, r3
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	1c59      	adds	r1, r3, #1
 800f284:	61f9      	str	r1, [r7, #28]
 800f286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f28a:	b2d2      	uxtb	r2, r2
 800f28c:	701a      	strb	r2, [r3, #0]
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	09db      	lsrs	r3, r3, #7
 800f292:	61bb      	str	r3, [r7, #24]
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	2b7f      	cmp	r3, #127	; 0x7f
 800f298:	d8f0      	bhi.n	800f27c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	1c5a      	adds	r2, r3, #1
 800f29e:	61fa      	str	r2, [r7, #28]
 800f2a0:	69ba      	ldr	r2, [r7, #24]
 800f2a2:	b2d2      	uxtb	r2, r2
 800f2a4:	701a      	strb	r2, [r3, #0]
 800f2a6:	69fb      	ldr	r3, [r7, #28]
 800f2a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800f2aa:	2208      	movs	r2, #8
 800f2ac:	68f9      	ldr	r1, [r7, #12]
 800f2ae:	6938      	ldr	r0, [r7, #16]
 800f2b0:	f7ff f944 	bl	800e53c <_SendPacket>
  RECORD_END();
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	f383 8811 	msr	BASEPRI, r3
}
 800f2ba:	bf00      	nop
 800f2bc:	3720      	adds	r7, #32
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	20002370 	.word	0x20002370
 800f2c8:	20002340 	.word	0x20002340

0800f2cc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b088      	sub	sp, #32
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f2d4:	f3ef 8311 	mrs	r3, BASEPRI
 800f2d8:	f04f 0120 	mov.w	r1, #32
 800f2dc:	f381 8811 	msr	BASEPRI, r1
 800f2e0:	617b      	str	r3, [r7, #20]
 800f2e2:	481a      	ldr	r0, [pc, #104]	; (800f34c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800f2e4:	f7ff f84a 	bl	800e37c <_PreparePacket>
 800f2e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f2ee:	4b18      	ldr	r3, [pc, #96]	; (800f350 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	1ad3      	subs	r3, r2, r3
 800f2f6:	089b      	lsrs	r3, r3, #2
 800f2f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	61fb      	str	r3, [r7, #28]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	61bb      	str	r3, [r7, #24]
 800f302:	e00b      	b.n	800f31c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	b2da      	uxtb	r2, r3
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	1c59      	adds	r1, r3, #1
 800f30c:	61f9      	str	r1, [r7, #28]
 800f30e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f312:	b2d2      	uxtb	r2, r2
 800f314:	701a      	strb	r2, [r3, #0]
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	09db      	lsrs	r3, r3, #7
 800f31a:	61bb      	str	r3, [r7, #24]
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	2b7f      	cmp	r3, #127	; 0x7f
 800f320:	d8f0      	bhi.n	800f304 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	1c5a      	adds	r2, r3, #1
 800f326:	61fa      	str	r2, [r7, #28]
 800f328:	69ba      	ldr	r2, [r7, #24]
 800f32a:	b2d2      	uxtb	r2, r2
 800f32c:	701a      	strb	r2, [r3, #0]
 800f32e:	69fb      	ldr	r3, [r7, #28]
 800f330:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800f332:	2204      	movs	r2, #4
 800f334:	68f9      	ldr	r1, [r7, #12]
 800f336:	6938      	ldr	r0, [r7, #16]
 800f338:	f7ff f900 	bl	800e53c <_SendPacket>
  RECORD_END();
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	f383 8811 	msr	BASEPRI, r3
}
 800f342:	bf00      	nop
 800f344:	3720      	adds	r7, #32
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	20002370 	.word	0x20002370
 800f350:	20002340 	.word	0x20002340

0800f354 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800f354:	b580      	push	{r7, lr}
 800f356:	b088      	sub	sp, #32
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f35c:	f3ef 8311 	mrs	r3, BASEPRI
 800f360:	f04f 0120 	mov.w	r1, #32
 800f364:	f381 8811 	msr	BASEPRI, r1
 800f368:	617b      	str	r3, [r7, #20]
 800f36a:	481a      	ldr	r0, [pc, #104]	; (800f3d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800f36c:	f7ff f806 	bl	800e37c <_PreparePacket>
 800f370:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f376:	4b18      	ldr	r3, [pc, #96]	; (800f3d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800f378:	691b      	ldr	r3, [r3, #16]
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	1ad3      	subs	r3, r2, r3
 800f37e:	089b      	lsrs	r3, r3, #2
 800f380:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	61fb      	str	r3, [r7, #28]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	61bb      	str	r3, [r7, #24]
 800f38a:	e00b      	b.n	800f3a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800f38c:	69bb      	ldr	r3, [r7, #24]
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	1c59      	adds	r1, r3, #1
 800f394:	61f9      	str	r1, [r7, #28]
 800f396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f39a:	b2d2      	uxtb	r2, r2
 800f39c:	701a      	strb	r2, [r3, #0]
 800f39e:	69bb      	ldr	r3, [r7, #24]
 800f3a0:	09db      	lsrs	r3, r3, #7
 800f3a2:	61bb      	str	r3, [r7, #24]
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	2b7f      	cmp	r3, #127	; 0x7f
 800f3a8:	d8f0      	bhi.n	800f38c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	1c5a      	adds	r2, r3, #1
 800f3ae:	61fa      	str	r2, [r7, #28]
 800f3b0:	69ba      	ldr	r2, [r7, #24]
 800f3b2:	b2d2      	uxtb	r2, r2
 800f3b4:	701a      	strb	r2, [r3, #0]
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800f3ba:	2206      	movs	r2, #6
 800f3bc:	68f9      	ldr	r1, [r7, #12]
 800f3be:	6938      	ldr	r0, [r7, #16]
 800f3c0:	f7ff f8bc 	bl	800e53c <_SendPacket>
  RECORD_END();
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	f383 8811 	msr	BASEPRI, r3
}
 800f3ca:	bf00      	nop
 800f3cc:	3720      	adds	r7, #32
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	20002370 	.word	0x20002370
 800f3d8:	20002340 	.word	0x20002340

0800f3dc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800f3e4:	4b05      	ldr	r3, [pc, #20]	; (800f3fc <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800f3e6:	691b      	ldr	r3, [r3, #16]
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	1ad3      	subs	r3, r2, r3
 800f3ec:	089b      	lsrs	r3, r3, #2
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	370c      	adds	r7, #12
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr
 800f3fa:	bf00      	nop
 800f3fc:	20002340 	.word	0x20002340

0800f400 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800f400:	b580      	push	{r7, lr}
 800f402:	b08c      	sub	sp, #48	; 0x30
 800f404:	af00      	add	r7, sp, #0
 800f406:	4603      	mov	r3, r0
 800f408:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800f40a:	4b3b      	ldr	r3, [pc, #236]	; (800f4f8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d06d      	beq.n	800f4ee <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800f412:	4b39      	ldr	r3, [pc, #228]	; (800f4f8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800f418:	2300      	movs	r3, #0
 800f41a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f41c:	e008      	b.n	800f430 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800f41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f420:	691b      	ldr	r3, [r3, #16]
 800f422:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800f424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f426:	2b00      	cmp	r3, #0
 800f428:	d007      	beq.n	800f43a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800f42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42c:	3301      	adds	r3, #1
 800f42e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f430:	79fb      	ldrb	r3, [r7, #7]
 800f432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f434:	429a      	cmp	r2, r3
 800f436:	d3f2      	bcc.n	800f41e <SEGGER_SYSVIEW_SendModule+0x1e>
 800f438:	e000      	b.n	800f43c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800f43a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800f43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d055      	beq.n	800f4ee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f442:	f3ef 8311 	mrs	r3, BASEPRI
 800f446:	f04f 0120 	mov.w	r1, #32
 800f44a:	f381 8811 	msr	BASEPRI, r1
 800f44e:	617b      	str	r3, [r7, #20]
 800f450:	482a      	ldr	r0, [pc, #168]	; (800f4fc <SEGGER_SYSVIEW_SendModule+0xfc>)
 800f452:	f7fe ff93 	bl	800e37c <_PreparePacket>
 800f456:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	627b      	str	r3, [r7, #36]	; 0x24
 800f460:	79fb      	ldrb	r3, [r7, #7]
 800f462:	623b      	str	r3, [r7, #32]
 800f464:	e00b      	b.n	800f47e <SEGGER_SYSVIEW_SendModule+0x7e>
 800f466:	6a3b      	ldr	r3, [r7, #32]
 800f468:	b2da      	uxtb	r2, r3
 800f46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46c:	1c59      	adds	r1, r3, #1
 800f46e:	6279      	str	r1, [r7, #36]	; 0x24
 800f470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f474:	b2d2      	uxtb	r2, r2
 800f476:	701a      	strb	r2, [r3, #0]
 800f478:	6a3b      	ldr	r3, [r7, #32]
 800f47a:	09db      	lsrs	r3, r3, #7
 800f47c:	623b      	str	r3, [r7, #32]
 800f47e:	6a3b      	ldr	r3, [r7, #32]
 800f480:	2b7f      	cmp	r3, #127	; 0x7f
 800f482:	d8f0      	bhi.n	800f466 <SEGGER_SYSVIEW_SendModule+0x66>
 800f484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f486:	1c5a      	adds	r2, r3, #1
 800f488:	627a      	str	r2, [r7, #36]	; 0x24
 800f48a:	6a3a      	ldr	r2, [r7, #32]
 800f48c:	b2d2      	uxtb	r2, r2
 800f48e:	701a      	strb	r2, [r3, #0]
 800f490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f492:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	61fb      	str	r3, [r7, #28]
 800f498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	61bb      	str	r3, [r7, #24]
 800f49e:	e00b      	b.n	800f4b8 <SEGGER_SYSVIEW_SendModule+0xb8>
 800f4a0:	69bb      	ldr	r3, [r7, #24]
 800f4a2:	b2da      	uxtb	r2, r3
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	1c59      	adds	r1, r3, #1
 800f4a8:	61f9      	str	r1, [r7, #28]
 800f4aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f4ae:	b2d2      	uxtb	r2, r2
 800f4b0:	701a      	strb	r2, [r3, #0]
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	09db      	lsrs	r3, r3, #7
 800f4b6:	61bb      	str	r3, [r7, #24]
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	2b7f      	cmp	r3, #127	; 0x7f
 800f4bc:	d8f0      	bhi.n	800f4a0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	1c5a      	adds	r2, r3, #1
 800f4c2:	61fa      	str	r2, [r7, #28]
 800f4c4:	69ba      	ldr	r2, [r7, #24]
 800f4c6:	b2d2      	uxtb	r2, r2
 800f4c8:	701a      	strb	r2, [r3, #0]
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2280      	movs	r2, #128	; 0x80
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f7fe ff03 	bl	800e2e2 <_EncodeStr>
 800f4dc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800f4de:	2216      	movs	r2, #22
 800f4e0:	68f9      	ldr	r1, [r7, #12]
 800f4e2:	6938      	ldr	r0, [r7, #16]
 800f4e4:	f7ff f82a 	bl	800e53c <_SendPacket>
      RECORD_END();
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800f4ee:	bf00      	nop
 800f4f0:	3730      	adds	r7, #48	; 0x30
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	20002368 	.word	0x20002368
 800f4fc:	20002370 	.word	0x20002370

0800f500 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800f506:	4b0c      	ldr	r3, [pc, #48]	; (800f538 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d00f      	beq.n	800f52e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800f50e:	4b0a      	ldr	r3, [pc, #40]	; (800f538 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d002      	beq.n	800f522 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d1f2      	bne.n	800f514 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800f52e:	bf00      	nop
 800f530:	3708      	adds	r7, #8
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	20002368 	.word	0x20002368

0800f53c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b086      	sub	sp, #24
 800f540:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800f542:	f3ef 8311 	mrs	r3, BASEPRI
 800f546:	f04f 0120 	mov.w	r1, #32
 800f54a:	f381 8811 	msr	BASEPRI, r1
 800f54e:	60fb      	str	r3, [r7, #12]
 800f550:	4817      	ldr	r0, [pc, #92]	; (800f5b0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800f552:	f7fe ff13 	bl	800e37c <_PreparePacket>
 800f556:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	617b      	str	r3, [r7, #20]
 800f560:	4b14      	ldr	r3, [pc, #80]	; (800f5b4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	613b      	str	r3, [r7, #16]
 800f566:	e00b      	b.n	800f580 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	b2da      	uxtb	r2, r3
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	1c59      	adds	r1, r3, #1
 800f570:	6179      	str	r1, [r7, #20]
 800f572:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f576:	b2d2      	uxtb	r2, r2
 800f578:	701a      	strb	r2, [r3, #0]
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	09db      	lsrs	r3, r3, #7
 800f57e:	613b      	str	r3, [r7, #16]
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	2b7f      	cmp	r3, #127	; 0x7f
 800f584:	d8f0      	bhi.n	800f568 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	1c5a      	adds	r2, r3, #1
 800f58a:	617a      	str	r2, [r7, #20]
 800f58c:	693a      	ldr	r2, [r7, #16]
 800f58e:	b2d2      	uxtb	r2, r2
 800f590:	701a      	strb	r2, [r3, #0]
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800f596:	221b      	movs	r2, #27
 800f598:	6879      	ldr	r1, [r7, #4]
 800f59a:	68b8      	ldr	r0, [r7, #8]
 800f59c:	f7fe ffce 	bl	800e53c <_SendPacket>
  RECORD_END();
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f383 8811 	msr	BASEPRI, r3
}
 800f5a6:	bf00      	nop
 800f5a8:	3718      	adds	r7, #24
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	20002370 	.word	0x20002370
 800f5b4:	2000236c 	.word	0x2000236c

0800f5b8 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800f5b8:	b40f      	push	{r0, r1, r2, r3}
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b082      	sub	sp, #8
 800f5be:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800f5c0:	f107 0314 	add.w	r3, r7, #20
 800f5c4:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800f5c6:	1d3b      	adds	r3, r7, #4
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	6938      	ldr	r0, [r7, #16]
 800f5ce:	f7ff f889 	bl	800e6e4 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800f5d2:	bf00      	nop
 800f5d4:	3708      	adds	r7, #8
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5dc:	b004      	add	sp, #16
 800f5de:	4770      	bx	lr

0800f5e0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b08a      	sub	sp, #40	; 0x28
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f5e8:	f3ef 8311 	mrs	r3, BASEPRI
 800f5ec:	f04f 0120 	mov.w	r1, #32
 800f5f0:	f381 8811 	msr	BASEPRI, r1
 800f5f4:	617b      	str	r3, [r7, #20]
 800f5f6:	4827      	ldr	r0, [pc, #156]	; (800f694 <SEGGER_SYSVIEW_Warn+0xb4>)
 800f5f8:	f7fe fec0 	bl	800e37c <_PreparePacket>
 800f5fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f5fe:	2280      	movs	r2, #128	; 0x80
 800f600:	6879      	ldr	r1, [r7, #4]
 800f602:	6938      	ldr	r0, [r7, #16]
 800f604:	f7fe fe6d 	bl	800e2e2 <_EncodeStr>
 800f608:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	627b      	str	r3, [r7, #36]	; 0x24
 800f60e:	2301      	movs	r3, #1
 800f610:	623b      	str	r3, [r7, #32]
 800f612:	e00b      	b.n	800f62c <SEGGER_SYSVIEW_Warn+0x4c>
 800f614:	6a3b      	ldr	r3, [r7, #32]
 800f616:	b2da      	uxtb	r2, r3
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	1c59      	adds	r1, r3, #1
 800f61c:	6279      	str	r1, [r7, #36]	; 0x24
 800f61e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f622:	b2d2      	uxtb	r2, r2
 800f624:	701a      	strb	r2, [r3, #0]
 800f626:	6a3b      	ldr	r3, [r7, #32]
 800f628:	09db      	lsrs	r3, r3, #7
 800f62a:	623b      	str	r3, [r7, #32]
 800f62c:	6a3b      	ldr	r3, [r7, #32]
 800f62e:	2b7f      	cmp	r3, #127	; 0x7f
 800f630:	d8f0      	bhi.n	800f614 <SEGGER_SYSVIEW_Warn+0x34>
 800f632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f634:	1c5a      	adds	r2, r3, #1
 800f636:	627a      	str	r2, [r7, #36]	; 0x24
 800f638:	6a3a      	ldr	r2, [r7, #32]
 800f63a:	b2d2      	uxtb	r2, r2
 800f63c:	701a      	strb	r2, [r3, #0]
 800f63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f640:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	61fb      	str	r3, [r7, #28]
 800f646:	2300      	movs	r3, #0
 800f648:	61bb      	str	r3, [r7, #24]
 800f64a:	e00b      	b.n	800f664 <SEGGER_SYSVIEW_Warn+0x84>
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	b2da      	uxtb	r2, r3
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	1c59      	adds	r1, r3, #1
 800f654:	61f9      	str	r1, [r7, #28]
 800f656:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f65a:	b2d2      	uxtb	r2, r2
 800f65c:	701a      	strb	r2, [r3, #0]
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	09db      	lsrs	r3, r3, #7
 800f662:	61bb      	str	r3, [r7, #24]
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	2b7f      	cmp	r3, #127	; 0x7f
 800f668:	d8f0      	bhi.n	800f64c <SEGGER_SYSVIEW_Warn+0x6c>
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	1c5a      	adds	r2, r3, #1
 800f66e:	61fa      	str	r2, [r7, #28]
 800f670:	69ba      	ldr	r2, [r7, #24]
 800f672:	b2d2      	uxtb	r2, r2
 800f674:	701a      	strb	r2, [r3, #0]
 800f676:	69fb      	ldr	r3, [r7, #28]
 800f678:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800f67a:	221a      	movs	r2, #26
 800f67c:	68f9      	ldr	r1, [r7, #12]
 800f67e:	6938      	ldr	r0, [r7, #16]
 800f680:	f7fe ff5c 	bl	800e53c <_SendPacket>
  RECORD_END();
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	f383 8811 	msr	BASEPRI, r3
}
 800f68a:	bf00      	nop
 800f68c:	3728      	adds	r7, #40	; 0x28
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	20002370 	.word	0x20002370

0800f698 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800f698:	b580      	push	{r7, lr}
 800f69a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800f69c:	4803      	ldr	r0, [pc, #12]	; (800f6ac <_cbSendSystemDesc+0x14>)
 800f69e:	f7ff fd5f 	bl	800f160 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800f6a2:	4803      	ldr	r0, [pc, #12]	; (800f6b0 <_cbSendSystemDesc+0x18>)
 800f6a4:	f7ff fd5c 	bl	800f160 <SEGGER_SYSVIEW_SendSysDesc>
}
 800f6a8:	bf00      	nop
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	08012420 	.word	0x08012420
 800f6b0:	08012454 	.word	0x08012454

0800f6b4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800f6b8:	4b06      	ldr	r3, [pc, #24]	; (800f6d4 <SEGGER_SYSVIEW_Conf+0x20>)
 800f6ba:	6818      	ldr	r0, [r3, #0]
 800f6bc:	4b05      	ldr	r3, [pc, #20]	; (800f6d4 <SEGGER_SYSVIEW_Conf+0x20>)
 800f6be:	6819      	ldr	r1, [r3, #0]
 800f6c0:	4b05      	ldr	r3, [pc, #20]	; (800f6d8 <SEGGER_SYSVIEW_Conf+0x24>)
 800f6c2:	4a06      	ldr	r2, [pc, #24]	; (800f6dc <SEGGER_SYSVIEW_Conf+0x28>)
 800f6c4:	f7ff f8cc 	bl	800e860 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800f6c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f6cc:	f7ff f906 	bl	800e8dc <SEGGER_SYSVIEW_SetRAMBase>
}
 800f6d0:	bf00      	nop
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	20000020 	.word	0x20000020
 800f6d8:	0800f699 	.word	0x0800f699
 800f6dc:	08012970 	.word	0x08012970

0800f6e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800f6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	607b      	str	r3, [r7, #4]
 800f6ea:	e033      	b.n	800f754 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800f6ec:	491e      	ldr	r1, [pc, #120]	; (800f768 <_cbSendTaskList+0x88>)
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	4413      	add	r3, r2
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	440b      	add	r3, r1
 800f6fa:	6818      	ldr	r0, [r3, #0]
 800f6fc:	491a      	ldr	r1, [pc, #104]	; (800f768 <_cbSendTaskList+0x88>)
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	4613      	mov	r3, r2
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4413      	add	r3, r2
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	440b      	add	r3, r1
 800f70a:	3304      	adds	r3, #4
 800f70c:	6819      	ldr	r1, [r3, #0]
 800f70e:	4c16      	ldr	r4, [pc, #88]	; (800f768 <_cbSendTaskList+0x88>)
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	4613      	mov	r3, r2
 800f714:	009b      	lsls	r3, r3, #2
 800f716:	4413      	add	r3, r2
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	4423      	add	r3, r4
 800f71c:	3308      	adds	r3, #8
 800f71e:	681c      	ldr	r4, [r3, #0]
 800f720:	4d11      	ldr	r5, [pc, #68]	; (800f768 <_cbSendTaskList+0x88>)
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	4613      	mov	r3, r2
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	4413      	add	r3, r2
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	442b      	add	r3, r5
 800f72e:	330c      	adds	r3, #12
 800f730:	681d      	ldr	r5, [r3, #0]
 800f732:	4e0d      	ldr	r6, [pc, #52]	; (800f768 <_cbSendTaskList+0x88>)
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	4613      	mov	r3, r2
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	4413      	add	r3, r2
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	4433      	add	r3, r6
 800f740:	3310      	adds	r3, #16
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	9300      	str	r3, [sp, #0]
 800f746:	462b      	mov	r3, r5
 800f748:	4622      	mov	r2, r4
 800f74a:	f000 f8bd 	bl	800f8c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	3301      	adds	r3, #1
 800f752:	607b      	str	r3, [r7, #4]
 800f754:	4b05      	ldr	r3, [pc, #20]	; (800f76c <_cbSendTaskList+0x8c>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d3c6      	bcc.n	800f6ec <_cbSendTaskList+0xc>
  }
}
 800f75e:	bf00      	nop
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f768:	20002454 	.word	0x20002454
 800f76c:	200024f4 	.word	0x200024f4

0800f770 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800f770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f774:	b082      	sub	sp, #8
 800f776:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800f778:	f7fd f924 	bl	800c9c4 <xTaskGetTickCountFromISR>
 800f77c:	4603      	mov	r3, r0
 800f77e:	2200      	movs	r2, #0
 800f780:	469a      	mov	sl, r3
 800f782:	4693      	mov	fp, r2
 800f784:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800f788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f78c:	4602      	mov	r2, r0
 800f78e:	460b      	mov	r3, r1
 800f790:	f04f 0a00 	mov.w	sl, #0
 800f794:	f04f 0b00 	mov.w	fp, #0
 800f798:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800f79c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800f7a0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800f7a4:	4652      	mov	r2, sl
 800f7a6:	465b      	mov	r3, fp
 800f7a8:	1a14      	subs	r4, r2, r0
 800f7aa:	eb63 0501 	sbc.w	r5, r3, r1
 800f7ae:	f04f 0200 	mov.w	r2, #0
 800f7b2:	f04f 0300 	mov.w	r3, #0
 800f7b6:	00ab      	lsls	r3, r5, #2
 800f7b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800f7bc:	00a2      	lsls	r2, r4, #2
 800f7be:	4614      	mov	r4, r2
 800f7c0:	461d      	mov	r5, r3
 800f7c2:	eb14 0800 	adds.w	r8, r4, r0
 800f7c6:	eb45 0901 	adc.w	r9, r5, r1
 800f7ca:	f04f 0200 	mov.w	r2, #0
 800f7ce:	f04f 0300 	mov.w	r3, #0
 800f7d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f7d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f7da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f7de:	4690      	mov	r8, r2
 800f7e0:	4699      	mov	r9, r3
 800f7e2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800f7e6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800f7ea:	4610      	mov	r0, r2
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800f7f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b086      	sub	sp, #24
 800f7fc:	af02      	add	r7, sp, #8
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	607a      	str	r2, [r7, #4]
 800f804:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800f806:	2205      	movs	r2, #5
 800f808:	492b      	ldr	r1, [pc, #172]	; (800f8b8 <SYSVIEW_AddTask+0xc0>)
 800f80a:	68b8      	ldr	r0, [r7, #8]
 800f80c:	f001 fa9f 	bl	8010d4e <memcmp>
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	d04b      	beq.n	800f8ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800f816:	4b29      	ldr	r3, [pc, #164]	; (800f8bc <SYSVIEW_AddTask+0xc4>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2b07      	cmp	r3, #7
 800f81c:	d903      	bls.n	800f826 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800f81e:	4828      	ldr	r0, [pc, #160]	; (800f8c0 <SYSVIEW_AddTask+0xc8>)
 800f820:	f7ff fede 	bl	800f5e0 <SEGGER_SYSVIEW_Warn>
    return;
 800f824:	e044      	b.n	800f8b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800f826:	4b25      	ldr	r3, [pc, #148]	; (800f8bc <SYSVIEW_AddTask+0xc4>)
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	4926      	ldr	r1, [pc, #152]	; (800f8c4 <SYSVIEW_AddTask+0xcc>)
 800f82c:	4613      	mov	r3, r2
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	4413      	add	r3, r2
 800f832:	009b      	lsls	r3, r3, #2
 800f834:	440b      	add	r3, r1
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800f83a:	4b20      	ldr	r3, [pc, #128]	; (800f8bc <SYSVIEW_AddTask+0xc4>)
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	4921      	ldr	r1, [pc, #132]	; (800f8c4 <SYSVIEW_AddTask+0xcc>)
 800f840:	4613      	mov	r3, r2
 800f842:	009b      	lsls	r3, r3, #2
 800f844:	4413      	add	r3, r2
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	440b      	add	r3, r1
 800f84a:	3304      	adds	r3, #4
 800f84c:	68ba      	ldr	r2, [r7, #8]
 800f84e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800f850:	4b1a      	ldr	r3, [pc, #104]	; (800f8bc <SYSVIEW_AddTask+0xc4>)
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	491b      	ldr	r1, [pc, #108]	; (800f8c4 <SYSVIEW_AddTask+0xcc>)
 800f856:	4613      	mov	r3, r2
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	4413      	add	r3, r2
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	440b      	add	r3, r1
 800f860:	3308      	adds	r3, #8
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800f866:	4b15      	ldr	r3, [pc, #84]	; (800f8bc <SYSVIEW_AddTask+0xc4>)
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	4916      	ldr	r1, [pc, #88]	; (800f8c4 <SYSVIEW_AddTask+0xcc>)
 800f86c:	4613      	mov	r3, r2
 800f86e:	009b      	lsls	r3, r3, #2
 800f870:	4413      	add	r3, r2
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	440b      	add	r3, r1
 800f876:	330c      	adds	r3, #12
 800f878:	683a      	ldr	r2, [r7, #0]
 800f87a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800f87c:	4b0f      	ldr	r3, [pc, #60]	; (800f8bc <SYSVIEW_AddTask+0xc4>)
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	4910      	ldr	r1, [pc, #64]	; (800f8c4 <SYSVIEW_AddTask+0xcc>)
 800f882:	4613      	mov	r3, r2
 800f884:	009b      	lsls	r3, r3, #2
 800f886:	4413      	add	r3, r2
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	440b      	add	r3, r1
 800f88c:	3310      	adds	r3, #16
 800f88e:	69ba      	ldr	r2, [r7, #24]
 800f890:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800f892:	4b0a      	ldr	r3, [pc, #40]	; (800f8bc <SYSVIEW_AddTask+0xc4>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	3301      	adds	r3, #1
 800f898:	4a08      	ldr	r2, [pc, #32]	; (800f8bc <SYSVIEW_AddTask+0xc4>)
 800f89a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	9300      	str	r3, [sp, #0]
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	687a      	ldr	r2, [r7, #4]
 800f8a4:	68b9      	ldr	r1, [r7, #8]
 800f8a6:	68f8      	ldr	r0, [r7, #12]
 800f8a8:	f000 f80e 	bl	800f8c8 <SYSVIEW_SendTaskInfo>
 800f8ac:	e000      	b.n	800f8b0 <SYSVIEW_AddTask+0xb8>
    return;
 800f8ae:	bf00      	nop

}
 800f8b0:	3710      	adds	r7, #16
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	08012464 	.word	0x08012464
 800f8bc:	200024f4 	.word	0x200024f4
 800f8c0:	0801246c 	.word	0x0801246c
 800f8c4:	20002454 	.word	0x20002454

0800f8c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b08a      	sub	sp, #40	; 0x28
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	60b9      	str	r1, [r7, #8]
 800f8d2:	607a      	str	r2, [r7, #4]
 800f8d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800f8d6:	f107 0314 	add.w	r3, r7, #20
 800f8da:	2214      	movs	r2, #20
 800f8dc:	2100      	movs	r1, #0
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f001 fa53 	bl	8010d8a <memset>
  TaskInfo.TaskID     = TaskID;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800f8f8:	f107 0314 	add.w	r3, r7, #20
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7ff fb35 	bl	800ef6c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800f902:	bf00      	nop
 800f904:	3728      	adds	r7, #40	; 0x28
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}

0800f90a <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 800f90a:	b480      	push	{r7}
 800f90c:	b085      	sub	sp, #20
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
 800f912:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800f914:	2300      	movs	r3, #0
 800f916:	73fb      	strb	r3, [r7, #15]
 800f918:	2300      	movs	r3, #0
 800f91a:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800f91c:	2300      	movs	r3, #0
 800f91e:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	2b2d      	cmp	r3, #45	; 0x2d
 800f926:	d119      	bne.n	800f95c <ParseNumber+0x52>
        minus = 1;
 800f928:	2301      	movs	r3, #1
 800f92a:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	3301      	adds	r3, #1
 800f930:	607b      	str	r3, [r7, #4]
        i++;
 800f932:	7bbb      	ldrb	r3, [r7, #14]
 800f934:	3301      	adds	r3, #1
 800f936:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800f938:	e010      	b.n	800f95c <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800f93a:	68ba      	ldr	r2, [r7, #8]
 800f93c:	4613      	mov	r3, r2
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4413      	add	r3, r2
 800f942:	005b      	lsls	r3, r3, #1
 800f944:	461a      	mov	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	3b30      	subs	r3, #48	; 0x30
 800f94c:	4413      	add	r3, r2
 800f94e:	60bb      	str	r3, [r7, #8]
        ptr++;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	3301      	adds	r3, #1
 800f954:	607b      	str	r3, [r7, #4]
        i++;
 800f956:	7bbb      	ldrb	r3, [r7, #14]
 800f958:	3301      	adds	r3, #1
 800f95a:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	2b2f      	cmp	r3, #47	; 0x2f
 800f962:	d903      	bls.n	800f96c <ParseNumber+0x62>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	2b39      	cmp	r3, #57	; 0x39
 800f96a:	d9e6      	bls.n	800f93a <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d002      	beq.n	800f978 <ParseNumber+0x6e>
        *cnt = i;
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	7bba      	ldrb	r2, [r7, #14]
 800f976:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 800f978:	7bfb      	ldrb	r3, [r7, #15]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d002      	beq.n	800f984 <ParseNumber+0x7a>
        return 0 - sum;
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	425b      	negs	r3, r3
 800f982:	e000      	b.n	800f986 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 800f984:	68bb      	ldr	r3, [r7, #8]
}
 800f986:	4618      	mov	r0, r3
 800f988:	3714      	adds	r7, #20
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr

0800f992 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800f992:	b580      	push	{r7, lr}
 800f994:	b084      	sub	sp, #16
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
 800f99a:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800f99c:	2300      	movs	r3, #0
 800f99e:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800f9a0:	e019      	b.n	800f9d6 <ParseIP+0x44>
    hexcnt = 1;
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f9ac:	d00e      	beq.n	800f9cc <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800f9ae:	f107 030e 	add.w	r3, r7, #14
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f7ff ffa8 	bl	800f90a <ParseNumber>
 800f9ba:	4601      	mov	r1, r0
 800f9bc:	7bfb      	ldrb	r3, [r7, #15]
 800f9be:	1c5a      	adds	r2, r3, #1
 800f9c0:	73fa      	strb	r2, [r7, #15]
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	4413      	add	r3, r2
 800f9c8:	b2ca      	uxtb	r2, r1
 800f9ca:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800f9cc:	7bbb      	ldrb	r3, [r7, #14]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	4413      	add	r3, r2
 800f9d4:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d1e1      	bne.n	800f9a2 <ParseIP+0x10>
  }
}
 800f9de:	bf00      	nop
 800f9e0:	bf00      	nop
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	3302      	adds	r3, #2
 800f9fa:	4934      	ldr	r1, [pc, #208]	; (800facc <AT_ParseInfo+0xe4>)
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f001 fbf5 	bl	80111ec <strtok>
 800fa02:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 800fa04:	e05a      	b.n	800fabc <AT_ParseInfo+0xd4>
    switch (num++) {
 800fa06:	7afb      	ldrb	r3, [r7, #11]
 800fa08:	1c5a      	adds	r2, r3, #1
 800fa0a:	72fa      	strb	r2, [r7, #11]
 800fa0c:	2b06      	cmp	r3, #6
 800fa0e:	d84f      	bhi.n	800fab0 <AT_ParseInfo+0xc8>
 800fa10:	a201      	add	r2, pc, #4	; (adr r2, 800fa18 <AT_ParseInfo+0x30>)
 800fa12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa16:	bf00      	nop
 800fa18:	0800fa35 	.word	0x0800fa35
 800fa1c:	0800fa43 	.word	0x0800fa43
 800fa20:	0800fa53 	.word	0x0800fa53
 800fa24:	0800fa63 	.word	0x0800fa63
 800fa28:	0800fa73 	.word	0x0800fa73
 800fa2c:	0800fa83 	.word	0x0800fa83
 800fa30:	0800fa97 	.word	0x0800fa97
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2220      	movs	r2, #32
 800fa38:	68f9      	ldr	r1, [r7, #12]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f001 fbad 	bl	801119a <strncpy>
      break;
 800fa40:	e037      	b.n	800fab2 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	3320      	adds	r3, #32
 800fa46:	2218      	movs	r2, #24
 800fa48:	68f9      	ldr	r1, [r7, #12]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f001 fba5 	bl	801119a <strncpy>
      break;
 800fa50:	e02f      	b.n	800fab2 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	3338      	adds	r3, #56	; 0x38
 800fa56:	2210      	movs	r2, #16
 800fa58:	68f9      	ldr	r1, [r7, #12]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f001 fb9d 	bl	801119a <strncpy>
      break;
 800fa60:	e027      	b.n	800fab2 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	3348      	adds	r3, #72	; 0x48
 800fa66:	2210      	movs	r2, #16
 800fa68:	68f9      	ldr	r1, [r7, #12]
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f001 fb95 	bl	801119a <strncpy>
      break;
 800fa70:	e01f      	b.n	800fab2 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	3358      	adds	r3, #88	; 0x58
 800fa76:	2210      	movs	r2, #16
 800fa78:	68f9      	ldr	r1, [r7, #12]
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f001 fb8d 	bl	801119a <strncpy>
      break;
 800fa80:	e017      	b.n	800fab2 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 800fa82:	2100      	movs	r1, #0
 800fa84:	68f8      	ldr	r0, [r7, #12]
 800fa86:	f7ff ff40 	bl	800f90a <ParseNumber>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 800fa94:	e00d      	b.n	800fab2 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800fa96:	490e      	ldr	r1, [pc, #56]	; (800fad0 <AT_ParseInfo+0xe8>)
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	f001 fba7 	bl	80111ec <strtok>
 800fa9e:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	3368      	adds	r3, #104	; 0x68
 800faa4:	2220      	movs	r2, #32
 800faa6:	68f9      	ldr	r1, [r7, #12]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f001 fb76 	bl	801119a <strncpy>
      break;
 800faae:	e000      	b.n	800fab2 <AT_ParseInfo+0xca>

    default: break;
 800fab0:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800fab2:	4906      	ldr	r1, [pc, #24]	; (800facc <AT_ParseInfo+0xe4>)
 800fab4:	2000      	movs	r0, #0
 800fab6:	f001 fb99 	bl	80111ec <strtok>
 800faba:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d1a1      	bne.n	800fa06 <AT_ParseInfo+0x1e>
  }
}
 800fac2:	bf00      	nop
 800fac4:	bf00      	nop
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	080124ec 	.word	0x080124ec
 800fad0:	080124f0 	.word	0x080124f0

0800fad4 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
 800fadc:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800fade:	2300      	movs	r3, #0
 800fae0:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	3302      	adds	r3, #2
 800fae6:	4952      	ldr	r1, [pc, #328]	; (800fc30 <AT_ParseConnSettings+0x15c>)
 800fae8:	4618      	mov	r0, r3
 800faea:	f001 fb7f 	bl	80111ec <strtok>
 800faee:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800faf0:	e095      	b.n	800fc1e <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800faf2:	7bfb      	ldrb	r3, [r7, #15]
 800faf4:	1c5a      	adds	r2, r3, #1
 800faf6:	73fa      	strb	r2, [r7, #15]
 800faf8:	2b0b      	cmp	r3, #11
 800fafa:	d87f      	bhi.n	800fbfc <AT_ParseConnSettings+0x128>
 800fafc:	a201      	add	r2, pc, #4	; (adr r2, 800fb04 <AT_ParseConnSettings+0x30>)
 800fafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb02:	bf00      	nop
 800fb04:	0800fb35 	.word	0x0800fb35
 800fb08:	0800fb43 	.word	0x0800fb43
 800fb0c:	0800fb53 	.word	0x0800fb53
 800fb10:	0800fb67 	.word	0x0800fb67
 800fb14:	0800fb7b 	.word	0x0800fb7b
 800fb18:	0800fb8f 	.word	0x0800fb8f
 800fb1c:	0800fb9d 	.word	0x0800fb9d
 800fb20:	0800fbab 	.word	0x0800fbab
 800fb24:	0800fbb9 	.word	0x0800fbb9
 800fb28:	0800fbc7 	.word	0x0800fbc7
 800fb2c:	0800fbd5 	.word	0x0800fbd5
 800fb30:	0800fbe9 	.word	0x0800fbe9
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	2221      	movs	r2, #33	; 0x21
 800fb38:	68b9      	ldr	r1, [r7, #8]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f001 fb2d 	bl	801119a <strncpy>
      break;
 800fb40:	e05d      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	3321      	adds	r3, #33	; 0x21
 800fb46:	2221      	movs	r2, #33	; 0x21
 800fb48:	68b9      	ldr	r1, [r7, #8]
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f001 fb25 	bl	801119a <strncpy>
      break;
 800fb50:	e055      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800fb52:	2100      	movs	r1, #0
 800fb54:	68b8      	ldr	r0, [r7, #8]
 800fb56:	f7ff fed8 	bl	800f90a <ParseNumber>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	b2da      	uxtb	r2, r3
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 800fb64:	e04b      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800fb66:	2100      	movs	r1, #0
 800fb68:	68b8      	ldr	r0, [r7, #8]
 800fb6a:	f7ff fece 	bl	800f90a <ParseNumber>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	b2da      	uxtb	r2, r3
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800fb78:	e041      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	68b8      	ldr	r0, [r7, #8]
 800fb7e:	f7ff fec4 	bl	800f90a <ParseNumber>
 800fb82:	4603      	mov	r3, r0
 800fb84:	b2da      	uxtb	r2, r3
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 800fb8c:	e037      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	3348      	adds	r3, #72	; 0x48
 800fb92:	4619      	mov	r1, r3
 800fb94:	68b8      	ldr	r0, [r7, #8]
 800fb96:	f7ff fefc 	bl	800f992 <ParseIP>
      break;
 800fb9a:	e030      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	334c      	adds	r3, #76	; 0x4c
 800fba0:	4619      	mov	r1, r3
 800fba2:	68b8      	ldr	r0, [r7, #8]
 800fba4:	f7ff fef5 	bl	800f992 <ParseIP>
      break;
 800fba8:	e029      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	3350      	adds	r3, #80	; 0x50
 800fbae:	4619      	mov	r1, r3
 800fbb0:	68b8      	ldr	r0, [r7, #8]
 800fbb2:	f7ff feee 	bl	800f992 <ParseIP>
      break;
 800fbb6:	e022      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	3354      	adds	r3, #84	; 0x54
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	68b8      	ldr	r0, [r7, #8]
 800fbc0:	f7ff fee7 	bl	800f992 <ParseIP>
      break;
 800fbc4:	e01b      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	3358      	adds	r3, #88	; 0x58
 800fbca:	4619      	mov	r1, r3
 800fbcc:	68b8      	ldr	r0, [r7, #8]
 800fbce:	f7ff fee0 	bl	800f992 <ParseIP>
      break;
 800fbd2:	e014      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800fbd4:	2100      	movs	r1, #0
 800fbd6:	68b8      	ldr	r0, [r7, #8]
 800fbd8:	f7ff fe97 	bl	800f90a <ParseNumber>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	b2da      	uxtb	r2, r3
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800fbe6:	e00a      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800fbe8:	2100      	movs	r1, #0
 800fbea:	68b8      	ldr	r0, [r7, #8]
 800fbec:	f7ff fe8d 	bl	800f90a <ParseNumber>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	b2da      	uxtb	r2, r3
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800fbfa:	e000      	b.n	800fbfe <AT_ParseConnSettings+0x12a>

    default:
      break;
 800fbfc:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800fbfe:	490c      	ldr	r1, [pc, #48]	; (800fc30 <AT_ParseConnSettings+0x15c>)
 800fc00:	2000      	movs	r0, #0
 800fc02:	f001 faf3 	bl	80111ec <strtok>
 800fc06:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d007      	beq.n	800fc1e <AT_ParseConnSettings+0x14a>
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	3b01      	subs	r3, #1
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	2b2c      	cmp	r3, #44	; 0x2c
 800fc16:	d102      	bne.n	800fc1e <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	f47f af66 	bne.w	800faf2 <AT_ParseConnSettings+0x1e>
    }
  }
}
 800fc26:	bf00      	nop
 800fc28:	bf00      	nop
 800fc2a:	3710      	adds	r7, #16
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	080124ec 	.word	0x080124ec

0800fc34 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800fc34:	b590      	push	{r4, r7, lr}
 800fc36:	b087      	sub	sp, #28
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800fc40:	2300      	movs	r3, #0
 800fc42:	617b      	str	r3, [r7, #20]
  int16_t recv_len = 0;
 800fc44:	2300      	movs	r3, #0
 800fc46:	827b      	strh	r3, [r7, #18]
  LOCK_WIFI();  
 800fc48:	4b32      	ldr	r3, [pc, #200]	; (800fd14 <AT_ExecuteCommand+0xe0>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2100      	movs	r1, #0
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7fb facc 	bl	800b1ec <osMutexWait>

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800fc5a:	68b8      	ldr	r0, [r7, #8]
 800fc5c:	f7f0 fafe 	bl	800025c <strlen>
 800fc60:	4603      	mov	r3, r0
 800fc62:	b299      	uxth	r1, r3
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	68b8      	ldr	r0, [r7, #8]
 800fc6e:	47a0      	blx	r4
 800fc70:	4603      	mov	r3, r0
 800fc72:	617b      	str	r3, [r7, #20]

  if( ret > 0)
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	dd42      	ble.n	800fd00 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800fc80:	68fa      	ldr	r2, [r7, #12]
 800fc82:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800fc86:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	4798      	blx	r3
 800fc8e:	4603      	mov	r3, r0
 800fc90:	827b      	strh	r3, [r7, #18]
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 800fc92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	dd26      	ble.n	800fce8 <AT_ExecuteCommand+0xb4>
 800fc9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fc9e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800fca2:	da21      	bge.n	800fce8 <AT_ExecuteCommand+0xb4>
    {
      *(pdata + recv_len) = 0;
 800fca4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	4413      	add	r3, r2
 800fcac:	2200      	movs	r2, #0
 800fcae:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800fcb0:	4919      	ldr	r1, [pc, #100]	; (800fd18 <AT_ExecuteCommand+0xe4>)
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f001 fa84 	bl	80111c0 <strstr>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d006      	beq.n	800fccc <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
 800fcbe:	4b15      	ldr	r3, [pc, #84]	; (800fd14 <AT_ExecuteCommand+0xe0>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fb fae0 	bl	800b288 <osMutexRelease>
        return ES_WIFI_STATUS_OK;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	e01f      	b.n	800fd0c <AT_ExecuteCommand+0xd8>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800fccc:	4913      	ldr	r1, [pc, #76]	; (800fd1c <AT_ExecuteCommand+0xe8>)
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f001 fa76 	bl	80111c0 <strstr>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d006      	beq.n	800fce8 <AT_ExecuteCommand+0xb4>
      {
        UNLOCK_WIFI();
 800fcda:	4b0e      	ldr	r3, [pc, #56]	; (800fd14 <AT_ExecuteCommand+0xe0>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fb fad2 	bl	800b288 <osMutexRelease>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800fce4:	2305      	movs	r3, #5
 800fce6:	e011      	b.n	800fd0c <AT_ExecuteCommand+0xd8>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 800fce8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fcec:	f113 0f04 	cmn.w	r3, #4
 800fcf0:	d106      	bne.n	800fd00 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
 800fcf2:	4b08      	ldr	r3, [pc, #32]	; (800fd14 <AT_ExecuteCommand+0xe0>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fb fac6 	bl	800b288 <osMutexRelease>
      return ES_WIFI_STATUS_MODULE_CRASH;
 800fcfc:	2306      	movs	r3, #6
 800fcfe:	e005      	b.n	800fd0c <AT_ExecuteCommand+0xd8>
    }
  }
  UNLOCK_WIFI();  
 800fd00:	4b04      	ldr	r3, [pc, #16]	; (800fd14 <AT_ExecuteCommand+0xe0>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7fb fabf 	bl	800b288 <osMutexRelease>
  return ES_WIFI_STATUS_IO_ERROR;
 800fd0a:	2304      	movs	r3, #4
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	371c      	adds	r7, #28
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd90      	pop	{r4, r7, pc}
 800fd14:	20002504 	.word	0x20002504
 800fd18:	080124f4 	.word	0x080124f4
 800fd1c:	08012500 	.word	0x08012500

0800fd20 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b086      	sub	sp, #24
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	60f8      	str	r0, [r7, #12]
 800fd28:	60b9      	str	r1, [r7, #8]
 800fd2a:	607a      	str	r2, [r7, #4]
 800fd2c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800fd32:	2300      	movs	r3, #0
 800fd34:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800fd36:	2300      	movs	r3, #0
 800fd38:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();  
 800fd3a:	4b3f      	ldr	r3, [pc, #252]	; (800fe38 <AT_RequestSendData+0x118>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	2100      	movs	r1, #0
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7fb fa53 	bl	800b1ec <osMutexWait>
  cmd_len = strlen((char*)cmd);
 800fd46:	68b8      	ldr	r0, [r7, #8]
 800fd48:	f7f0 fa88 	bl	800025c <strlen>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800fd50:	8a7b      	ldrh	r3, [r7, #18]
 800fd52:	f003 0301 	and.w	r3, r3, #1
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d001      	beq.n	800fd5e <AT_RequestSendData+0x3e>
 800fd5a:	2302      	movs	r3, #2
 800fd5c:	e067      	b.n	800fe2e <AT_RequestSendData+0x10e>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fd64:	68fa      	ldr	r2, [r7, #12]
 800fd66:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800fd6a:	8a79      	ldrh	r1, [r7, #18]
 800fd6c:	68b8      	ldr	r0, [r7, #8]
 800fd6e:	4798      	blx	r3
 800fd70:	4603      	mov	r3, r0
 800fd72:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 800fd74:	8a3a      	ldrh	r2, [r7, #16]
 800fd76:	8a7b      	ldrh	r3, [r7, #18]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d157      	bne.n	800fe2c <AT_RequestSendData+0x10c>
  {    
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fd82:	68fa      	ldr	r2, [r7, #12]
 800fd84:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800fd88:	8879      	ldrh	r1, [r7, #2]
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	4798      	blx	r3
 800fd8e:	4603      	mov	r3, r0
 800fd90:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800fd92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fd96:	887b      	ldrh	r3, [r7, #2]
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	d145      	bne.n	800fe28 <AT_RequestSendData+0x108>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800fda2:	68fa      	ldr	r2, [r7, #12]
 800fda4:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800fda8:	2100      	movs	r1, #0
 800fdaa:	6a38      	ldr	r0, [r7, #32]
 800fdac:	4798      	blx	r3
 800fdae:	4603      	mov	r3, r0
 800fdb0:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800fdb2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	dd28      	ble.n	800fe0c <AT_RequestSendData+0xec>
      {
        *(pdata+recv_len) = 0;
 800fdba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fdbe:	6a3a      	ldr	r2, [r7, #32]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800fdc6:	491d      	ldr	r1, [pc, #116]	; (800fe3c <AT_RequestSendData+0x11c>)
 800fdc8:	6a38      	ldr	r0, [r7, #32]
 800fdca:	f001 f9f9 	bl	80111c0 <strstr>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d006      	beq.n	800fde2 <AT_RequestSendData+0xc2>
        {
          UNLOCK_WIFI();
 800fdd4:	4b18      	ldr	r3, [pc, #96]	; (800fe38 <AT_RequestSendData+0x118>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7fb fa55 	bl	800b288 <osMutexRelease>
          return ES_WIFI_STATUS_OK;
 800fdde:	2300      	movs	r3, #0
 800fde0:	e025      	b.n	800fe2e <AT_RequestSendData+0x10e>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800fde2:	4917      	ldr	r1, [pc, #92]	; (800fe40 <AT_RequestSendData+0x120>)
 800fde4:	6a38      	ldr	r0, [r7, #32]
 800fde6:	f001 f9eb 	bl	80111c0 <strstr>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d006      	beq.n	800fdfe <AT_RequestSendData+0xde>
        {
          UNLOCK_WIFI();
 800fdf0:	4b11      	ldr	r3, [pc, #68]	; (800fe38 <AT_RequestSendData+0x118>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7fb fa47 	bl	800b288 <osMutexRelease>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800fdfa:	2305      	movs	r3, #5
 800fdfc:	e017      	b.n	800fe2e <AT_RequestSendData+0x10e>
        }
        else
        {
          UNLOCK_WIFI();
 800fdfe:	4b0e      	ldr	r3, [pc, #56]	; (800fe38 <AT_RequestSendData+0x118>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fb fa40 	bl	800b288 <osMutexRelease>
          return ES_WIFI_STATUS_ERROR;
 800fe08:	2302      	movs	r3, #2
 800fe0a:	e010      	b.n	800fe2e <AT_RequestSendData+0x10e>
        }
      }
      UNLOCK_WIFI();
 800fe0c:	4b0a      	ldr	r3, [pc, #40]	; (800fe38 <AT_RequestSendData+0x118>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7fb fa39 	bl	800b288 <osMutexRelease>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 800fe16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fe1a:	f113 0f04 	cmn.w	r3, #4
 800fe1e:	d101      	bne.n	800fe24 <AT_RequestSendData+0x104>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800fe20:	2306      	movs	r3, #6
 800fe22:	e004      	b.n	800fe2e <AT_RequestSendData+0x10e>
      }
      return ES_WIFI_STATUS_ERROR;
 800fe24:	2302      	movs	r3, #2
 800fe26:	e002      	b.n	800fe2e <AT_RequestSendData+0x10e>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800fe28:	2302      	movs	r3, #2
 800fe2a:	e000      	b.n	800fe2e <AT_RequestSendData+0x10e>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800fe2c:	2304      	movs	r3, #4
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3718      	adds	r7, #24
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	20002504 	.word	0x20002504
 800fe3c:	080124f4 	.word	0x080124f4
 800fe40:	08012500 	.word	0x08012500

0800fe44 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b084      	sub	sp, #16
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800fe4c:	2302      	movs	r3, #2
 800fe4e:	73fb      	strb	r3, [r7, #15]
  
  LOCK_WIFI();  
 800fe50:	4b18      	ldr	r3, [pc, #96]	; (800feb4 <ES_WIFI_Init+0x70>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2100      	movs	r1, #0
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7fb f9c8 	bl	800b1ec <osMutexWait>

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f247 5230 	movw	r2, #30000	; 0x7530
 800fe62:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	4798      	blx	r3
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d113      	bne.n	800fe9e <ES_WIFI_Init+0x5a>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	490e      	ldr	r1, [pc, #56]	; (800feb8 <ES_WIFI_Init+0x74>)
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f7ff fed7 	bl	800fc34 <AT_ExecuteCommand>
 800fe86:	4603      	mov	r3, r0
 800fe88:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800fe8a:	7bfb      	ldrb	r3, [r7, #15]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d106      	bne.n	800fe9e <ES_WIFI_Init+0x5a>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fe96:	4619      	mov	r1, r3
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f7ff fda5 	bl	800f9e8 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
 800fe9e:	4b05      	ldr	r3, [pc, #20]	; (800feb4 <ES_WIFI_Init+0x70>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7fb f9f0 	bl	800b288 <osMutexRelease>
  return ret;
 800fea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3710      	adds	r7, #16
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	20002504 	.word	0x20002504
 800feb8:	08012510 	.word	0x08012510

0800febc <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
 800fec8:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00b      	beq.n	800fee8 <ES_WIFI_RegisterBusIO+0x2c>
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d008      	beq.n	800fee8 <ES_WIFI_RegisterBusIO+0x2c>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d005      	beq.n	800fee8 <ES_WIFI_RegisterBusIO+0x2c>
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d002      	beq.n	800fee8 <ES_WIFI_RegisterBusIO+0x2c>
 800fee2:	69fb      	ldr	r3, [r7, #28]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d101      	bne.n	800feec <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800fee8:	2302      	movs	r3, #2
 800feea:	e014      	b.n	800ff16 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	68ba      	ldr	r2, [r7, #8]
 800fef0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	687a      	ldr	r2, [r7, #4]
 800fef8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	69ba      	ldr	r2, [r7, #24]
 800ff00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	69fa      	ldr	r2, [r7, #28]
 800ff08:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	683a      	ldr	r2, [r7, #0]
 800ff10:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800ff14:	2300      	movs	r3, #0
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3714      	adds	r7, #20
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
	...

0800ff24 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b086      	sub	sp, #24
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	607a      	str	r2, [r7, #4]
 800ff30:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  
 800ff32:	4b39      	ldr	r3, [pc, #228]	; (8010018 <ES_WIFI_Connect+0xf4>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	2100      	movs	r1, #0
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7fb f957 	bl	800b1ec <osMutexWait>

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ff44:	68ba      	ldr	r2, [r7, #8]
 800ff46:	4935      	ldr	r1, [pc, #212]	; (801001c <ES_WIFI_Connect+0xf8>)
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f001 f8c3 	bl	80110d4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	68f8      	ldr	r0, [r7, #12]
 800ff5e:	f7ff fe69 	bl	800fc34 <AT_ExecuteCommand>
 800ff62:	4603      	mov	r3, r0
 800ff64:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800ff66:	7dfb      	ldrb	r3, [r7, #23]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d14b      	bne.n	8010004 <ES_WIFI_Connect+0xe0>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	492a      	ldr	r1, [pc, #168]	; (8010020 <ES_WIFI_Connect+0xfc>)
 800ff76:	4618      	mov	r0, r3
 800ff78:	f001 f8ac 	bl	80110d4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ff88:	461a      	mov	r2, r3
 800ff8a:	68f8      	ldr	r0, [r7, #12]
 800ff8c:	f7ff fe52 	bl	800fc34 <AT_ExecuteCommand>
 800ff90:	4603      	mov	r3, r0
 800ff92:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800ff94:	7dfb      	ldrb	r3, [r7, #23]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d134      	bne.n	8010004 <ES_WIFI_Connect+0xe0>
    {
      Obj->Security = SecType;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	78fa      	ldrb	r2, [r7, #3]
 800ff9e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ffa8:	78fa      	ldrb	r2, [r7, #3]
 800ffaa:	491e      	ldr	r1, [pc, #120]	; (8010024 <ES_WIFI_Connect+0x100>)
 800ffac:	4618      	mov	r0, r3
 800ffae:	f001 f891 	bl	80110d4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	68f8      	ldr	r0, [r7, #12]
 800ffc2:	f7ff fe37 	bl	800fc34 <AT_ExecuteCommand>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800ffca:	7dfb      	ldrb	r3, [r7, #23]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d119      	bne.n	8010004 <ES_WIFI_Connect+0xe0>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ffd6:	4914      	ldr	r1, [pc, #80]	; (8010028 <ES_WIFI_Connect+0x104>)
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f001 f87b 	bl	80110d4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ffea:	461a      	mov	r2, r3
 800ffec:	68f8      	ldr	r0, [r7, #12]
 800ffee:	f7ff fe21 	bl	800fc34 <AT_ExecuteCommand>
 800fff2:	4603      	mov	r3, r0
 800fff4:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800fff6:	7dfb      	ldrb	r3, [r7, #23]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d103      	bne.n	8010004 <ES_WIFI_Connect+0xe0>
        {
           Obj->NetSettings.IsConnected = 1;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2201      	movs	r2, #1
 8010000:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
 8010004:	4b04      	ldr	r3, [pc, #16]	; (8010018 <ES_WIFI_Connect+0xf4>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4618      	mov	r0, r3
 801000a:	f7fb f93d 	bl	800b288 <osMutexRelease>
  return ret;
 801000e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010010:	4618      	mov	r0, r3
 8010012:	3718      	adds	r7, #24
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	20002504 	.word	0x20002504
 801001c:	0801251c 	.word	0x0801251c
 8010020:	08012524 	.word	0x08012524
 8010024:	0801252c 	.word	0x0801252c
 8010028:	08012534 	.word	0x08012534

0801002c <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  
 8010034:	4b17      	ldr	r3, [pc, #92]	; (8010094 <ES_WIFI_GetNetworkSettings+0x68>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2100      	movs	r1, #0
 801003a:	4618      	mov	r0, r3
 801003c:	f7fb f8d6 	bl	800b1ec <osMutexWait>

  sprintf((char*)Obj->CmdData,"C?\r");
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010046:	4914      	ldr	r1, [pc, #80]	; (8010098 <ES_WIFI_GetNetworkSettings+0x6c>)
 8010048:	4618      	mov	r0, r3
 801004a:	f001 f843 	bl	80110d4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f503 7394 	add.w	r3, r3, #296	; 0x128
 801005a:	461a      	mov	r2, r3
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7ff fde9 	bl	800fc34 <AT_ExecuteCommand>
 8010062:	4603      	mov	r3, r0
 8010064:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8010066:	7bfb      	ldrb	r3, [r7, #15]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d108      	bne.n	801007e <ES_WIFI_GetNetworkSettings+0x52>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	338d      	adds	r3, #141	; 0x8d
 8010076:	4619      	mov	r1, r3
 8010078:	4610      	mov	r0, r2
 801007a:	f7ff fd2b 	bl	800fad4 <AT_ParseConnSettings>
  }
  
  UNLOCK_WIFI();
 801007e:	4b05      	ldr	r3, [pc, #20]	; (8010094 <ES_WIFI_GetNetworkSettings+0x68>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4618      	mov	r0, r3
 8010084:	f7fb f900 	bl	800b288 <osMutexRelease>
  return ret;
 8010088:	7bfb      	ldrb	r3, [r7, #15]
}
 801008a:	4618      	mov	r0, r3
 801008c:	3710      	adds	r7, #16
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	20002504 	.word	0x20002504
 8010098:	08012540 	.word	0x08012540

0801009c <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 801009c:	b590      	push	{r4, r7, lr}
 801009e:	b087      	sub	sp, #28
 80100a0:	af02      	add	r7, sp, #8
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80100a6:	2300      	movs	r3, #0
 80100a8:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();  
 80100aa:	4b57      	ldr	r3, [pc, #348]	; (8010208 <ES_WIFI_StartClientConnection+0x16c>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	2100      	movs	r1, #0
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fb f89b 	bl	800b1ec <osMutexWait>

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	785b      	ldrb	r3, [r3, #1]
 80100c0:	461a      	mov	r2, r3
 80100c2:	4952      	ldr	r1, [pc, #328]	; (801020c <ES_WIFI_StartClientConnection+0x170>)
 80100c4:	f001 f806 	bl	80110d4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80100d4:	461a      	mov	r2, r3
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f7ff fdac 	bl	800fc34 <AT_ExecuteCommand>
 80100dc:	4603      	mov	r3, r0
 80100de:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 80100e0:	7bfb      	ldrb	r3, [r7, #15]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d114      	bne.n	8010110 <ES_WIFI_StartClientConnection+0x74>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	461a      	mov	r2, r3
 80100f2:	4947      	ldr	r1, [pc, #284]	; (8010210 <ES_WIFI_StartClientConnection+0x174>)
 80100f4:	f000 ffee 	bl	80110d4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010104:	461a      	mov	r2, r3
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7ff fd94 	bl	800fc34 <AT_ExecuteCommand>
 801010c:	4603      	mov	r3, r0
 801010e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->LocalPort > 0))
 8010110:	7bfb      	ldrb	r3, [r7, #15]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d118      	bne.n	8010148 <ES_WIFI_StartClientConnection+0xac>
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	889b      	ldrh	r3, [r3, #4]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d014      	beq.n	8010148 <ES_WIFI_StartClientConnection+0xac>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	889b      	ldrh	r3, [r3, #4]
 8010128:	461a      	mov	r2, r3
 801012a:	493a      	ldr	r1, [pc, #232]	; (8010214 <ES_WIFI_StartClientConnection+0x178>)
 801012c:	f000 ffd2 	bl	80110d4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f503 7394 	add.w	r3, r3, #296	; 0x128
 801013c:	461a      	mov	r2, r3
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f7ff fd78 	bl	800fc34 <AT_ExecuteCommand>
 8010144:	4603      	mov	r3, r0
 8010146:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 8010148:	7bfb      	ldrb	r3, [r7, #15]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d118      	bne.n	8010180 <ES_WIFI_StartClientConnection+0xe4>
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	885b      	ldrh	r3, [r3, #2]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d014      	beq.n	8010180 <ES_WIFI_StartClientConnection+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f503 7094 	add.w	r0, r3, #296	; 0x128
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	885b      	ldrh	r3, [r3, #2]
 8010160:	461a      	mov	r2, r3
 8010162:	492d      	ldr	r1, [pc, #180]	; (8010218 <ES_WIFI_StartClientConnection+0x17c>)
 8010164:	f000 ffb6 	bl	80110d4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010174:	461a      	mov	r2, r3
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f7ff fd5c 	bl	800fc34 <AT_ExecuteCommand>
 801017c:	4603      	mov	r3, r0
 801017e:	73fb      	strb	r3, [r7, #15]
  }

//  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_CONNECTION))
  if ((ret == ES_WIFI_STATUS_OK))
 8010180:	7bfb      	ldrb	r3, [r7, #15]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d120      	bne.n	80101c8 <ES_WIFI_StartClientConnection+0x12c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f503 7094 	add.w	r0, r3, #296	; 0x128
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	799b      	ldrb	r3, [r3, #6]
 8010190:	4619      	mov	r1, r3
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	79db      	ldrb	r3, [r3, #7]
 8010196:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 801019c:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80101a2:	9301      	str	r3, [sp, #4]
 80101a4:	9200      	str	r2, [sp, #0]
 80101a6:	4623      	mov	r3, r4
 80101a8:	460a      	mov	r2, r1
 80101aa:	491c      	ldr	r1, [pc, #112]	; (801021c <ES_WIFI_StartClientConnection+0x180>)
 80101ac:	f000 ff92 	bl	80110d4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80101bc:	461a      	mov	r2, r3
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f7ff fd38 	bl	800fc34 <AT_ExecuteCommand>
 80101c4:	4603      	mov	r3, r0
 80101c6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80101c8:	7bfb      	ldrb	r3, [r7, #15]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d112      	bne.n	80101f4 <ES_WIFI_StartClientConnection+0x158>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80101d4:	4912      	ldr	r1, [pc, #72]	; (8010220 <ES_WIFI_StartClientConnection+0x184>)
 80101d6:	4618      	mov	r0, r3
 80101d8:	f000 ff7c 	bl	80110d4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80101e8:	461a      	mov	r2, r3
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f7ff fd22 	bl	800fc34 <AT_ExecuteCommand>
 80101f0:	4603      	mov	r3, r0
 80101f2:	73fb      	strb	r3, [r7, #15]
  }
  
  UNLOCK_WIFI();
 80101f4:	4b04      	ldr	r3, [pc, #16]	; (8010208 <ES_WIFI_StartClientConnection+0x16c>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fb f845 	bl	800b288 <osMutexRelease>
  return ret;
 80101fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010200:	4618      	mov	r0, r3
 8010202:	3714      	adds	r7, #20
 8010204:	46bd      	mov	sp, r7
 8010206:	bd90      	pop	{r4, r7, pc}
 8010208:	20002504 	.word	0x20002504
 801020c:	08012608 	.word	0x08012608
 8010210:	08012610 	.word	0x08012610
 8010214:	08012618 	.word	0x08012618
 8010218:	08012620 	.word	0x08012620
 801021c:	08012628 	.word	0x08012628
 8010220:	08012638 	.word	0x08012638

08010224 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b088      	sub	sp, #32
 8010228:	af02      	add	r7, sp, #8
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	607a      	str	r2, [r7, #4]
 801022e:	461a      	mov	r2, r3
 8010230:	460b      	mov	r3, r1
 8010232:	72fb      	strb	r3, [r7, #11]
 8010234:	4613      	mov	r3, r2
 8010236:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8010238:	2302      	movs	r3, #2
 801023a:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();
 801023c:	4b4f      	ldr	r3, [pc, #316]	; (801037c <ES_WIFI_SendData+0x158>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2100      	movs	r1, #0
 8010242:	4618      	mov	r0, r3
 8010244:	f7fa ffd2 	bl	800b1ec <osMutexWait>
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8010248:	893b      	ldrh	r3, [r7, #8]
 801024a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 801024e:	d302      	bcc.n	8010256 <ES_WIFI_SendData+0x32>
 8010250:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8010254:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8010256:	6a3b      	ldr	r3, [r7, #32]
 8010258:	893a      	ldrh	r2, [r7, #8]
 801025a:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010262:	7afa      	ldrb	r2, [r7, #11]
 8010264:	4946      	ldr	r1, [pc, #280]	; (8010380 <ES_WIFI_SendData+0x15c>)
 8010266:	4618      	mov	r0, r3
 8010268:	f000 ff34 	bl	80110d4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010278:	461a      	mov	r2, r3
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	f7ff fcda 	bl	800fc34 <AT_ExecuteCommand>
 8010280:	4603      	mov	r3, r0
 8010282:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8010284:	7dfb      	ldrb	r3, [r7, #23]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d15e      	bne.n	8010348 <ES_WIFI_SendData+0x124>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010292:	493c      	ldr	r1, [pc, #240]	; (8010384 <ES_WIFI_SendData+0x160>)
 8010294:	4618      	mov	r0, r3
 8010296:	f000 ff1d 	bl	80110d4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80102a6:	461a      	mov	r2, r3
 80102a8:	68f8      	ldr	r0, [r7, #12]
 80102aa:	f7ff fcc3 	bl	800fc34 <AT_ExecuteCommand>
 80102ae:	4603      	mov	r3, r0
 80102b0:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80102b2:	7dfb      	ldrb	r3, [r7, #23]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d13d      	bne.n	8010334 <ES_WIFI_SendData+0x110>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80102be:	893a      	ldrh	r2, [r7, #8]
 80102c0:	4931      	ldr	r1, [pc, #196]	; (8010388 <ES_WIFI_SendData+0x164>)
 80102c2:	4618      	mov	r0, r3
 80102c4:	f000 ff06 	bl	80110d4 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80102d4:	893a      	ldrh	r2, [r7, #8]
 80102d6:	9300      	str	r3, [sp, #0]
 80102d8:	4613      	mov	r3, r2
 80102da:	687a      	ldr	r2, [r7, #4]
 80102dc:	68f8      	ldr	r0, [r7, #12]
 80102de:	f7ff fd1f 	bl	800fd20 <AT_RequestSendData>
 80102e2:	4603      	mov	r3, r0
 80102e4:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 80102e6:	7dfb      	ldrb	r3, [r7, #23]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d119      	bne.n	8010320 <ES_WIFI_SendData+0xfc>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80102f2:	4926      	ldr	r1, [pc, #152]	; (801038c <ES_WIFI_SendData+0x168>)
 80102f4:	4618      	mov	r0, r3
 80102f6:	f000 ff63 	bl	80111c0 <strstr>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d02c      	beq.n	801035a <ES_WIFI_SendData+0x136>
        {
          WIFI_DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8010300:	f240 727f 	movw	r2, #1919	; 0x77f
 8010304:	4922      	ldr	r1, [pc, #136]	; (8010390 <ES_WIFI_SendData+0x16c>)
 8010306:	4823      	ldr	r0, [pc, #140]	; (8010394 <ES_WIFI_SendData+0x170>)
 8010308:	f000 fddc 	bl	8010ec4 <iprintf>
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010312:	4619      	mov	r1, r3
 8010314:	4820      	ldr	r0, [pc, #128]	; (8010398 <ES_WIFI_SendData+0x174>)
 8010316:	f000 fdd5 	bl	8010ec4 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 801031a:	2302      	movs	r3, #2
 801031c:	75fb      	strb	r3, [r7, #23]
 801031e:	e01c      	b.n	801035a <ES_WIFI_SendData+0x136>
        }
      }
      else
      {
        WIFI_DEBUG("Send Data command failed\n");
 8010320:	f240 7285 	movw	r2, #1925	; 0x785
 8010324:	491a      	ldr	r1, [pc, #104]	; (8010390 <ES_WIFI_SendData+0x16c>)
 8010326:	481b      	ldr	r0, [pc, #108]	; (8010394 <ES_WIFI_SendData+0x170>)
 8010328:	f000 fdcc 	bl	8010ec4 <iprintf>
 801032c:	481b      	ldr	r0, [pc, #108]	; (801039c <ES_WIFI_SendData+0x178>)
 801032e:	f000 fe4f 	bl	8010fd0 <puts>
 8010332:	e012      	b.n	801035a <ES_WIFI_SendData+0x136>
      }
    }
    else
    {
      WIFI_DEBUG("S2 command failed\n");
 8010334:	f240 728a 	movw	r2, #1930	; 0x78a
 8010338:	4915      	ldr	r1, [pc, #84]	; (8010390 <ES_WIFI_SendData+0x16c>)
 801033a:	4816      	ldr	r0, [pc, #88]	; (8010394 <ES_WIFI_SendData+0x170>)
 801033c:	f000 fdc2 	bl	8010ec4 <iprintf>
 8010340:	4817      	ldr	r0, [pc, #92]	; (80103a0 <ES_WIFI_SendData+0x17c>)
 8010342:	f000 fe45 	bl	8010fd0 <puts>
 8010346:	e008      	b.n	801035a <ES_WIFI_SendData+0x136>
    }
  }
  else
  {
   WIFI_DEBUG("P0 command failed\n");
 8010348:	f240 728f 	movw	r2, #1935	; 0x78f
 801034c:	4910      	ldr	r1, [pc, #64]	; (8010390 <ES_WIFI_SendData+0x16c>)
 801034e:	4811      	ldr	r0, [pc, #68]	; (8010394 <ES_WIFI_SendData+0x170>)
 8010350:	f000 fdb8 	bl	8010ec4 <iprintf>
 8010354:	4813      	ldr	r0, [pc, #76]	; (80103a4 <ES_WIFI_SendData+0x180>)
 8010356:	f000 fe3b 	bl	8010fd0 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 801035a:	7dfb      	ldrb	r3, [r7, #23]
 801035c:	2b02      	cmp	r3, #2
 801035e:	d102      	bne.n	8010366 <ES_WIFI_SendData+0x142>
  {
    *SentLen = 0;
 8010360:	6a3b      	ldr	r3, [r7, #32]
 8010362:	2200      	movs	r2, #0
 8010364:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
 8010366:	4b05      	ldr	r3, [pc, #20]	; (801037c <ES_WIFI_SendData+0x158>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4618      	mov	r0, r3
 801036c:	f7fa ff8c 	bl	800b288 <osMutexRelease>
  return ret;
 8010370:	7dfb      	ldrb	r3, [r7, #23]
}
 8010372:	4618      	mov	r0, r3
 8010374:	3718      	adds	r7, #24
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	20002504 	.word	0x20002504
 8010380:	08012608 	.word	0x08012608
 8010384:	080127ac 	.word	0x080127ac
 8010388:	080127b4 	.word	0x080127b4
 801038c:	080127c0 	.word	0x080127c0
 8010390:	08012690 	.word	0x08012690
 8010394:	080126a8 	.word	0x080126a8
 8010398:	080127c8 	.word	0x080127c8
 801039c:	080127e4 	.word	0x080127e4
 80103a0:	08012800 	.word	0x08012800
 80103a4:	08012814 	.word	0x08012814

080103a8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	4603      	mov	r3, r0
 80103b0:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80103b2:	2300      	movs	r3, #0
 80103b4:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 80103b6:	88fb      	ldrh	r3, [r7, #6]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d135      	bne.n	8010428 <SPI_WIFI_Init+0x80>
  {

#ifdef WIFI_USE_CMSIS_OS  
    es_wifi_mutex = osMutexCreate(osMutex(es_wifi_mutex));
 80103bc:	481f      	ldr	r0, [pc, #124]	; (801043c <SPI_WIFI_Init+0x94>)
 80103be:	f7fa fefc 	bl	800b1ba <osMutexCreate>
 80103c2:	4603      	mov	r3, r0
 80103c4:	4a1e      	ldr	r2, [pc, #120]	; (8010440 <SPI_WIFI_Init+0x98>)
 80103c6:	6013      	str	r3, [r2, #0]
    spi_mutex = osMutexCreate(osMutex(spi_mutex));
 80103c8:	481e      	ldr	r0, [pc, #120]	; (8010444 <SPI_WIFI_Init+0x9c>)
 80103ca:	f7fa fef6 	bl	800b1ba <osMutexCreate>
 80103ce:	4603      	mov	r3, r0
 80103d0:	4a1d      	ldr	r2, [pc, #116]	; (8010448 <SPI_WIFI_Init+0xa0>)
 80103d2:	6013      	str	r3, [r2, #0]
    spi_rx_sem = osSemaphoreCreate(osSemaphore(spi_rx_sem) , 1 );
 80103d4:	2101      	movs	r1, #1
 80103d6:	481d      	ldr	r0, [pc, #116]	; (801044c <SPI_WIFI_Init+0xa4>)
 80103d8:	f7fa ff9f 	bl	800b31a <osSemaphoreCreate>
 80103dc:	4603      	mov	r3, r0
 80103de:	4a1c      	ldr	r2, [pc, #112]	; (8010450 <SPI_WIFI_Init+0xa8>)
 80103e0:	6013      	str	r3, [r2, #0]
    spi_tx_sem = osSemaphoreCreate(osSemaphore(spi_tx_sem) , 1 );
 80103e2:	2101      	movs	r1, #1
 80103e4:	481b      	ldr	r0, [pc, #108]	; (8010454 <SPI_WIFI_Init+0xac>)
 80103e6:	f7fa ff98 	bl	800b31a <osSemaphoreCreate>
 80103ea:	4603      	mov	r3, r0
 80103ec:	4a1a      	ldr	r2, [pc, #104]	; (8010458 <SPI_WIFI_Init+0xb0>)
 80103ee:	6013      	str	r3, [r2, #0]
    cmddata_rdy_rising_sem = osSemaphoreCreate(osSemaphore(cmddata_rdy_rising_sem) , 1 );
 80103f0:	2101      	movs	r1, #1
 80103f2:	481a      	ldr	r0, [pc, #104]	; (801045c <SPI_WIFI_Init+0xb4>)
 80103f4:	f7fa ff91 	bl	800b31a <osSemaphoreCreate>
 80103f8:	4603      	mov	r3, r0
 80103fa:	4a19      	ldr	r2, [pc, #100]	; (8010460 <SPI_WIFI_Init+0xb8>)
 80103fc:	6013      	str	r3, [r2, #0]
    SEM_WAIT(cmddata_rdy_rising_sem, 1); 
 80103fe:	4b18      	ldr	r3, [pc, #96]	; (8010460 <SPI_WIFI_Init+0xb8>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	2101      	movs	r1, #1
 8010404:	4618      	mov	r0, r3
 8010406:	f7fa ffbb 	bl	800b380 <osSemaphoreWait>
    SEM_WAIT(spi_rx_sem, 1); 
 801040a:	4b11      	ldr	r3, [pc, #68]	; (8010450 <SPI_WIFI_Init+0xa8>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2101      	movs	r1, #1
 8010410:	4618      	mov	r0, r3
 8010412:	f7fa ffb5 	bl	800b380 <osSemaphoreWait>
    SEM_WAIT(spi_tx_sem, 1); 
 8010416:	4b10      	ldr	r3, [pc, #64]	; (8010458 <SPI_WIFI_Init+0xb0>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2101      	movs	r1, #1
 801041c:	4618      	mov	r0, r3
 801041e:	f7fa ffaf 	bl	800b380 <osSemaphoreWait>
#endif
    // first call used for calibration
    SPI_WIFI_DelayUs(10);
 8010422:	200a      	movs	r0, #10
 8010424:	f000 fa36 	bl	8010894 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8010428:	f000 f81c 	bl	8010464 <SPI_WIFI_ResetModule>
 801042c:	4603      	mov	r3, r0
 801042e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8010430:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010434:	4618      	mov	r0, r3
 8010436:	3710      	adds	r7, #16
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}
 801043c:	08012978 	.word	0x08012978
 8010440:	20002504 	.word	0x20002504
 8010444:	08012980 	.word	0x08012980
 8010448:	20002508 	.word	0x20002508
 801044c:	08012988 	.word	0x08012988
 8010450:	2000250c 	.word	0x2000250c
 8010454:	08012990 	.word	0x08012990
 8010458:	20002510 	.word	0x20002510
 801045c:	08012998 	.word	0x08012998
 8010460:	20002514 	.word	0x20002514

08010464 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 801046a:	f7f3 f979 	bl	8003760 <HAL_GetTick>
 801046e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8010470:	2300      	movs	r3, #0
 8010472:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8010474:	2200      	movs	r2, #0
 8010476:	f44f 7180 	mov.w	r1, #256	; 0x100
 801047a:	4830      	ldr	r0, [pc, #192]	; (801053c <SPI_WIFI_ResetModule+0xd8>)
 801047c:	f7f4 f94e 	bl	800471c <HAL_GPIO_WritePin>
 8010480:	200a      	movs	r0, #10
 8010482:	f7f3 f979 	bl	8003778 <HAL_Delay>
 8010486:	2201      	movs	r2, #1
 8010488:	f44f 7180 	mov.w	r1, #256	; 0x100
 801048c:	482b      	ldr	r0, [pc, #172]	; (801053c <SPI_WIFI_ResetModule+0xd8>)
 801048e:	f7f4 f945 	bl	800471c <HAL_GPIO_WritePin>
 8010492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010496:	f7f3 f96f 	bl	8003778 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 801049a:	2200      	movs	r2, #0
 801049c:	2101      	movs	r1, #1
 801049e:	4827      	ldr	r0, [pc, #156]	; (801053c <SPI_WIFI_ResetModule+0xd8>)
 80104a0:	f7f4 f93c 	bl	800471c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80104a4:	200f      	movs	r0, #15
 80104a6:	f000 f9f5 	bl	8010894 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 80104aa:	e020      	b.n	80104ee <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi3 , &Prompt[count], 1, 0xFFFF);
 80104ac:	7bfb      	ldrb	r3, [r7, #15]
 80104ae:	463a      	mov	r2, r7
 80104b0:	18d1      	adds	r1, r2, r3
 80104b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104b6:	2201      	movs	r2, #1
 80104b8:	4821      	ldr	r0, [pc, #132]	; (8010540 <SPI_WIFI_ResetModule+0xdc>)
 80104ba:	f7f8 f94c 	bl	8008756 <HAL_SPI_Receive>
 80104be:	4603      	mov	r3, r0
 80104c0:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80104c2:	7bfb      	ldrb	r3, [r7, #15]
 80104c4:	3302      	adds	r3, #2
 80104c6:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80104c8:	f7f3 f94a 	bl	8003760 <HAL_GetTick>
 80104cc:	4602      	mov	r2, r0
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	1ad3      	subs	r3, r2, r3
 80104d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104d6:	d202      	bcs.n	80104de <SPI_WIFI_ResetModule+0x7a>
 80104d8:	79fb      	ldrb	r3, [r7, #7]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d007      	beq.n	80104ee <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS(); 
 80104de:	2201      	movs	r2, #1
 80104e0:	2101      	movs	r1, #1
 80104e2:	4816      	ldr	r0, [pc, #88]	; (801053c <SPI_WIFI_ResetModule+0xd8>)
 80104e4:	f7f4 f91a 	bl	800471c <HAL_GPIO_WritePin>
      return -1;
 80104e8:	f04f 33ff 	mov.w	r3, #4294967295
 80104ec:	e021      	b.n	8010532 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 80104ee:	2102      	movs	r1, #2
 80104f0:	4812      	ldr	r0, [pc, #72]	; (801053c <SPI_WIFI_ResetModule+0xd8>)
 80104f2:	f7f4 f8fb 	bl	80046ec <HAL_GPIO_ReadPin>
 80104f6:	4603      	mov	r3, r0
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	d0d7      	beq.n	80104ac <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS(); 
 80104fc:	2201      	movs	r2, #1
 80104fe:	2101      	movs	r1, #1
 8010500:	480e      	ldr	r0, [pc, #56]	; (801053c <SPI_WIFI_ResetModule+0xd8>)
 8010502:	f7f4 f90b 	bl	800471c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8010506:	783b      	ldrb	r3, [r7, #0]
 8010508:	2b15      	cmp	r3, #21
 801050a:	d10e      	bne.n	801052a <SPI_WIFI_ResetModule+0xc6>
 801050c:	787b      	ldrb	r3, [r7, #1]
 801050e:	2b15      	cmp	r3, #21
 8010510:	d10b      	bne.n	801052a <SPI_WIFI_ResetModule+0xc6>
 8010512:	78bb      	ldrb	r3, [r7, #2]
 8010514:	2b0d      	cmp	r3, #13
 8010516:	d108      	bne.n	801052a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8010518:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 801051a:	2b0a      	cmp	r3, #10
 801051c:	d105      	bne.n	801052a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 801051e:	793b      	ldrb	r3, [r7, #4]
 8010520:	2b3e      	cmp	r3, #62	; 0x3e
 8010522:	d102      	bne.n	801052a <SPI_WIFI_ResetModule+0xc6>
 8010524:	797b      	ldrb	r3, [r7, #5]
 8010526:	2b20      	cmp	r3, #32
 8010528:	d002      	beq.n	8010530 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 801052a:	f04f 33ff 	mov.w	r3, #4294967295
 801052e:	e000      	b.n	8010532 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8010530:	2300      	movs	r3, #0
}
 8010532:	4618      	mov	r0, r3
 8010534:	3710      	adds	r7, #16
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	48001000 	.word	0x48001000
 8010540:	2000043c 	.word	0x2000043c

08010544 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi3 );
 8010548:	480f      	ldr	r0, [pc, #60]	; (8010588 <SPI_WIFI_DeInit+0x44>)
 801054a:	f7f8 f8dc 	bl	8008706 <HAL_SPI_DeInit>
#ifdef  WIFI_USE_CMSIS_OS
  osMutexDelete(spi_mutex);
 801054e:	4b0f      	ldr	r3, [pc, #60]	; (801058c <SPI_WIFI_DeInit+0x48>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	4618      	mov	r0, r3
 8010554:	f7fa fece 	bl	800b2f4 <osMutexDelete>
  osMutexDelete(es_wifi_mutex);
 8010558:	4b0d      	ldr	r3, [pc, #52]	; (8010590 <SPI_WIFI_DeInit+0x4c>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4618      	mov	r0, r3
 801055e:	f7fa fec9 	bl	800b2f4 <osMutexDelete>
  osSemaphoreDelete(spi_tx_sem);
 8010562:	4b0c      	ldr	r3, [pc, #48]	; (8010594 <SPI_WIFI_DeInit+0x50>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	4618      	mov	r0, r3
 8010568:	f7fa ff8e 	bl	800b488 <osSemaphoreDelete>
  osSemaphoreDelete(spi_rx_sem);
 801056c:	4b0a      	ldr	r3, [pc, #40]	; (8010598 <SPI_WIFI_DeInit+0x54>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	4618      	mov	r0, r3
 8010572:	f7fa ff89 	bl	800b488 <osSemaphoreDelete>
  osSemaphoreDelete(cmddata_rdy_rising_sem);
 8010576:	4b09      	ldr	r3, [pc, #36]	; (801059c <SPI_WIFI_DeInit+0x58>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	4618      	mov	r0, r3
 801057c:	f7fa ff84 	bl	800b488 <osSemaphoreDelete>
#endif
  return 0;
 8010580:	2300      	movs	r3, #0
}
 8010582:	4618      	mov	r0, r3
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	2000043c 	.word	0x2000043c
 801058c:	20002508 	.word	0x20002508
 8010590:	20002504 	.word	0x20002504
 8010594:	20002510 	.word	0x20002510
 8010598:	2000250c 	.word	0x2000250c
 801059c:	20002514 	.word	0x20002514

080105a0 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80105a8:	f7f3 f8da 	bl	8003760 <HAL_GetTick>
 80105ac:	4603      	mov	r3, r0
 80105ae:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 80105b0:	e00a      	b.n	80105c8 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80105b2:	f7f3 f8d5 	bl	8003760 <HAL_GetTick>
 80105b6:	4602      	mov	r2, r0
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	1ad2      	subs	r2, r2, r3
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d902      	bls.n	80105c8 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 80105c2:	f04f 33ff 	mov.w	r3, #4294967295
 80105c6:	e007      	b.n	80105d8 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 80105c8:	2102      	movs	r1, #2
 80105ca:	4805      	ldr	r0, [pc, #20]	; (80105e0 <wait_cmddata_rdy_high+0x40>)
 80105cc:	f7f4 f88e 	bl	80046ec <HAL_GPIO_ReadPin>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d1ed      	bne.n	80105b2 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 80105d6:	2300      	movs	r3, #0
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3710      	adds	r7, #16
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}
 80105e0:	48001000 	.word	0x48001000

080105e4 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b082      	sub	sp, #8
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout); 
 80105ec:	4b05      	ldr	r3, [pc, #20]	; (8010604 <wait_cmddata_rdy_rising_event+0x20>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	4611      	mov	r1, r2
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7fa fec3 	bl	800b380 <osSemaphoreWait>
 80105fa:	4603      	mov	r3, r0
      return -1;
    }
  }
  return 0; 
#endif
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3708      	adds	r7, #8
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	20002514 	.word	0x20002514

08010608 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout); 
 8010610:	4b05      	ldr	r3, [pc, #20]	; (8010628 <wait_spi_rx_event+0x20>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	687a      	ldr	r2, [r7, #4]
 8010616:	4611      	mov	r1, r2
 8010618:	4618      	mov	r0, r3
 801061a:	f7fa feb1 	bl	800b380 <osSemaphoreWait>
 801061e:	4603      	mov	r3, r0
      return -1;
    }
  }
  return 0; 
#endif
}
 8010620:	4618      	mov	r0, r3
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}
 8010628:	2000250c 	.word	0x2000250c

0801062c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout); 
 8010634:	4b05      	ldr	r3, [pc, #20]	; (801064c <wait_spi_tx_event+0x20>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	687a      	ldr	r2, [r7, #4]
 801063a:	4611      	mov	r1, r2
 801063c:	4618      	mov	r0, r3
 801063e:	f7fa fe9f 	bl	800b380 <osSemaphoreWait>
 8010642:	4603      	mov	r3, r0
      return -1;
    }
  }
  return 0; 
#endif
}
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	20002510 	.word	0x20002510

08010650 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	af00      	add	r7, sp, #0
 8010656:	60f8      	str	r0, [r7, #12]
 8010658:	460b      	mov	r3, r1
 801065a:	607a      	str	r2, [r7, #4]
 801065c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 801065e:	2300      	movs	r3, #0
 8010660:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS(); 
 8010662:	2201      	movs	r2, #1
 8010664:	2101      	movs	r1, #1
 8010666:	4841      	ldr	r0, [pc, #260]	; (801076c <SPI_WIFI_ReceiveData+0x11c>)
 8010668:	f7f4 f858 	bl	800471c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
 801066c:	4b40      	ldr	r3, [pc, #256]	; (8010770 <SPI_WIFI_ReceiveData+0x120>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4618      	mov	r0, r3
 8010672:	f7fa fe09 	bl	800b288 <osMutexRelease>
  SPI_WIFI_DelayUs(3);
 8010676:	2003      	movs	r0, #3
 8010678:	f000 f90c 	bl	8010894 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	4618      	mov	r0, r3
 8010680:	f7ff ffb0 	bl	80105e4 <wait_cmddata_rdy_rising_event>
 8010684:	4603      	mov	r3, r0
 8010686:	2b00      	cmp	r3, #0
 8010688:	da02      	bge.n	8010690 <SPI_WIFI_ReceiveData+0x40>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 801068a:	f06f 0302 	mvn.w	r3, #2
 801068e:	e069      	b.n	8010764 <SPI_WIFI_ReceiveData+0x114>
  }

  LOCK_SPI();  
 8010690:	4b37      	ldr	r3, [pc, #220]	; (8010770 <SPI_WIFI_ReceiveData+0x120>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2100      	movs	r1, #0
 8010696:	4618      	mov	r0, r3
 8010698:	f7fa fda8 	bl	800b1ec <osMutexWait>
  WIFI_ENABLE_NSS(); 
 801069c:	2200      	movs	r2, #0
 801069e:	2101      	movs	r1, #1
 80106a0:	4832      	ldr	r0, [pc, #200]	; (801076c <SPI_WIFI_ReceiveData+0x11c>)
 80106a2:	f7f4 f83b 	bl	800471c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80106a6:	200f      	movs	r0, #15
 80106a8:	f000 f8f4 	bl	8010894 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80106ac:	e047      	b.n	801073e <SPI_WIFI_ReceiveData+0xee>
  {
    if((length < len) || (!len))
 80106ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80106b2:	897b      	ldrh	r3, [r7, #10]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	db02      	blt.n	80106be <SPI_WIFI_ReceiveData+0x6e>
 80106b8:	897b      	ldrh	r3, [r7, #10]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d146      	bne.n	801074c <SPI_WIFI_ReceiveData+0xfc>
    {
      spi_rx_event=1;
 80106be:	4b2d      	ldr	r3, [pc, #180]	; (8010774 <SPI_WIFI_ReceiveData+0x124>)
 80106c0:	2201      	movs	r2, #1
 80106c2:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi3, tmp, 1) != HAL_OK) {
 80106c4:	f107 0314 	add.w	r3, r7, #20
 80106c8:	2201      	movs	r2, #1
 80106ca:	4619      	mov	r1, r3
 80106cc:	482a      	ldr	r0, [pc, #168]	; (8010778 <SPI_WIFI_ReceiveData+0x128>)
 80106ce:	f7f8 fc13 	bl	8008ef8 <HAL_SPI_Receive_IT>
 80106d2:	4603      	mov	r3, r0
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00c      	beq.n	80106f2 <SPI_WIFI_ReceiveData+0xa2>
        WIFI_DISABLE_NSS();
 80106d8:	2201      	movs	r2, #1
 80106da:	2101      	movs	r1, #1
 80106dc:	4823      	ldr	r0, [pc, #140]	; (801076c <SPI_WIFI_ReceiveData+0x11c>)
 80106de:	f7f4 f81d 	bl	800471c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
 80106e2:	4b23      	ldr	r3, [pc, #140]	; (8010770 <SPI_WIFI_ReceiveData+0x120>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fa fdce 	bl	800b288 <osMutexRelease>
        return ES_WIFI_ERROR_SPI_FAILED;
 80106ec:	f04f 33ff 	mov.w	r3, #4294967295
 80106f0:	e038      	b.n	8010764 <SPI_WIFI_ReceiveData+0x114>
      }
  
      wait_spi_rx_event(timeout);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7ff ff87 	bl	8010608 <wait_spi_rx_event>

      pData[0] = tmp[0];
 80106fa:	7d3a      	ldrb	r2, [r7, #20]
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	3301      	adds	r3, #1
 8010704:	7d7a      	ldrb	r2, [r7, #21]
 8010706:	701a      	strb	r2, [r3, #0]
      length += 2;
 8010708:	8afb      	ldrh	r3, [r7, #22]
 801070a:	3302      	adds	r3, #2
 801070c:	b29b      	uxth	r3, r3
 801070e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	3302      	adds	r3, #2
 8010714:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8010716:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801071a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 801071e:	db0e      	blt.n	801073e <SPI_WIFI_ReceiveData+0xee>
        WIFI_DISABLE_NSS();
 8010720:	2201      	movs	r2, #1
 8010722:	2101      	movs	r1, #1
 8010724:	4811      	ldr	r0, [pc, #68]	; (801076c <SPI_WIFI_ReceiveData+0x11c>)
 8010726:	f7f3 fff9 	bl	800471c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();    
 801072a:	f7ff fe9b 	bl	8010464 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
 801072e:	4b10      	ldr	r3, [pc, #64]	; (8010770 <SPI_WIFI_ReceiveData+0x120>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	4618      	mov	r0, r3
 8010734:	f7fa fda8 	bl	800b288 <osMutexRelease>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8010738:	f06f 0303 	mvn.w	r3, #3
 801073c:	e012      	b.n	8010764 <SPI_WIFI_ReceiveData+0x114>
  while (WIFI_IS_CMDDATA_READY())
 801073e:	2102      	movs	r1, #2
 8010740:	480a      	ldr	r0, [pc, #40]	; (801076c <SPI_WIFI_ReceiveData+0x11c>)
 8010742:	f7f3 ffd3 	bl	80046ec <HAL_GPIO_ReadPin>
 8010746:	4603      	mov	r3, r0
 8010748:	2b01      	cmp	r3, #1
 801074a:	d0b0      	beq.n	80106ae <SPI_WIFI_ReceiveData+0x5e>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS(); 
 801074c:	2201      	movs	r2, #1
 801074e:	2101      	movs	r1, #1
 8010750:	4806      	ldr	r0, [pc, #24]	; (801076c <SPI_WIFI_ReceiveData+0x11c>)
 8010752:	f7f3 ffe3 	bl	800471c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
 8010756:	4b06      	ldr	r3, [pc, #24]	; (8010770 <SPI_WIFI_ReceiveData+0x120>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	4618      	mov	r0, r3
 801075c:	f7fa fd94 	bl	800b288 <osMutexRelease>
  return length;
 8010760:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8010764:	4618      	mov	r0, r3
 8010766:	3718      	adds	r7, #24
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	48001000 	.word	0x48001000
 8010770:	20002508 	.word	0x20002508
 8010774:	200024f8 	.word	0x200024f8
 8010778:	2000043c 	.word	0x2000043c

0801077c <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b086      	sub	sp, #24
 8010780:	af00      	add	r7, sp, #0
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	460b      	mov	r3, r1
 8010786:	607a      	str	r2, [r7, #4]
 8010788:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	4618      	mov	r0, r3
 801078e:	f7ff ff07 	bl	80105a0 <wait_cmddata_rdy_high>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	da02      	bge.n	801079e <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8010798:	f04f 33ff 	mov.w	r3, #4294967295
 801079c:	e05f      	b.n	801085e <SPI_WIFI_SendData+0xe2>
  }
    
  // arm to detect rising event
  cmddata_rdy_rising_event=1;
 801079e:	4b32      	ldr	r3, [pc, #200]	; (8010868 <SPI_WIFI_SendData+0xec>)
 80107a0:	2201      	movs	r2, #1
 80107a2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
 80107a4:	4b31      	ldr	r3, [pc, #196]	; (801086c <SPI_WIFI_SendData+0xf0>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2100      	movs	r1, #0
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fa fd1e 	bl	800b1ec <osMutexWait>
  WIFI_ENABLE_NSS();
 80107b0:	2200      	movs	r2, #0
 80107b2:	2101      	movs	r1, #1
 80107b4:	482e      	ldr	r0, [pc, #184]	; (8010870 <SPI_WIFI_SendData+0xf4>)
 80107b6:	f7f3 ffb1 	bl	800471c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80107ba:	200f      	movs	r0, #15
 80107bc:	f000 f86a 	bl	8010894 <SPI_WIFI_DelayUs>
  if (len > 1)
 80107c0:	897b      	ldrh	r3, [r7, #10]
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d91e      	bls.n	8010804 <SPI_WIFI_SendData+0x88>
  {
    spi_tx_event=1;
 80107c6:	4b2b      	ldr	r3, [pc, #172]	; (8010874 <SPI_WIFI_SendData+0xf8>)
 80107c8:	2201      	movs	r2, #1
 80107ca:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, (uint8_t *)pdata , len/2) != HAL_OK)
 80107cc:	897b      	ldrh	r3, [r7, #10]
 80107ce:	085b      	lsrs	r3, r3, #1
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	461a      	mov	r2, r3
 80107d4:	68f9      	ldr	r1, [r7, #12]
 80107d6:	4828      	ldr	r0, [pc, #160]	; (8010878 <SPI_WIFI_SendData+0xfc>)
 80107d8:	f7f8 fb00 	bl	8008ddc <HAL_SPI_Transmit_IT>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d00c      	beq.n	80107fc <SPI_WIFI_SendData+0x80>
    {
      WIFI_DISABLE_NSS();
 80107e2:	2201      	movs	r2, #1
 80107e4:	2101      	movs	r1, #1
 80107e6:	4822      	ldr	r0, [pc, #136]	; (8010870 <SPI_WIFI_SendData+0xf4>)
 80107e8:	f7f3 ff98 	bl	800471c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
 80107ec:	4b1f      	ldr	r3, [pc, #124]	; (801086c <SPI_WIFI_SendData+0xf0>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7fa fd49 	bl	800b288 <osMutexRelease>
      return ES_WIFI_ERROR_SPI_FAILED;
 80107f6:	f04f 33ff 	mov.w	r3, #4294967295
 80107fa:	e030      	b.n	801085e <SPI_WIFI_SendData+0xe2>
    }
    wait_spi_tx_event(timeout);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	4618      	mov	r0, r3
 8010800:	f7ff ff14 	bl	801062c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8010804:	897b      	ldrh	r3, [r7, #10]
 8010806:	f003 0301 	and.w	r3, r3, #1
 801080a:	2b00      	cmp	r3, #0
 801080c:	d025      	beq.n	801085a <SPI_WIFI_SendData+0xde>
  {
    Padding[0] = pdata[len-1];
 801080e:	897b      	ldrh	r3, [r7, #10]
 8010810:	3b01      	subs	r3, #1
 8010812:	68fa      	ldr	r2, [r7, #12]
 8010814:	4413      	add	r3, r2
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 801081a:	230a      	movs	r3, #10
 801081c:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 801081e:	4b15      	ldr	r3, [pc, #84]	; (8010874 <SPI_WIFI_SendData+0xf8>)
 8010820:	2201      	movs	r2, #1
 8010822:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, Padding, 1) != HAL_OK)
 8010824:	f107 0314 	add.w	r3, r7, #20
 8010828:	2201      	movs	r2, #1
 801082a:	4619      	mov	r1, r3
 801082c:	4812      	ldr	r0, [pc, #72]	; (8010878 <SPI_WIFI_SendData+0xfc>)
 801082e:	f7f8 fad5 	bl	8008ddc <HAL_SPI_Transmit_IT>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00c      	beq.n	8010852 <SPI_WIFI_SendData+0xd6>
    {
      WIFI_DISABLE_NSS();
 8010838:	2201      	movs	r2, #1
 801083a:	2101      	movs	r1, #1
 801083c:	480c      	ldr	r0, [pc, #48]	; (8010870 <SPI_WIFI_SendData+0xf4>)
 801083e:	f7f3 ff6d 	bl	800471c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
 8010842:	4b0a      	ldr	r3, [pc, #40]	; (801086c <SPI_WIFI_SendData+0xf0>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4618      	mov	r0, r3
 8010848:	f7fa fd1e 	bl	800b288 <osMutexRelease>
      return ES_WIFI_ERROR_SPI_FAILED;
 801084c:	f04f 33ff 	mov.w	r3, #4294967295
 8010850:	e005      	b.n	801085e <SPI_WIFI_SendData+0xe2>
    }  
    wait_spi_tx_event(timeout);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	4618      	mov	r0, r3
 8010856:	f7ff fee9 	bl	801062c <wait_spi_tx_event>
    
  }
  return len;
 801085a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3718      	adds	r7, #24
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	20002500 	.word	0x20002500
 801086c:	20002508 	.word	0x20002508
 8010870:	48001000 	.word	0x48001000
 8010874:	200024fc 	.word	0x200024fc
 8010878:	2000043c 	.word	0x2000043c

0801087c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f7f2 ff77 	bl	8003778 <HAL_Delay>
}
 801088a:	bf00      	nop
 801088c:	3708      	adds	r7, #8
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}
	...

08010894 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  uint32_t       loop_per_us;
  static  uint32_t cycle_per_loop=0;

  // calibration happen on first call for a duration of 1 ms * nbcycle per loop 
  // 10 cycle for STM32L4
  if (cycle_per_loop == 0 ) 
 801089c:	4b1f      	ldr	r3, [pc, #124]	; (801091c <SPI_WIFI_DelayUs+0x88>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d120      	bne.n	80108e6 <SPI_WIFI_DelayUs+0x52>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000L);
 80108a4:	4b1e      	ldr	r3, [pc, #120]	; (8010920 <SPI_WIFI_DelayUs+0x8c>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	4a1e      	ldr	r2, [pc, #120]	; (8010924 <SPI_WIFI_DelayUs+0x90>)
 80108aa:	fba2 2303 	umull	r2, r3, r2, r3
 80108ae:	099b      	lsrs	r3, r3, #6
 80108b0:	617b      	str	r3, [r7, #20]
     uint32_t   t; 
     ct=cycle_per_ms;
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	60bb      	str	r3, [r7, #8]
     t=HAL_GetTick();
 80108b6:	f7f2 ff53 	bl	8003760 <HAL_GetTick>
 80108ba:	6138      	str	r0, [r7, #16]
     while(ct) ct--;
 80108bc:	e002      	b.n	80108c4 <SPI_WIFI_DelayUs+0x30>
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	3b01      	subs	r3, #1
 80108c2:	60bb      	str	r3, [r7, #8]
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d1f9      	bne.n	80108be <SPI_WIFI_DelayUs+0x2a>
     cycle_per_loop=HAL_GetTick()-t;  
 80108ca:	f7f2 ff49 	bl	8003760 <HAL_GetTick>
 80108ce:	4602      	mov	r2, r0
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	4a11      	ldr	r2, [pc, #68]	; (801091c <SPI_WIFI_DelayUs+0x88>)
 80108d6:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop==0) cycle_per_loop=1;
 80108d8:	4b10      	ldr	r3, [pc, #64]	; (801091c <SPI_WIFI_DelayUs+0x88>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d102      	bne.n	80108e6 <SPI_WIFI_DelayUs+0x52>
 80108e0:	4b0e      	ldr	r3, [pc, #56]	; (801091c <SPI_WIFI_DelayUs+0x88>)
 80108e2:	2201      	movs	r2, #1
 80108e4:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000/cycle_per_loop;
 80108e6:	4b0e      	ldr	r3, [pc, #56]	; (8010920 <SPI_WIFI_DelayUs+0x8c>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	4a0f      	ldr	r2, [pc, #60]	; (8010928 <SPI_WIFI_DelayUs+0x94>)
 80108ec:	fba2 2303 	umull	r2, r3, r2, r3
 80108f0:	0c9a      	lsrs	r2, r3, #18
 80108f2:	4b0a      	ldr	r3, [pc, #40]	; (801091c <SPI_WIFI_DelayUs+0x88>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80108fa:	60fb      	str	r3, [r7, #12]
  ct = n * loop_per_us;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	68fa      	ldr	r2, [r7, #12]
 8010900:	fb02 f303 	mul.w	r3, r2, r3
 8010904:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8010906:	e002      	b.n	801090e <SPI_WIFI_DelayUs+0x7a>
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	3b01      	subs	r3, #1
 801090c:	60bb      	str	r3, [r7, #8]
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d1f9      	bne.n	8010908 <SPI_WIFI_DelayUs+0x74>
  return;
 8010914:	bf00      	nop
}
 8010916:	3718      	adds	r7, #24
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	20002518 	.word	0x20002518
 8010920:	20000020 	.word	0x20000020
 8010924:	10624dd3 	.word	0x10624dd3
 8010928:	431bde83 	.word	0x431bde83

0801092c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8010934:	4b07      	ldr	r3, [pc, #28]	; (8010954 <HAL_SPI_RxCpltCallback+0x28>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d007      	beq.n	801094c <HAL_SPI_RxCpltCallback+0x20>
  {
    SEM_SIGNAL(spi_rx_sem);
 801093c:	4b06      	ldr	r3, [pc, #24]	; (8010958 <HAL_SPI_RxCpltCallback+0x2c>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4618      	mov	r0, r3
 8010942:	f7fa fd6b 	bl	800b41c <osSemaphoreRelease>
    spi_rx_event=0;
 8010946:	4b03      	ldr	r3, [pc, #12]	; (8010954 <HAL_SPI_RxCpltCallback+0x28>)
 8010948:	2200      	movs	r2, #0
 801094a:	601a      	str	r2, [r3, #0]
  }
}
 801094c:	bf00      	nop
 801094e:	3708      	adds	r7, #8
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	200024f8 	.word	0x200024f8
 8010958:	2000250c 	.word	0x2000250c

0801095c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8010964:	4b07      	ldr	r3, [pc, #28]	; (8010984 <HAL_SPI_TxCpltCallback+0x28>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d007      	beq.n	801097c <HAL_SPI_TxCpltCallback+0x20>
  {
    SEM_SIGNAL(spi_tx_sem);
 801096c:	4b06      	ldr	r3, [pc, #24]	; (8010988 <HAL_SPI_TxCpltCallback+0x2c>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4618      	mov	r0, r3
 8010972:	f7fa fd53 	bl	800b41c <osSemaphoreRelease>
    spi_tx_event=0;
 8010976:	4b03      	ldr	r3, [pc, #12]	; (8010984 <HAL_SPI_TxCpltCallback+0x28>)
 8010978:	2200      	movs	r2, #0
 801097a:	601a      	str	r2, [r3, #0]
  }
}
 801097c:	bf00      	nop
 801097e:	3708      	adds	r7, #8
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}
 8010984:	200024fc 	.word	0x200024fc
 8010988:	20002510 	.word	0x20002510

0801098c <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8010990:	4b06      	ldr	r3, [pc, #24]	; (80109ac <SPI_WIFI_ISR+0x20>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2b01      	cmp	r3, #1
 8010996:	d107      	bne.n	80109a8 <SPI_WIFI_ISR+0x1c>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
 8010998:	4b05      	ldr	r3, [pc, #20]	; (80109b0 <SPI_WIFI_ISR+0x24>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4618      	mov	r0, r3
 801099e:	f7fa fd3d 	bl	800b41c <osSemaphoreRelease>
     cmddata_rdy_rising_event=0;
 80109a2:	4b02      	ldr	r3, [pc, #8]	; (80109ac <SPI_WIFI_ISR+0x20>)
 80109a4:	2200      	movs	r2, #0
 80109a6:	601a      	str	r2, [r3, #0]
   }
}
 80109a8:	bf00      	nop
 80109aa:	bd80      	pop	{r7, pc}
 80109ac:	20002500 	.word	0x20002500
 80109b0:	20002514 	.word	0x20002514

080109b4 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80109ba:	2301      	movs	r3, #1
 80109bc:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 80109be:	4b0d      	ldr	r3, [pc, #52]	; (80109f4 <WIFI_Init+0x40>)
 80109c0:	9301      	str	r3, [sp, #4]
 80109c2:	4b0d      	ldr	r3, [pc, #52]	; (80109f8 <WIFI_Init+0x44>)
 80109c4:	9300      	str	r3, [sp, #0]
 80109c6:	4b0d      	ldr	r3, [pc, #52]	; (80109fc <WIFI_Init+0x48>)
 80109c8:	4a0d      	ldr	r2, [pc, #52]	; (8010a00 <WIFI_Init+0x4c>)
 80109ca:	490e      	ldr	r1, [pc, #56]	; (8010a04 <WIFI_Init+0x50>)
 80109cc:	480e      	ldr	r0, [pc, #56]	; (8010a08 <WIFI_Init+0x54>)
 80109ce:	f7ff fa75 	bl	800febc <ES_WIFI_RegisterBusIO>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d107      	bne.n	80109e8 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80109d8:	480b      	ldr	r0, [pc, #44]	; (8010a08 <WIFI_Init+0x54>)
 80109da:	f7ff fa33 	bl	800fe44 <ES_WIFI_Init>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d101      	bne.n	80109e8 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 80109e4:	2300      	movs	r3, #0
 80109e6:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 80109e8:	79fb      	ldrb	r3, [r7, #7]
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3708      	adds	r7, #8
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	08010651 	.word	0x08010651
 80109f8:	0801077d 	.word	0x0801077d
 80109fc:	0801087d 	.word	0x0801087d
 8010a00:	08010545 	.word	0x08010545
 8010a04:	080103a9 	.word	0x080103a9
 8010a08:	2000251c 	.word	0x2000251c

08010a0c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b086      	sub	sp, #24
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	4613      	mov	r3, r2
 8010a18:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8010a1e:	79fb      	ldrb	r3, [r7, #7]
 8010a20:	68ba      	ldr	r2, [r7, #8]
 8010a22:	68f9      	ldr	r1, [r7, #12]
 8010a24:	4809      	ldr	r0, [pc, #36]	; (8010a4c <WIFI_Connect+0x40>)
 8010a26:	f7ff fa7d 	bl	800ff24 <ES_WIFI_Connect>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d107      	bne.n	8010a40 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8010a30:	4806      	ldr	r0, [pc, #24]	; (8010a4c <WIFI_Connect+0x40>)
 8010a32:	f7ff fafb 	bl	801002c <ES_WIFI_GetNetworkSettings>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d101      	bne.n	8010a40 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 8010a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3718      	adds	r7, #24
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	2000251c 	.word	0x2000251c

08010a50 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b08a      	sub	sp, #40	; 0x28
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	60f8      	str	r0, [r7, #12]
 8010a58:	607a      	str	r2, [r7, #4]
 8010a5a:	603b      	str	r3, [r7, #0]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8010a60:	2301      	movs	r3, #1
 8010a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8010a6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010a6e:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8010a70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010a72:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8010a74:	7afb      	ldrb	r3, [r7, #11]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	bf14      	ite	ne
 8010a7a:	2301      	movne	r3, #1
 8010a7c:	2300      	moveq	r3, #0
 8010a7e:	b2db      	uxtb	r3, r3
 8010a80:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	785b      	ldrb	r3, [r3, #1]
 8010a8c:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	789b      	ldrb	r3, [r3, #2]
 8010a92:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	78db      	ldrb	r3, [r3, #3]
 8010a98:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8010a9a:	f107 0310 	add.w	r3, r7, #16
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	4807      	ldr	r0, [pc, #28]	; (8010ac0 <WIFI_OpenClientConnection+0x70>)
 8010aa2:	f7ff fafb 	bl	801009c <ES_WIFI_StartClientConnection>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d102      	bne.n	8010ab2 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8010aac:	2300      	movs	r3, #0
 8010aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8010ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3728      	adds	r7, #40	; 0x28
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	2000251c 	.word	0x2000251c

08010ac4 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b088      	sub	sp, #32
 8010ac8:	af02      	add	r7, sp, #8
 8010aca:	60b9      	str	r1, [r7, #8]
 8010acc:	607b      	str	r3, [r7, #4]
 8010ace:	4603      	mov	r3, r0
 8010ad0:	73fb      	strb	r3, [r7, #15]
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8010ada:	89ba      	ldrh	r2, [r7, #12]
 8010adc:	7bf9      	ldrb	r1, [r7, #15]
 8010ade:	6a3b      	ldr	r3, [r7, #32]
 8010ae0:	9301      	str	r3, [sp, #4]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	9300      	str	r3, [sp, #0]
 8010ae6:	4613      	mov	r3, r2
 8010ae8:	68ba      	ldr	r2, [r7, #8]
 8010aea:	4806      	ldr	r0, [pc, #24]	; (8010b04 <WIFI_SendData+0x40>)
 8010aec:	f7ff fb9a 	bl	8010224 <ES_WIFI_SendData>
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d101      	bne.n	8010afa <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8010af6:	2300      	movs	r3, #0
 8010af8:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8010afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3718      	adds	r7, #24
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}
 8010b04:	2000251c 	.word	0x2000251c

08010b08 <__errno>:
 8010b08:	4b01      	ldr	r3, [pc, #4]	; (8010b10 <__errno+0x8>)
 8010b0a:	6818      	ldr	r0, [r3, #0]
 8010b0c:	4770      	bx	lr
 8010b0e:	bf00      	nop
 8010b10:	20000030 	.word	0x20000030

08010b14 <std>:
 8010b14:	2300      	movs	r3, #0
 8010b16:	b510      	push	{r4, lr}
 8010b18:	4604      	mov	r4, r0
 8010b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8010b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b22:	6083      	str	r3, [r0, #8]
 8010b24:	8181      	strh	r1, [r0, #12]
 8010b26:	6643      	str	r3, [r0, #100]	; 0x64
 8010b28:	81c2      	strh	r2, [r0, #14]
 8010b2a:	6183      	str	r3, [r0, #24]
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	2208      	movs	r2, #8
 8010b30:	305c      	adds	r0, #92	; 0x5c
 8010b32:	f000 f92a 	bl	8010d8a <memset>
 8010b36:	4b05      	ldr	r3, [pc, #20]	; (8010b4c <std+0x38>)
 8010b38:	6263      	str	r3, [r4, #36]	; 0x24
 8010b3a:	4b05      	ldr	r3, [pc, #20]	; (8010b50 <std+0x3c>)
 8010b3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b3e:	4b05      	ldr	r3, [pc, #20]	; (8010b54 <std+0x40>)
 8010b40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b42:	4b05      	ldr	r3, [pc, #20]	; (8010b58 <std+0x44>)
 8010b44:	6224      	str	r4, [r4, #32]
 8010b46:	6323      	str	r3, [r4, #48]	; 0x30
 8010b48:	bd10      	pop	{r4, pc}
 8010b4a:	bf00      	nop
 8010b4c:	08011115 	.word	0x08011115
 8010b50:	08011137 	.word	0x08011137
 8010b54:	0801116f 	.word	0x0801116f
 8010b58:	08011193 	.word	0x08011193

08010b5c <_cleanup_r>:
 8010b5c:	4901      	ldr	r1, [pc, #4]	; (8010b64 <_cleanup_r+0x8>)
 8010b5e:	f000 b8af 	b.w	8010cc0 <_fwalk_reent>
 8010b62:	bf00      	nop
 8010b64:	0801158d 	.word	0x0801158d

08010b68 <__sfmoreglue>:
 8010b68:	b570      	push	{r4, r5, r6, lr}
 8010b6a:	2268      	movs	r2, #104	; 0x68
 8010b6c:	1e4d      	subs	r5, r1, #1
 8010b6e:	4355      	muls	r5, r2
 8010b70:	460e      	mov	r6, r1
 8010b72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010b76:	f000 f931 	bl	8010ddc <_malloc_r>
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	b140      	cbz	r0, 8010b90 <__sfmoreglue+0x28>
 8010b7e:	2100      	movs	r1, #0
 8010b80:	e9c0 1600 	strd	r1, r6, [r0]
 8010b84:	300c      	adds	r0, #12
 8010b86:	60a0      	str	r0, [r4, #8]
 8010b88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b8c:	f000 f8fd 	bl	8010d8a <memset>
 8010b90:	4620      	mov	r0, r4
 8010b92:	bd70      	pop	{r4, r5, r6, pc}

08010b94 <__sfp_lock_acquire>:
 8010b94:	4801      	ldr	r0, [pc, #4]	; (8010b9c <__sfp_lock_acquire+0x8>)
 8010b96:	f000 b8d8 	b.w	8010d4a <__retarget_lock_acquire_recursive>
 8010b9a:	bf00      	nop
 8010b9c:	20002bc5 	.word	0x20002bc5

08010ba0 <__sfp_lock_release>:
 8010ba0:	4801      	ldr	r0, [pc, #4]	; (8010ba8 <__sfp_lock_release+0x8>)
 8010ba2:	f000 b8d3 	b.w	8010d4c <__retarget_lock_release_recursive>
 8010ba6:	bf00      	nop
 8010ba8:	20002bc5 	.word	0x20002bc5

08010bac <__sinit_lock_acquire>:
 8010bac:	4801      	ldr	r0, [pc, #4]	; (8010bb4 <__sinit_lock_acquire+0x8>)
 8010bae:	f000 b8cc 	b.w	8010d4a <__retarget_lock_acquire_recursive>
 8010bb2:	bf00      	nop
 8010bb4:	20002bc6 	.word	0x20002bc6

08010bb8 <__sinit_lock_release>:
 8010bb8:	4801      	ldr	r0, [pc, #4]	; (8010bc0 <__sinit_lock_release+0x8>)
 8010bba:	f000 b8c7 	b.w	8010d4c <__retarget_lock_release_recursive>
 8010bbe:	bf00      	nop
 8010bc0:	20002bc6 	.word	0x20002bc6

08010bc4 <__sinit>:
 8010bc4:	b510      	push	{r4, lr}
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	f7ff fff0 	bl	8010bac <__sinit_lock_acquire>
 8010bcc:	69a3      	ldr	r3, [r4, #24]
 8010bce:	b11b      	cbz	r3, 8010bd8 <__sinit+0x14>
 8010bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bd4:	f7ff bff0 	b.w	8010bb8 <__sinit_lock_release>
 8010bd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010bdc:	6523      	str	r3, [r4, #80]	; 0x50
 8010bde:	4b13      	ldr	r3, [pc, #76]	; (8010c2c <__sinit+0x68>)
 8010be0:	4a13      	ldr	r2, [pc, #76]	; (8010c30 <__sinit+0x6c>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	62a2      	str	r2, [r4, #40]	; 0x28
 8010be6:	42a3      	cmp	r3, r4
 8010be8:	bf04      	itt	eq
 8010bea:	2301      	moveq	r3, #1
 8010bec:	61a3      	streq	r3, [r4, #24]
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f000 f820 	bl	8010c34 <__sfp>
 8010bf4:	6060      	str	r0, [r4, #4]
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f000 f81c 	bl	8010c34 <__sfp>
 8010bfc:	60a0      	str	r0, [r4, #8]
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f000 f818 	bl	8010c34 <__sfp>
 8010c04:	2200      	movs	r2, #0
 8010c06:	60e0      	str	r0, [r4, #12]
 8010c08:	2104      	movs	r1, #4
 8010c0a:	6860      	ldr	r0, [r4, #4]
 8010c0c:	f7ff ff82 	bl	8010b14 <std>
 8010c10:	68a0      	ldr	r0, [r4, #8]
 8010c12:	2201      	movs	r2, #1
 8010c14:	2109      	movs	r1, #9
 8010c16:	f7ff ff7d 	bl	8010b14 <std>
 8010c1a:	68e0      	ldr	r0, [r4, #12]
 8010c1c:	2202      	movs	r2, #2
 8010c1e:	2112      	movs	r1, #18
 8010c20:	f7ff ff78 	bl	8010b14 <std>
 8010c24:	2301      	movs	r3, #1
 8010c26:	61a3      	str	r3, [r4, #24]
 8010c28:	e7d2      	b.n	8010bd0 <__sinit+0xc>
 8010c2a:	bf00      	nop
 8010c2c:	08012a00 	.word	0x08012a00
 8010c30:	08010b5d 	.word	0x08010b5d

08010c34 <__sfp>:
 8010c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c36:	4607      	mov	r7, r0
 8010c38:	f7ff ffac 	bl	8010b94 <__sfp_lock_acquire>
 8010c3c:	4b1e      	ldr	r3, [pc, #120]	; (8010cb8 <__sfp+0x84>)
 8010c3e:	681e      	ldr	r6, [r3, #0]
 8010c40:	69b3      	ldr	r3, [r6, #24]
 8010c42:	b913      	cbnz	r3, 8010c4a <__sfp+0x16>
 8010c44:	4630      	mov	r0, r6
 8010c46:	f7ff ffbd 	bl	8010bc4 <__sinit>
 8010c4a:	3648      	adds	r6, #72	; 0x48
 8010c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010c50:	3b01      	subs	r3, #1
 8010c52:	d503      	bpl.n	8010c5c <__sfp+0x28>
 8010c54:	6833      	ldr	r3, [r6, #0]
 8010c56:	b30b      	cbz	r3, 8010c9c <__sfp+0x68>
 8010c58:	6836      	ldr	r6, [r6, #0]
 8010c5a:	e7f7      	b.n	8010c4c <__sfp+0x18>
 8010c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010c60:	b9d5      	cbnz	r5, 8010c98 <__sfp+0x64>
 8010c62:	4b16      	ldr	r3, [pc, #88]	; (8010cbc <__sfp+0x88>)
 8010c64:	60e3      	str	r3, [r4, #12]
 8010c66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c6a:	6665      	str	r5, [r4, #100]	; 0x64
 8010c6c:	f000 f86c 	bl	8010d48 <__retarget_lock_init_recursive>
 8010c70:	f7ff ff96 	bl	8010ba0 <__sfp_lock_release>
 8010c74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010c78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010c7c:	6025      	str	r5, [r4, #0]
 8010c7e:	61a5      	str	r5, [r4, #24]
 8010c80:	2208      	movs	r2, #8
 8010c82:	4629      	mov	r1, r5
 8010c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010c88:	f000 f87f 	bl	8010d8a <memset>
 8010c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c94:	4620      	mov	r0, r4
 8010c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c98:	3468      	adds	r4, #104	; 0x68
 8010c9a:	e7d9      	b.n	8010c50 <__sfp+0x1c>
 8010c9c:	2104      	movs	r1, #4
 8010c9e:	4638      	mov	r0, r7
 8010ca0:	f7ff ff62 	bl	8010b68 <__sfmoreglue>
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	6030      	str	r0, [r6, #0]
 8010ca8:	2800      	cmp	r0, #0
 8010caa:	d1d5      	bne.n	8010c58 <__sfp+0x24>
 8010cac:	f7ff ff78 	bl	8010ba0 <__sfp_lock_release>
 8010cb0:	230c      	movs	r3, #12
 8010cb2:	603b      	str	r3, [r7, #0]
 8010cb4:	e7ee      	b.n	8010c94 <__sfp+0x60>
 8010cb6:	bf00      	nop
 8010cb8:	08012a00 	.word	0x08012a00
 8010cbc:	ffff0001 	.word	0xffff0001

08010cc0 <_fwalk_reent>:
 8010cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cc4:	4606      	mov	r6, r0
 8010cc6:	4688      	mov	r8, r1
 8010cc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010ccc:	2700      	movs	r7, #0
 8010cce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010cd2:	f1b9 0901 	subs.w	r9, r9, #1
 8010cd6:	d505      	bpl.n	8010ce4 <_fwalk_reent+0x24>
 8010cd8:	6824      	ldr	r4, [r4, #0]
 8010cda:	2c00      	cmp	r4, #0
 8010cdc:	d1f7      	bne.n	8010cce <_fwalk_reent+0xe>
 8010cde:	4638      	mov	r0, r7
 8010ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ce4:	89ab      	ldrh	r3, [r5, #12]
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d907      	bls.n	8010cfa <_fwalk_reent+0x3a>
 8010cea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010cee:	3301      	adds	r3, #1
 8010cf0:	d003      	beq.n	8010cfa <_fwalk_reent+0x3a>
 8010cf2:	4629      	mov	r1, r5
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	47c0      	blx	r8
 8010cf8:	4307      	orrs	r7, r0
 8010cfa:	3568      	adds	r5, #104	; 0x68
 8010cfc:	e7e9      	b.n	8010cd2 <_fwalk_reent+0x12>
	...

08010d00 <__libc_init_array>:
 8010d00:	b570      	push	{r4, r5, r6, lr}
 8010d02:	4d0d      	ldr	r5, [pc, #52]	; (8010d38 <__libc_init_array+0x38>)
 8010d04:	4c0d      	ldr	r4, [pc, #52]	; (8010d3c <__libc_init_array+0x3c>)
 8010d06:	1b64      	subs	r4, r4, r5
 8010d08:	10a4      	asrs	r4, r4, #2
 8010d0a:	2600      	movs	r6, #0
 8010d0c:	42a6      	cmp	r6, r4
 8010d0e:	d109      	bne.n	8010d24 <__libc_init_array+0x24>
 8010d10:	4d0b      	ldr	r5, [pc, #44]	; (8010d40 <__libc_init_array+0x40>)
 8010d12:	4c0c      	ldr	r4, [pc, #48]	; (8010d44 <__libc_init_array+0x44>)
 8010d14:	f001 fa7c 	bl	8012210 <_init>
 8010d18:	1b64      	subs	r4, r4, r5
 8010d1a:	10a4      	asrs	r4, r4, #2
 8010d1c:	2600      	movs	r6, #0
 8010d1e:	42a6      	cmp	r6, r4
 8010d20:	d105      	bne.n	8010d2e <__libc_init_array+0x2e>
 8010d22:	bd70      	pop	{r4, r5, r6, pc}
 8010d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d28:	4798      	blx	r3
 8010d2a:	3601      	adds	r6, #1
 8010d2c:	e7ee      	b.n	8010d0c <__libc_init_array+0xc>
 8010d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d32:	4798      	blx	r3
 8010d34:	3601      	adds	r6, #1
 8010d36:	e7f2      	b.n	8010d1e <__libc_init_array+0x1e>
 8010d38:	08012af0 	.word	0x08012af0
 8010d3c:	08012af0 	.word	0x08012af0
 8010d40:	08012af0 	.word	0x08012af0
 8010d44:	08012af4 	.word	0x08012af4

08010d48 <__retarget_lock_init_recursive>:
 8010d48:	4770      	bx	lr

08010d4a <__retarget_lock_acquire_recursive>:
 8010d4a:	4770      	bx	lr

08010d4c <__retarget_lock_release_recursive>:
 8010d4c:	4770      	bx	lr

08010d4e <memcmp>:
 8010d4e:	b510      	push	{r4, lr}
 8010d50:	3901      	subs	r1, #1
 8010d52:	4402      	add	r2, r0
 8010d54:	4290      	cmp	r0, r2
 8010d56:	d101      	bne.n	8010d5c <memcmp+0xe>
 8010d58:	2000      	movs	r0, #0
 8010d5a:	e005      	b.n	8010d68 <memcmp+0x1a>
 8010d5c:	7803      	ldrb	r3, [r0, #0]
 8010d5e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010d62:	42a3      	cmp	r3, r4
 8010d64:	d001      	beq.n	8010d6a <memcmp+0x1c>
 8010d66:	1b18      	subs	r0, r3, r4
 8010d68:	bd10      	pop	{r4, pc}
 8010d6a:	3001      	adds	r0, #1
 8010d6c:	e7f2      	b.n	8010d54 <memcmp+0x6>

08010d6e <memcpy>:
 8010d6e:	440a      	add	r2, r1
 8010d70:	4291      	cmp	r1, r2
 8010d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d76:	d100      	bne.n	8010d7a <memcpy+0xc>
 8010d78:	4770      	bx	lr
 8010d7a:	b510      	push	{r4, lr}
 8010d7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d84:	4291      	cmp	r1, r2
 8010d86:	d1f9      	bne.n	8010d7c <memcpy+0xe>
 8010d88:	bd10      	pop	{r4, pc}

08010d8a <memset>:
 8010d8a:	4402      	add	r2, r0
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d100      	bne.n	8010d94 <memset+0xa>
 8010d92:	4770      	bx	lr
 8010d94:	f803 1b01 	strb.w	r1, [r3], #1
 8010d98:	e7f9      	b.n	8010d8e <memset+0x4>
	...

08010d9c <sbrk_aligned>:
 8010d9c:	b570      	push	{r4, r5, r6, lr}
 8010d9e:	4e0e      	ldr	r6, [pc, #56]	; (8010dd8 <sbrk_aligned+0x3c>)
 8010da0:	460c      	mov	r4, r1
 8010da2:	6831      	ldr	r1, [r6, #0]
 8010da4:	4605      	mov	r5, r0
 8010da6:	b911      	cbnz	r1, 8010dae <sbrk_aligned+0x12>
 8010da8:	f000 f984 	bl	80110b4 <_sbrk_r>
 8010dac:	6030      	str	r0, [r6, #0]
 8010dae:	4621      	mov	r1, r4
 8010db0:	4628      	mov	r0, r5
 8010db2:	f000 f97f 	bl	80110b4 <_sbrk_r>
 8010db6:	1c43      	adds	r3, r0, #1
 8010db8:	d00a      	beq.n	8010dd0 <sbrk_aligned+0x34>
 8010dba:	1cc4      	adds	r4, r0, #3
 8010dbc:	f024 0403 	bic.w	r4, r4, #3
 8010dc0:	42a0      	cmp	r0, r4
 8010dc2:	d007      	beq.n	8010dd4 <sbrk_aligned+0x38>
 8010dc4:	1a21      	subs	r1, r4, r0
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 f974 	bl	80110b4 <_sbrk_r>
 8010dcc:	3001      	adds	r0, #1
 8010dce:	d101      	bne.n	8010dd4 <sbrk_aligned+0x38>
 8010dd0:	f04f 34ff 	mov.w	r4, #4294967295
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	bd70      	pop	{r4, r5, r6, pc}
 8010dd8:	20002bcc 	.word	0x20002bcc

08010ddc <_malloc_r>:
 8010ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010de0:	1ccd      	adds	r5, r1, #3
 8010de2:	f025 0503 	bic.w	r5, r5, #3
 8010de6:	3508      	adds	r5, #8
 8010de8:	2d0c      	cmp	r5, #12
 8010dea:	bf38      	it	cc
 8010dec:	250c      	movcc	r5, #12
 8010dee:	2d00      	cmp	r5, #0
 8010df0:	4607      	mov	r7, r0
 8010df2:	db01      	blt.n	8010df8 <_malloc_r+0x1c>
 8010df4:	42a9      	cmp	r1, r5
 8010df6:	d905      	bls.n	8010e04 <_malloc_r+0x28>
 8010df8:	230c      	movs	r3, #12
 8010dfa:	603b      	str	r3, [r7, #0]
 8010dfc:	2600      	movs	r6, #0
 8010dfe:	4630      	mov	r0, r6
 8010e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e04:	4e2e      	ldr	r6, [pc, #184]	; (8010ec0 <_malloc_r+0xe4>)
 8010e06:	f000 fc8f 	bl	8011728 <__malloc_lock>
 8010e0a:	6833      	ldr	r3, [r6, #0]
 8010e0c:	461c      	mov	r4, r3
 8010e0e:	bb34      	cbnz	r4, 8010e5e <_malloc_r+0x82>
 8010e10:	4629      	mov	r1, r5
 8010e12:	4638      	mov	r0, r7
 8010e14:	f7ff ffc2 	bl	8010d9c <sbrk_aligned>
 8010e18:	1c43      	adds	r3, r0, #1
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	d14d      	bne.n	8010eba <_malloc_r+0xde>
 8010e1e:	6834      	ldr	r4, [r6, #0]
 8010e20:	4626      	mov	r6, r4
 8010e22:	2e00      	cmp	r6, #0
 8010e24:	d140      	bne.n	8010ea8 <_malloc_r+0xcc>
 8010e26:	6823      	ldr	r3, [r4, #0]
 8010e28:	4631      	mov	r1, r6
 8010e2a:	4638      	mov	r0, r7
 8010e2c:	eb04 0803 	add.w	r8, r4, r3
 8010e30:	f000 f940 	bl	80110b4 <_sbrk_r>
 8010e34:	4580      	cmp	r8, r0
 8010e36:	d13a      	bne.n	8010eae <_malloc_r+0xd2>
 8010e38:	6821      	ldr	r1, [r4, #0]
 8010e3a:	3503      	adds	r5, #3
 8010e3c:	1a6d      	subs	r5, r5, r1
 8010e3e:	f025 0503 	bic.w	r5, r5, #3
 8010e42:	3508      	adds	r5, #8
 8010e44:	2d0c      	cmp	r5, #12
 8010e46:	bf38      	it	cc
 8010e48:	250c      	movcc	r5, #12
 8010e4a:	4629      	mov	r1, r5
 8010e4c:	4638      	mov	r0, r7
 8010e4e:	f7ff ffa5 	bl	8010d9c <sbrk_aligned>
 8010e52:	3001      	adds	r0, #1
 8010e54:	d02b      	beq.n	8010eae <_malloc_r+0xd2>
 8010e56:	6823      	ldr	r3, [r4, #0]
 8010e58:	442b      	add	r3, r5
 8010e5a:	6023      	str	r3, [r4, #0]
 8010e5c:	e00e      	b.n	8010e7c <_malloc_r+0xa0>
 8010e5e:	6822      	ldr	r2, [r4, #0]
 8010e60:	1b52      	subs	r2, r2, r5
 8010e62:	d41e      	bmi.n	8010ea2 <_malloc_r+0xc6>
 8010e64:	2a0b      	cmp	r2, #11
 8010e66:	d916      	bls.n	8010e96 <_malloc_r+0xba>
 8010e68:	1961      	adds	r1, r4, r5
 8010e6a:	42a3      	cmp	r3, r4
 8010e6c:	6025      	str	r5, [r4, #0]
 8010e6e:	bf18      	it	ne
 8010e70:	6059      	strne	r1, [r3, #4]
 8010e72:	6863      	ldr	r3, [r4, #4]
 8010e74:	bf08      	it	eq
 8010e76:	6031      	streq	r1, [r6, #0]
 8010e78:	5162      	str	r2, [r4, r5]
 8010e7a:	604b      	str	r3, [r1, #4]
 8010e7c:	4638      	mov	r0, r7
 8010e7e:	f104 060b 	add.w	r6, r4, #11
 8010e82:	f000 fc57 	bl	8011734 <__malloc_unlock>
 8010e86:	f026 0607 	bic.w	r6, r6, #7
 8010e8a:	1d23      	adds	r3, r4, #4
 8010e8c:	1af2      	subs	r2, r6, r3
 8010e8e:	d0b6      	beq.n	8010dfe <_malloc_r+0x22>
 8010e90:	1b9b      	subs	r3, r3, r6
 8010e92:	50a3      	str	r3, [r4, r2]
 8010e94:	e7b3      	b.n	8010dfe <_malloc_r+0x22>
 8010e96:	6862      	ldr	r2, [r4, #4]
 8010e98:	42a3      	cmp	r3, r4
 8010e9a:	bf0c      	ite	eq
 8010e9c:	6032      	streq	r2, [r6, #0]
 8010e9e:	605a      	strne	r2, [r3, #4]
 8010ea0:	e7ec      	b.n	8010e7c <_malloc_r+0xa0>
 8010ea2:	4623      	mov	r3, r4
 8010ea4:	6864      	ldr	r4, [r4, #4]
 8010ea6:	e7b2      	b.n	8010e0e <_malloc_r+0x32>
 8010ea8:	4634      	mov	r4, r6
 8010eaa:	6876      	ldr	r6, [r6, #4]
 8010eac:	e7b9      	b.n	8010e22 <_malloc_r+0x46>
 8010eae:	230c      	movs	r3, #12
 8010eb0:	603b      	str	r3, [r7, #0]
 8010eb2:	4638      	mov	r0, r7
 8010eb4:	f000 fc3e 	bl	8011734 <__malloc_unlock>
 8010eb8:	e7a1      	b.n	8010dfe <_malloc_r+0x22>
 8010eba:	6025      	str	r5, [r4, #0]
 8010ebc:	e7de      	b.n	8010e7c <_malloc_r+0xa0>
 8010ebe:	bf00      	nop
 8010ec0:	20002bc8 	.word	0x20002bc8

08010ec4 <iprintf>:
 8010ec4:	b40f      	push	{r0, r1, r2, r3}
 8010ec6:	4b0a      	ldr	r3, [pc, #40]	; (8010ef0 <iprintf+0x2c>)
 8010ec8:	b513      	push	{r0, r1, r4, lr}
 8010eca:	681c      	ldr	r4, [r3, #0]
 8010ecc:	b124      	cbz	r4, 8010ed8 <iprintf+0x14>
 8010ece:	69a3      	ldr	r3, [r4, #24]
 8010ed0:	b913      	cbnz	r3, 8010ed8 <iprintf+0x14>
 8010ed2:	4620      	mov	r0, r4
 8010ed4:	f7ff fe76 	bl	8010bc4 <__sinit>
 8010ed8:	ab05      	add	r3, sp, #20
 8010eda:	9a04      	ldr	r2, [sp, #16]
 8010edc:	68a1      	ldr	r1, [r4, #8]
 8010ede:	9301      	str	r3, [sp, #4]
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	f000 fdff 	bl	8011ae4 <_vfiprintf_r>
 8010ee6:	b002      	add	sp, #8
 8010ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010eec:	b004      	add	sp, #16
 8010eee:	4770      	bx	lr
 8010ef0:	20000030 	.word	0x20000030

08010ef4 <_puts_r>:
 8010ef4:	b570      	push	{r4, r5, r6, lr}
 8010ef6:	460e      	mov	r6, r1
 8010ef8:	4605      	mov	r5, r0
 8010efa:	b118      	cbz	r0, 8010f04 <_puts_r+0x10>
 8010efc:	6983      	ldr	r3, [r0, #24]
 8010efe:	b90b      	cbnz	r3, 8010f04 <_puts_r+0x10>
 8010f00:	f7ff fe60 	bl	8010bc4 <__sinit>
 8010f04:	69ab      	ldr	r3, [r5, #24]
 8010f06:	68ac      	ldr	r4, [r5, #8]
 8010f08:	b913      	cbnz	r3, 8010f10 <_puts_r+0x1c>
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	f7ff fe5a 	bl	8010bc4 <__sinit>
 8010f10:	4b2c      	ldr	r3, [pc, #176]	; (8010fc4 <_puts_r+0xd0>)
 8010f12:	429c      	cmp	r4, r3
 8010f14:	d120      	bne.n	8010f58 <_puts_r+0x64>
 8010f16:	686c      	ldr	r4, [r5, #4]
 8010f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f1a:	07db      	lsls	r3, r3, #31
 8010f1c:	d405      	bmi.n	8010f2a <_puts_r+0x36>
 8010f1e:	89a3      	ldrh	r3, [r4, #12]
 8010f20:	0598      	lsls	r0, r3, #22
 8010f22:	d402      	bmi.n	8010f2a <_puts_r+0x36>
 8010f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f26:	f7ff ff10 	bl	8010d4a <__retarget_lock_acquire_recursive>
 8010f2a:	89a3      	ldrh	r3, [r4, #12]
 8010f2c:	0719      	lsls	r1, r3, #28
 8010f2e:	d51d      	bpl.n	8010f6c <_puts_r+0x78>
 8010f30:	6923      	ldr	r3, [r4, #16]
 8010f32:	b1db      	cbz	r3, 8010f6c <_puts_r+0x78>
 8010f34:	3e01      	subs	r6, #1
 8010f36:	68a3      	ldr	r3, [r4, #8]
 8010f38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010f3c:	3b01      	subs	r3, #1
 8010f3e:	60a3      	str	r3, [r4, #8]
 8010f40:	bb39      	cbnz	r1, 8010f92 <_puts_r+0x9e>
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	da38      	bge.n	8010fb8 <_puts_r+0xc4>
 8010f46:	4622      	mov	r2, r4
 8010f48:	210a      	movs	r1, #10
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	f000 f9aa 	bl	80112a4 <__swbuf_r>
 8010f50:	3001      	adds	r0, #1
 8010f52:	d011      	beq.n	8010f78 <_puts_r+0x84>
 8010f54:	250a      	movs	r5, #10
 8010f56:	e011      	b.n	8010f7c <_puts_r+0x88>
 8010f58:	4b1b      	ldr	r3, [pc, #108]	; (8010fc8 <_puts_r+0xd4>)
 8010f5a:	429c      	cmp	r4, r3
 8010f5c:	d101      	bne.n	8010f62 <_puts_r+0x6e>
 8010f5e:	68ac      	ldr	r4, [r5, #8]
 8010f60:	e7da      	b.n	8010f18 <_puts_r+0x24>
 8010f62:	4b1a      	ldr	r3, [pc, #104]	; (8010fcc <_puts_r+0xd8>)
 8010f64:	429c      	cmp	r4, r3
 8010f66:	bf08      	it	eq
 8010f68:	68ec      	ldreq	r4, [r5, #12]
 8010f6a:	e7d5      	b.n	8010f18 <_puts_r+0x24>
 8010f6c:	4621      	mov	r1, r4
 8010f6e:	4628      	mov	r0, r5
 8010f70:	f000 f9ea 	bl	8011348 <__swsetup_r>
 8010f74:	2800      	cmp	r0, #0
 8010f76:	d0dd      	beq.n	8010f34 <_puts_r+0x40>
 8010f78:	f04f 35ff 	mov.w	r5, #4294967295
 8010f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f7e:	07da      	lsls	r2, r3, #31
 8010f80:	d405      	bmi.n	8010f8e <_puts_r+0x9a>
 8010f82:	89a3      	ldrh	r3, [r4, #12]
 8010f84:	059b      	lsls	r3, r3, #22
 8010f86:	d402      	bmi.n	8010f8e <_puts_r+0x9a>
 8010f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f8a:	f7ff fedf 	bl	8010d4c <__retarget_lock_release_recursive>
 8010f8e:	4628      	mov	r0, r5
 8010f90:	bd70      	pop	{r4, r5, r6, pc}
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	da04      	bge.n	8010fa0 <_puts_r+0xac>
 8010f96:	69a2      	ldr	r2, [r4, #24]
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	dc06      	bgt.n	8010faa <_puts_r+0xb6>
 8010f9c:	290a      	cmp	r1, #10
 8010f9e:	d004      	beq.n	8010faa <_puts_r+0xb6>
 8010fa0:	6823      	ldr	r3, [r4, #0]
 8010fa2:	1c5a      	adds	r2, r3, #1
 8010fa4:	6022      	str	r2, [r4, #0]
 8010fa6:	7019      	strb	r1, [r3, #0]
 8010fa8:	e7c5      	b.n	8010f36 <_puts_r+0x42>
 8010faa:	4622      	mov	r2, r4
 8010fac:	4628      	mov	r0, r5
 8010fae:	f000 f979 	bl	80112a4 <__swbuf_r>
 8010fb2:	3001      	adds	r0, #1
 8010fb4:	d1bf      	bne.n	8010f36 <_puts_r+0x42>
 8010fb6:	e7df      	b.n	8010f78 <_puts_r+0x84>
 8010fb8:	6823      	ldr	r3, [r4, #0]
 8010fba:	250a      	movs	r5, #10
 8010fbc:	1c5a      	adds	r2, r3, #1
 8010fbe:	6022      	str	r2, [r4, #0]
 8010fc0:	701d      	strb	r5, [r3, #0]
 8010fc2:	e7db      	b.n	8010f7c <_puts_r+0x88>
 8010fc4:	080129c0 	.word	0x080129c0
 8010fc8:	080129e0 	.word	0x080129e0
 8010fcc:	080129a0 	.word	0x080129a0

08010fd0 <puts>:
 8010fd0:	4b02      	ldr	r3, [pc, #8]	; (8010fdc <puts+0xc>)
 8010fd2:	4601      	mov	r1, r0
 8010fd4:	6818      	ldr	r0, [r3, #0]
 8010fd6:	f7ff bf8d 	b.w	8010ef4 <_puts_r>
 8010fda:	bf00      	nop
 8010fdc:	20000030 	.word	0x20000030

08010fe0 <cleanup_glue>:
 8010fe0:	b538      	push	{r3, r4, r5, lr}
 8010fe2:	460c      	mov	r4, r1
 8010fe4:	6809      	ldr	r1, [r1, #0]
 8010fe6:	4605      	mov	r5, r0
 8010fe8:	b109      	cbz	r1, 8010fee <cleanup_glue+0xe>
 8010fea:	f7ff fff9 	bl	8010fe0 <cleanup_glue>
 8010fee:	4621      	mov	r1, r4
 8010ff0:	4628      	mov	r0, r5
 8010ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ff6:	f000 bba3 	b.w	8011740 <_free_r>
	...

08010ffc <_reclaim_reent>:
 8010ffc:	4b2c      	ldr	r3, [pc, #176]	; (80110b0 <_reclaim_reent+0xb4>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	4283      	cmp	r3, r0
 8011002:	b570      	push	{r4, r5, r6, lr}
 8011004:	4604      	mov	r4, r0
 8011006:	d051      	beq.n	80110ac <_reclaim_reent+0xb0>
 8011008:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801100a:	b143      	cbz	r3, 801101e <_reclaim_reent+0x22>
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d14a      	bne.n	80110a8 <_reclaim_reent+0xac>
 8011012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011014:	6819      	ldr	r1, [r3, #0]
 8011016:	b111      	cbz	r1, 801101e <_reclaim_reent+0x22>
 8011018:	4620      	mov	r0, r4
 801101a:	f000 fb91 	bl	8011740 <_free_r>
 801101e:	6961      	ldr	r1, [r4, #20]
 8011020:	b111      	cbz	r1, 8011028 <_reclaim_reent+0x2c>
 8011022:	4620      	mov	r0, r4
 8011024:	f000 fb8c 	bl	8011740 <_free_r>
 8011028:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801102a:	b111      	cbz	r1, 8011032 <_reclaim_reent+0x36>
 801102c:	4620      	mov	r0, r4
 801102e:	f000 fb87 	bl	8011740 <_free_r>
 8011032:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011034:	b111      	cbz	r1, 801103c <_reclaim_reent+0x40>
 8011036:	4620      	mov	r0, r4
 8011038:	f000 fb82 	bl	8011740 <_free_r>
 801103c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801103e:	b111      	cbz	r1, 8011046 <_reclaim_reent+0x4a>
 8011040:	4620      	mov	r0, r4
 8011042:	f000 fb7d 	bl	8011740 <_free_r>
 8011046:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011048:	b111      	cbz	r1, 8011050 <_reclaim_reent+0x54>
 801104a:	4620      	mov	r0, r4
 801104c:	f000 fb78 	bl	8011740 <_free_r>
 8011050:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011052:	b111      	cbz	r1, 801105a <_reclaim_reent+0x5e>
 8011054:	4620      	mov	r0, r4
 8011056:	f000 fb73 	bl	8011740 <_free_r>
 801105a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801105c:	b111      	cbz	r1, 8011064 <_reclaim_reent+0x68>
 801105e:	4620      	mov	r0, r4
 8011060:	f000 fb6e 	bl	8011740 <_free_r>
 8011064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011066:	b111      	cbz	r1, 801106e <_reclaim_reent+0x72>
 8011068:	4620      	mov	r0, r4
 801106a:	f000 fb69 	bl	8011740 <_free_r>
 801106e:	69a3      	ldr	r3, [r4, #24]
 8011070:	b1e3      	cbz	r3, 80110ac <_reclaim_reent+0xb0>
 8011072:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011074:	4620      	mov	r0, r4
 8011076:	4798      	blx	r3
 8011078:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801107a:	b1b9      	cbz	r1, 80110ac <_reclaim_reent+0xb0>
 801107c:	4620      	mov	r0, r4
 801107e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011082:	f7ff bfad 	b.w	8010fe0 <cleanup_glue>
 8011086:	5949      	ldr	r1, [r1, r5]
 8011088:	b941      	cbnz	r1, 801109c <_reclaim_reent+0xa0>
 801108a:	3504      	adds	r5, #4
 801108c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801108e:	2d80      	cmp	r5, #128	; 0x80
 8011090:	68d9      	ldr	r1, [r3, #12]
 8011092:	d1f8      	bne.n	8011086 <_reclaim_reent+0x8a>
 8011094:	4620      	mov	r0, r4
 8011096:	f000 fb53 	bl	8011740 <_free_r>
 801109a:	e7ba      	b.n	8011012 <_reclaim_reent+0x16>
 801109c:	680e      	ldr	r6, [r1, #0]
 801109e:	4620      	mov	r0, r4
 80110a0:	f000 fb4e 	bl	8011740 <_free_r>
 80110a4:	4631      	mov	r1, r6
 80110a6:	e7ef      	b.n	8011088 <_reclaim_reent+0x8c>
 80110a8:	2500      	movs	r5, #0
 80110aa:	e7ef      	b.n	801108c <_reclaim_reent+0x90>
 80110ac:	bd70      	pop	{r4, r5, r6, pc}
 80110ae:	bf00      	nop
 80110b0:	20000030 	.word	0x20000030

080110b4 <_sbrk_r>:
 80110b4:	b538      	push	{r3, r4, r5, lr}
 80110b6:	4d06      	ldr	r5, [pc, #24]	; (80110d0 <_sbrk_r+0x1c>)
 80110b8:	2300      	movs	r3, #0
 80110ba:	4604      	mov	r4, r0
 80110bc:	4608      	mov	r0, r1
 80110be:	602b      	str	r3, [r5, #0]
 80110c0:	f7f0 fe72 	bl	8001da8 <_sbrk>
 80110c4:	1c43      	adds	r3, r0, #1
 80110c6:	d102      	bne.n	80110ce <_sbrk_r+0x1a>
 80110c8:	682b      	ldr	r3, [r5, #0]
 80110ca:	b103      	cbz	r3, 80110ce <_sbrk_r+0x1a>
 80110cc:	6023      	str	r3, [r4, #0]
 80110ce:	bd38      	pop	{r3, r4, r5, pc}
 80110d0:	20002bd0 	.word	0x20002bd0

080110d4 <siprintf>:
 80110d4:	b40e      	push	{r1, r2, r3}
 80110d6:	b500      	push	{lr}
 80110d8:	b09c      	sub	sp, #112	; 0x70
 80110da:	ab1d      	add	r3, sp, #116	; 0x74
 80110dc:	9002      	str	r0, [sp, #8]
 80110de:	9006      	str	r0, [sp, #24]
 80110e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80110e4:	4809      	ldr	r0, [pc, #36]	; (801110c <siprintf+0x38>)
 80110e6:	9107      	str	r1, [sp, #28]
 80110e8:	9104      	str	r1, [sp, #16]
 80110ea:	4909      	ldr	r1, [pc, #36]	; (8011110 <siprintf+0x3c>)
 80110ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80110f0:	9105      	str	r1, [sp, #20]
 80110f2:	6800      	ldr	r0, [r0, #0]
 80110f4:	9301      	str	r3, [sp, #4]
 80110f6:	a902      	add	r1, sp, #8
 80110f8:	f000 fbca 	bl	8011890 <_svfiprintf_r>
 80110fc:	9b02      	ldr	r3, [sp, #8]
 80110fe:	2200      	movs	r2, #0
 8011100:	701a      	strb	r2, [r3, #0]
 8011102:	b01c      	add	sp, #112	; 0x70
 8011104:	f85d eb04 	ldr.w	lr, [sp], #4
 8011108:	b003      	add	sp, #12
 801110a:	4770      	bx	lr
 801110c:	20000030 	.word	0x20000030
 8011110:	ffff0208 	.word	0xffff0208

08011114 <__sread>:
 8011114:	b510      	push	{r4, lr}
 8011116:	460c      	mov	r4, r1
 8011118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801111c:	f000 ffa6 	bl	801206c <_read_r>
 8011120:	2800      	cmp	r0, #0
 8011122:	bfab      	itete	ge
 8011124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011126:	89a3      	ldrhlt	r3, [r4, #12]
 8011128:	181b      	addge	r3, r3, r0
 801112a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801112e:	bfac      	ite	ge
 8011130:	6563      	strge	r3, [r4, #84]	; 0x54
 8011132:	81a3      	strhlt	r3, [r4, #12]
 8011134:	bd10      	pop	{r4, pc}

08011136 <__swrite>:
 8011136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801113a:	461f      	mov	r7, r3
 801113c:	898b      	ldrh	r3, [r1, #12]
 801113e:	05db      	lsls	r3, r3, #23
 8011140:	4605      	mov	r5, r0
 8011142:	460c      	mov	r4, r1
 8011144:	4616      	mov	r6, r2
 8011146:	d505      	bpl.n	8011154 <__swrite+0x1e>
 8011148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801114c:	2302      	movs	r3, #2
 801114e:	2200      	movs	r2, #0
 8011150:	f000 fa6a 	bl	8011628 <_lseek_r>
 8011154:	89a3      	ldrh	r3, [r4, #12]
 8011156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801115a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801115e:	81a3      	strh	r3, [r4, #12]
 8011160:	4632      	mov	r2, r6
 8011162:	463b      	mov	r3, r7
 8011164:	4628      	mov	r0, r5
 8011166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801116a:	f7fd b8a9 	b.w	800e2c0 <_write_r>

0801116e <__sseek>:
 801116e:	b510      	push	{r4, lr}
 8011170:	460c      	mov	r4, r1
 8011172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011176:	f000 fa57 	bl	8011628 <_lseek_r>
 801117a:	1c43      	adds	r3, r0, #1
 801117c:	89a3      	ldrh	r3, [r4, #12]
 801117e:	bf15      	itete	ne
 8011180:	6560      	strne	r0, [r4, #84]	; 0x54
 8011182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801118a:	81a3      	strheq	r3, [r4, #12]
 801118c:	bf18      	it	ne
 801118e:	81a3      	strhne	r3, [r4, #12]
 8011190:	bd10      	pop	{r4, pc}

08011192 <__sclose>:
 8011192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011196:	f000 b963 	b.w	8011460 <_close_r>

0801119a <strncpy>:
 801119a:	b510      	push	{r4, lr}
 801119c:	3901      	subs	r1, #1
 801119e:	4603      	mov	r3, r0
 80111a0:	b132      	cbz	r2, 80111b0 <strncpy+0x16>
 80111a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80111a6:	f803 4b01 	strb.w	r4, [r3], #1
 80111aa:	3a01      	subs	r2, #1
 80111ac:	2c00      	cmp	r4, #0
 80111ae:	d1f7      	bne.n	80111a0 <strncpy+0x6>
 80111b0:	441a      	add	r2, r3
 80111b2:	2100      	movs	r1, #0
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d100      	bne.n	80111ba <strncpy+0x20>
 80111b8:	bd10      	pop	{r4, pc}
 80111ba:	f803 1b01 	strb.w	r1, [r3], #1
 80111be:	e7f9      	b.n	80111b4 <strncpy+0x1a>

080111c0 <strstr>:
 80111c0:	780a      	ldrb	r2, [r1, #0]
 80111c2:	b570      	push	{r4, r5, r6, lr}
 80111c4:	b96a      	cbnz	r2, 80111e2 <strstr+0x22>
 80111c6:	bd70      	pop	{r4, r5, r6, pc}
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d109      	bne.n	80111e0 <strstr+0x20>
 80111cc:	460c      	mov	r4, r1
 80111ce:	4605      	mov	r5, r0
 80111d0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d0f6      	beq.n	80111c6 <strstr+0x6>
 80111d8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80111dc:	429e      	cmp	r6, r3
 80111de:	d0f7      	beq.n	80111d0 <strstr+0x10>
 80111e0:	3001      	adds	r0, #1
 80111e2:	7803      	ldrb	r3, [r0, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d1ef      	bne.n	80111c8 <strstr+0x8>
 80111e8:	4618      	mov	r0, r3
 80111ea:	e7ec      	b.n	80111c6 <strstr+0x6>

080111ec <strtok>:
 80111ec:	4b16      	ldr	r3, [pc, #88]	; (8011248 <strtok+0x5c>)
 80111ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80111f0:	681e      	ldr	r6, [r3, #0]
 80111f2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80111f4:	4605      	mov	r5, r0
 80111f6:	b9fc      	cbnz	r4, 8011238 <strtok+0x4c>
 80111f8:	2050      	movs	r0, #80	; 0x50
 80111fa:	9101      	str	r1, [sp, #4]
 80111fc:	f000 fa8c 	bl	8011718 <malloc>
 8011200:	9901      	ldr	r1, [sp, #4]
 8011202:	65b0      	str	r0, [r6, #88]	; 0x58
 8011204:	4602      	mov	r2, r0
 8011206:	b920      	cbnz	r0, 8011212 <strtok+0x26>
 8011208:	4b10      	ldr	r3, [pc, #64]	; (801124c <strtok+0x60>)
 801120a:	4811      	ldr	r0, [pc, #68]	; (8011250 <strtok+0x64>)
 801120c:	2157      	movs	r1, #87	; 0x57
 801120e:	f000 f909 	bl	8011424 <__assert_func>
 8011212:	e9c0 4400 	strd	r4, r4, [r0]
 8011216:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801121a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801121e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011222:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011226:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801122a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801122e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011232:	6184      	str	r4, [r0, #24]
 8011234:	7704      	strb	r4, [r0, #28]
 8011236:	6244      	str	r4, [r0, #36]	; 0x24
 8011238:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801123a:	2301      	movs	r3, #1
 801123c:	4628      	mov	r0, r5
 801123e:	b002      	add	sp, #8
 8011240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011244:	f000 b806 	b.w	8011254 <__strtok_r>
 8011248:	20000030 	.word	0x20000030
 801124c:	08012a04 	.word	0x08012a04
 8011250:	08012a1b 	.word	0x08012a1b

08011254 <__strtok_r>:
 8011254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011256:	b908      	cbnz	r0, 801125c <__strtok_r+0x8>
 8011258:	6810      	ldr	r0, [r2, #0]
 801125a:	b188      	cbz	r0, 8011280 <__strtok_r+0x2c>
 801125c:	4604      	mov	r4, r0
 801125e:	4620      	mov	r0, r4
 8011260:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011264:	460f      	mov	r7, r1
 8011266:	f817 6b01 	ldrb.w	r6, [r7], #1
 801126a:	b91e      	cbnz	r6, 8011274 <__strtok_r+0x20>
 801126c:	b965      	cbnz	r5, 8011288 <__strtok_r+0x34>
 801126e:	6015      	str	r5, [r2, #0]
 8011270:	4628      	mov	r0, r5
 8011272:	e005      	b.n	8011280 <__strtok_r+0x2c>
 8011274:	42b5      	cmp	r5, r6
 8011276:	d1f6      	bne.n	8011266 <__strtok_r+0x12>
 8011278:	2b00      	cmp	r3, #0
 801127a:	d1f0      	bne.n	801125e <__strtok_r+0xa>
 801127c:	6014      	str	r4, [r2, #0]
 801127e:	7003      	strb	r3, [r0, #0]
 8011280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011282:	461c      	mov	r4, r3
 8011284:	e00c      	b.n	80112a0 <__strtok_r+0x4c>
 8011286:	b915      	cbnz	r5, 801128e <__strtok_r+0x3a>
 8011288:	f814 3b01 	ldrb.w	r3, [r4], #1
 801128c:	460e      	mov	r6, r1
 801128e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011292:	42ab      	cmp	r3, r5
 8011294:	d1f7      	bne.n	8011286 <__strtok_r+0x32>
 8011296:	2b00      	cmp	r3, #0
 8011298:	d0f3      	beq.n	8011282 <__strtok_r+0x2e>
 801129a:	2300      	movs	r3, #0
 801129c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80112a0:	6014      	str	r4, [r2, #0]
 80112a2:	e7ed      	b.n	8011280 <__strtok_r+0x2c>

080112a4 <__swbuf_r>:
 80112a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a6:	460e      	mov	r6, r1
 80112a8:	4614      	mov	r4, r2
 80112aa:	4605      	mov	r5, r0
 80112ac:	b118      	cbz	r0, 80112b6 <__swbuf_r+0x12>
 80112ae:	6983      	ldr	r3, [r0, #24]
 80112b0:	b90b      	cbnz	r3, 80112b6 <__swbuf_r+0x12>
 80112b2:	f7ff fc87 	bl	8010bc4 <__sinit>
 80112b6:	4b21      	ldr	r3, [pc, #132]	; (801133c <__swbuf_r+0x98>)
 80112b8:	429c      	cmp	r4, r3
 80112ba:	d12b      	bne.n	8011314 <__swbuf_r+0x70>
 80112bc:	686c      	ldr	r4, [r5, #4]
 80112be:	69a3      	ldr	r3, [r4, #24]
 80112c0:	60a3      	str	r3, [r4, #8]
 80112c2:	89a3      	ldrh	r3, [r4, #12]
 80112c4:	071a      	lsls	r2, r3, #28
 80112c6:	d52f      	bpl.n	8011328 <__swbuf_r+0x84>
 80112c8:	6923      	ldr	r3, [r4, #16]
 80112ca:	b36b      	cbz	r3, 8011328 <__swbuf_r+0x84>
 80112cc:	6923      	ldr	r3, [r4, #16]
 80112ce:	6820      	ldr	r0, [r4, #0]
 80112d0:	1ac0      	subs	r0, r0, r3
 80112d2:	6963      	ldr	r3, [r4, #20]
 80112d4:	b2f6      	uxtb	r6, r6
 80112d6:	4283      	cmp	r3, r0
 80112d8:	4637      	mov	r7, r6
 80112da:	dc04      	bgt.n	80112e6 <__swbuf_r+0x42>
 80112dc:	4621      	mov	r1, r4
 80112de:	4628      	mov	r0, r5
 80112e0:	f000 f954 	bl	801158c <_fflush_r>
 80112e4:	bb30      	cbnz	r0, 8011334 <__swbuf_r+0x90>
 80112e6:	68a3      	ldr	r3, [r4, #8]
 80112e8:	3b01      	subs	r3, #1
 80112ea:	60a3      	str	r3, [r4, #8]
 80112ec:	6823      	ldr	r3, [r4, #0]
 80112ee:	1c5a      	adds	r2, r3, #1
 80112f0:	6022      	str	r2, [r4, #0]
 80112f2:	701e      	strb	r6, [r3, #0]
 80112f4:	6963      	ldr	r3, [r4, #20]
 80112f6:	3001      	adds	r0, #1
 80112f8:	4283      	cmp	r3, r0
 80112fa:	d004      	beq.n	8011306 <__swbuf_r+0x62>
 80112fc:	89a3      	ldrh	r3, [r4, #12]
 80112fe:	07db      	lsls	r3, r3, #31
 8011300:	d506      	bpl.n	8011310 <__swbuf_r+0x6c>
 8011302:	2e0a      	cmp	r6, #10
 8011304:	d104      	bne.n	8011310 <__swbuf_r+0x6c>
 8011306:	4621      	mov	r1, r4
 8011308:	4628      	mov	r0, r5
 801130a:	f000 f93f 	bl	801158c <_fflush_r>
 801130e:	b988      	cbnz	r0, 8011334 <__swbuf_r+0x90>
 8011310:	4638      	mov	r0, r7
 8011312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011314:	4b0a      	ldr	r3, [pc, #40]	; (8011340 <__swbuf_r+0x9c>)
 8011316:	429c      	cmp	r4, r3
 8011318:	d101      	bne.n	801131e <__swbuf_r+0x7a>
 801131a:	68ac      	ldr	r4, [r5, #8]
 801131c:	e7cf      	b.n	80112be <__swbuf_r+0x1a>
 801131e:	4b09      	ldr	r3, [pc, #36]	; (8011344 <__swbuf_r+0xa0>)
 8011320:	429c      	cmp	r4, r3
 8011322:	bf08      	it	eq
 8011324:	68ec      	ldreq	r4, [r5, #12]
 8011326:	e7ca      	b.n	80112be <__swbuf_r+0x1a>
 8011328:	4621      	mov	r1, r4
 801132a:	4628      	mov	r0, r5
 801132c:	f000 f80c 	bl	8011348 <__swsetup_r>
 8011330:	2800      	cmp	r0, #0
 8011332:	d0cb      	beq.n	80112cc <__swbuf_r+0x28>
 8011334:	f04f 37ff 	mov.w	r7, #4294967295
 8011338:	e7ea      	b.n	8011310 <__swbuf_r+0x6c>
 801133a:	bf00      	nop
 801133c:	080129c0 	.word	0x080129c0
 8011340:	080129e0 	.word	0x080129e0
 8011344:	080129a0 	.word	0x080129a0

08011348 <__swsetup_r>:
 8011348:	4b32      	ldr	r3, [pc, #200]	; (8011414 <__swsetup_r+0xcc>)
 801134a:	b570      	push	{r4, r5, r6, lr}
 801134c:	681d      	ldr	r5, [r3, #0]
 801134e:	4606      	mov	r6, r0
 8011350:	460c      	mov	r4, r1
 8011352:	b125      	cbz	r5, 801135e <__swsetup_r+0x16>
 8011354:	69ab      	ldr	r3, [r5, #24]
 8011356:	b913      	cbnz	r3, 801135e <__swsetup_r+0x16>
 8011358:	4628      	mov	r0, r5
 801135a:	f7ff fc33 	bl	8010bc4 <__sinit>
 801135e:	4b2e      	ldr	r3, [pc, #184]	; (8011418 <__swsetup_r+0xd0>)
 8011360:	429c      	cmp	r4, r3
 8011362:	d10f      	bne.n	8011384 <__swsetup_r+0x3c>
 8011364:	686c      	ldr	r4, [r5, #4]
 8011366:	89a3      	ldrh	r3, [r4, #12]
 8011368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801136c:	0719      	lsls	r1, r3, #28
 801136e:	d42c      	bmi.n	80113ca <__swsetup_r+0x82>
 8011370:	06dd      	lsls	r5, r3, #27
 8011372:	d411      	bmi.n	8011398 <__swsetup_r+0x50>
 8011374:	2309      	movs	r3, #9
 8011376:	6033      	str	r3, [r6, #0]
 8011378:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801137c:	81a3      	strh	r3, [r4, #12]
 801137e:	f04f 30ff 	mov.w	r0, #4294967295
 8011382:	e03e      	b.n	8011402 <__swsetup_r+0xba>
 8011384:	4b25      	ldr	r3, [pc, #148]	; (801141c <__swsetup_r+0xd4>)
 8011386:	429c      	cmp	r4, r3
 8011388:	d101      	bne.n	801138e <__swsetup_r+0x46>
 801138a:	68ac      	ldr	r4, [r5, #8]
 801138c:	e7eb      	b.n	8011366 <__swsetup_r+0x1e>
 801138e:	4b24      	ldr	r3, [pc, #144]	; (8011420 <__swsetup_r+0xd8>)
 8011390:	429c      	cmp	r4, r3
 8011392:	bf08      	it	eq
 8011394:	68ec      	ldreq	r4, [r5, #12]
 8011396:	e7e6      	b.n	8011366 <__swsetup_r+0x1e>
 8011398:	0758      	lsls	r0, r3, #29
 801139a:	d512      	bpl.n	80113c2 <__swsetup_r+0x7a>
 801139c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801139e:	b141      	cbz	r1, 80113b2 <__swsetup_r+0x6a>
 80113a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113a4:	4299      	cmp	r1, r3
 80113a6:	d002      	beq.n	80113ae <__swsetup_r+0x66>
 80113a8:	4630      	mov	r0, r6
 80113aa:	f000 f9c9 	bl	8011740 <_free_r>
 80113ae:	2300      	movs	r3, #0
 80113b0:	6363      	str	r3, [r4, #52]	; 0x34
 80113b2:	89a3      	ldrh	r3, [r4, #12]
 80113b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80113b8:	81a3      	strh	r3, [r4, #12]
 80113ba:	2300      	movs	r3, #0
 80113bc:	6063      	str	r3, [r4, #4]
 80113be:	6923      	ldr	r3, [r4, #16]
 80113c0:	6023      	str	r3, [r4, #0]
 80113c2:	89a3      	ldrh	r3, [r4, #12]
 80113c4:	f043 0308 	orr.w	r3, r3, #8
 80113c8:	81a3      	strh	r3, [r4, #12]
 80113ca:	6923      	ldr	r3, [r4, #16]
 80113cc:	b94b      	cbnz	r3, 80113e2 <__swsetup_r+0x9a>
 80113ce:	89a3      	ldrh	r3, [r4, #12]
 80113d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80113d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113d8:	d003      	beq.n	80113e2 <__swsetup_r+0x9a>
 80113da:	4621      	mov	r1, r4
 80113dc:	4630      	mov	r0, r6
 80113de:	f000 f95b 	bl	8011698 <__smakebuf_r>
 80113e2:	89a0      	ldrh	r0, [r4, #12]
 80113e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113e8:	f010 0301 	ands.w	r3, r0, #1
 80113ec:	d00a      	beq.n	8011404 <__swsetup_r+0xbc>
 80113ee:	2300      	movs	r3, #0
 80113f0:	60a3      	str	r3, [r4, #8]
 80113f2:	6963      	ldr	r3, [r4, #20]
 80113f4:	425b      	negs	r3, r3
 80113f6:	61a3      	str	r3, [r4, #24]
 80113f8:	6923      	ldr	r3, [r4, #16]
 80113fa:	b943      	cbnz	r3, 801140e <__swsetup_r+0xc6>
 80113fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011400:	d1ba      	bne.n	8011378 <__swsetup_r+0x30>
 8011402:	bd70      	pop	{r4, r5, r6, pc}
 8011404:	0781      	lsls	r1, r0, #30
 8011406:	bf58      	it	pl
 8011408:	6963      	ldrpl	r3, [r4, #20]
 801140a:	60a3      	str	r3, [r4, #8]
 801140c:	e7f4      	b.n	80113f8 <__swsetup_r+0xb0>
 801140e:	2000      	movs	r0, #0
 8011410:	e7f7      	b.n	8011402 <__swsetup_r+0xba>
 8011412:	bf00      	nop
 8011414:	20000030 	.word	0x20000030
 8011418:	080129c0 	.word	0x080129c0
 801141c:	080129e0 	.word	0x080129e0
 8011420:	080129a0 	.word	0x080129a0

08011424 <__assert_func>:
 8011424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011426:	4614      	mov	r4, r2
 8011428:	461a      	mov	r2, r3
 801142a:	4b09      	ldr	r3, [pc, #36]	; (8011450 <__assert_func+0x2c>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	4605      	mov	r5, r0
 8011430:	68d8      	ldr	r0, [r3, #12]
 8011432:	b14c      	cbz	r4, 8011448 <__assert_func+0x24>
 8011434:	4b07      	ldr	r3, [pc, #28]	; (8011454 <__assert_func+0x30>)
 8011436:	9100      	str	r1, [sp, #0]
 8011438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801143c:	4906      	ldr	r1, [pc, #24]	; (8011458 <__assert_func+0x34>)
 801143e:	462b      	mov	r3, r5
 8011440:	f000 f8e0 	bl	8011604 <fiprintf>
 8011444:	f000 fe24 	bl	8012090 <abort>
 8011448:	4b04      	ldr	r3, [pc, #16]	; (801145c <__assert_func+0x38>)
 801144a:	461c      	mov	r4, r3
 801144c:	e7f3      	b.n	8011436 <__assert_func+0x12>
 801144e:	bf00      	nop
 8011450:	20000030 	.word	0x20000030
 8011454:	08012a78 	.word	0x08012a78
 8011458:	08012a85 	.word	0x08012a85
 801145c:	08012ab3 	.word	0x08012ab3

08011460 <_close_r>:
 8011460:	b538      	push	{r3, r4, r5, lr}
 8011462:	4d06      	ldr	r5, [pc, #24]	; (801147c <_close_r+0x1c>)
 8011464:	2300      	movs	r3, #0
 8011466:	4604      	mov	r4, r0
 8011468:	4608      	mov	r0, r1
 801146a:	602b      	str	r3, [r5, #0]
 801146c:	f7f0 fc67 	bl	8001d3e <_close>
 8011470:	1c43      	adds	r3, r0, #1
 8011472:	d102      	bne.n	801147a <_close_r+0x1a>
 8011474:	682b      	ldr	r3, [r5, #0]
 8011476:	b103      	cbz	r3, 801147a <_close_r+0x1a>
 8011478:	6023      	str	r3, [r4, #0]
 801147a:	bd38      	pop	{r3, r4, r5, pc}
 801147c:	20002bd0 	.word	0x20002bd0

08011480 <__sflush_r>:
 8011480:	898a      	ldrh	r2, [r1, #12]
 8011482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011486:	4605      	mov	r5, r0
 8011488:	0710      	lsls	r0, r2, #28
 801148a:	460c      	mov	r4, r1
 801148c:	d458      	bmi.n	8011540 <__sflush_r+0xc0>
 801148e:	684b      	ldr	r3, [r1, #4]
 8011490:	2b00      	cmp	r3, #0
 8011492:	dc05      	bgt.n	80114a0 <__sflush_r+0x20>
 8011494:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011496:	2b00      	cmp	r3, #0
 8011498:	dc02      	bgt.n	80114a0 <__sflush_r+0x20>
 801149a:	2000      	movs	r0, #0
 801149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114a2:	2e00      	cmp	r6, #0
 80114a4:	d0f9      	beq.n	801149a <__sflush_r+0x1a>
 80114a6:	2300      	movs	r3, #0
 80114a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80114ac:	682f      	ldr	r7, [r5, #0]
 80114ae:	602b      	str	r3, [r5, #0]
 80114b0:	d032      	beq.n	8011518 <__sflush_r+0x98>
 80114b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80114b4:	89a3      	ldrh	r3, [r4, #12]
 80114b6:	075a      	lsls	r2, r3, #29
 80114b8:	d505      	bpl.n	80114c6 <__sflush_r+0x46>
 80114ba:	6863      	ldr	r3, [r4, #4]
 80114bc:	1ac0      	subs	r0, r0, r3
 80114be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114c0:	b10b      	cbz	r3, 80114c6 <__sflush_r+0x46>
 80114c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80114c4:	1ac0      	subs	r0, r0, r3
 80114c6:	2300      	movs	r3, #0
 80114c8:	4602      	mov	r2, r0
 80114ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114cc:	6a21      	ldr	r1, [r4, #32]
 80114ce:	4628      	mov	r0, r5
 80114d0:	47b0      	blx	r6
 80114d2:	1c43      	adds	r3, r0, #1
 80114d4:	89a3      	ldrh	r3, [r4, #12]
 80114d6:	d106      	bne.n	80114e6 <__sflush_r+0x66>
 80114d8:	6829      	ldr	r1, [r5, #0]
 80114da:	291d      	cmp	r1, #29
 80114dc:	d82c      	bhi.n	8011538 <__sflush_r+0xb8>
 80114de:	4a2a      	ldr	r2, [pc, #168]	; (8011588 <__sflush_r+0x108>)
 80114e0:	40ca      	lsrs	r2, r1
 80114e2:	07d6      	lsls	r6, r2, #31
 80114e4:	d528      	bpl.n	8011538 <__sflush_r+0xb8>
 80114e6:	2200      	movs	r2, #0
 80114e8:	6062      	str	r2, [r4, #4]
 80114ea:	04d9      	lsls	r1, r3, #19
 80114ec:	6922      	ldr	r2, [r4, #16]
 80114ee:	6022      	str	r2, [r4, #0]
 80114f0:	d504      	bpl.n	80114fc <__sflush_r+0x7c>
 80114f2:	1c42      	adds	r2, r0, #1
 80114f4:	d101      	bne.n	80114fa <__sflush_r+0x7a>
 80114f6:	682b      	ldr	r3, [r5, #0]
 80114f8:	b903      	cbnz	r3, 80114fc <__sflush_r+0x7c>
 80114fa:	6560      	str	r0, [r4, #84]	; 0x54
 80114fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114fe:	602f      	str	r7, [r5, #0]
 8011500:	2900      	cmp	r1, #0
 8011502:	d0ca      	beq.n	801149a <__sflush_r+0x1a>
 8011504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011508:	4299      	cmp	r1, r3
 801150a:	d002      	beq.n	8011512 <__sflush_r+0x92>
 801150c:	4628      	mov	r0, r5
 801150e:	f000 f917 	bl	8011740 <_free_r>
 8011512:	2000      	movs	r0, #0
 8011514:	6360      	str	r0, [r4, #52]	; 0x34
 8011516:	e7c1      	b.n	801149c <__sflush_r+0x1c>
 8011518:	6a21      	ldr	r1, [r4, #32]
 801151a:	2301      	movs	r3, #1
 801151c:	4628      	mov	r0, r5
 801151e:	47b0      	blx	r6
 8011520:	1c41      	adds	r1, r0, #1
 8011522:	d1c7      	bne.n	80114b4 <__sflush_r+0x34>
 8011524:	682b      	ldr	r3, [r5, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d0c4      	beq.n	80114b4 <__sflush_r+0x34>
 801152a:	2b1d      	cmp	r3, #29
 801152c:	d001      	beq.n	8011532 <__sflush_r+0xb2>
 801152e:	2b16      	cmp	r3, #22
 8011530:	d101      	bne.n	8011536 <__sflush_r+0xb6>
 8011532:	602f      	str	r7, [r5, #0]
 8011534:	e7b1      	b.n	801149a <__sflush_r+0x1a>
 8011536:	89a3      	ldrh	r3, [r4, #12]
 8011538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801153c:	81a3      	strh	r3, [r4, #12]
 801153e:	e7ad      	b.n	801149c <__sflush_r+0x1c>
 8011540:	690f      	ldr	r7, [r1, #16]
 8011542:	2f00      	cmp	r7, #0
 8011544:	d0a9      	beq.n	801149a <__sflush_r+0x1a>
 8011546:	0793      	lsls	r3, r2, #30
 8011548:	680e      	ldr	r6, [r1, #0]
 801154a:	bf08      	it	eq
 801154c:	694b      	ldreq	r3, [r1, #20]
 801154e:	600f      	str	r7, [r1, #0]
 8011550:	bf18      	it	ne
 8011552:	2300      	movne	r3, #0
 8011554:	eba6 0807 	sub.w	r8, r6, r7
 8011558:	608b      	str	r3, [r1, #8]
 801155a:	f1b8 0f00 	cmp.w	r8, #0
 801155e:	dd9c      	ble.n	801149a <__sflush_r+0x1a>
 8011560:	6a21      	ldr	r1, [r4, #32]
 8011562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011564:	4643      	mov	r3, r8
 8011566:	463a      	mov	r2, r7
 8011568:	4628      	mov	r0, r5
 801156a:	47b0      	blx	r6
 801156c:	2800      	cmp	r0, #0
 801156e:	dc06      	bgt.n	801157e <__sflush_r+0xfe>
 8011570:	89a3      	ldrh	r3, [r4, #12]
 8011572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011576:	81a3      	strh	r3, [r4, #12]
 8011578:	f04f 30ff 	mov.w	r0, #4294967295
 801157c:	e78e      	b.n	801149c <__sflush_r+0x1c>
 801157e:	4407      	add	r7, r0
 8011580:	eba8 0800 	sub.w	r8, r8, r0
 8011584:	e7e9      	b.n	801155a <__sflush_r+0xda>
 8011586:	bf00      	nop
 8011588:	20400001 	.word	0x20400001

0801158c <_fflush_r>:
 801158c:	b538      	push	{r3, r4, r5, lr}
 801158e:	690b      	ldr	r3, [r1, #16]
 8011590:	4605      	mov	r5, r0
 8011592:	460c      	mov	r4, r1
 8011594:	b913      	cbnz	r3, 801159c <_fflush_r+0x10>
 8011596:	2500      	movs	r5, #0
 8011598:	4628      	mov	r0, r5
 801159a:	bd38      	pop	{r3, r4, r5, pc}
 801159c:	b118      	cbz	r0, 80115a6 <_fflush_r+0x1a>
 801159e:	6983      	ldr	r3, [r0, #24]
 80115a0:	b90b      	cbnz	r3, 80115a6 <_fflush_r+0x1a>
 80115a2:	f7ff fb0f 	bl	8010bc4 <__sinit>
 80115a6:	4b14      	ldr	r3, [pc, #80]	; (80115f8 <_fflush_r+0x6c>)
 80115a8:	429c      	cmp	r4, r3
 80115aa:	d11b      	bne.n	80115e4 <_fflush_r+0x58>
 80115ac:	686c      	ldr	r4, [r5, #4]
 80115ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d0ef      	beq.n	8011596 <_fflush_r+0xa>
 80115b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80115b8:	07d0      	lsls	r0, r2, #31
 80115ba:	d404      	bmi.n	80115c6 <_fflush_r+0x3a>
 80115bc:	0599      	lsls	r1, r3, #22
 80115be:	d402      	bmi.n	80115c6 <_fflush_r+0x3a>
 80115c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115c2:	f7ff fbc2 	bl	8010d4a <__retarget_lock_acquire_recursive>
 80115c6:	4628      	mov	r0, r5
 80115c8:	4621      	mov	r1, r4
 80115ca:	f7ff ff59 	bl	8011480 <__sflush_r>
 80115ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115d0:	07da      	lsls	r2, r3, #31
 80115d2:	4605      	mov	r5, r0
 80115d4:	d4e0      	bmi.n	8011598 <_fflush_r+0xc>
 80115d6:	89a3      	ldrh	r3, [r4, #12]
 80115d8:	059b      	lsls	r3, r3, #22
 80115da:	d4dd      	bmi.n	8011598 <_fflush_r+0xc>
 80115dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115de:	f7ff fbb5 	bl	8010d4c <__retarget_lock_release_recursive>
 80115e2:	e7d9      	b.n	8011598 <_fflush_r+0xc>
 80115e4:	4b05      	ldr	r3, [pc, #20]	; (80115fc <_fflush_r+0x70>)
 80115e6:	429c      	cmp	r4, r3
 80115e8:	d101      	bne.n	80115ee <_fflush_r+0x62>
 80115ea:	68ac      	ldr	r4, [r5, #8]
 80115ec:	e7df      	b.n	80115ae <_fflush_r+0x22>
 80115ee:	4b04      	ldr	r3, [pc, #16]	; (8011600 <_fflush_r+0x74>)
 80115f0:	429c      	cmp	r4, r3
 80115f2:	bf08      	it	eq
 80115f4:	68ec      	ldreq	r4, [r5, #12]
 80115f6:	e7da      	b.n	80115ae <_fflush_r+0x22>
 80115f8:	080129c0 	.word	0x080129c0
 80115fc:	080129e0 	.word	0x080129e0
 8011600:	080129a0 	.word	0x080129a0

08011604 <fiprintf>:
 8011604:	b40e      	push	{r1, r2, r3}
 8011606:	b503      	push	{r0, r1, lr}
 8011608:	4601      	mov	r1, r0
 801160a:	ab03      	add	r3, sp, #12
 801160c:	4805      	ldr	r0, [pc, #20]	; (8011624 <fiprintf+0x20>)
 801160e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011612:	6800      	ldr	r0, [r0, #0]
 8011614:	9301      	str	r3, [sp, #4]
 8011616:	f000 fa65 	bl	8011ae4 <_vfiprintf_r>
 801161a:	b002      	add	sp, #8
 801161c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011620:	b003      	add	sp, #12
 8011622:	4770      	bx	lr
 8011624:	20000030 	.word	0x20000030

08011628 <_lseek_r>:
 8011628:	b538      	push	{r3, r4, r5, lr}
 801162a:	4d07      	ldr	r5, [pc, #28]	; (8011648 <_lseek_r+0x20>)
 801162c:	4604      	mov	r4, r0
 801162e:	4608      	mov	r0, r1
 8011630:	4611      	mov	r1, r2
 8011632:	2200      	movs	r2, #0
 8011634:	602a      	str	r2, [r5, #0]
 8011636:	461a      	mov	r2, r3
 8011638:	f7f0 fba8 	bl	8001d8c <_lseek>
 801163c:	1c43      	adds	r3, r0, #1
 801163e:	d102      	bne.n	8011646 <_lseek_r+0x1e>
 8011640:	682b      	ldr	r3, [r5, #0]
 8011642:	b103      	cbz	r3, 8011646 <_lseek_r+0x1e>
 8011644:	6023      	str	r3, [r4, #0]
 8011646:	bd38      	pop	{r3, r4, r5, pc}
 8011648:	20002bd0 	.word	0x20002bd0

0801164c <__swhatbuf_r>:
 801164c:	b570      	push	{r4, r5, r6, lr}
 801164e:	460e      	mov	r6, r1
 8011650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011654:	2900      	cmp	r1, #0
 8011656:	b096      	sub	sp, #88	; 0x58
 8011658:	4614      	mov	r4, r2
 801165a:	461d      	mov	r5, r3
 801165c:	da08      	bge.n	8011670 <__swhatbuf_r+0x24>
 801165e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011662:	2200      	movs	r2, #0
 8011664:	602a      	str	r2, [r5, #0]
 8011666:	061a      	lsls	r2, r3, #24
 8011668:	d410      	bmi.n	801168c <__swhatbuf_r+0x40>
 801166a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801166e:	e00e      	b.n	801168e <__swhatbuf_r+0x42>
 8011670:	466a      	mov	r2, sp
 8011672:	f000 fd15 	bl	80120a0 <_fstat_r>
 8011676:	2800      	cmp	r0, #0
 8011678:	dbf1      	blt.n	801165e <__swhatbuf_r+0x12>
 801167a:	9a01      	ldr	r2, [sp, #4]
 801167c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011680:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011684:	425a      	negs	r2, r3
 8011686:	415a      	adcs	r2, r3
 8011688:	602a      	str	r2, [r5, #0]
 801168a:	e7ee      	b.n	801166a <__swhatbuf_r+0x1e>
 801168c:	2340      	movs	r3, #64	; 0x40
 801168e:	2000      	movs	r0, #0
 8011690:	6023      	str	r3, [r4, #0]
 8011692:	b016      	add	sp, #88	; 0x58
 8011694:	bd70      	pop	{r4, r5, r6, pc}
	...

08011698 <__smakebuf_r>:
 8011698:	898b      	ldrh	r3, [r1, #12]
 801169a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801169c:	079d      	lsls	r5, r3, #30
 801169e:	4606      	mov	r6, r0
 80116a0:	460c      	mov	r4, r1
 80116a2:	d507      	bpl.n	80116b4 <__smakebuf_r+0x1c>
 80116a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80116a8:	6023      	str	r3, [r4, #0]
 80116aa:	6123      	str	r3, [r4, #16]
 80116ac:	2301      	movs	r3, #1
 80116ae:	6163      	str	r3, [r4, #20]
 80116b0:	b002      	add	sp, #8
 80116b2:	bd70      	pop	{r4, r5, r6, pc}
 80116b4:	ab01      	add	r3, sp, #4
 80116b6:	466a      	mov	r2, sp
 80116b8:	f7ff ffc8 	bl	801164c <__swhatbuf_r>
 80116bc:	9900      	ldr	r1, [sp, #0]
 80116be:	4605      	mov	r5, r0
 80116c0:	4630      	mov	r0, r6
 80116c2:	f7ff fb8b 	bl	8010ddc <_malloc_r>
 80116c6:	b948      	cbnz	r0, 80116dc <__smakebuf_r+0x44>
 80116c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116cc:	059a      	lsls	r2, r3, #22
 80116ce:	d4ef      	bmi.n	80116b0 <__smakebuf_r+0x18>
 80116d0:	f023 0303 	bic.w	r3, r3, #3
 80116d4:	f043 0302 	orr.w	r3, r3, #2
 80116d8:	81a3      	strh	r3, [r4, #12]
 80116da:	e7e3      	b.n	80116a4 <__smakebuf_r+0xc>
 80116dc:	4b0d      	ldr	r3, [pc, #52]	; (8011714 <__smakebuf_r+0x7c>)
 80116de:	62b3      	str	r3, [r6, #40]	; 0x28
 80116e0:	89a3      	ldrh	r3, [r4, #12]
 80116e2:	6020      	str	r0, [r4, #0]
 80116e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116e8:	81a3      	strh	r3, [r4, #12]
 80116ea:	9b00      	ldr	r3, [sp, #0]
 80116ec:	6163      	str	r3, [r4, #20]
 80116ee:	9b01      	ldr	r3, [sp, #4]
 80116f0:	6120      	str	r0, [r4, #16]
 80116f2:	b15b      	cbz	r3, 801170c <__smakebuf_r+0x74>
 80116f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116f8:	4630      	mov	r0, r6
 80116fa:	f000 fce3 	bl	80120c4 <_isatty_r>
 80116fe:	b128      	cbz	r0, 801170c <__smakebuf_r+0x74>
 8011700:	89a3      	ldrh	r3, [r4, #12]
 8011702:	f023 0303 	bic.w	r3, r3, #3
 8011706:	f043 0301 	orr.w	r3, r3, #1
 801170a:	81a3      	strh	r3, [r4, #12]
 801170c:	89a0      	ldrh	r0, [r4, #12]
 801170e:	4305      	orrs	r5, r0
 8011710:	81a5      	strh	r5, [r4, #12]
 8011712:	e7cd      	b.n	80116b0 <__smakebuf_r+0x18>
 8011714:	08010b5d 	.word	0x08010b5d

08011718 <malloc>:
 8011718:	4b02      	ldr	r3, [pc, #8]	; (8011724 <malloc+0xc>)
 801171a:	4601      	mov	r1, r0
 801171c:	6818      	ldr	r0, [r3, #0]
 801171e:	f7ff bb5d 	b.w	8010ddc <_malloc_r>
 8011722:	bf00      	nop
 8011724:	20000030 	.word	0x20000030

08011728 <__malloc_lock>:
 8011728:	4801      	ldr	r0, [pc, #4]	; (8011730 <__malloc_lock+0x8>)
 801172a:	f7ff bb0e 	b.w	8010d4a <__retarget_lock_acquire_recursive>
 801172e:	bf00      	nop
 8011730:	20002bc4 	.word	0x20002bc4

08011734 <__malloc_unlock>:
 8011734:	4801      	ldr	r0, [pc, #4]	; (801173c <__malloc_unlock+0x8>)
 8011736:	f7ff bb09 	b.w	8010d4c <__retarget_lock_release_recursive>
 801173a:	bf00      	nop
 801173c:	20002bc4 	.word	0x20002bc4

08011740 <_free_r>:
 8011740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011742:	2900      	cmp	r1, #0
 8011744:	d044      	beq.n	80117d0 <_free_r+0x90>
 8011746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801174a:	9001      	str	r0, [sp, #4]
 801174c:	2b00      	cmp	r3, #0
 801174e:	f1a1 0404 	sub.w	r4, r1, #4
 8011752:	bfb8      	it	lt
 8011754:	18e4      	addlt	r4, r4, r3
 8011756:	f7ff ffe7 	bl	8011728 <__malloc_lock>
 801175a:	4a1e      	ldr	r2, [pc, #120]	; (80117d4 <_free_r+0x94>)
 801175c:	9801      	ldr	r0, [sp, #4]
 801175e:	6813      	ldr	r3, [r2, #0]
 8011760:	b933      	cbnz	r3, 8011770 <_free_r+0x30>
 8011762:	6063      	str	r3, [r4, #4]
 8011764:	6014      	str	r4, [r2, #0]
 8011766:	b003      	add	sp, #12
 8011768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801176c:	f7ff bfe2 	b.w	8011734 <__malloc_unlock>
 8011770:	42a3      	cmp	r3, r4
 8011772:	d908      	bls.n	8011786 <_free_r+0x46>
 8011774:	6825      	ldr	r5, [r4, #0]
 8011776:	1961      	adds	r1, r4, r5
 8011778:	428b      	cmp	r3, r1
 801177a:	bf01      	itttt	eq
 801177c:	6819      	ldreq	r1, [r3, #0]
 801177e:	685b      	ldreq	r3, [r3, #4]
 8011780:	1949      	addeq	r1, r1, r5
 8011782:	6021      	streq	r1, [r4, #0]
 8011784:	e7ed      	b.n	8011762 <_free_r+0x22>
 8011786:	461a      	mov	r2, r3
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	b10b      	cbz	r3, 8011790 <_free_r+0x50>
 801178c:	42a3      	cmp	r3, r4
 801178e:	d9fa      	bls.n	8011786 <_free_r+0x46>
 8011790:	6811      	ldr	r1, [r2, #0]
 8011792:	1855      	adds	r5, r2, r1
 8011794:	42a5      	cmp	r5, r4
 8011796:	d10b      	bne.n	80117b0 <_free_r+0x70>
 8011798:	6824      	ldr	r4, [r4, #0]
 801179a:	4421      	add	r1, r4
 801179c:	1854      	adds	r4, r2, r1
 801179e:	42a3      	cmp	r3, r4
 80117a0:	6011      	str	r1, [r2, #0]
 80117a2:	d1e0      	bne.n	8011766 <_free_r+0x26>
 80117a4:	681c      	ldr	r4, [r3, #0]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	6053      	str	r3, [r2, #4]
 80117aa:	4421      	add	r1, r4
 80117ac:	6011      	str	r1, [r2, #0]
 80117ae:	e7da      	b.n	8011766 <_free_r+0x26>
 80117b0:	d902      	bls.n	80117b8 <_free_r+0x78>
 80117b2:	230c      	movs	r3, #12
 80117b4:	6003      	str	r3, [r0, #0]
 80117b6:	e7d6      	b.n	8011766 <_free_r+0x26>
 80117b8:	6825      	ldr	r5, [r4, #0]
 80117ba:	1961      	adds	r1, r4, r5
 80117bc:	428b      	cmp	r3, r1
 80117be:	bf04      	itt	eq
 80117c0:	6819      	ldreq	r1, [r3, #0]
 80117c2:	685b      	ldreq	r3, [r3, #4]
 80117c4:	6063      	str	r3, [r4, #4]
 80117c6:	bf04      	itt	eq
 80117c8:	1949      	addeq	r1, r1, r5
 80117ca:	6021      	streq	r1, [r4, #0]
 80117cc:	6054      	str	r4, [r2, #4]
 80117ce:	e7ca      	b.n	8011766 <_free_r+0x26>
 80117d0:	b003      	add	sp, #12
 80117d2:	bd30      	pop	{r4, r5, pc}
 80117d4:	20002bc8 	.word	0x20002bc8

080117d8 <__ssputs_r>:
 80117d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117dc:	688e      	ldr	r6, [r1, #8]
 80117de:	429e      	cmp	r6, r3
 80117e0:	4682      	mov	sl, r0
 80117e2:	460c      	mov	r4, r1
 80117e4:	4690      	mov	r8, r2
 80117e6:	461f      	mov	r7, r3
 80117e8:	d838      	bhi.n	801185c <__ssputs_r+0x84>
 80117ea:	898a      	ldrh	r2, [r1, #12]
 80117ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80117f0:	d032      	beq.n	8011858 <__ssputs_r+0x80>
 80117f2:	6825      	ldr	r5, [r4, #0]
 80117f4:	6909      	ldr	r1, [r1, #16]
 80117f6:	eba5 0901 	sub.w	r9, r5, r1
 80117fa:	6965      	ldr	r5, [r4, #20]
 80117fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011804:	3301      	adds	r3, #1
 8011806:	444b      	add	r3, r9
 8011808:	106d      	asrs	r5, r5, #1
 801180a:	429d      	cmp	r5, r3
 801180c:	bf38      	it	cc
 801180e:	461d      	movcc	r5, r3
 8011810:	0553      	lsls	r3, r2, #21
 8011812:	d531      	bpl.n	8011878 <__ssputs_r+0xa0>
 8011814:	4629      	mov	r1, r5
 8011816:	f7ff fae1 	bl	8010ddc <_malloc_r>
 801181a:	4606      	mov	r6, r0
 801181c:	b950      	cbnz	r0, 8011834 <__ssputs_r+0x5c>
 801181e:	230c      	movs	r3, #12
 8011820:	f8ca 3000 	str.w	r3, [sl]
 8011824:	89a3      	ldrh	r3, [r4, #12]
 8011826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801182a:	81a3      	strh	r3, [r4, #12]
 801182c:	f04f 30ff 	mov.w	r0, #4294967295
 8011830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011834:	6921      	ldr	r1, [r4, #16]
 8011836:	464a      	mov	r2, r9
 8011838:	f7ff fa99 	bl	8010d6e <memcpy>
 801183c:	89a3      	ldrh	r3, [r4, #12]
 801183e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011846:	81a3      	strh	r3, [r4, #12]
 8011848:	6126      	str	r6, [r4, #16]
 801184a:	6165      	str	r5, [r4, #20]
 801184c:	444e      	add	r6, r9
 801184e:	eba5 0509 	sub.w	r5, r5, r9
 8011852:	6026      	str	r6, [r4, #0]
 8011854:	60a5      	str	r5, [r4, #8]
 8011856:	463e      	mov	r6, r7
 8011858:	42be      	cmp	r6, r7
 801185a:	d900      	bls.n	801185e <__ssputs_r+0x86>
 801185c:	463e      	mov	r6, r7
 801185e:	6820      	ldr	r0, [r4, #0]
 8011860:	4632      	mov	r2, r6
 8011862:	4641      	mov	r1, r8
 8011864:	f000 fc3e 	bl	80120e4 <memmove>
 8011868:	68a3      	ldr	r3, [r4, #8]
 801186a:	1b9b      	subs	r3, r3, r6
 801186c:	60a3      	str	r3, [r4, #8]
 801186e:	6823      	ldr	r3, [r4, #0]
 8011870:	4433      	add	r3, r6
 8011872:	6023      	str	r3, [r4, #0]
 8011874:	2000      	movs	r0, #0
 8011876:	e7db      	b.n	8011830 <__ssputs_r+0x58>
 8011878:	462a      	mov	r2, r5
 801187a:	f000 fc4d 	bl	8012118 <_realloc_r>
 801187e:	4606      	mov	r6, r0
 8011880:	2800      	cmp	r0, #0
 8011882:	d1e1      	bne.n	8011848 <__ssputs_r+0x70>
 8011884:	6921      	ldr	r1, [r4, #16]
 8011886:	4650      	mov	r0, sl
 8011888:	f7ff ff5a 	bl	8011740 <_free_r>
 801188c:	e7c7      	b.n	801181e <__ssputs_r+0x46>
	...

08011890 <_svfiprintf_r>:
 8011890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011894:	4698      	mov	r8, r3
 8011896:	898b      	ldrh	r3, [r1, #12]
 8011898:	061b      	lsls	r3, r3, #24
 801189a:	b09d      	sub	sp, #116	; 0x74
 801189c:	4607      	mov	r7, r0
 801189e:	460d      	mov	r5, r1
 80118a0:	4614      	mov	r4, r2
 80118a2:	d50e      	bpl.n	80118c2 <_svfiprintf_r+0x32>
 80118a4:	690b      	ldr	r3, [r1, #16]
 80118a6:	b963      	cbnz	r3, 80118c2 <_svfiprintf_r+0x32>
 80118a8:	2140      	movs	r1, #64	; 0x40
 80118aa:	f7ff fa97 	bl	8010ddc <_malloc_r>
 80118ae:	6028      	str	r0, [r5, #0]
 80118b0:	6128      	str	r0, [r5, #16]
 80118b2:	b920      	cbnz	r0, 80118be <_svfiprintf_r+0x2e>
 80118b4:	230c      	movs	r3, #12
 80118b6:	603b      	str	r3, [r7, #0]
 80118b8:	f04f 30ff 	mov.w	r0, #4294967295
 80118bc:	e0d1      	b.n	8011a62 <_svfiprintf_r+0x1d2>
 80118be:	2340      	movs	r3, #64	; 0x40
 80118c0:	616b      	str	r3, [r5, #20]
 80118c2:	2300      	movs	r3, #0
 80118c4:	9309      	str	r3, [sp, #36]	; 0x24
 80118c6:	2320      	movs	r3, #32
 80118c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80118d0:	2330      	movs	r3, #48	; 0x30
 80118d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011a7c <_svfiprintf_r+0x1ec>
 80118d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118da:	f04f 0901 	mov.w	r9, #1
 80118de:	4623      	mov	r3, r4
 80118e0:	469a      	mov	sl, r3
 80118e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118e6:	b10a      	cbz	r2, 80118ec <_svfiprintf_r+0x5c>
 80118e8:	2a25      	cmp	r2, #37	; 0x25
 80118ea:	d1f9      	bne.n	80118e0 <_svfiprintf_r+0x50>
 80118ec:	ebba 0b04 	subs.w	fp, sl, r4
 80118f0:	d00b      	beq.n	801190a <_svfiprintf_r+0x7a>
 80118f2:	465b      	mov	r3, fp
 80118f4:	4622      	mov	r2, r4
 80118f6:	4629      	mov	r1, r5
 80118f8:	4638      	mov	r0, r7
 80118fa:	f7ff ff6d 	bl	80117d8 <__ssputs_r>
 80118fe:	3001      	adds	r0, #1
 8011900:	f000 80aa 	beq.w	8011a58 <_svfiprintf_r+0x1c8>
 8011904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011906:	445a      	add	r2, fp
 8011908:	9209      	str	r2, [sp, #36]	; 0x24
 801190a:	f89a 3000 	ldrb.w	r3, [sl]
 801190e:	2b00      	cmp	r3, #0
 8011910:	f000 80a2 	beq.w	8011a58 <_svfiprintf_r+0x1c8>
 8011914:	2300      	movs	r3, #0
 8011916:	f04f 32ff 	mov.w	r2, #4294967295
 801191a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801191e:	f10a 0a01 	add.w	sl, sl, #1
 8011922:	9304      	str	r3, [sp, #16]
 8011924:	9307      	str	r3, [sp, #28]
 8011926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801192a:	931a      	str	r3, [sp, #104]	; 0x68
 801192c:	4654      	mov	r4, sl
 801192e:	2205      	movs	r2, #5
 8011930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011934:	4851      	ldr	r0, [pc, #324]	; (8011a7c <_svfiprintf_r+0x1ec>)
 8011936:	f7ee fc9b 	bl	8000270 <memchr>
 801193a:	9a04      	ldr	r2, [sp, #16]
 801193c:	b9d8      	cbnz	r0, 8011976 <_svfiprintf_r+0xe6>
 801193e:	06d0      	lsls	r0, r2, #27
 8011940:	bf44      	itt	mi
 8011942:	2320      	movmi	r3, #32
 8011944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011948:	0711      	lsls	r1, r2, #28
 801194a:	bf44      	itt	mi
 801194c:	232b      	movmi	r3, #43	; 0x2b
 801194e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011952:	f89a 3000 	ldrb.w	r3, [sl]
 8011956:	2b2a      	cmp	r3, #42	; 0x2a
 8011958:	d015      	beq.n	8011986 <_svfiprintf_r+0xf6>
 801195a:	9a07      	ldr	r2, [sp, #28]
 801195c:	4654      	mov	r4, sl
 801195e:	2000      	movs	r0, #0
 8011960:	f04f 0c0a 	mov.w	ip, #10
 8011964:	4621      	mov	r1, r4
 8011966:	f811 3b01 	ldrb.w	r3, [r1], #1
 801196a:	3b30      	subs	r3, #48	; 0x30
 801196c:	2b09      	cmp	r3, #9
 801196e:	d94e      	bls.n	8011a0e <_svfiprintf_r+0x17e>
 8011970:	b1b0      	cbz	r0, 80119a0 <_svfiprintf_r+0x110>
 8011972:	9207      	str	r2, [sp, #28]
 8011974:	e014      	b.n	80119a0 <_svfiprintf_r+0x110>
 8011976:	eba0 0308 	sub.w	r3, r0, r8
 801197a:	fa09 f303 	lsl.w	r3, r9, r3
 801197e:	4313      	orrs	r3, r2
 8011980:	9304      	str	r3, [sp, #16]
 8011982:	46a2      	mov	sl, r4
 8011984:	e7d2      	b.n	801192c <_svfiprintf_r+0x9c>
 8011986:	9b03      	ldr	r3, [sp, #12]
 8011988:	1d19      	adds	r1, r3, #4
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	9103      	str	r1, [sp, #12]
 801198e:	2b00      	cmp	r3, #0
 8011990:	bfbb      	ittet	lt
 8011992:	425b      	neglt	r3, r3
 8011994:	f042 0202 	orrlt.w	r2, r2, #2
 8011998:	9307      	strge	r3, [sp, #28]
 801199a:	9307      	strlt	r3, [sp, #28]
 801199c:	bfb8      	it	lt
 801199e:	9204      	strlt	r2, [sp, #16]
 80119a0:	7823      	ldrb	r3, [r4, #0]
 80119a2:	2b2e      	cmp	r3, #46	; 0x2e
 80119a4:	d10c      	bne.n	80119c0 <_svfiprintf_r+0x130>
 80119a6:	7863      	ldrb	r3, [r4, #1]
 80119a8:	2b2a      	cmp	r3, #42	; 0x2a
 80119aa:	d135      	bne.n	8011a18 <_svfiprintf_r+0x188>
 80119ac:	9b03      	ldr	r3, [sp, #12]
 80119ae:	1d1a      	adds	r2, r3, #4
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	9203      	str	r2, [sp, #12]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	bfb8      	it	lt
 80119b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80119bc:	3402      	adds	r4, #2
 80119be:	9305      	str	r3, [sp, #20]
 80119c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011a8c <_svfiprintf_r+0x1fc>
 80119c4:	7821      	ldrb	r1, [r4, #0]
 80119c6:	2203      	movs	r2, #3
 80119c8:	4650      	mov	r0, sl
 80119ca:	f7ee fc51 	bl	8000270 <memchr>
 80119ce:	b140      	cbz	r0, 80119e2 <_svfiprintf_r+0x152>
 80119d0:	2340      	movs	r3, #64	; 0x40
 80119d2:	eba0 000a 	sub.w	r0, r0, sl
 80119d6:	fa03 f000 	lsl.w	r0, r3, r0
 80119da:	9b04      	ldr	r3, [sp, #16]
 80119dc:	4303      	orrs	r3, r0
 80119de:	3401      	adds	r4, #1
 80119e0:	9304      	str	r3, [sp, #16]
 80119e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119e6:	4826      	ldr	r0, [pc, #152]	; (8011a80 <_svfiprintf_r+0x1f0>)
 80119e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119ec:	2206      	movs	r2, #6
 80119ee:	f7ee fc3f 	bl	8000270 <memchr>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d038      	beq.n	8011a68 <_svfiprintf_r+0x1d8>
 80119f6:	4b23      	ldr	r3, [pc, #140]	; (8011a84 <_svfiprintf_r+0x1f4>)
 80119f8:	bb1b      	cbnz	r3, 8011a42 <_svfiprintf_r+0x1b2>
 80119fa:	9b03      	ldr	r3, [sp, #12]
 80119fc:	3307      	adds	r3, #7
 80119fe:	f023 0307 	bic.w	r3, r3, #7
 8011a02:	3308      	adds	r3, #8
 8011a04:	9303      	str	r3, [sp, #12]
 8011a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a08:	4433      	add	r3, r6
 8011a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8011a0c:	e767      	b.n	80118de <_svfiprintf_r+0x4e>
 8011a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a12:	460c      	mov	r4, r1
 8011a14:	2001      	movs	r0, #1
 8011a16:	e7a5      	b.n	8011964 <_svfiprintf_r+0xd4>
 8011a18:	2300      	movs	r3, #0
 8011a1a:	3401      	adds	r4, #1
 8011a1c:	9305      	str	r3, [sp, #20]
 8011a1e:	4619      	mov	r1, r3
 8011a20:	f04f 0c0a 	mov.w	ip, #10
 8011a24:	4620      	mov	r0, r4
 8011a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a2a:	3a30      	subs	r2, #48	; 0x30
 8011a2c:	2a09      	cmp	r2, #9
 8011a2e:	d903      	bls.n	8011a38 <_svfiprintf_r+0x1a8>
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d0c5      	beq.n	80119c0 <_svfiprintf_r+0x130>
 8011a34:	9105      	str	r1, [sp, #20]
 8011a36:	e7c3      	b.n	80119c0 <_svfiprintf_r+0x130>
 8011a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a3c:	4604      	mov	r4, r0
 8011a3e:	2301      	movs	r3, #1
 8011a40:	e7f0      	b.n	8011a24 <_svfiprintf_r+0x194>
 8011a42:	ab03      	add	r3, sp, #12
 8011a44:	9300      	str	r3, [sp, #0]
 8011a46:	462a      	mov	r2, r5
 8011a48:	4b0f      	ldr	r3, [pc, #60]	; (8011a88 <_svfiprintf_r+0x1f8>)
 8011a4a:	a904      	add	r1, sp, #16
 8011a4c:	4638      	mov	r0, r7
 8011a4e:	f3af 8000 	nop.w
 8011a52:	1c42      	adds	r2, r0, #1
 8011a54:	4606      	mov	r6, r0
 8011a56:	d1d6      	bne.n	8011a06 <_svfiprintf_r+0x176>
 8011a58:	89ab      	ldrh	r3, [r5, #12]
 8011a5a:	065b      	lsls	r3, r3, #25
 8011a5c:	f53f af2c 	bmi.w	80118b8 <_svfiprintf_r+0x28>
 8011a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a62:	b01d      	add	sp, #116	; 0x74
 8011a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a68:	ab03      	add	r3, sp, #12
 8011a6a:	9300      	str	r3, [sp, #0]
 8011a6c:	462a      	mov	r2, r5
 8011a6e:	4b06      	ldr	r3, [pc, #24]	; (8011a88 <_svfiprintf_r+0x1f8>)
 8011a70:	a904      	add	r1, sp, #16
 8011a72:	4638      	mov	r0, r7
 8011a74:	f000 f9d4 	bl	8011e20 <_printf_i>
 8011a78:	e7eb      	b.n	8011a52 <_svfiprintf_r+0x1c2>
 8011a7a:	bf00      	nop
 8011a7c:	08012ab4 	.word	0x08012ab4
 8011a80:	08012abe 	.word	0x08012abe
 8011a84:	00000000 	.word	0x00000000
 8011a88:	080117d9 	.word	0x080117d9
 8011a8c:	08012aba 	.word	0x08012aba

08011a90 <__sfputc_r>:
 8011a90:	6893      	ldr	r3, [r2, #8]
 8011a92:	3b01      	subs	r3, #1
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	b410      	push	{r4}
 8011a98:	6093      	str	r3, [r2, #8]
 8011a9a:	da08      	bge.n	8011aae <__sfputc_r+0x1e>
 8011a9c:	6994      	ldr	r4, [r2, #24]
 8011a9e:	42a3      	cmp	r3, r4
 8011aa0:	db01      	blt.n	8011aa6 <__sfputc_r+0x16>
 8011aa2:	290a      	cmp	r1, #10
 8011aa4:	d103      	bne.n	8011aae <__sfputc_r+0x1e>
 8011aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011aaa:	f7ff bbfb 	b.w	80112a4 <__swbuf_r>
 8011aae:	6813      	ldr	r3, [r2, #0]
 8011ab0:	1c58      	adds	r0, r3, #1
 8011ab2:	6010      	str	r0, [r2, #0]
 8011ab4:	7019      	strb	r1, [r3, #0]
 8011ab6:	4608      	mov	r0, r1
 8011ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011abc:	4770      	bx	lr

08011abe <__sfputs_r>:
 8011abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ac0:	4606      	mov	r6, r0
 8011ac2:	460f      	mov	r7, r1
 8011ac4:	4614      	mov	r4, r2
 8011ac6:	18d5      	adds	r5, r2, r3
 8011ac8:	42ac      	cmp	r4, r5
 8011aca:	d101      	bne.n	8011ad0 <__sfputs_r+0x12>
 8011acc:	2000      	movs	r0, #0
 8011ace:	e007      	b.n	8011ae0 <__sfputs_r+0x22>
 8011ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ad4:	463a      	mov	r2, r7
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f7ff ffda 	bl	8011a90 <__sfputc_r>
 8011adc:	1c43      	adds	r3, r0, #1
 8011ade:	d1f3      	bne.n	8011ac8 <__sfputs_r+0xa>
 8011ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ae4 <_vfiprintf_r>:
 8011ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae8:	460d      	mov	r5, r1
 8011aea:	b09d      	sub	sp, #116	; 0x74
 8011aec:	4614      	mov	r4, r2
 8011aee:	4698      	mov	r8, r3
 8011af0:	4606      	mov	r6, r0
 8011af2:	b118      	cbz	r0, 8011afc <_vfiprintf_r+0x18>
 8011af4:	6983      	ldr	r3, [r0, #24]
 8011af6:	b90b      	cbnz	r3, 8011afc <_vfiprintf_r+0x18>
 8011af8:	f7ff f864 	bl	8010bc4 <__sinit>
 8011afc:	4b89      	ldr	r3, [pc, #548]	; (8011d24 <_vfiprintf_r+0x240>)
 8011afe:	429d      	cmp	r5, r3
 8011b00:	d11b      	bne.n	8011b3a <_vfiprintf_r+0x56>
 8011b02:	6875      	ldr	r5, [r6, #4]
 8011b04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b06:	07d9      	lsls	r1, r3, #31
 8011b08:	d405      	bmi.n	8011b16 <_vfiprintf_r+0x32>
 8011b0a:	89ab      	ldrh	r3, [r5, #12]
 8011b0c:	059a      	lsls	r2, r3, #22
 8011b0e:	d402      	bmi.n	8011b16 <_vfiprintf_r+0x32>
 8011b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b12:	f7ff f91a 	bl	8010d4a <__retarget_lock_acquire_recursive>
 8011b16:	89ab      	ldrh	r3, [r5, #12]
 8011b18:	071b      	lsls	r3, r3, #28
 8011b1a:	d501      	bpl.n	8011b20 <_vfiprintf_r+0x3c>
 8011b1c:	692b      	ldr	r3, [r5, #16]
 8011b1e:	b9eb      	cbnz	r3, 8011b5c <_vfiprintf_r+0x78>
 8011b20:	4629      	mov	r1, r5
 8011b22:	4630      	mov	r0, r6
 8011b24:	f7ff fc10 	bl	8011348 <__swsetup_r>
 8011b28:	b1c0      	cbz	r0, 8011b5c <_vfiprintf_r+0x78>
 8011b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b2c:	07dc      	lsls	r4, r3, #31
 8011b2e:	d50e      	bpl.n	8011b4e <_vfiprintf_r+0x6a>
 8011b30:	f04f 30ff 	mov.w	r0, #4294967295
 8011b34:	b01d      	add	sp, #116	; 0x74
 8011b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b3a:	4b7b      	ldr	r3, [pc, #492]	; (8011d28 <_vfiprintf_r+0x244>)
 8011b3c:	429d      	cmp	r5, r3
 8011b3e:	d101      	bne.n	8011b44 <_vfiprintf_r+0x60>
 8011b40:	68b5      	ldr	r5, [r6, #8]
 8011b42:	e7df      	b.n	8011b04 <_vfiprintf_r+0x20>
 8011b44:	4b79      	ldr	r3, [pc, #484]	; (8011d2c <_vfiprintf_r+0x248>)
 8011b46:	429d      	cmp	r5, r3
 8011b48:	bf08      	it	eq
 8011b4a:	68f5      	ldreq	r5, [r6, #12]
 8011b4c:	e7da      	b.n	8011b04 <_vfiprintf_r+0x20>
 8011b4e:	89ab      	ldrh	r3, [r5, #12]
 8011b50:	0598      	lsls	r0, r3, #22
 8011b52:	d4ed      	bmi.n	8011b30 <_vfiprintf_r+0x4c>
 8011b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b56:	f7ff f8f9 	bl	8010d4c <__retarget_lock_release_recursive>
 8011b5a:	e7e9      	b.n	8011b30 <_vfiprintf_r+0x4c>
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8011b60:	2320      	movs	r3, #32
 8011b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b6a:	2330      	movs	r3, #48	; 0x30
 8011b6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011d30 <_vfiprintf_r+0x24c>
 8011b70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b74:	f04f 0901 	mov.w	r9, #1
 8011b78:	4623      	mov	r3, r4
 8011b7a:	469a      	mov	sl, r3
 8011b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b80:	b10a      	cbz	r2, 8011b86 <_vfiprintf_r+0xa2>
 8011b82:	2a25      	cmp	r2, #37	; 0x25
 8011b84:	d1f9      	bne.n	8011b7a <_vfiprintf_r+0x96>
 8011b86:	ebba 0b04 	subs.w	fp, sl, r4
 8011b8a:	d00b      	beq.n	8011ba4 <_vfiprintf_r+0xc0>
 8011b8c:	465b      	mov	r3, fp
 8011b8e:	4622      	mov	r2, r4
 8011b90:	4629      	mov	r1, r5
 8011b92:	4630      	mov	r0, r6
 8011b94:	f7ff ff93 	bl	8011abe <__sfputs_r>
 8011b98:	3001      	adds	r0, #1
 8011b9a:	f000 80aa 	beq.w	8011cf2 <_vfiprintf_r+0x20e>
 8011b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ba0:	445a      	add	r2, fp
 8011ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8011ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	f000 80a2 	beq.w	8011cf2 <_vfiprintf_r+0x20e>
 8011bae:	2300      	movs	r3, #0
 8011bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8011bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bb8:	f10a 0a01 	add.w	sl, sl, #1
 8011bbc:	9304      	str	r3, [sp, #16]
 8011bbe:	9307      	str	r3, [sp, #28]
 8011bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8011bc6:	4654      	mov	r4, sl
 8011bc8:	2205      	movs	r2, #5
 8011bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bce:	4858      	ldr	r0, [pc, #352]	; (8011d30 <_vfiprintf_r+0x24c>)
 8011bd0:	f7ee fb4e 	bl	8000270 <memchr>
 8011bd4:	9a04      	ldr	r2, [sp, #16]
 8011bd6:	b9d8      	cbnz	r0, 8011c10 <_vfiprintf_r+0x12c>
 8011bd8:	06d1      	lsls	r1, r2, #27
 8011bda:	bf44      	itt	mi
 8011bdc:	2320      	movmi	r3, #32
 8011bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011be2:	0713      	lsls	r3, r2, #28
 8011be4:	bf44      	itt	mi
 8011be6:	232b      	movmi	r3, #43	; 0x2b
 8011be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011bec:	f89a 3000 	ldrb.w	r3, [sl]
 8011bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8011bf2:	d015      	beq.n	8011c20 <_vfiprintf_r+0x13c>
 8011bf4:	9a07      	ldr	r2, [sp, #28]
 8011bf6:	4654      	mov	r4, sl
 8011bf8:	2000      	movs	r0, #0
 8011bfa:	f04f 0c0a 	mov.w	ip, #10
 8011bfe:	4621      	mov	r1, r4
 8011c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c04:	3b30      	subs	r3, #48	; 0x30
 8011c06:	2b09      	cmp	r3, #9
 8011c08:	d94e      	bls.n	8011ca8 <_vfiprintf_r+0x1c4>
 8011c0a:	b1b0      	cbz	r0, 8011c3a <_vfiprintf_r+0x156>
 8011c0c:	9207      	str	r2, [sp, #28]
 8011c0e:	e014      	b.n	8011c3a <_vfiprintf_r+0x156>
 8011c10:	eba0 0308 	sub.w	r3, r0, r8
 8011c14:	fa09 f303 	lsl.w	r3, r9, r3
 8011c18:	4313      	orrs	r3, r2
 8011c1a:	9304      	str	r3, [sp, #16]
 8011c1c:	46a2      	mov	sl, r4
 8011c1e:	e7d2      	b.n	8011bc6 <_vfiprintf_r+0xe2>
 8011c20:	9b03      	ldr	r3, [sp, #12]
 8011c22:	1d19      	adds	r1, r3, #4
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	9103      	str	r1, [sp, #12]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	bfbb      	ittet	lt
 8011c2c:	425b      	neglt	r3, r3
 8011c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8011c32:	9307      	strge	r3, [sp, #28]
 8011c34:	9307      	strlt	r3, [sp, #28]
 8011c36:	bfb8      	it	lt
 8011c38:	9204      	strlt	r2, [sp, #16]
 8011c3a:	7823      	ldrb	r3, [r4, #0]
 8011c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8011c3e:	d10c      	bne.n	8011c5a <_vfiprintf_r+0x176>
 8011c40:	7863      	ldrb	r3, [r4, #1]
 8011c42:	2b2a      	cmp	r3, #42	; 0x2a
 8011c44:	d135      	bne.n	8011cb2 <_vfiprintf_r+0x1ce>
 8011c46:	9b03      	ldr	r3, [sp, #12]
 8011c48:	1d1a      	adds	r2, r3, #4
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	9203      	str	r2, [sp, #12]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	bfb8      	it	lt
 8011c52:	f04f 33ff 	movlt.w	r3, #4294967295
 8011c56:	3402      	adds	r4, #2
 8011c58:	9305      	str	r3, [sp, #20]
 8011c5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011d40 <_vfiprintf_r+0x25c>
 8011c5e:	7821      	ldrb	r1, [r4, #0]
 8011c60:	2203      	movs	r2, #3
 8011c62:	4650      	mov	r0, sl
 8011c64:	f7ee fb04 	bl	8000270 <memchr>
 8011c68:	b140      	cbz	r0, 8011c7c <_vfiprintf_r+0x198>
 8011c6a:	2340      	movs	r3, #64	; 0x40
 8011c6c:	eba0 000a 	sub.w	r0, r0, sl
 8011c70:	fa03 f000 	lsl.w	r0, r3, r0
 8011c74:	9b04      	ldr	r3, [sp, #16]
 8011c76:	4303      	orrs	r3, r0
 8011c78:	3401      	adds	r4, #1
 8011c7a:	9304      	str	r3, [sp, #16]
 8011c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c80:	482c      	ldr	r0, [pc, #176]	; (8011d34 <_vfiprintf_r+0x250>)
 8011c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c86:	2206      	movs	r2, #6
 8011c88:	f7ee faf2 	bl	8000270 <memchr>
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	d03f      	beq.n	8011d10 <_vfiprintf_r+0x22c>
 8011c90:	4b29      	ldr	r3, [pc, #164]	; (8011d38 <_vfiprintf_r+0x254>)
 8011c92:	bb1b      	cbnz	r3, 8011cdc <_vfiprintf_r+0x1f8>
 8011c94:	9b03      	ldr	r3, [sp, #12]
 8011c96:	3307      	adds	r3, #7
 8011c98:	f023 0307 	bic.w	r3, r3, #7
 8011c9c:	3308      	adds	r3, #8
 8011c9e:	9303      	str	r3, [sp, #12]
 8011ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ca2:	443b      	add	r3, r7
 8011ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ca6:	e767      	b.n	8011b78 <_vfiprintf_r+0x94>
 8011ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cac:	460c      	mov	r4, r1
 8011cae:	2001      	movs	r0, #1
 8011cb0:	e7a5      	b.n	8011bfe <_vfiprintf_r+0x11a>
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	3401      	adds	r4, #1
 8011cb6:	9305      	str	r3, [sp, #20]
 8011cb8:	4619      	mov	r1, r3
 8011cba:	f04f 0c0a 	mov.w	ip, #10
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cc4:	3a30      	subs	r2, #48	; 0x30
 8011cc6:	2a09      	cmp	r2, #9
 8011cc8:	d903      	bls.n	8011cd2 <_vfiprintf_r+0x1ee>
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d0c5      	beq.n	8011c5a <_vfiprintf_r+0x176>
 8011cce:	9105      	str	r1, [sp, #20]
 8011cd0:	e7c3      	b.n	8011c5a <_vfiprintf_r+0x176>
 8011cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cd6:	4604      	mov	r4, r0
 8011cd8:	2301      	movs	r3, #1
 8011cda:	e7f0      	b.n	8011cbe <_vfiprintf_r+0x1da>
 8011cdc:	ab03      	add	r3, sp, #12
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	462a      	mov	r2, r5
 8011ce2:	4b16      	ldr	r3, [pc, #88]	; (8011d3c <_vfiprintf_r+0x258>)
 8011ce4:	a904      	add	r1, sp, #16
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	f3af 8000 	nop.w
 8011cec:	4607      	mov	r7, r0
 8011cee:	1c78      	adds	r0, r7, #1
 8011cf0:	d1d6      	bne.n	8011ca0 <_vfiprintf_r+0x1bc>
 8011cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cf4:	07d9      	lsls	r1, r3, #31
 8011cf6:	d405      	bmi.n	8011d04 <_vfiprintf_r+0x220>
 8011cf8:	89ab      	ldrh	r3, [r5, #12]
 8011cfa:	059a      	lsls	r2, r3, #22
 8011cfc:	d402      	bmi.n	8011d04 <_vfiprintf_r+0x220>
 8011cfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d00:	f7ff f824 	bl	8010d4c <__retarget_lock_release_recursive>
 8011d04:	89ab      	ldrh	r3, [r5, #12]
 8011d06:	065b      	lsls	r3, r3, #25
 8011d08:	f53f af12 	bmi.w	8011b30 <_vfiprintf_r+0x4c>
 8011d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d0e:	e711      	b.n	8011b34 <_vfiprintf_r+0x50>
 8011d10:	ab03      	add	r3, sp, #12
 8011d12:	9300      	str	r3, [sp, #0]
 8011d14:	462a      	mov	r2, r5
 8011d16:	4b09      	ldr	r3, [pc, #36]	; (8011d3c <_vfiprintf_r+0x258>)
 8011d18:	a904      	add	r1, sp, #16
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	f000 f880 	bl	8011e20 <_printf_i>
 8011d20:	e7e4      	b.n	8011cec <_vfiprintf_r+0x208>
 8011d22:	bf00      	nop
 8011d24:	080129c0 	.word	0x080129c0
 8011d28:	080129e0 	.word	0x080129e0
 8011d2c:	080129a0 	.word	0x080129a0
 8011d30:	08012ab4 	.word	0x08012ab4
 8011d34:	08012abe 	.word	0x08012abe
 8011d38:	00000000 	.word	0x00000000
 8011d3c:	08011abf 	.word	0x08011abf
 8011d40:	08012aba 	.word	0x08012aba

08011d44 <_printf_common>:
 8011d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d48:	4616      	mov	r6, r2
 8011d4a:	4699      	mov	r9, r3
 8011d4c:	688a      	ldr	r2, [r1, #8]
 8011d4e:	690b      	ldr	r3, [r1, #16]
 8011d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d54:	4293      	cmp	r3, r2
 8011d56:	bfb8      	it	lt
 8011d58:	4613      	movlt	r3, r2
 8011d5a:	6033      	str	r3, [r6, #0]
 8011d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011d60:	4607      	mov	r7, r0
 8011d62:	460c      	mov	r4, r1
 8011d64:	b10a      	cbz	r2, 8011d6a <_printf_common+0x26>
 8011d66:	3301      	adds	r3, #1
 8011d68:	6033      	str	r3, [r6, #0]
 8011d6a:	6823      	ldr	r3, [r4, #0]
 8011d6c:	0699      	lsls	r1, r3, #26
 8011d6e:	bf42      	ittt	mi
 8011d70:	6833      	ldrmi	r3, [r6, #0]
 8011d72:	3302      	addmi	r3, #2
 8011d74:	6033      	strmi	r3, [r6, #0]
 8011d76:	6825      	ldr	r5, [r4, #0]
 8011d78:	f015 0506 	ands.w	r5, r5, #6
 8011d7c:	d106      	bne.n	8011d8c <_printf_common+0x48>
 8011d7e:	f104 0a19 	add.w	sl, r4, #25
 8011d82:	68e3      	ldr	r3, [r4, #12]
 8011d84:	6832      	ldr	r2, [r6, #0]
 8011d86:	1a9b      	subs	r3, r3, r2
 8011d88:	42ab      	cmp	r3, r5
 8011d8a:	dc26      	bgt.n	8011dda <_printf_common+0x96>
 8011d8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d90:	1e13      	subs	r3, r2, #0
 8011d92:	6822      	ldr	r2, [r4, #0]
 8011d94:	bf18      	it	ne
 8011d96:	2301      	movne	r3, #1
 8011d98:	0692      	lsls	r2, r2, #26
 8011d9a:	d42b      	bmi.n	8011df4 <_printf_common+0xb0>
 8011d9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011da0:	4649      	mov	r1, r9
 8011da2:	4638      	mov	r0, r7
 8011da4:	47c0      	blx	r8
 8011da6:	3001      	adds	r0, #1
 8011da8:	d01e      	beq.n	8011de8 <_printf_common+0xa4>
 8011daa:	6823      	ldr	r3, [r4, #0]
 8011dac:	68e5      	ldr	r5, [r4, #12]
 8011dae:	6832      	ldr	r2, [r6, #0]
 8011db0:	f003 0306 	and.w	r3, r3, #6
 8011db4:	2b04      	cmp	r3, #4
 8011db6:	bf08      	it	eq
 8011db8:	1aad      	subeq	r5, r5, r2
 8011dba:	68a3      	ldr	r3, [r4, #8]
 8011dbc:	6922      	ldr	r2, [r4, #16]
 8011dbe:	bf0c      	ite	eq
 8011dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011dc4:	2500      	movne	r5, #0
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	bfc4      	itt	gt
 8011dca:	1a9b      	subgt	r3, r3, r2
 8011dcc:	18ed      	addgt	r5, r5, r3
 8011dce:	2600      	movs	r6, #0
 8011dd0:	341a      	adds	r4, #26
 8011dd2:	42b5      	cmp	r5, r6
 8011dd4:	d11a      	bne.n	8011e0c <_printf_common+0xc8>
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	e008      	b.n	8011dec <_printf_common+0xa8>
 8011dda:	2301      	movs	r3, #1
 8011ddc:	4652      	mov	r2, sl
 8011dde:	4649      	mov	r1, r9
 8011de0:	4638      	mov	r0, r7
 8011de2:	47c0      	blx	r8
 8011de4:	3001      	adds	r0, #1
 8011de6:	d103      	bne.n	8011df0 <_printf_common+0xac>
 8011de8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011df0:	3501      	adds	r5, #1
 8011df2:	e7c6      	b.n	8011d82 <_printf_common+0x3e>
 8011df4:	18e1      	adds	r1, r4, r3
 8011df6:	1c5a      	adds	r2, r3, #1
 8011df8:	2030      	movs	r0, #48	; 0x30
 8011dfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011dfe:	4422      	add	r2, r4
 8011e00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e08:	3302      	adds	r3, #2
 8011e0a:	e7c7      	b.n	8011d9c <_printf_common+0x58>
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	4622      	mov	r2, r4
 8011e10:	4649      	mov	r1, r9
 8011e12:	4638      	mov	r0, r7
 8011e14:	47c0      	blx	r8
 8011e16:	3001      	adds	r0, #1
 8011e18:	d0e6      	beq.n	8011de8 <_printf_common+0xa4>
 8011e1a:	3601      	adds	r6, #1
 8011e1c:	e7d9      	b.n	8011dd2 <_printf_common+0x8e>
	...

08011e20 <_printf_i>:
 8011e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e24:	7e0f      	ldrb	r7, [r1, #24]
 8011e26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011e28:	2f78      	cmp	r7, #120	; 0x78
 8011e2a:	4691      	mov	r9, r2
 8011e2c:	4680      	mov	r8, r0
 8011e2e:	460c      	mov	r4, r1
 8011e30:	469a      	mov	sl, r3
 8011e32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011e36:	d807      	bhi.n	8011e48 <_printf_i+0x28>
 8011e38:	2f62      	cmp	r7, #98	; 0x62
 8011e3a:	d80a      	bhi.n	8011e52 <_printf_i+0x32>
 8011e3c:	2f00      	cmp	r7, #0
 8011e3e:	f000 80d8 	beq.w	8011ff2 <_printf_i+0x1d2>
 8011e42:	2f58      	cmp	r7, #88	; 0x58
 8011e44:	f000 80a3 	beq.w	8011f8e <_printf_i+0x16e>
 8011e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011e50:	e03a      	b.n	8011ec8 <_printf_i+0xa8>
 8011e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011e56:	2b15      	cmp	r3, #21
 8011e58:	d8f6      	bhi.n	8011e48 <_printf_i+0x28>
 8011e5a:	a101      	add	r1, pc, #4	; (adr r1, 8011e60 <_printf_i+0x40>)
 8011e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e60:	08011eb9 	.word	0x08011eb9
 8011e64:	08011ecd 	.word	0x08011ecd
 8011e68:	08011e49 	.word	0x08011e49
 8011e6c:	08011e49 	.word	0x08011e49
 8011e70:	08011e49 	.word	0x08011e49
 8011e74:	08011e49 	.word	0x08011e49
 8011e78:	08011ecd 	.word	0x08011ecd
 8011e7c:	08011e49 	.word	0x08011e49
 8011e80:	08011e49 	.word	0x08011e49
 8011e84:	08011e49 	.word	0x08011e49
 8011e88:	08011e49 	.word	0x08011e49
 8011e8c:	08011fd9 	.word	0x08011fd9
 8011e90:	08011efd 	.word	0x08011efd
 8011e94:	08011fbb 	.word	0x08011fbb
 8011e98:	08011e49 	.word	0x08011e49
 8011e9c:	08011e49 	.word	0x08011e49
 8011ea0:	08011ffb 	.word	0x08011ffb
 8011ea4:	08011e49 	.word	0x08011e49
 8011ea8:	08011efd 	.word	0x08011efd
 8011eac:	08011e49 	.word	0x08011e49
 8011eb0:	08011e49 	.word	0x08011e49
 8011eb4:	08011fc3 	.word	0x08011fc3
 8011eb8:	682b      	ldr	r3, [r5, #0]
 8011eba:	1d1a      	adds	r2, r3, #4
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	602a      	str	r2, [r5, #0]
 8011ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ec8:	2301      	movs	r3, #1
 8011eca:	e0a3      	b.n	8012014 <_printf_i+0x1f4>
 8011ecc:	6820      	ldr	r0, [r4, #0]
 8011ece:	6829      	ldr	r1, [r5, #0]
 8011ed0:	0606      	lsls	r6, r0, #24
 8011ed2:	f101 0304 	add.w	r3, r1, #4
 8011ed6:	d50a      	bpl.n	8011eee <_printf_i+0xce>
 8011ed8:	680e      	ldr	r6, [r1, #0]
 8011eda:	602b      	str	r3, [r5, #0]
 8011edc:	2e00      	cmp	r6, #0
 8011ede:	da03      	bge.n	8011ee8 <_printf_i+0xc8>
 8011ee0:	232d      	movs	r3, #45	; 0x2d
 8011ee2:	4276      	negs	r6, r6
 8011ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ee8:	485e      	ldr	r0, [pc, #376]	; (8012064 <_printf_i+0x244>)
 8011eea:	230a      	movs	r3, #10
 8011eec:	e019      	b.n	8011f22 <_printf_i+0x102>
 8011eee:	680e      	ldr	r6, [r1, #0]
 8011ef0:	602b      	str	r3, [r5, #0]
 8011ef2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011ef6:	bf18      	it	ne
 8011ef8:	b236      	sxthne	r6, r6
 8011efa:	e7ef      	b.n	8011edc <_printf_i+0xbc>
 8011efc:	682b      	ldr	r3, [r5, #0]
 8011efe:	6820      	ldr	r0, [r4, #0]
 8011f00:	1d19      	adds	r1, r3, #4
 8011f02:	6029      	str	r1, [r5, #0]
 8011f04:	0601      	lsls	r1, r0, #24
 8011f06:	d501      	bpl.n	8011f0c <_printf_i+0xec>
 8011f08:	681e      	ldr	r6, [r3, #0]
 8011f0a:	e002      	b.n	8011f12 <_printf_i+0xf2>
 8011f0c:	0646      	lsls	r6, r0, #25
 8011f0e:	d5fb      	bpl.n	8011f08 <_printf_i+0xe8>
 8011f10:	881e      	ldrh	r6, [r3, #0]
 8011f12:	4854      	ldr	r0, [pc, #336]	; (8012064 <_printf_i+0x244>)
 8011f14:	2f6f      	cmp	r7, #111	; 0x6f
 8011f16:	bf0c      	ite	eq
 8011f18:	2308      	moveq	r3, #8
 8011f1a:	230a      	movne	r3, #10
 8011f1c:	2100      	movs	r1, #0
 8011f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f22:	6865      	ldr	r5, [r4, #4]
 8011f24:	60a5      	str	r5, [r4, #8]
 8011f26:	2d00      	cmp	r5, #0
 8011f28:	bfa2      	ittt	ge
 8011f2a:	6821      	ldrge	r1, [r4, #0]
 8011f2c:	f021 0104 	bicge.w	r1, r1, #4
 8011f30:	6021      	strge	r1, [r4, #0]
 8011f32:	b90e      	cbnz	r6, 8011f38 <_printf_i+0x118>
 8011f34:	2d00      	cmp	r5, #0
 8011f36:	d04d      	beq.n	8011fd4 <_printf_i+0x1b4>
 8011f38:	4615      	mov	r5, r2
 8011f3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011f3e:	fb03 6711 	mls	r7, r3, r1, r6
 8011f42:	5dc7      	ldrb	r7, [r0, r7]
 8011f44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011f48:	4637      	mov	r7, r6
 8011f4a:	42bb      	cmp	r3, r7
 8011f4c:	460e      	mov	r6, r1
 8011f4e:	d9f4      	bls.n	8011f3a <_printf_i+0x11a>
 8011f50:	2b08      	cmp	r3, #8
 8011f52:	d10b      	bne.n	8011f6c <_printf_i+0x14c>
 8011f54:	6823      	ldr	r3, [r4, #0]
 8011f56:	07de      	lsls	r6, r3, #31
 8011f58:	d508      	bpl.n	8011f6c <_printf_i+0x14c>
 8011f5a:	6923      	ldr	r3, [r4, #16]
 8011f5c:	6861      	ldr	r1, [r4, #4]
 8011f5e:	4299      	cmp	r1, r3
 8011f60:	bfde      	ittt	le
 8011f62:	2330      	movle	r3, #48	; 0x30
 8011f64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011f68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011f6c:	1b52      	subs	r2, r2, r5
 8011f6e:	6122      	str	r2, [r4, #16]
 8011f70:	f8cd a000 	str.w	sl, [sp]
 8011f74:	464b      	mov	r3, r9
 8011f76:	aa03      	add	r2, sp, #12
 8011f78:	4621      	mov	r1, r4
 8011f7a:	4640      	mov	r0, r8
 8011f7c:	f7ff fee2 	bl	8011d44 <_printf_common>
 8011f80:	3001      	adds	r0, #1
 8011f82:	d14c      	bne.n	801201e <_printf_i+0x1fe>
 8011f84:	f04f 30ff 	mov.w	r0, #4294967295
 8011f88:	b004      	add	sp, #16
 8011f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f8e:	4835      	ldr	r0, [pc, #212]	; (8012064 <_printf_i+0x244>)
 8011f90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011f94:	6829      	ldr	r1, [r5, #0]
 8011f96:	6823      	ldr	r3, [r4, #0]
 8011f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8011f9c:	6029      	str	r1, [r5, #0]
 8011f9e:	061d      	lsls	r5, r3, #24
 8011fa0:	d514      	bpl.n	8011fcc <_printf_i+0x1ac>
 8011fa2:	07df      	lsls	r7, r3, #31
 8011fa4:	bf44      	itt	mi
 8011fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8011faa:	6023      	strmi	r3, [r4, #0]
 8011fac:	b91e      	cbnz	r6, 8011fb6 <_printf_i+0x196>
 8011fae:	6823      	ldr	r3, [r4, #0]
 8011fb0:	f023 0320 	bic.w	r3, r3, #32
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	2310      	movs	r3, #16
 8011fb8:	e7b0      	b.n	8011f1c <_printf_i+0xfc>
 8011fba:	6823      	ldr	r3, [r4, #0]
 8011fbc:	f043 0320 	orr.w	r3, r3, #32
 8011fc0:	6023      	str	r3, [r4, #0]
 8011fc2:	2378      	movs	r3, #120	; 0x78
 8011fc4:	4828      	ldr	r0, [pc, #160]	; (8012068 <_printf_i+0x248>)
 8011fc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011fca:	e7e3      	b.n	8011f94 <_printf_i+0x174>
 8011fcc:	0659      	lsls	r1, r3, #25
 8011fce:	bf48      	it	mi
 8011fd0:	b2b6      	uxthmi	r6, r6
 8011fd2:	e7e6      	b.n	8011fa2 <_printf_i+0x182>
 8011fd4:	4615      	mov	r5, r2
 8011fd6:	e7bb      	b.n	8011f50 <_printf_i+0x130>
 8011fd8:	682b      	ldr	r3, [r5, #0]
 8011fda:	6826      	ldr	r6, [r4, #0]
 8011fdc:	6961      	ldr	r1, [r4, #20]
 8011fde:	1d18      	adds	r0, r3, #4
 8011fe0:	6028      	str	r0, [r5, #0]
 8011fe2:	0635      	lsls	r5, r6, #24
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	d501      	bpl.n	8011fec <_printf_i+0x1cc>
 8011fe8:	6019      	str	r1, [r3, #0]
 8011fea:	e002      	b.n	8011ff2 <_printf_i+0x1d2>
 8011fec:	0670      	lsls	r0, r6, #25
 8011fee:	d5fb      	bpl.n	8011fe8 <_printf_i+0x1c8>
 8011ff0:	8019      	strh	r1, [r3, #0]
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	6123      	str	r3, [r4, #16]
 8011ff6:	4615      	mov	r5, r2
 8011ff8:	e7ba      	b.n	8011f70 <_printf_i+0x150>
 8011ffa:	682b      	ldr	r3, [r5, #0]
 8011ffc:	1d1a      	adds	r2, r3, #4
 8011ffe:	602a      	str	r2, [r5, #0]
 8012000:	681d      	ldr	r5, [r3, #0]
 8012002:	6862      	ldr	r2, [r4, #4]
 8012004:	2100      	movs	r1, #0
 8012006:	4628      	mov	r0, r5
 8012008:	f7ee f932 	bl	8000270 <memchr>
 801200c:	b108      	cbz	r0, 8012012 <_printf_i+0x1f2>
 801200e:	1b40      	subs	r0, r0, r5
 8012010:	6060      	str	r0, [r4, #4]
 8012012:	6863      	ldr	r3, [r4, #4]
 8012014:	6123      	str	r3, [r4, #16]
 8012016:	2300      	movs	r3, #0
 8012018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801201c:	e7a8      	b.n	8011f70 <_printf_i+0x150>
 801201e:	6923      	ldr	r3, [r4, #16]
 8012020:	462a      	mov	r2, r5
 8012022:	4649      	mov	r1, r9
 8012024:	4640      	mov	r0, r8
 8012026:	47d0      	blx	sl
 8012028:	3001      	adds	r0, #1
 801202a:	d0ab      	beq.n	8011f84 <_printf_i+0x164>
 801202c:	6823      	ldr	r3, [r4, #0]
 801202e:	079b      	lsls	r3, r3, #30
 8012030:	d413      	bmi.n	801205a <_printf_i+0x23a>
 8012032:	68e0      	ldr	r0, [r4, #12]
 8012034:	9b03      	ldr	r3, [sp, #12]
 8012036:	4298      	cmp	r0, r3
 8012038:	bfb8      	it	lt
 801203a:	4618      	movlt	r0, r3
 801203c:	e7a4      	b.n	8011f88 <_printf_i+0x168>
 801203e:	2301      	movs	r3, #1
 8012040:	4632      	mov	r2, r6
 8012042:	4649      	mov	r1, r9
 8012044:	4640      	mov	r0, r8
 8012046:	47d0      	blx	sl
 8012048:	3001      	adds	r0, #1
 801204a:	d09b      	beq.n	8011f84 <_printf_i+0x164>
 801204c:	3501      	adds	r5, #1
 801204e:	68e3      	ldr	r3, [r4, #12]
 8012050:	9903      	ldr	r1, [sp, #12]
 8012052:	1a5b      	subs	r3, r3, r1
 8012054:	42ab      	cmp	r3, r5
 8012056:	dcf2      	bgt.n	801203e <_printf_i+0x21e>
 8012058:	e7eb      	b.n	8012032 <_printf_i+0x212>
 801205a:	2500      	movs	r5, #0
 801205c:	f104 0619 	add.w	r6, r4, #25
 8012060:	e7f5      	b.n	801204e <_printf_i+0x22e>
 8012062:	bf00      	nop
 8012064:	08012ac5 	.word	0x08012ac5
 8012068:	08012ad6 	.word	0x08012ad6

0801206c <_read_r>:
 801206c:	b538      	push	{r3, r4, r5, lr}
 801206e:	4d07      	ldr	r5, [pc, #28]	; (801208c <_read_r+0x20>)
 8012070:	4604      	mov	r4, r0
 8012072:	4608      	mov	r0, r1
 8012074:	4611      	mov	r1, r2
 8012076:	2200      	movs	r2, #0
 8012078:	602a      	str	r2, [r5, #0]
 801207a:	461a      	mov	r2, r3
 801207c:	f7ef fe42 	bl	8001d04 <_read>
 8012080:	1c43      	adds	r3, r0, #1
 8012082:	d102      	bne.n	801208a <_read_r+0x1e>
 8012084:	682b      	ldr	r3, [r5, #0]
 8012086:	b103      	cbz	r3, 801208a <_read_r+0x1e>
 8012088:	6023      	str	r3, [r4, #0]
 801208a:	bd38      	pop	{r3, r4, r5, pc}
 801208c:	20002bd0 	.word	0x20002bd0

08012090 <abort>:
 8012090:	b508      	push	{r3, lr}
 8012092:	2006      	movs	r0, #6
 8012094:	f000 f898 	bl	80121c8 <raise>
 8012098:	2001      	movs	r0, #1
 801209a:	f7ef fe29 	bl	8001cf0 <_exit>
	...

080120a0 <_fstat_r>:
 80120a0:	b538      	push	{r3, r4, r5, lr}
 80120a2:	4d07      	ldr	r5, [pc, #28]	; (80120c0 <_fstat_r+0x20>)
 80120a4:	2300      	movs	r3, #0
 80120a6:	4604      	mov	r4, r0
 80120a8:	4608      	mov	r0, r1
 80120aa:	4611      	mov	r1, r2
 80120ac:	602b      	str	r3, [r5, #0]
 80120ae:	f7ef fe52 	bl	8001d56 <_fstat>
 80120b2:	1c43      	adds	r3, r0, #1
 80120b4:	d102      	bne.n	80120bc <_fstat_r+0x1c>
 80120b6:	682b      	ldr	r3, [r5, #0]
 80120b8:	b103      	cbz	r3, 80120bc <_fstat_r+0x1c>
 80120ba:	6023      	str	r3, [r4, #0]
 80120bc:	bd38      	pop	{r3, r4, r5, pc}
 80120be:	bf00      	nop
 80120c0:	20002bd0 	.word	0x20002bd0

080120c4 <_isatty_r>:
 80120c4:	b538      	push	{r3, r4, r5, lr}
 80120c6:	4d06      	ldr	r5, [pc, #24]	; (80120e0 <_isatty_r+0x1c>)
 80120c8:	2300      	movs	r3, #0
 80120ca:	4604      	mov	r4, r0
 80120cc:	4608      	mov	r0, r1
 80120ce:	602b      	str	r3, [r5, #0]
 80120d0:	f7ef fe51 	bl	8001d76 <_isatty>
 80120d4:	1c43      	adds	r3, r0, #1
 80120d6:	d102      	bne.n	80120de <_isatty_r+0x1a>
 80120d8:	682b      	ldr	r3, [r5, #0]
 80120da:	b103      	cbz	r3, 80120de <_isatty_r+0x1a>
 80120dc:	6023      	str	r3, [r4, #0]
 80120de:	bd38      	pop	{r3, r4, r5, pc}
 80120e0:	20002bd0 	.word	0x20002bd0

080120e4 <memmove>:
 80120e4:	4288      	cmp	r0, r1
 80120e6:	b510      	push	{r4, lr}
 80120e8:	eb01 0402 	add.w	r4, r1, r2
 80120ec:	d902      	bls.n	80120f4 <memmove+0x10>
 80120ee:	4284      	cmp	r4, r0
 80120f0:	4623      	mov	r3, r4
 80120f2:	d807      	bhi.n	8012104 <memmove+0x20>
 80120f4:	1e43      	subs	r3, r0, #1
 80120f6:	42a1      	cmp	r1, r4
 80120f8:	d008      	beq.n	801210c <memmove+0x28>
 80120fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012102:	e7f8      	b.n	80120f6 <memmove+0x12>
 8012104:	4402      	add	r2, r0
 8012106:	4601      	mov	r1, r0
 8012108:	428a      	cmp	r2, r1
 801210a:	d100      	bne.n	801210e <memmove+0x2a>
 801210c:	bd10      	pop	{r4, pc}
 801210e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012116:	e7f7      	b.n	8012108 <memmove+0x24>

08012118 <_realloc_r>:
 8012118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801211c:	4680      	mov	r8, r0
 801211e:	4614      	mov	r4, r2
 8012120:	460e      	mov	r6, r1
 8012122:	b921      	cbnz	r1, 801212e <_realloc_r+0x16>
 8012124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012128:	4611      	mov	r1, r2
 801212a:	f7fe be57 	b.w	8010ddc <_malloc_r>
 801212e:	b92a      	cbnz	r2, 801213c <_realloc_r+0x24>
 8012130:	f7ff fb06 	bl	8011740 <_free_r>
 8012134:	4625      	mov	r5, r4
 8012136:	4628      	mov	r0, r5
 8012138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801213c:	f000 f860 	bl	8012200 <_malloc_usable_size_r>
 8012140:	4284      	cmp	r4, r0
 8012142:	4607      	mov	r7, r0
 8012144:	d802      	bhi.n	801214c <_realloc_r+0x34>
 8012146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801214a:	d812      	bhi.n	8012172 <_realloc_r+0x5a>
 801214c:	4621      	mov	r1, r4
 801214e:	4640      	mov	r0, r8
 8012150:	f7fe fe44 	bl	8010ddc <_malloc_r>
 8012154:	4605      	mov	r5, r0
 8012156:	2800      	cmp	r0, #0
 8012158:	d0ed      	beq.n	8012136 <_realloc_r+0x1e>
 801215a:	42bc      	cmp	r4, r7
 801215c:	4622      	mov	r2, r4
 801215e:	4631      	mov	r1, r6
 8012160:	bf28      	it	cs
 8012162:	463a      	movcs	r2, r7
 8012164:	f7fe fe03 	bl	8010d6e <memcpy>
 8012168:	4631      	mov	r1, r6
 801216a:	4640      	mov	r0, r8
 801216c:	f7ff fae8 	bl	8011740 <_free_r>
 8012170:	e7e1      	b.n	8012136 <_realloc_r+0x1e>
 8012172:	4635      	mov	r5, r6
 8012174:	e7df      	b.n	8012136 <_realloc_r+0x1e>

08012176 <_raise_r>:
 8012176:	291f      	cmp	r1, #31
 8012178:	b538      	push	{r3, r4, r5, lr}
 801217a:	4604      	mov	r4, r0
 801217c:	460d      	mov	r5, r1
 801217e:	d904      	bls.n	801218a <_raise_r+0x14>
 8012180:	2316      	movs	r3, #22
 8012182:	6003      	str	r3, [r0, #0]
 8012184:	f04f 30ff 	mov.w	r0, #4294967295
 8012188:	bd38      	pop	{r3, r4, r5, pc}
 801218a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801218c:	b112      	cbz	r2, 8012194 <_raise_r+0x1e>
 801218e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012192:	b94b      	cbnz	r3, 80121a8 <_raise_r+0x32>
 8012194:	4620      	mov	r0, r4
 8012196:	f000 f831 	bl	80121fc <_getpid_r>
 801219a:	462a      	mov	r2, r5
 801219c:	4601      	mov	r1, r0
 801219e:	4620      	mov	r0, r4
 80121a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121a4:	f000 b818 	b.w	80121d8 <_kill_r>
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d00a      	beq.n	80121c2 <_raise_r+0x4c>
 80121ac:	1c59      	adds	r1, r3, #1
 80121ae:	d103      	bne.n	80121b8 <_raise_r+0x42>
 80121b0:	2316      	movs	r3, #22
 80121b2:	6003      	str	r3, [r0, #0]
 80121b4:	2001      	movs	r0, #1
 80121b6:	e7e7      	b.n	8012188 <_raise_r+0x12>
 80121b8:	2400      	movs	r4, #0
 80121ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80121be:	4628      	mov	r0, r5
 80121c0:	4798      	blx	r3
 80121c2:	2000      	movs	r0, #0
 80121c4:	e7e0      	b.n	8012188 <_raise_r+0x12>
	...

080121c8 <raise>:
 80121c8:	4b02      	ldr	r3, [pc, #8]	; (80121d4 <raise+0xc>)
 80121ca:	4601      	mov	r1, r0
 80121cc:	6818      	ldr	r0, [r3, #0]
 80121ce:	f7ff bfd2 	b.w	8012176 <_raise_r>
 80121d2:	bf00      	nop
 80121d4:	20000030 	.word	0x20000030

080121d8 <_kill_r>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	4d07      	ldr	r5, [pc, #28]	; (80121f8 <_kill_r+0x20>)
 80121dc:	2300      	movs	r3, #0
 80121de:	4604      	mov	r4, r0
 80121e0:	4608      	mov	r0, r1
 80121e2:	4611      	mov	r1, r2
 80121e4:	602b      	str	r3, [r5, #0]
 80121e6:	f7ef fd73 	bl	8001cd0 <_kill>
 80121ea:	1c43      	adds	r3, r0, #1
 80121ec:	d102      	bne.n	80121f4 <_kill_r+0x1c>
 80121ee:	682b      	ldr	r3, [r5, #0]
 80121f0:	b103      	cbz	r3, 80121f4 <_kill_r+0x1c>
 80121f2:	6023      	str	r3, [r4, #0]
 80121f4:	bd38      	pop	{r3, r4, r5, pc}
 80121f6:	bf00      	nop
 80121f8:	20002bd0 	.word	0x20002bd0

080121fc <_getpid_r>:
 80121fc:	f7ef bd60 	b.w	8001cc0 <_getpid>

08012200 <_malloc_usable_size_r>:
 8012200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012204:	1f18      	subs	r0, r3, #4
 8012206:	2b00      	cmp	r3, #0
 8012208:	bfbc      	itt	lt
 801220a:	580b      	ldrlt	r3, [r1, r0]
 801220c:	18c0      	addlt	r0, r0, r3
 801220e:	4770      	bx	lr

08012210 <_init>:
 8012210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012212:	bf00      	nop
 8012214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012216:	bc08      	pop	{r3}
 8012218:	469e      	mov	lr, r3
 801221a:	4770      	bx	lr

0801221c <_fini>:
 801221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801221e:	bf00      	nop
 8012220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012222:	bc08      	pop	{r3}
 8012224:	469e      	mov	lr, r3
 8012226:	4770      	bx	lr
