
MemsDemo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011de8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  08011f78  08011f78  00021f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127b0  080127b0  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080127b0  080127b0  000227b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127b8  080127b8  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127b8  080127b8  000227b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127bc  080127bc  000227bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080127c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b40  2000007c  0801283c  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bbc  0801283c  00032bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004525b  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000706b  00000000  00000000  00075307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038d0  00000000  00000000  0007c378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000035b8  00000000  00000000  0007fc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eaef  00000000  00000000  00083200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038757  00000000  00000000  000b1cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118d07  00000000  00000000  000ea446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020314d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ff5c  00000000  00000000  002031a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011f60 	.word	0x08011f60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08011f60 	.word	0x08011f60

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0080 	ldr.w	r0, [pc, #128]	; 8000258 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d32e      	bcc.n	800024a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d312      	bcc.n	800021c <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000214:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000216:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021a:	4770      	bx	lr

0800021c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800021c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800021e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000220:	d317      	bcc.n	8000252 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000222:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000224:	1b12      	subs	r2, r2, r4

08000226 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000226:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800022e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000230:	d1f9      	bne.n	8000226 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000232:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000234:	d005      	beq.n	8000242 <_No2ChunkNeeded>

08000236 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000236:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023a:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800023e:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000240:	d1f9      	bne.n	8000236 <_LoopCopyAfterWrapAround>

08000242 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000242:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000244:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000248:	4770      	bx	lr

0800024a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800024a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800024c:	3801      	subs	r0, #1
        CMP      R0,R2
 800024e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000250:	d2d1      	bcs.n	80001f6 <_Case4>

08000252 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000252:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000254:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000256:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000258:	20001a68 	.word	0x20001a68

0800025c <strlen>:
 800025c:	4603      	mov	r3, r0
 800025e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000262:	2a00      	cmp	r2, #0
 8000264:	d1fb      	bne.n	800025e <strlen+0x2>
 8000266:	1a18      	subs	r0, r3, r0
 8000268:	3801      	subs	r0, #1
 800026a:	4770      	bx	lr
 800026c:	0000      	movs	r0, r0
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <bsp_lis3mdl_init>:
#include <lis3mdl_reg.h>
#include <b_l475e_iot01a1_bus.h>

static LIS3MDL_Object_t bsp_lis3mdl_Obj = { 0 };

int32_t bsp_lis3mdl_init() {
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
	LIS3MDL_IO_t mag_io_ctx;
	lis3mdl_ctrl_reg2_t ctrl2_c;
	uint8_t id;

	mag_io_ctx.BusType = LIS3MDL_I2C_BUS;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
	mag_io_ctx.Address = LIS3MDL_I2C_ADD_H;
 800061e:	233d      	movs	r3, #61	; 0x3d
 8000620:	763b      	strb	r3, [r7, #24]
	mag_io_ctx.Init = BSP_I2C2_Init;
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <bsp_lis3mdl_init+0xfc>)
 8000624:	60fb      	str	r3, [r7, #12]
	mag_io_ctx.DeInit = BSP_I2C2_DeInit;
 8000626:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <bsp_lis3mdl_init+0x100>)
 8000628:	613b      	str	r3, [r7, #16]
	mag_io_ctx.ReadReg = BSP_I2C2_ReadReg;
 800062a:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <bsp_lis3mdl_init+0x104>)
 800062c:	623b      	str	r3, [r7, #32]
	mag_io_ctx.WriteReg = BSP_I2C2_WriteReg;
 800062e:	4b3b      	ldr	r3, [pc, #236]	; (800071c <bsp_lis3mdl_init+0x108>)
 8000630:	61fb      	str	r3, [r7, #28]
	mag_io_ctx.GetTick = BSP_GetTick;
 8000632:	4b3b      	ldr	r3, [pc, #236]	; (8000720 <bsp_lis3mdl_init+0x10c>)
 8000634:	627b      	str	r3, [r7, #36]	; 0x24

	if (LIS3MDL_RegisterBusIO(&bsp_lis3mdl_Obj,	&mag_io_ctx) != LIS3MDL_OK) {
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	4839      	ldr	r0, [pc, #228]	; (8000724 <bsp_lis3mdl_init+0x110>)
 800063e:	f001 fe37 	bl	80022b0 <LIS3MDL_RegisterBusIO>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <bsp_lis3mdl_init+0x3a>
		return LIS3MDL_ERROR;
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	e05b      	b.n	8000706 <bsp_lis3mdl_init+0xf2>
	}

	// Vefify we're connected to correct sensor
	if (LIS3MDL_ReadID(&bsp_lis3mdl_Obj, &id) != LIS3MDL_OK) {
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	4619      	mov	r1, r3
 8000652:	4834      	ldr	r0, [pc, #208]	; (8000724 <bsp_lis3mdl_init+0x110>)
 8000654:	f001 fe92 	bl	800237c <LIS3MDL_ReadID>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <bsp_lis3mdl_init+0x50>
		return LIS3MDL_ERROR;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	e050      	b.n	8000706 <bsp_lis3mdl_init+0xf2>
	} else {
		if (id != LIS3MDL_ID) {
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b3d      	cmp	r3, #61	; 0x3d
 8000668:	d002      	beq.n	8000670 <bsp_lis3mdl_init+0x5c>
			return LIS3MDL_ERROR;
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	e04a      	b.n	8000706 <bsp_lis3mdl_init+0xf2>
		}
	}

	// Reset device
	if (lis3mdl_reset_set(&bsp_lis3mdl_Obj.Ctx, 1 ) != LIS3MDL_OK) {
 8000670:	2101      	movs	r1, #1
 8000672:	482d      	ldr	r0, [pc, #180]	; (8000728 <bsp_lis3mdl_init+0x114>)
 8000674:	f002 f92f 	bl	80028d6 <lis3mdl_reset_set>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <bsp_lis3mdl_init+0x70>
		return LIS3MDL_ERROR;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	e040      	b.n	8000706 <bsp_lis3mdl_init+0xf2>
	}

	// Wait for reset to complete
	do {
		if (lis3mdl_read_reg(&bsp_lis3mdl_Obj.Ctx, LIS3MDL_CTRL_REG2, (uint8_t*) &ctrl2_c, 1) != LIS3MDL_OK) {
 8000684:	f107 0208 	add.w	r2, r7, #8
 8000688:	2301      	movs	r3, #1
 800068a:	2121      	movs	r1, #33	; 0x21
 800068c:	4826      	ldr	r0, [pc, #152]	; (8000728 <bsp_lis3mdl_init+0x114>)
 800068e:	f001 ffde 	bl	800264e <lis3mdl_read_reg>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <bsp_lis3mdl_init+0x8a>
			return LIS3MDL_ERROR;
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	e033      	b.n	8000706 <bsp_lis3mdl_init+0xf2>
		}
	} while (ctrl2_c.soft_rst == 1);
 800069e:	7a3b      	ldrb	r3, [r7, #8]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1ec      	bne.n	8000684 <bsp_lis3mdl_init+0x70>

	// Output data rate selection
	if (lis3mdl_data_rate_set(&(bsp_lis3mdl_Obj.Ctx), LIS3MDL_UHP_40Hz) != LIS3MDL_OK)
 80006aa:	213c      	movs	r1, #60	; 0x3c
 80006ac:	481e      	ldr	r0, [pc, #120]	; (8000728 <bsp_lis3mdl_init+0x114>)
 80006ae:	f001 fffe 	bl	80026ae <lis3mdl_data_rate_set>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <bsp_lis3mdl_init+0xaa>
	{
		return LIS3MDL_ERROR;
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295
 80006bc:	e023      	b.n	8000706 <bsp_lis3mdl_init+0xf2>
	}

	if (lis3mdl_block_data_update_set(&(bsp_lis3mdl_Obj.Ctx), PROPERTY_ENABLE) != LIS3MDL_OK)
 80006be:	2101      	movs	r1, #1
 80006c0:	4819      	ldr	r0, [pc, #100]	; (8000728 <bsp_lis3mdl_init+0x114>)
 80006c2:	f002 f886 	bl	80027d2 <lis3mdl_block_data_update_set>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <bsp_lis3mdl_init+0xbe>
	{
		return LIS3MDL_ERROR;
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	e019      	b.n	8000706 <bsp_lis3mdl_init+0xf2>
	}

	/* Set Output data rate. */
	if (LIS3MDL_MAG_SetOutputDataRate(&bsp_lis3mdl_Obj, 40.0f) != LIS3MDL_OK)
 80006d2:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800072c <bsp_lis3mdl_init+0x118>
 80006d6:	4813      	ldr	r0, [pc, #76]	; (8000724 <bsp_lis3mdl_init+0x110>)
 80006d8:	f001 fe86 	bl	80023e8 <LIS3MDL_MAG_SetOutputDataRate>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <bsp_lis3mdl_init+0xd4>
	{
		return LIS3MDL_ERROR;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	e00e      	b.n	8000706 <bsp_lis3mdl_init+0xf2>
	}

	/* Full scale selection. */
	if (LIS3MDL_MAG_SetFullScale(&bsp_lis3mdl_Obj, LIS3MDL_16_GAUSS) != LIS3MDL_OK)
 80006e8:	2103      	movs	r1, #3
 80006ea:	480e      	ldr	r0, [pc, #56]	; (8000724 <bsp_lis3mdl_init+0x110>)
 80006ec:	f001 fee6 	bl	80024bc <LIS3MDL_MAG_SetFullScale>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <bsp_lis3mdl_init+0xe8>
	{
		return LIS3MDL_ERROR;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	e004      	b.n	8000706 <bsp_lis3mdl_init+0xf2>
	}

	bsp_lis3mdl_Obj.is_initialized = 1;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <bsp_lis3mdl_init+0x110>)
 80006fe:	2201      	movs	r2, #1
 8000700:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	return LIS3MDL_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	3728      	adds	r7, #40	; 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	08001ea9 	.word	0x08001ea9
 8000714:	08001f25 	.word	0x08001f25
 8000718:	08001fd9 	.word	0x08001fd9
 800071c:	08001f75 	.word	0x08001f75
 8000720:	0800203d 	.word	0x0800203d
 8000724:	20000098 	.word	0x20000098
 8000728:	200000b4 	.word	0x200000b4
 800072c:	42200000 	.word	0x42200000

08000730 <bsp_lis3mdl_enable>:


int32_t bsp_lis3mdl_enable(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

	// Clear any pending data
	while (HAL_GPIO_ReadPin(LSM3DSL_DRDY_EXTI8_GPIO_Port, LSM3DSL_DRDY_EXTI8_Pin) == GPIO_PIN_SET) {
 8000736:	e00a      	b.n	800074e <bsp_lis3mdl_enable+0x1e>
		LIS3MDL_AxesRaw_t Value;

		if (LIS3MDL_MAG_GetAxesRaw(&bsp_lis3mdl_Obj, &Value) != LIS3MDL_OK) {
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <bsp_lis3mdl_enable+0x4c>)
 800073e:	f001 fee5 	bl	800250c <LIS3MDL_MAG_GetAxesRaw>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d002      	beq.n	800074e <bsp_lis3mdl_enable+0x1e>
			return LIS3MDL_ERROR;
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	e011      	b.n	8000772 <bsp_lis3mdl_enable+0x42>
	while (HAL_GPIO_ReadPin(LSM3DSL_DRDY_EXTI8_GPIO_Port, LSM3DSL_DRDY_EXTI8_Pin) == GPIO_PIN_SET) {
 800074e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <bsp_lis3mdl_enable+0x50>)
 8000754:	f003 fe74 	bl	8004440 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d0ec      	beq.n	8000738 <bsp_lis3mdl_enable+0x8>
		}
	}


	// Startup mag
	if (LIS3MDL_MAG_Enable(&bsp_lis3mdl_Obj) != LIS3MDL_OK) {
 800075e:	4807      	ldr	r0, [pc, #28]	; (800077c <bsp_lis3mdl_enable+0x4c>)
 8000760:	f001 fe22 	bl	80023a8 <LIS3MDL_MAG_Enable>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <bsp_lis3mdl_enable+0x40>
		return LIS3MDL_ERROR;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	e000      	b.n	8000772 <bsp_lis3mdl_enable+0x42>
	}

	return LIS3MDL_OK;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000098 	.word	0x20000098
 8000780:	48000800 	.word	0x48000800

08000784 <bsp_lsm6dsl_init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */

int32_t bsp_lsm6dsl_init() {
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
	LSM6DSL_IO_t io_ctx;
	lsm6dsl_ctrl3_c_t ctrl3_c;
	uint8_t id;

	io_ctx.BusType = LSM6DSL_I2C_BUS;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
	io_ctx.Address = LSM6DSL_I2C_ADD_L;
 800078e:	23d5      	movs	r3, #213	; 0xd5
 8000790:	763b      	strb	r3, [r7, #24]
	io_ctx.Init = BSP_I2C2_Init;
 8000792:	4b4f      	ldr	r3, [pc, #316]	; (80008d0 <bsp_lsm6dsl_init+0x14c>)
 8000794:	60fb      	str	r3, [r7, #12]
	io_ctx.DeInit = BSP_I2C2_DeInit;
 8000796:	4b4f      	ldr	r3, [pc, #316]	; (80008d4 <bsp_lsm6dsl_init+0x150>)
 8000798:	613b      	str	r3, [r7, #16]
	io_ctx.ReadReg = BSP_I2C2_ReadReg;
 800079a:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <bsp_lsm6dsl_init+0x154>)
 800079c:	623b      	str	r3, [r7, #32]
	io_ctx.WriteReg = BSP_I2C2_WriteReg;
 800079e:	4b4f      	ldr	r3, [pc, #316]	; (80008dc <bsp_lsm6dsl_init+0x158>)
 80007a0:	61fb      	str	r3, [r7, #28]
	io_ctx.GetTick = BSP_GetTick;
 80007a2:	4b4f      	ldr	r3, [pc, #316]	; (80008e0 <bsp_lsm6dsl_init+0x15c>)
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24

	if (LSM6DSL_RegisterBusIO(&bsp_lsm6dsl_Obj, &io_ctx) != LSM6DSL_OK) {
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	484d      	ldr	r0, [pc, #308]	; (80008e4 <bsp_lsm6dsl_init+0x160>)
 80007ae:	f002 f8b9 	bl	8002924 <LSM6DSL_RegisterBusIO>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d002      	beq.n	80007be <bsp_lsm6dsl_init+0x3a>
		return LSM6DSL_ERROR;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	e083      	b.n	80008c6 <bsp_lsm6dsl_init+0x142>
	}

	// Vefify sensor ID
	if (LSM6DSL_ReadID(&bsp_lsm6dsl_Obj, &id) != LSM6DSL_OK) {
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4848      	ldr	r0, [pc, #288]	; (80008e4 <bsp_lsm6dsl_init+0x160>)
 80007c4:	f002 f97d 	bl	8002ac2 <LSM6DSL_ReadID>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <bsp_lsm6dsl_init+0x50>
		return LSM6DSL_ERROR;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	e078      	b.n	80008c6 <bsp_lsm6dsl_init+0x142>
	}

	if (id != LSM6DSL_ID) {
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b6a      	cmp	r3, #106	; 0x6a
 80007d8:	d002      	beq.n	80007e0 <bsp_lsm6dsl_init+0x5c>
		return LSM6DSL_ERROR;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e072      	b.n	80008c6 <bsp_lsm6dsl_init+0x142>
	}

	// Reset device
	if (lsm6dsl_reset_set(&bsp_lsm6dsl_Obj.Ctx, 1) != LSM6DSL_OK) {
 80007e0:	2101      	movs	r1, #1
 80007e2:	4841      	ldr	r0, [pc, #260]	; (80008e8 <bsp_lsm6dsl_init+0x164>)
 80007e4:	f002 fbbc 	bl	8002f60 <lsm6dsl_reset_set>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <bsp_lsm6dsl_init+0x70>
		return LSM6DSL_ERROR;
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	e068      	b.n	80008c6 <bsp_lsm6dsl_init+0x142>
	}

	// Wait for reset to complete
	do {
		if (lsm6dsl_read_reg(&bsp_lsm6dsl_Obj.Ctx, LSM6DSL_CTRL3_C,
 80007f4:	f107 0208 	add.w	r2, r7, #8
 80007f8:	2301      	movs	r3, #1
 80007fa:	2112      	movs	r1, #18
 80007fc:	483a      	ldr	r0, [pc, #232]	; (80008e8 <bsp_lsm6dsl_init+0x164>)
 80007fe:	f002 fab0 	bl	8002d62 <lsm6dsl_read_reg>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <bsp_lsm6dsl_init+0x8a>
				(uint8_t*) &ctrl3_c, 1) != LSM6DSL_OK) {
			return LSM6DSL_ERROR;
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	e05b      	b.n	80008c6 <bsp_lsm6dsl_init+0x142>
		}
	} while (ctrl3_c.sw_reset == 1);
 800080e:	7a3b      	ldrb	r3, [r7, #8]
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1ec      	bne.n	80007f4 <bsp_lsm6dsl_init+0x70>


	// Init using default settings
	if (LSM6DSL_Init(&bsp_lsm6dsl_Obj) != LSM6DSL_OK) {
 800081a:	4832      	ldr	r0, [pc, #200]	; (80008e4 <bsp_lsm6dsl_init+0x160>)
 800081c:	f002 f8e8 	bl	80029f0 <LSM6DSL_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <bsp_lsm6dsl_init+0xa8>
		return LSM6DSL_ERROR;
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
 800082a:	e04c      	b.n	80008c6 <bsp_lsm6dsl_init+0x142>
	}

	// Override default data rate for acc and gyro
	bsp_lsm6dsl_Obj.acc_odr = (lsm6dsl_odr_xl_t) GYRO_ACC_RATE;
 800082c:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <bsp_lsm6dsl_init+0x160>)
 800082e:	2206      	movs	r2, #6
 8000830:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	bsp_lsm6dsl_Obj.gyro_odr = (lsm6dsl_odr_g_t) GYRO_ACC_RATE;
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <bsp_lsm6dsl_init+0x160>)
 8000836:	2206      	movs	r2, #6
 8000838:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


	if (lsm6dsl_fifo_data_rate_set(&(bsp_lsm6dsl_Obj.Ctx),
 800083c:	2106      	movs	r1, #6
 800083e:	482a      	ldr	r0, [pc, #168]	; (80008e8 <bsp_lsm6dsl_init+0x164>)
 8000840:	f002 fde5 	bl	800340e <lsm6dsl_fifo_data_rate_set>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d002      	beq.n	8000850 <bsp_lsm6dsl_init+0xcc>
			(lsm6dsl_odr_fifo_t) GYRO_ACC_RATE) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	e03a      	b.n	80008c6 <bsp_lsm6dsl_init+0x142>
	}


	if (LSM6DSL_FIFO_Set_Mode(&bsp_lsm6dsl_Obj,
 8000850:	2101      	movs	r1, #1
 8000852:	4824      	ldr	r0, [pc, #144]	; (80008e4 <bsp_lsm6dsl_init+0x160>)
 8000854:	f002 f9c6 	bl	8002be4 <LSM6DSL_FIFO_Set_Mode>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <bsp_lsm6dsl_init+0xe0>
			LSM6DSL_FIFO_MODE) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	e030      	b.n	80008c6 <bsp_lsm6dsl_init+0x142>
	}


	if (LSM6DSL_FIFO_ACC_Set_Decimation(&bsp_lsm6dsl_Obj,
 8000864:	2101      	movs	r1, #1
 8000866:	481f      	ldr	r0, [pc, #124]	; (80008e4 <bsp_lsm6dsl_init+0x160>)
 8000868:	f002 f9f5 	bl	8002c56 <LSM6DSL_FIFO_ACC_Set_Decimation>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <bsp_lsm6dsl_init+0xf4>
			LSM6DSL_FIFO_XL_NO_DEC) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	e026      	b.n	80008c6 <bsp_lsm6dsl_init+0x142>
	}

	if (LSM6DSL_FIFO_GYRO_Set_Decimation(&bsp_lsm6dsl_Obj,
 8000878:	2101      	movs	r1, #1
 800087a:	481a      	ldr	r0, [pc, #104]	; (80008e4 <bsp_lsm6dsl_init+0x160>)
 800087c:	f002 fa13 	bl	8002ca6 <LSM6DSL_FIFO_GYRO_Set_Decimation>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <bsp_lsm6dsl_init+0x108>
			LSM6DSL_FIFO_GY_NO_DEC) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	e01c      	b.n	80008c6 <bsp_lsm6dsl_init+0x142>
	}

	if (LSM6DSL_FIFO_Set_Watermark_Level(&bsp_lsm6dsl_Obj,
 800088c:	213c      	movs	r1, #60	; 0x3c
 800088e:	4815      	ldr	r0, [pc, #84]	; (80008e4 <bsp_lsm6dsl_init+0x160>)
 8000890:	f002 f990 	bl	8002bb4 <LSM6DSL_FIFO_Set_Watermark_Level>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <bsp_lsm6dsl_init+0x11c>
			GYRO_ACC_WATERMARK) != LSM6DSL_OK) {
		return LSM6DSL_ERROR;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
 800089e:	e012      	b.n	80008c6 <bsp_lsm6dsl_init+0x142>
	}

	// Setup watermark interrupt
	lsm6dsl_int1_route_t fth_route = { 0 };
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2100      	movs	r1, #0
 80008a4:	460a      	mov	r2, r1
 80008a6:	801a      	strh	r2, [r3, #0]
 80008a8:	460a      	mov	r2, r1
 80008aa:	709a      	strb	r2, [r3, #2]
	fth_route.int1_fth = 1;
 80008ac:	793b      	ldrb	r3, [r7, #4]
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&(bsp_lsm6dsl_Obj.Ctx), fth_route);
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <bsp_lsm6dsl_init+0x164>)
 80008b8:	f002 fb9e 	bl	8002ff8 <lsm6dsl_pin_int1_route_set>

	bsp_lsm6dsl_Obj.is_initialized = 1;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <bsp_lsm6dsl_init+0x160>)
 80008be:	2201      	movs	r2, #1
 80008c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	return LSM6DSL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	08001ea9 	.word	0x08001ea9
 80008d4:	08001f25 	.word	0x08001f25
 80008d8:	08001fd9 	.word	0x08001fd9
 80008dc:	08001f75 	.word	0x08001f75
 80008e0:	0800203d 	.word	0x0800203d
 80008e4:	200000c4 	.word	0x200000c4
 80008e8:	200000e0 	.word	0x200000e0

080008ec <bsp_lsm6dsl_enable>:

void bsp_lsm6dsl_enable(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	LSM6DSL_ACC_Enable(&bsp_lsm6dsl_Obj);
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <bsp_lsm6dsl_enable+0x14>)
 80008f2:	f002 f8fc 	bl	8002aee <LSM6DSL_ACC_Enable>
	LSM6DSL_GYRO_Enable(&bsp_lsm6dsl_Obj);
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <bsp_lsm6dsl_enable+0x14>)
 80008f8:	f002 f91d 	bl	8002b36 <LSM6DSL_GYRO_Enable>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000c4 	.word	0x200000c4

08000904 <DebugExtAnalyzerPulse1>:

#include "debug_analyzer.h"
#include "main.h"

void DebugExtAnalyzerPulse1(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(ExtAnalyzer1_GPIO_Port, ExtAnalyzer1_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2120      	movs	r1, #32
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <DebugExtAnalyzerPulse1+0x1c>)
 800090e:	f003 fdaf 	bl	8004470 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ExtAnalyzer1_GPIO_Port, ExtAnalyzer1_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	4802      	ldr	r0, [pc, #8]	; (8000920 <DebugExtAnalyzerPulse1+0x1c>)
 8000918:	f003 fdaa 	bl	8004470 <HAL_GPIO_WritePin>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	48000800 	.word	0x48000800

08000924 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <vApplicationGetIdleTaskMemory+0x2c>)
 8000934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <vApplicationGetIdleTaskMemory+0x30>)
 800093a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	200000f4 	.word	0x200000f4
 8000954:	200001a8 	.word	0x200001a8

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b5b0      	push	{r4, r5, r7, lr}
 800095a:	b08e      	sub	sp, #56	; 0x38
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f002 fd7c 	bl	800345a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f849 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 f9f9 	bl	8000d5c <MX_GPIO_Init>
  MX_DMA_Init();
 800096a:	f000 f9d1 	bl	8000d10 <MX_DMA_Init>
  MX_DFSDM1_Init();
 800096e:	f000 f8a5 	bl	8000abc <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 8000972:	f000 f8db 	bl	8000b2c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000976:	f000 f8ff 	bl	8000b78 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800097a:	f000 f93b 	bl	8000bf4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800097e:	f000 f969 	bl	8000c54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000982:	f000 f997 	bl	8000cb4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 8000986:	f00e fd3d 	bl	800f404 <SEGGER_SYSVIEW_Conf>
  SensorBus1_Init(&AccGyroCallback, &MagCallback);
 800098a:	4915      	ldr	r1, [pc, #84]	; (80009e0 <main+0x88>)
 800098c:	4815      	ldr	r0, [pc, #84]	; (80009e4 <main+0x8c>)
 800098e:	f000 fd09 	bl	80013a4 <SensorBus1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <main+0x90>)
 8000994:	f107 041c 	add.w	r4, r7, #28
 8000998:	461d      	mov	r5, r3
 800099a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f00a fa4e 	bl	800ae4e <osThreadCreate>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <main+0x94>)
 80009b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of remoteCommTask */
  osThreadDef(remoteCommTask, StartRemoteCommTask, osPriorityIdle, 0, 256);
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <main+0x98>)
 80009ba:	463c      	mov	r4, r7
 80009bc:	461d      	mov	r5, r3
 80009be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  remoteCommTaskHandle = osThreadCreate(osThread(remoteCommTask), NULL);
 80009ca:	463b      	mov	r3, r7
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00a fa3d 	bl	800ae4e <osThreadCreate>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <main+0x9c>)
 80009d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009da:	f00a fa31 	bl	800ae40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009de:	e7fe      	b.n	80009de <main+0x86>
 80009e0:	0800123d 	.word	0x0800123d
 80009e4:	08001151 	.word	0x08001151
 80009e8:	08011f94 	.word	0x08011f94
 80009ec:	20000a9c 	.word	0x20000a9c
 80009f0:	08011fb0 	.word	0x08011fb0
 80009f4:	20000aa0 	.word	0x20000aa0

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b096      	sub	sp, #88	; 0x58
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2244      	movs	r2, #68	; 0x44
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f010 f867 	bl	8010ada <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a1e:	f006 f859 	bl	8006ad4 <HAL_PWREx_ControlVoltageScaling>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a28:	f000 fcb6 	bl	8001398 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a2c:	f006 f834 	bl	8006a98 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <SystemClock_Config+0xc0>)
 8000a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a36:	4a20      	ldr	r2, [pc, #128]	; (8000ab8 <SystemClock_Config+0xc0>)
 8000a38:	f023 0318 	bic.w	r3, r3, #24
 8000a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a40:	2314      	movs	r3, #20
 8000a42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a50:	2360      	movs	r3, #96	; 0x60
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a54:	2302      	movs	r3, #2
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a60:	2328      	movs	r3, #40	; 0x28
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a64:	2307      	movs	r3, #7
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4618      	mov	r0, r3
 8000a76:	f006 f94f 	bl	8006d18 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a80:	f000 fc8a 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f006 fd17 	bl	80074d0 <HAL_RCC_ClockConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000aa8:	f000 fc76 	bl	8001398 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000aac:	f007 fa50 	bl	8007f50 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ab0:	bf00      	nop
 8000ab2:	3758      	adds	r7, #88	; 0x58
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000

08000abc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000ac2:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <MX_DFSDM1_Init+0x6c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aea:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_DFSDM1_Init+0x68>)
 8000b12:	f002 fe13 	bl	800373c <HAL_DFSDM_ChannelInit>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000b1c:	f000 fc3c 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200003a8 	.word	0x200003a8
 8000b28:	40016020 	.word	0x40016020

08000b2c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_QUADSPI_Init+0x44>)
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <MX_QUADSPI_Init+0x48>)
 8000b34:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_QUADSPI_Init+0x44>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_QUADSPI_Init+0x44>)
 8000b3e:	2204      	movs	r2, #4
 8000b40:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_QUADSPI_Init+0x44>)
 8000b44:	2210      	movs	r2, #16
 8000b46:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_QUADSPI_Init+0x44>)
 8000b4a:	2217      	movs	r2, #23
 8000b4c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_QUADSPI_Init+0x44>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_QUADSPI_Init+0x44>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_QUADSPI_Init+0x44>)
 8000b5c:	f006 f820 	bl	8006ba0 <HAL_QSPI_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000b66:	f000 fc17 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200003e0 	.word	0x200003e0
 8000b74:	a0001000 	.word	0xa0001000

08000b78 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_SPI3_Init+0x74>)
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <MX_SPI3_Init+0x78>)
 8000b80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_SPI3_Init+0x74>)
 8000b84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_SPI3_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_SPI3_Init+0x74>)
 8000b92:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000b96:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_SPI3_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_SPI3_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_SPI3_Init+0x74>)
 8000ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000baa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_SPI3_Init+0x74>)
 8000bae:	2210      	movs	r2, #16
 8000bb0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_SPI3_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_SPI3_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_SPI3_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_SPI3_Init+0x74>)
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_SPI3_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_SPI3_Init+0x74>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_SPI3_Init+0x74>)
 8000bd8:	f007 fb9c 	bl	8008314 <HAL_SPI_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000be2:	f000 fbd9 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000424 	.word	0x20000424
 8000bf0:	40003c00 	.word	0x40003c00

08000bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_USART1_UART_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c38:	f009 f96e 	bl	8009f18 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c42:	f000 fba9 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000488 	.word	0x20000488
 8000c50:	40013800 	.word	0x40013800

08000c54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <MX_USART3_UART_Init+0x5c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART3_UART_Init+0x58>)
 8000c98:	f009 f93e 	bl	8009f18 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f000 fb79 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000050c 	.word	0x2000050c
 8000cb0:	40004800 	.word	0x40004800

08000cb4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc2:	2206      	movs	r2, #6
 8000cc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf8:	f005 fd85 	bl	8006806 <HAL_PCD_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d02:	f000 fb49 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000590 	.word	0x20000590

08000d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_DMA_Init+0x48>)
 8000d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <MX_DMA_Init+0x48>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6493      	str	r3, [r2, #72]	; 0x48
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MX_DMA_Init+0x48>)
 8000d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2105      	movs	r1, #5
 8000d32:	200e      	movs	r0, #14
 8000d34:	f002 fcca 	bl	80036cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d38:	200e      	movs	r0, #14
 8000d3a:	f002 fce3 	bl	8003704 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2105      	movs	r1, #5
 8000d42:	200f      	movs	r0, #15
 8000d44:	f002 fcc2 	bl	80036cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d48:	200f      	movs	r0, #15
 8000d4a:	f002 fcdb 	bl	8003704 <HAL_NVIC_EnableIRQ>

}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d72:	4bbb      	ldr	r3, [pc, #748]	; (8001060 <MX_GPIO_Init+0x304>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4aba      	ldr	r2, [pc, #744]	; (8001060 <MX_GPIO_Init+0x304>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4bb8      	ldr	r3, [pc, #736]	; (8001060 <MX_GPIO_Init+0x304>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	4bb5      	ldr	r3, [pc, #724]	; (8001060 <MX_GPIO_Init+0x304>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4ab4      	ldr	r2, [pc, #720]	; (8001060 <MX_GPIO_Init+0x304>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4bb2      	ldr	r3, [pc, #712]	; (8001060 <MX_GPIO_Init+0x304>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da2:	4baf      	ldr	r3, [pc, #700]	; (8001060 <MX_GPIO_Init+0x304>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4aae      	ldr	r2, [pc, #696]	; (8001060 <MX_GPIO_Init+0x304>)
 8000da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4bac      	ldr	r3, [pc, #688]	; (8001060 <MX_GPIO_Init+0x304>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4ba9      	ldr	r3, [pc, #676]	; (8001060 <MX_GPIO_Init+0x304>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4aa8      	ldr	r2, [pc, #672]	; (8001060 <MX_GPIO_Init+0x304>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4ba6      	ldr	r3, [pc, #664]	; (8001060 <MX_GPIO_Init+0x304>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4ba3      	ldr	r3, [pc, #652]	; (8001060 <MX_GPIO_Init+0x304>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4aa2      	ldr	r2, [pc, #648]	; (8001060 <MX_GPIO_Init+0x304>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4ba0      	ldr	r3, [pc, #640]	; (8001060 <MX_GPIO_Init+0x304>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	4b9d      	ldr	r3, [pc, #628]	; (8001060 <MX_GPIO_Init+0x304>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a9c      	ldr	r2, [pc, #624]	; (8001060 <MX_GPIO_Init+0x304>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b9a      	ldr	r3, [pc, #616]	; (8001060 <MX_GPIO_Init+0x304>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000e08:	4896      	ldr	r0, [pc, #600]	; (8001064 <MX_GPIO_Init+0x308>)
 8000e0a:	f003 fb31 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ExtAnalyzer4_Pin|ExtAnalyzer3_Pin|ExtAnalyzer2_Pin|ExtAnalyzer1_Pin
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8000e14:	4894      	ldr	r0, [pc, #592]	; (8001068 <MX_GPIO_Init+0x30c>)
 8000e16:	f003 fb2b 	bl	8004470 <HAL_GPIO_WritePin>
                          |VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f003 fb24 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|GPIO_PIN_14
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000e2e:	488f      	ldr	r0, [pc, #572]	; (800106c <MX_GPIO_Init+0x310>)
 8000e30:	f003 fb1e 	bl	8004470 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f241 0181 	movw	r1, #4225	; 0x1081
 8000e3a:	488d      	ldr	r0, [pc, #564]	; (8001070 <MX_GPIO_Init+0x314>)
 8000e3c:	f003 fb18 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e46:	488a      	ldr	r0, [pc, #552]	; (8001070 <MX_GPIO_Init+0x314>)
 8000e48:	f003 fb12 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4884      	ldr	r0, [pc, #528]	; (8001064 <MX_GPIO_Init+0x308>)
 8000e52:	f003 fb0d 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e56:	f240 1315 	movw	r3, #277	; 0x115
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	487d      	ldr	r0, [pc, #500]	; (8001064 <MX_GPIO_Init+0x308>)
 8000e70:	f003 f848 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e74:	236a      	movs	r3, #106	; 0x6a
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4876      	ldr	r0, [pc, #472]	; (8001064 <MX_GPIO_Init+0x308>)
 8000e8a:	f003 f83b 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4870      	ldr	r0, [pc, #448]	; (8001068 <MX_GPIO_Init+0x30c>)
 8000ea6:	f003 f82d 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eae:	230b      	movs	r3, #11
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	486a      	ldr	r0, [pc, #424]	; (8001068 <MX_GPIO_Init+0x30c>)
 8000ebe:	f003 f821 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ExtAnalyzer4_Pin ExtAnalyzer3_Pin ExtAnalyzer2_Pin ExtAnalyzer1_Pin */
  GPIO_InitStruct.Pin = ExtAnalyzer4_Pin|ExtAnalyzer3_Pin|ExtAnalyzer2_Pin|ExtAnalyzer1_Pin;
 8000ec2:	233c      	movs	r3, #60	; 0x3c
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4863      	ldr	r0, [pc, #396]	; (8001068 <MX_GPIO_Init+0x30c>)
 8000eda:	f003 f813 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f003 f802 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000f00:	f248 1304 	movw	r3, #33028	; 0x8104
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f002 fff2 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000f20:	2308      	movs	r3, #8
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f30:	2301      	movs	r3, #1
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f002 ffe1 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000f42:	2310      	movs	r3, #16
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f46:	230b      	movs	r3, #11
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f002 ffd4 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f5c:	23e0      	movs	r3, #224	; 0xe0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f002 ffc3 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4836      	ldr	r0, [pc, #216]	; (800106c <MX_GPIO_Init+0x310>)
 8000f94:	f002 ffb6 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4830      	ldr	r0, [pc, #192]	; (800106c <MX_GPIO_Init+0x310>)
 8000fac:	f002 ffaa 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin PB14
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|GPIO_PIN_14
 8000fb0:	f24f 0314 	movw	r3, #61460	; 0xf014
 8000fb4:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4828      	ldr	r0, [pc, #160]	; (800106c <MX_GPIO_Init+0x310>)
 8000fca:	f002 ff9b 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000fce:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000fd2:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4822      	ldr	r0, [pc, #136]	; (8001070 <MX_GPIO_Init+0x314>)
 8000fe6:	f002 ff8d 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000fea:	f243 0381 	movw	r3, #12417	; 0x3081
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	481b      	ldr	r0, [pc, #108]	; (8001070 <MX_GPIO_Init+0x314>)
 8001004:	f002 ff7e 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001008:	f44f 7310 	mov.w	r3, #576	; 0x240
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4811      	ldr	r0, [pc, #68]	; (8001068 <MX_GPIO_Init+0x30c>)
 8001022:	f002 ff6f 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3DSL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3DSL_DRDY_EXTI8_Pin;
 8001026:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800102c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	480a      	ldr	r0, [pc, #40]	; (8001068 <MX_GPIO_Init+0x30c>)
 800103e:	f002 ff61 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001042:	2302      	movs	r3, #2
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001052:	2305      	movs	r3, #5
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	e00a      	b.n	8001074 <MX_GPIO_Init+0x318>
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	48001000 	.word	0x48001000
 8001068:	48000800 	.word	0x48000800
 800106c:	48000400 	.word	0x48000400
 8001070:	48000c00 	.word	0x48000c00
 8001074:	481f      	ldr	r0, [pc, #124]	; (80010f4 <MX_GPIO_Init+0x398>)
 8001076:	f002 ff45 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800107a:	2378      	movs	r3, #120	; 0x78
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108a:	2307      	movs	r3, #7
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	4817      	ldr	r0, [pc, #92]	; (80010f4 <MX_GPIO_Init+0x398>)
 8001096:	f002 ff35 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800109a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a0:	2312      	movs	r3, #18
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ac:	2304      	movs	r3, #4
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4810      	ldr	r0, [pc, #64]	; (80010f8 <MX_GPIO_Init+0x39c>)
 80010b8:	f002 ff24 	bl	8003f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2105      	movs	r1, #5
 80010c0:	2007      	movs	r0, #7
 80010c2:	f002 fb03 	bl	80036cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010c6:	2007      	movs	r0, #7
 80010c8:	f002 fb1c 	bl	8003704 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2105      	movs	r1, #5
 80010d0:	2017      	movs	r0, #23
 80010d2:	f002 fafb 	bl	80036cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010d6:	2017      	movs	r0, #23
 80010d8:	f002 fb14 	bl	8003704 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2105      	movs	r1, #5
 80010e0:	2028      	movs	r0, #40	; 0x28
 80010e2:	f002 faf3 	bl	80036cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010e6:	2028      	movs	r0, #40	; 0x28
 80010e8:	f002 fb0c 	bl	8003704 <HAL_NVIC_EnableIRQ>

}
 80010ec:	bf00      	nop
 80010ee:	3730      	adds	r7, #48	; 0x30
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	48000c00 	.word	0x48000c00
 80010f8:	48000400 	.word	0x48000400

080010fc <HAL_GPIO_EXTI_Callback>:
* @brief  EXTI line detection callback.
* @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
* @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800110c:	d00b      	beq.n	8001126 <HAL_GPIO_EXTI_Callback+0x2a>
 800110e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001112:	dc0e      	bgt.n	8001132 <HAL_GPIO_EXTI_Callback+0x36>
 8001114:	2b02      	cmp	r3, #2
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_EXTI_Callback+0x24>
 8001118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800111c:	d006      	beq.n	800112c <HAL_GPIO_EXTI_Callback+0x30>
		}


		default:
		{
			break;
 800111e:	e008      	b.n	8001132 <HAL_GPIO_EXTI_Callback+0x36>
			SPI_WIFI_ISR();
 8001120:	f00f fadc 	bl	80106dc <SPI_WIFI_ISR>
			break;
 8001124:	e006      	b.n	8001134 <HAL_GPIO_EXTI_Callback+0x38>
			SensorBus1_Gyro_ACC_Intr();
 8001126:	f000 f97f 	bl	8001428 <SensorBus1_Gyro_ACC_Intr>
			break;
 800112a:	e003      	b.n	8001134 <HAL_GPIO_EXTI_Callback+0x38>
			SensorBus1_Mag_Intr();
 800112c:	f000 f98c 	bl	8001448 <SensorBus1_Mag_Intr>
			break;
 8001130:	e000      	b.n	8001134 <HAL_GPIO_EXTI_Callback+0x38>
			break;
 8001132:	bf00      	nop
		}
	}
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_I2C_MemRxCpltCallback>:


// Here when DMA is complete and data is ready to use
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	SensorBus1_DMA_CallBack();
 8001144:	f000 f9e2 	bl	800150c <SensorBus1_DMA_CallBack>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <AccGyroCallback>:



void AccGyroCallback(GYRO_ACC_t * pRawData, uint16_t numItems) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]

	// First, average raw data
	LSM6DSL_Axes_t gyroAvg = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
	LSM6DSL_Axes_t accAvg = {0};
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]

	GYRO_ACC_t * pCruRawData = pRawData;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t itemCount = numItems;
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	847b      	strh	r3, [r7, #34]	; 0x22

	// Now sum data sets
	while(itemCount) {
 800117c:	e029      	b.n	80011d2 <AccGyroCallback+0x82>
		gyroAvg.x += pCruRawData->gyro_data.x;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001182:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001186:	4413      	add	r3, r2
 8001188:	617b      	str	r3, [r7, #20]
		gyroAvg.y += pCruRawData->gyro_data.y;
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800118e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001192:	4413      	add	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
		gyroAvg.z += pCruRawData->gyro_data.z;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800119a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	61fb      	str	r3, [r7, #28]

		accAvg.x += pCruRawData->acc_data.x;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80011aa:	4413      	add	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
		accAvg.y += pCruRawData->acc_data.y;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80011b6:	4413      	add	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
		accAvg.z += pCruRawData->acc_data.z;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011be:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80011c2:	4413      	add	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]

		pCruRawData++;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	330c      	adds	r3, #12
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
		itemCount--;
 80011cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011ce:	3b01      	subs	r3, #1
 80011d0:	847b      	strh	r3, [r7, #34]	; 0x22
	while(itemCount) {
 80011d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1d2      	bne.n	800117e <AccGyroCallback+0x2e>
	}

	// Complete average
	gyroAvg.x /= numItems;
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
	gyroAvg.y /= numItems;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ea:	61bb      	str	r3, [r7, #24]
	gyroAvg.z /= numItems;
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80011f4:	61fb      	str	r3, [r7, #28]

	accAvg.x /= numItems;
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80011fe:	60bb      	str	r3, [r7, #8]
	accAvg.y /= numItems;
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	fb92 f3f3 	sdiv	r3, r2, r3
 8001208:	60fb      	str	r3, [r7, #12]
	accAvg.z /= numItems;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001212:	613b      	str	r3, [r7, #16]


	SEGGER_SYSVIEW_PrintfHost("Gyro Value: X = %d, Y = %d, Z = %d, ",
 8001214:	6979      	ldr	r1, [r7, #20]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <AccGyroCallback+0xe4>)
 800121c:	f00e f874 	bl	800f308 <SEGGER_SYSVIEW_PrintfHost>
			gyroAvg.x, gyroAvg.y, gyroAvg.z);

	SEGGER_SYSVIEW_PrintfHost("Acc Value: X = %d, Y = %d, Z = %d, ",
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <AccGyroCallback+0xe8>)
 8001228:	f00e f86e 	bl	800f308 <SEGGER_SYSVIEW_PrintfHost>
			accAvg.x, accAvg.y, accAvg.z);
}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	08011fcc 	.word	0x08011fcc
 8001238:	08011ff4 	.word	0x08011ff4

0800123c <MagCallback>:


void MagCallback(LIS3MDL_AxesRaw_t * pRawData, uint16_t numItems) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]

	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
				 pRawData->x, pRawData->y, pRawData->z);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 800124e:	4619      	mov	r1, r3
				 pRawData->x, pRawData->y, pRawData->z);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 8001256:	461a      	mov	r2, r3
				 pRawData->x, pRawData->y, pRawData->z);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	SEGGER_SYSVIEW_PrintfHost("Mag value: X = %d, Y = %d, Z = %d, ",
 800125e:	4803      	ldr	r0, [pc, #12]	; (800126c <MagCallback+0x30>)
 8001260:	f00e f852 	bl	800f308 <SEGGER_SYSVIEW_PrintfHost>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08012018 	.word	0x08012018

08001270 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	SensorBus1_Start();
 8001278:	f000 f8ce 	bl	8001418 <SensorBus1_Start>

  for(;;)
  {
	osDelay(100);
 800127c:	2064      	movs	r0, #100	; 0x64
 800127e:	f009 fe32 	bl	800aee6 <osDelay>
 8001282:	e7fb      	b.n	800127c <StartDefaultTask+0xc>

08001284 <StartRemoteCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRemoteCommTask */
void StartRemoteCommTask(void const * argument)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b098      	sub	sp, #96	; 0x60
 8001288:	af02      	add	r7, sp, #8
 800128a:	6078      	str	r0, [r7, #4]
	uint8_t TxData[60];
//	int32_t Socket = -1;
	uint16_t Datalen;
//	int32_t ret;
//	int16_t Trials = CONNECTION_TRIAL_MAX;
	int count = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	657b      	str	r3, [r7, #84]	; 0x54
	int errors = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	653b      	str	r3, [r7, #80]	; 0x50

	char testMe[] = "Howdy";
 8001294:	4a31      	ldr	r2, [pc, #196]	; (800135c <StartRemoteCommTask+0xd8>)
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129e:	6018      	str	r0, [r3, #0]
 80012a0:	3304      	adds	r3, #4
 80012a2:	8019      	strh	r1, [r3, #0]

	WIFI_Status_t WifiStatus = WIFI_STATUS_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	while (1)
	{
		while (WifiStatus != WIFI_STATUS_OK)
 80012aa:	e021      	b.n	80012f0 <StartRemoteCommTask+0x6c>
		{
			osDelay(500);
 80012ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b0:	f009 fe19 	bl	800aee6 <osDelay>

			if (WIFI_Init() != WIFI_STATUS_OK) {break;}
 80012b4:	f00f fa26 	bl	8010704 <WIFI_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d11d      	bne.n	80012fa <StartRemoteCommTask+0x76>

			if (WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) != WIFI_STATUS_OK) {break;}
 80012be:	2203      	movs	r2, #3
 80012c0:	4927      	ldr	r1, [pc, #156]	; (8001360 <StartRemoteCommTask+0xdc>)
 80012c2:	4828      	ldr	r0, [pc, #160]	; (8001364 <StartRemoteCommTask+0xe0>)
 80012c4:	f00f fa4a 	bl	801075c <WIFI_Connect>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d117      	bne.n	80012fe <StartRemoteCommTask+0x7a>

			if (WIFI_OpenClientConnection(0, WIFI_UDP_PROTOCOL, "UDP_CLIENT", RemoteIP, RemotePORT, 0) != WIFI_STATUS_OK) {break;}
 80012ce:	2300      	movs	r3, #0
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f24f 432e 	movw	r3, #62510	; 0xf42e
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <StartRemoteCommTask+0xe4>)
 80012da:	4a24      	ldr	r2, [pc, #144]	; (800136c <StartRemoteCommTask+0xe8>)
 80012dc:	2101      	movs	r1, #1
 80012de:	2000      	movs	r0, #0
 80012e0:	f00f fa5e 	bl	80107a0 <WIFI_OpenClientConnection>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10b      	bne.n	8001302 <StartRemoteCommTask+0x7e>

			WifiStatus = WIFI_STATUS_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		while (WifiStatus != WIFI_STATUS_OK)
 80012f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1d9      	bne.n	80012ac <StartRemoteCommTask+0x28>
 80012f8:	e027      	b.n	800134a <StartRemoteCommTask+0xc6>
			if (WIFI_Init() != WIFI_STATUS_OK) {break;}
 80012fa:	bf00      	nop
 80012fc:	e025      	b.n	800134a <StartRemoteCommTask+0xc6>
			if (WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) != WIFI_STATUS_OK) {break;}
 80012fe:	bf00      	nop
 8001300:	e023      	b.n	800134a <StartRemoteCommTask+0xc6>
			if (WIFI_OpenClientConnection(0, WIFI_UDP_PROTOCOL, "UDP_CLIENT", RemoteIP, RemotePORT, 0) != WIFI_STATUS_OK) {break;}
 8001302:	bf00      	nop
		}

		while (WifiStatus == WIFI_STATUS_OK)
 8001304:	e021      	b.n	800134a <StartRemoteCommTask+0xc6>
		{
			sprintf((char*)TxData, "S3=30\r\r\nCount = %5d\r\n Error = %d5", count, errors);
 8001306:	f107 0010 	add.w	r0, r7, #16
 800130a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800130c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800130e:	4918      	ldr	r1, [pc, #96]	; (8001370 <StartRemoteCommTask+0xec>)
 8001310:	f00f fd88 	bl	8010e24 <siprintf>

			//WifiStatus = WIFI_SendData(TestSocket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
			WifiStatus = WIFI_SendData(TestSocket, (uint8_t*)testMe, sizeof(testMe), &Datalen, WIFI_WRITE_TIMEOUT);
 8001314:	f107 030e 	add.w	r3, r7, #14
 8001318:	f107 0108 	add.w	r1, r7, #8
 800131c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001320:	9200      	str	r2, [sp, #0]
 8001322:	2206      	movs	r2, #6
 8001324:	2000      	movs	r0, #0
 8001326:	f00f fa75 	bl	8010814 <WIFI_SendData>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


			if (WifiStatus != WIFI_STATUS_OK)
 8001330:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <StartRemoteCommTask+0xba>
			{
			  errors++;
 8001338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800133a:	3301      	adds	r3, #1
 800133c:	653b      	str	r3, [r7, #80]	; 0x50
			}

			count++;
 800133e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001340:	3301      	adds	r3, #1
 8001342:	657b      	str	r3, [r7, #84]	; 0x54

			osDelay(100);
 8001344:	2064      	movs	r0, #100	; 0x64
 8001346:	f009 fdce 	bl	800aee6 <osDelay>
		while (WifiStatus == WIFI_STATUS_OK)
 800134a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0d9      	beq.n	8001306 <StartRemoteCommTask+0x82>
		}

		osDelay(100);
 8001352:	2064      	movs	r0, #100	; 0x64
 8001354:	f009 fdc7 	bl	800aee6 <osDelay>
		while (WifiStatus != WIFI_STATUS_OK)
 8001358:	e7ca      	b.n	80012f0 <StartRemoteCommTask+0x6c>
 800135a:	bf00      	nop
 800135c:	08012088 	.word	0x08012088
 8001360:	0801203c 	.word	0x0801203c
 8001364:	0801204c 	.word	0x0801204c
 8001368:	20000000 	.word	0x20000000
 800136c:	08012058 	.word	0x08012058
 8001370:	08012064 	.word	0x08012064

08001374 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d101      	bne.n	800138a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001386:	f002 f881 	bl	800348c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40000c00 	.word	0x40000c00

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <Error_Handler+0x8>
	...

080013a4 <SensorBus1_Init>:

static void run_pending_dma(void);

extern I2C_HandleTypeDef hi2c2;

void SensorBus1_Init(AccGyroCallback_t pAccGyroCB, MagCallback_t pMagCB) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]

	pAccGyroCallback = pAccGyroCB;
 80013ae:	4a10      	ldr	r2, [pc, #64]	; (80013f0 <SensorBus1_Init+0x4c>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6013      	str	r3, [r2, #0]
	pMagCallback = pMagCB;
 80013b4:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <SensorBus1_Init+0x50>)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	6013      	str	r3, [r2, #0]

	req_mag = GP_FALSE;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <SensorBus1_Init+0x54>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
	req_gyro_acc = GP_FALSE;
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <SensorBus1_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
	lock_update = GP_FALSE;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <SensorBus1_Init+0x5c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
	in_process_dma = DMA_RDY;
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <SensorBus1_Init+0x60>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
	p_acc_gyro_raw_data = &acc_gyro_raw_data1[0];
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <SensorBus1_Init+0x64>)
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <SensorBus1_Init+0x68>)
 80013d6:	601a      	str	r2, [r3, #0]
	p_mag_raw_data = &mag_raw_data1;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <SensorBus1_Init+0x6c>)
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <SensorBus1_Init+0x70>)
 80013dc:	601a      	str	r2, [r3, #0]

	bsp_lsm6dsl_init();
 80013de:	f7ff f9d1 	bl	8000784 <bsp_lsm6dsl_init>
	bsp_lis3mdl_init();
 80013e2:	f7ff f917 	bl	8000614 <bsp_lis3mdl_init>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000bb0 	.word	0x20000bb0
 80013f4:	20000bb4 	.word	0x20000bb4
 80013f8:	20000aa5 	.word	0x20000aa5
 80013fc:	20000aa6 	.word	0x20000aa6
 8001400:	20000aa7 	.word	0x20000aa7
 8001404:	20000aa4 	.word	0x20000aa4
 8001408:	20000b98 	.word	0x20000b98
 800140c:	20000aa8 	.word	0x20000aa8
 8001410:	20000bac 	.word	0x20000bac
 8001414:	20000b9c 	.word	0x20000b9c

08001418 <SensorBus1_Start>:


void SensorBus1_Start(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	bsp_lsm6dsl_enable();
 800141c:	f7ff fa66 	bl	80008ec <bsp_lsm6dsl_enable>
	bsp_lis3mdl_enable();
 8001420:	f7ff f986 	bl	8000730 <bsp_lis3mdl_enable>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <SensorBus1_Gyro_ACC_Intr>:


void SensorBus1_Gyro_ACC_Intr(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_PrintfHost("SensorBus1_Gyro_Acc_Intr");
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <SensorBus1_Gyro_ACC_Intr+0x18>)
 800142e:	f00d ff6b 	bl	800f308 <SEGGER_SYSVIEW_PrintfHost>

	req_gyro_acc = GP_TRUE;
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <SensorBus1_Gyro_ACC_Intr+0x1c>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
	run_pending_dma();
 8001438:	f000 f816 	bl	8001468 <run_pending_dma>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	08012090 	.word	0x08012090
 8001444:	20000aa6 	.word	0x20000aa6

08001448 <SensorBus1_Mag_Intr>:


void SensorBus1_Mag_Intr(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_PrintfHost("SensorBus1_Mag_Intr");
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <SensorBus1_Mag_Intr+0x18>)
 800144e:	f00d ff5b 	bl	800f308 <SEGGER_SYSVIEW_PrintfHost>

	req_mag = GP_TRUE;
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SensorBus1_Mag_Intr+0x1c>)
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
	run_pending_dma();
 8001458:	f000 f806 	bl	8001468 <run_pending_dma>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	080120ac 	.word	0x080120ac
 8001464:	20000aa5 	.word	0x20000aa5

08001468 <run_pending_dma>:



void run_pending_dma(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af02      	add	r7, sp, #8
//	SEGGER_SYSVIEW_PrintfHost("run_pending_dma");

	// Must not be reentrant, this will catch that
	// Must have SensorBus1_DMA_CallBack and SensorBus1_Intr on same interrupt level
	assert_param(lock_update == GP_FALSE);
	lock_update = GP_TRUE;
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <run_pending_dma+0x84>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]

	if (in_process_dma != DMA_RDY) { // exit if previous still running
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <run_pending_dma+0x88>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <run_pending_dma+0x1e>
		lock_update = GP_FALSE;
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <run_pending_dma+0x84>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
		return;
 8001484:	e030      	b.n	80014e8 <run_pending_dma+0x80>
	}

	// Else check for ryro/acc DMA read
	if (req_gyro_acc) {
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <run_pending_dma+0x8c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d012      	beq.n	80014b6 <run_pending_dma+0x4e>

		req_gyro_acc = GP_FALSE;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <run_pending_dma+0x8c>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
		in_process_dma = DMA_ACC_GYRO;
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <run_pending_dma+0x88>)
 8001498:	2202      	movs	r2, #2
 800149a:	701a      	strb	r2, [r3, #0]

		// TODO: Handle error
		HAL_I2C_Mem_Read_DMA(&hi2c2, LSM6DSL_I2C_ADD_L, LSM6DSL_FIFO_DATA_OUT_L,
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <run_pending_dma+0x90>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a16      	ldr	r2, [pc, #88]	; (80014fc <run_pending_dma+0x94>)
 80014a2:	8812      	ldrh	r2, [r2, #0]
 80014a4:	9201      	str	r2, [sp, #4]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	223e      	movs	r2, #62	; 0x3e
 80014ac:	21d5      	movs	r1, #213	; 0xd5
 80014ae:	4814      	ldr	r0, [pc, #80]	; (8001500 <run_pending_dma+0x98>)
 80014b0:	f003 fb0e 	bl	8004ad0 <HAL_I2C_Mem_Read_DMA>
 80014b4:	e015      	b.n	80014e2 <run_pending_dma+0x7a>
				acc_gyro_raw_data_size);

//	SEGGER_SYSVIEW_PrintfHost("req_gyro_acc DMA");

	} // Else check for mag request
	else if (req_mag) {
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <run_pending_dma+0x9c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d010      	beq.n	80014e2 <run_pending_dma+0x7a>

		req_mag = GP_FALSE;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <run_pending_dma+0x9c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
		in_process_dma = DMA_MAG;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <run_pending_dma+0x88>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]

		// TODO: Handle error
		HAL_I2C_Mem_Read_DMA(&hi2c2, LIS3MDL_I2C_ADD_H, LIS3MDL_OUT_X_L, I2C_MEMADD_SIZE_8BIT,
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <run_pending_dma+0xa0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2206      	movs	r2, #6
 80014d2:	9201      	str	r2, [sp, #4]
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	2228      	movs	r2, #40	; 0x28
 80014da:	213d      	movs	r1, #61	; 0x3d
 80014dc:	4808      	ldr	r0, [pc, #32]	; (8001500 <run_pending_dma+0x98>)
 80014de:	f003 faf7 	bl	8004ad0 <HAL_I2C_Mem_Read_DMA>
				(uint8_t*) p_mag_raw_data, sizeof(LIS3MDL_AxesRaw_t));

//		SEGGER_SYSVIEW_PrintfHost("req_mag DMA");
	}

	lock_update = GP_FALSE;
 80014e2:	4b02      	ldr	r3, [pc, #8]	; (80014ec <run_pending_dma+0x84>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
}
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000aa7 	.word	0x20000aa7
 80014f0:	20000aa4 	.word	0x20000aa4
 80014f4:	20000aa6 	.word	0x20000aa6
 80014f8:	20000b98 	.word	0x20000b98
 80014fc:	20000004 	.word	0x20000004
 8001500:	20000c0c 	.word	0x20000c0c
 8001504:	20000aa5 	.word	0x20000aa5
 8001508:	20000bac 	.word	0x20000bac

0800150c <SensorBus1_DMA_CallBack>:


void SensorBus1_DMA_CallBack(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

	DebugExtAnalyzerPulse1();
 8001510:	f7ff f9f8 	bl	8000904 <DebugExtAnalyzerPulse1>

	// Handle data ready from last dma request
	switch (in_process_dma) {
 8001514:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <SensorBus1_DMA_CallBack+0xa4>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b01      	cmp	r3, #1
 800151c:	d015      	beq.n	800154a <SensorBus1_DMA_CallBack+0x3e>
 800151e:	2b02      	cmp	r3, #2
 8001520:	d127      	bne.n	8001572 <SensorBus1_DMA_CallBack+0x66>

	case DMA_ACC_GYRO:
//		SEGGER_SYSVIEW_PrintfHost("DMA_ACC_GYRO CALLBACK");
			// Acc Gyro call back with current raw data
		pAccGyroCallback(p_acc_gyro_raw_data, GYRO_ACC_SAMPLES);
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <SensorBus1_DMA_CallBack+0xa8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <SensorBus1_DMA_CallBack+0xac>)
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	210a      	movs	r1, #10
 800152c:	4610      	mov	r0, r2
 800152e:	4798      	blx	r3

		// Swap raw data storage
		if (p_acc_gyro_raw_data == &acc_gyro_raw_data1[0]) {
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <SensorBus1_DMA_CallBack+0xac>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a21      	ldr	r2, [pc, #132]	; (80015bc <SensorBus1_DMA_CallBack+0xb0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d103      	bne.n	8001542 <SensorBus1_DMA_CallBack+0x36>
			p_acc_gyro_raw_data = &acc_gyro_raw_data2[0];
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <SensorBus1_DMA_CallBack+0xac>)
 800153c:	4a20      	ldr	r2, [pc, #128]	; (80015c0 <SensorBus1_DMA_CallBack+0xb4>)
 800153e:	601a      	str	r2, [r3, #0]
		} else {
			p_acc_gyro_raw_data = &acc_gyro_raw_data1[0];
		}

		break;
 8001540:	e018      	b.n	8001574 <SensorBus1_DMA_CallBack+0x68>
			p_acc_gyro_raw_data = &acc_gyro_raw_data1[0];
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <SensorBus1_DMA_CallBack+0xac>)
 8001544:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <SensorBus1_DMA_CallBack+0xb0>)
 8001546:	601a      	str	r2, [r3, #0]
		break;
 8001548:	e014      	b.n	8001574 <SensorBus1_DMA_CallBack+0x68>

	case DMA_MAG:
//		SEGGER_SYSVIEW_PrintfHost("DMA_MAG CALLBACK");
		// Mag call back with current raw data
		pMagCallback(p_mag_raw_data, 1);
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <SensorBus1_DMA_CallBack+0xb8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <SensorBus1_DMA_CallBack+0xbc>)
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	2101      	movs	r1, #1
 8001554:	4610      	mov	r0, r2
 8001556:	4798      	blx	r3

		// Swap raw data storage
		if (p_mag_raw_data == &mag_raw_data1) {
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <SensorBus1_DMA_CallBack+0xbc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <SensorBus1_DMA_CallBack+0xc0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d103      	bne.n	800156a <SensorBus1_DMA_CallBack+0x5e>
			p_mag_raw_data = &mag_raw_data2;
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <SensorBus1_DMA_CallBack+0xbc>)
 8001564:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <SensorBus1_DMA_CallBack+0xc4>)
 8001566:	601a      	str	r2, [r3, #0]
		} else {
			p_mag_raw_data = &mag_raw_data1;
		}

		break;
 8001568:	e004      	b.n	8001574 <SensorBus1_DMA_CallBack+0x68>
			p_mag_raw_data = &mag_raw_data1;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <SensorBus1_DMA_CallBack+0xbc>)
 800156c:	4a17      	ldr	r2, [pc, #92]	; (80015cc <SensorBus1_DMA_CallBack+0xc0>)
 800156e:	601a      	str	r2, [r3, #0]
		break;
 8001570:	e000      	b.n	8001574 <SensorBus1_DMA_CallBack+0x68>

	default:
		assert_param(!HAL_OK);
		break;
 8001572:	bf00      	nop
	// Check if we have back to back gyro/acc interrupts.
	// This can happen if we halt for debug.
	// In this case the interrupt line remains high between data sets and
	// therefore does not generate second rising edge.
	// We'll just check for interrupt still high and schedule DMA again
	if (HAL_GPIO_ReadPin(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin) == GPIO_PIN_SET) {
 8001574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001578:	4816      	ldr	r0, [pc, #88]	; (80015d4 <SensorBus1_DMA_CallBack+0xc8>)
 800157a:	f002 ff61 	bl	8004440 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	2b01      	cmp	r3, #1
 8001582:	d102      	bne.n	800158a <SensorBus1_DMA_CallBack+0x7e>
		req_gyro_acc = GP_TRUE;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <SensorBus1_DMA_CallBack+0xcc>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
//			SEGGER_SYSVIEW_PrintfHost("Reschedule req_gyro_acc");
	}

	if (HAL_GPIO_ReadPin(LSM3DSL_DRDY_EXTI8_GPIO_Port, LSM3DSL_DRDY_EXTI8_Pin) == GPIO_PIN_SET) {
 800158a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158e:	4813      	ldr	r0, [pc, #76]	; (80015dc <SensorBus1_DMA_CallBack+0xd0>)
 8001590:	f002 ff56 	bl	8004440 <HAL_GPIO_ReadPin>
 8001594:	4603      	mov	r3, r0
 8001596:	2b01      	cmp	r3, #1
 8001598:	d102      	bne.n	80015a0 <SensorBus1_DMA_CallBack+0x94>
		req_mag = GP_TRUE;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <SensorBus1_DMA_CallBack+0xd4>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
//			SEGGER_SYSVIEW_PrintfHost("Reschedule req_mag");
	}


	in_process_dma = DMA_RDY; // Indicate ready for more
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <SensorBus1_DMA_CallBack+0xa4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]

	// Schedule next pending
	run_pending_dma();
 80015a6:	f7ff ff5f 	bl	8001468 <run_pending_dma>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000aa4 	.word	0x20000aa4
 80015b4:	20000bb0 	.word	0x20000bb0
 80015b8:	20000b98 	.word	0x20000b98
 80015bc:	20000aa8 	.word	0x20000aa8
 80015c0:	20000b20 	.word	0x20000b20
 80015c4:	20000bb4 	.word	0x20000bb4
 80015c8:	20000bac 	.word	0x20000bac
 80015cc:	20000b9c 	.word	0x20000b9c
 80015d0:	20000ba4 	.word	0x20000ba4
 80015d4:	48000c00 	.word	0x48000c00
 80015d8:	20000aa6 	.word	0x20000aa6
 80015dc:	48000800 	.word	0x48000800
 80015e0:	20000aa5 	.word	0x20000aa5

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_MspInit+0x4c>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <HAL_MspInit+0x4c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6613      	str	r3, [r2, #96]	; 0x60
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_MspInit+0x4c>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_MspInit+0x4c>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <HAL_MspInit+0x4c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6593      	str	r3, [r2, #88]	; 0x58
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_MspInit+0x4c>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	210f      	movs	r1, #15
 800161e:	f06f 0001 	mvn.w	r0, #1
 8001622:	f002 f853 	bl	80036cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0ac      	sub	sp, #176	; 0xb0
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2288      	movs	r2, #136	; 0x88
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f00f fa40 	bl	8010ada <memset>
  if(DFSDM1_Init == 0)
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d142      	bne.n	80016e8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001666:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4618      	mov	r0, r3
 8001674:	f006 f982 	bl	800797c <HAL_RCCEx_PeriphCLKConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800167e:	f7ff fe8b 	bl	8001398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001688:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800168c:	6613      	str	r3, [r2, #96]	; 0x60
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80016a0:	f043 0310 	orr.w	r3, r3, #16
 80016a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80016b2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80016b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016cc:	2306      	movs	r3, #6
 80016ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d6:	4619      	mov	r1, r3
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80016da:	f002 fc13 	bl	8003f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	4a02      	ldr	r2, [pc, #8]	; (80016f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016e6:	6013      	str	r3, [r2, #0]
  }

}
 80016e8:	bf00      	nop
 80016ea:	37b0      	adds	r7, #176	; 0xb0
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000bb8 	.word	0x20000bb8
 80016f4:	40021000 	.word	0x40021000
 80016f8:	48001000 	.word	0x48001000

080016fc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_QSPI_MspInit+0x7c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d128      	bne.n	8001770 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_QSPI_MspInit+0x80>)
 8001720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001722:	4a16      	ldr	r2, [pc, #88]	; (800177c <HAL_QSPI_MspInit+0x80>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	6513      	str	r3, [r2, #80]	; 0x50
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_QSPI_MspInit+0x80>)
 800172c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800172e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_QSPI_MspInit+0x80>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_QSPI_MspInit+0x80>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_QSPI_MspInit+0x80>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800174e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001752:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001760:	230a      	movs	r3, #10
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_QSPI_MspInit+0x84>)
 800176c:	f002 fbca 	bl	8003f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	a0001000 	.word	0xa0001000
 800177c:	40021000 	.word	0x40021000
 8001780:	48001000 	.word	0x48001000

08001784 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <HAL_SPI_MspInit+0x8c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d130      	bne.n	8001808 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_SPI_MspInit+0x90>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_SPI_MspInit+0x90>)
 80017ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b0:	6593      	str	r3, [r2, #88]	; 0x58
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_SPI_MspInit+0x90>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_SPI_MspInit+0x90>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a14      	ldr	r2, [pc, #80]	; (8001814 <HAL_SPI_MspInit+0x90>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_SPI_MspInit+0x90>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80017d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017e8:	2306      	movs	r3, #6
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	4809      	ldr	r0, [pc, #36]	; (8001818 <HAL_SPI_MspInit+0x94>)
 80017f4:	f002 fb86 	bl	8003f04 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2105      	movs	r1, #5
 80017fc:	2033      	movs	r0, #51	; 0x33
 80017fe:	f001 ff65 	bl	80036cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001802:	2033      	movs	r0, #51	; 0x33
 8001804:	f001 ff7e 	bl	8003704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	; 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40003c00 	.word	0x40003c00
 8001814:	40021000 	.word	0x40021000
 8001818:	48000800 	.word	0x48000800

0800181c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_SPI_MspDeInit+0x38>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10d      	bne.n	800184a <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_SPI_MspDeInit+0x3c>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_SPI_MspDeInit+0x3c>)
 8001834:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800183a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800183e:	4807      	ldr	r0, [pc, #28]	; (800185c <HAL_SPI_MspDeInit+0x40>)
 8001840:	f002 fd0a 	bl	8004258 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8001844:	2033      	movs	r0, #51	; 0x33
 8001846:	f001 ff6b 	bl	8003720 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40003c00 	.word	0x40003c00
 8001858:	40021000 	.word	0x40021000
 800185c:	48000800 	.word	0x48000800

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0ae      	sub	sp, #184	; 0xb8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2288      	movs	r2, #136	; 0x88
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f00f f92a 	bl	8010ada <memset>
  if(huart->Instance==USART1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a42      	ldr	r2, [pc, #264]	; (8001994 <HAL_UART_MspInit+0x134>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d13b      	bne.n	8001908 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001890:	2301      	movs	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001894:	2300      	movs	r3, #0
 8001896:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4618      	mov	r0, r3
 800189e:	f006 f86d 	bl	800797c <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018a8:	f7ff fd76 	bl	8001398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ac:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <HAL_UART_MspInit+0x138>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	4a39      	ldr	r2, [pc, #228]	; (8001998 <HAL_UART_MspInit+0x138>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	6613      	str	r3, [r2, #96]	; 0x60
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <HAL_UART_MspInit+0x138>)
 80018ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_UART_MspInit+0x138>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a33      	ldr	r2, [pc, #204]	; (8001998 <HAL_UART_MspInit+0x138>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_UART_MspInit+0x138>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80018dc:	23c0      	movs	r3, #192	; 0xc0
 80018de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018f4:	2307      	movs	r3, #7
 80018f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018fe:	4619      	mov	r1, r3
 8001900:	4826      	ldr	r0, [pc, #152]	; (800199c <HAL_UART_MspInit+0x13c>)
 8001902:	f002 faff 	bl	8003f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001906:	e040      	b.n	800198a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <HAL_UART_MspInit+0x140>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d13b      	bne.n	800198a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001912:	2304      	movs	r3, #4
 8001914:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001916:	2300      	movs	r3, #0
 8001918:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4618      	mov	r0, r3
 8001920:	f006 f82c 	bl	800797c <HAL_RCCEx_PeriphCLKConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800192a:	f7ff fd35 	bl	8001398 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_UART_MspInit+0x138>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	4a19      	ldr	r2, [pc, #100]	; (8001998 <HAL_UART_MspInit+0x138>)
 8001934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001938:	6593      	str	r3, [r2, #88]	; 0x58
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_UART_MspInit+0x138>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_UART_MspInit+0x138>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a13      	ldr	r2, [pc, #76]	; (8001998 <HAL_UART_MspInit+0x138>)
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_UART_MspInit+0x138>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800195e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001978:	2307      	movs	r3, #7
 800197a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001982:	4619      	mov	r1, r3
 8001984:	4807      	ldr	r0, [pc, #28]	; (80019a4 <HAL_UART_MspInit+0x144>)
 8001986:	f002 fabd 	bl	8003f04 <HAL_GPIO_Init>
}
 800198a:	bf00      	nop
 800198c:	37b8      	adds	r7, #184	; 0xb8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40013800 	.word	0x40013800
 8001998:	40021000 	.word	0x40021000
 800199c:	48000400 	.word	0x48000400
 80019a0:	40004800 	.word	0x40004800
 80019a4:	48000c00 	.word	0x48000c00

080019a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b0ac      	sub	sp, #176	; 0xb0
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2288      	movs	r2, #136	; 0x88
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f00f f886 	bl	8010ada <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d6:	d17c      	bne.n	8001ad2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80019de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019e6:	2301      	movs	r3, #1
 80019e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80019ee:	2318      	movs	r3, #24
 80019f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019f2:	2307      	movs	r3, #7
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019f6:	2302      	movs	r3, #2
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019fa:	2302      	movs	r3, #2
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80019fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a02:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f005 ffb7 	bl	800797c <HAL_RCCEx_PeriphCLKConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001a14:	f7ff fcc0 	bl	8001398 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	4b30      	ldr	r3, [pc, #192]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1c:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4e:	f002 fa59 	bl	8003f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001a52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a6c:	230a      	movs	r3, #10
 8001a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a76:	4619      	mov	r1, r3
 8001a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7c:	f002 fa42 	bl	8003f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001a86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d114      	bne.n	8001ace <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001abc:	f005 f860 	bl	8006b80 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	4a05      	ldr	r2, [pc, #20]	; (8001adc <HAL_PCD_MspInit+0x134>)
 8001ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001acc:	e001      	b.n	8001ad2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001ace:	f005 f857 	bl	8006b80 <HAL_PWREx_EnableVddUSB>
}
 8001ad2:	bf00      	nop
 8001ad4:	37b0      	adds	r7, #176	; 0xb0
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08e      	sub	sp, #56	; 0x38
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001aee:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <HAL_InitTick+0xe0>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	4a33      	ldr	r2, [pc, #204]	; (8001bc0 <HAL_InitTick+0xe0>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6593      	str	r3, [r2, #88]	; 0x58
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_InitTick+0xe0>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b06:	f107 0210 	add.w	r2, r7, #16
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f005 fea1 	bl	8007858 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d103      	bne.n	8001b28 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b20:	f005 fe6e 	bl	8007800 <HAL_RCC_GetPCLK1Freq>
 8001b24:	6378      	str	r0, [r7, #52]	; 0x34
 8001b26:	e004      	b.n	8001b32 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b28:	f005 fe6a 	bl	8007800 <HAL_RCC_GetPCLK1Freq>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b34:	4a23      	ldr	r2, [pc, #140]	; (8001bc4 <HAL_InitTick+0xe4>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_InitTick+0xe8>)
 8001b42:	4a22      	ldr	r2, [pc, #136]	; (8001bcc <HAL_InitTick+0xec>)
 8001b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_InitTick+0xe8>)
 8001b48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b4c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001b4e:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <HAL_InitTick+0xe8>)
 8001b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b52:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_InitTick+0xe8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_InitTick+0xe8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_InitTick+0xe8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001b66:	4818      	ldr	r0, [pc, #96]	; (8001bc8 <HAL_InitTick+0xe8>)
 8001b68:	f007 ff05 	bl	8009976 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001b72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11b      	bne.n	8001bb2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001b7a:	4813      	ldr	r0, [pc, #76]	; (8001bc8 <HAL_InitTick+0xe8>)
 8001b7c:	f007 ff5c 	bl	8009a38 <HAL_TIM_Base_Start_IT>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001b86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d111      	bne.n	8001bb2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b8e:	2032      	movs	r0, #50	; 0x32
 8001b90:	f001 fdb8 	bl	8003704 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b0f      	cmp	r3, #15
 8001b98:	d808      	bhi.n	8001bac <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	2032      	movs	r0, #50	; 0x32
 8001ba0:	f001 fd94 	bl	80036cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_InitTick+0xf0>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e002      	b.n	8001bb2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3738      	adds	r7, #56	; 0x38
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	431bde83 	.word	0x431bde83
 8001bc8:	20000bbc 	.word	0x20000bbc
 8001bcc:	40000c00 	.word	0x40000c00
 8001bd0:	2000000c 	.word	0x2000000c

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <NMI_Handler+0x4>

08001bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <MemManage_Handler+0x4>

08001be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8001c04:	2002      	movs	r0, #2
 8001c06:	f002 fc4b 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <DMA1_Channel4_IRQHandler+0x10>)
 8001c16:	f002 f888 	bl	8003d2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000cac 	.word	0x20000cac

08001c24 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <DMA1_Channel5_IRQHandler+0x10>)
 8001c2a:	f002 f87e 	bl	8003d2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000c64 	.word	0x20000c64

08001c38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001c3c:	2020      	movs	r0, #32
 8001c3e:	f002 fc2f 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001c42:	2040      	movs	r0, #64	; 0x40
 8001c44:	f002 fc2c 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001c48:	2080      	movs	r0, #128	; 0x80
 8001c4a:	f002 fc29 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3DSL_DRDY_EXTI8_Pin);
 8001c4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c52:	f002 fc25 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <I2C2_EV_IRQHandler+0x10>)
 8001c62:	f003 f81b 	bl	8004c9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000c0c 	.word	0x20000c0c

08001c70 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <I2C2_ER_IRQHandler+0x10>)
 8001c76:	f003 f82b 	bl	8004cd0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000c0c 	.word	0x20000c0c

08001c84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001c88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c8c:	f002 fc08 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001c90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c94:	f002 fc04 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001c98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c9c:	f002 fc00 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001ca0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ca4:	f002 fbfc 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001ca8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001cac:	f002 fbf8 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <TIM5_IRQHandler+0x10>)
 8001cba:	f007 ff2d 	bl	8009b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000bbc 	.word	0x20000bbc

08001cc8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <SPI3_IRQHandler+0x10>)
 8001cce:	f007 f91d 	bl	8008f0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000424 	.word	0x20000424

08001cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
	return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_kill>:

int _kill(int pid, int sig)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cf6:	f00e fdaf 	bl	8010858 <__errno>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2216      	movs	r2, #22
 8001cfe:	601a      	str	r2, [r3, #0]
	return -1;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_exit>:

void _exit (int status)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ffe7 	bl	8001cec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d1e:	e7fe      	b.n	8001d1e <_exit+0x12>

08001d20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	e00a      	b.n	8001d48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d32:	f3af 8000 	nop.w
 8001d36:	4601      	mov	r1, r0
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	60ba      	str	r2, [r7, #8]
 8001d3e:	b2ca      	uxtb	r2, r1
 8001d40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dbf0      	blt.n	8001d32 <_read+0x12>
	}

return len;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
	return -1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d82:	605a      	str	r2, [r3, #4]
	return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_isatty>:

int _isatty(int file)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
	return 1;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
	return 0;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <_sbrk+0x5c>)
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_sbrk+0x60>)
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <_sbrk+0x64>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <_sbrk+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d207      	bcs.n	8001e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df4:	f00e fd30 	bl	8010858 <__errno>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <_sbrk+0x64>)
 8001e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20018000 	.word	0x20018000
 8001e24:	00000400 	.word	0x00000400
 8001e28:	20000c08 	.word	0x20000c08
 8001e2c:	20002bc0 	.word	0x20002bc0

08001e30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <SystemInit+0x20>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <SystemInit+0x20>)
 8001e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e58:	f7ff ffea 	bl	8001e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e5c:	480c      	ldr	r0, [pc, #48]	; (8001e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e5e:	490d      	ldr	r1, [pc, #52]	; (8001e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <LoopForever+0xe>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e64:	e002      	b.n	8001e6c <LoopCopyDataInit>

08001e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6a:	3304      	adds	r3, #4

08001e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e70:	d3f9      	bcc.n	8001e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e74:	4c0a      	ldr	r4, [pc, #40]	; (8001ea0 <LoopForever+0x16>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e78:	e001      	b.n	8001e7e <LoopFillZerobss>

08001e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e7c:	3204      	adds	r2, #4

08001e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e80:	d3fb      	bcc.n	8001e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e82:	f00e fde5 	bl	8010a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e86:	f7fe fd67 	bl	8000958 <main>

08001e8a <LoopForever>:

LoopForever:
    b LoopForever
 8001e8a:	e7fe      	b.n	8001e8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e94:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e98:	080127c0 	.word	0x080127c0
  ldr r2, =_sbss
 8001e9c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001ea0:	20002bbc 	.word	0x20002bbc

08001ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC1_2_IRQHandler>
	...

08001ea8 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <BSP_I2C2_Init+0x70>)
 8001eb4:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <BSP_I2C2_Init+0x74>)
 8001eb6:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <BSP_I2C2_Init+0x78>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	4918      	ldr	r1, [pc, #96]	; (8001f20 <BSP_I2C2_Init+0x78>)
 8001ec0:	600a      	str	r2, [r1, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d122      	bne.n	8001f0c <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001ec6:	4814      	ldr	r0, [pc, #80]	; (8001f18 <BSP_I2C2_Init+0x70>)
 8001ec8:	f002 ffc1 	bl	8004e4e <HAL_I2C_GetState>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d11c      	bne.n	8001f0c <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001ed2:	4811      	ldr	r0, [pc, #68]	; (8001f18 <BSP_I2C2_Init+0x70>)
 8001ed4:	f000 f8fe 	bl	80020d4 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d116      	bne.n	8001f0c <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8001ede:	480e      	ldr	r0, [pc, #56]	; (8001f18 <BSP_I2C2_Init+0x70>)
 8001ee0:	f000 f8b4 	bl	800204c <MX_I2C2_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001eea:	f06f 0307 	mvn.w	r3, #7
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	e00c      	b.n	8001f0c <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4808      	ldr	r0, [pc, #32]	; (8001f18 <BSP_I2C2_Init+0x70>)
 8001ef6:	f004 fbef 	bl	80066d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001f00:	f06f 0307 	mvn.w	r3, #7
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	e001      	b.n	8001f0c <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000c0c 	.word	0x20000c0c
 8001f1c:	40005800 	.word	0x40005800
 8001f20:	20000c60 	.word	0x20000c60

08001f24 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <BSP_I2C2_DeInit+0x48>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d014      	beq.n	8001f60 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <BSP_I2C2_DeInit+0x48>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <BSP_I2C2_DeInit+0x48>)
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <BSP_I2C2_DeInit+0x48>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10b      	bne.n	8001f60 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8001f48:	4809      	ldr	r0, [pc, #36]	; (8001f70 <BSP_I2C2_DeInit+0x4c>)
 8001f4a:	f000 f985 	bl	8002258 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8001f4e:	4808      	ldr	r0, [pc, #32]	; (8001f70 <BSP_I2C2_DeInit+0x4c>)
 8001f50:	f002 fb4d 	bl	80045ee <HAL_I2C_DeInit>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001f5a:	f06f 0307 	mvn.w	r3, #7
 8001f5e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001f60:	687b      	ldr	r3, [r7, #4]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000c60 	.word	0x20000c60
 8001f70:	20000c0c 	.word	0x20000c0c

08001f74 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af04      	add	r7, sp, #16
 8001f7a:	60ba      	str	r2, [r7, #8]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	81fb      	strh	r3, [r7, #14]
 8001f82:	460b      	mov	r3, r1
 8001f84:	81bb      	strh	r3, [r7, #12]
 8001f86:	4613      	mov	r3, r2
 8001f88:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001f8e:	89ba      	ldrh	r2, [r7, #12]
 8001f90:	89f9      	ldrh	r1, [r7, #14]
 8001f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <BSP_I2C2_WriteReg+0x60>)
 8001fa4:	f002 fb66 	bl	8004674 <HAL_I2C_Mem_Write>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00c      	beq.n	8001fc8 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001fae:	4809      	ldr	r0, [pc, #36]	; (8001fd4 <BSP_I2C2_WriteReg+0x60>)
 8001fb0:	f002 ff5b 	bl	8004e6a <HAL_I2C_GetError>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d103      	bne.n	8001fc2 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001fba:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	e002      	b.n	8001fc8 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001fc2:	f06f 0303 	mvn.w	r3, #3
 8001fc6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001fc8:	697b      	ldr	r3, [r7, #20]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000c0c 	.word	0x20000c0c

08001fd8 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af04      	add	r7, sp, #16
 8001fde:	60ba      	str	r2, [r7, #8]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	81fb      	strh	r3, [r7, #14]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	81bb      	strh	r3, [r7, #12]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001ff2:	89ba      	ldrh	r2, [r7, #12]
 8001ff4:	89f9      	ldrh	r1, [r7, #14]
 8001ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffa:	9302      	str	r3, [sp, #8]
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2301      	movs	r3, #1
 8002006:	480c      	ldr	r0, [pc, #48]	; (8002038 <BSP_I2C2_ReadReg+0x60>)
 8002008:	f002 fc48 	bl	800489c <HAL_I2C_Mem_Read>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00c      	beq.n	800202c <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002012:	4809      	ldr	r0, [pc, #36]	; (8002038 <BSP_I2C2_ReadReg+0x60>)
 8002014:	f002 ff29 	bl	8004e6a <HAL_I2C_GetError>
 8002018:	4603      	mov	r3, r0
 800201a:	2b04      	cmp	r3, #4
 800201c:	d103      	bne.n	8002026 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800201e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e002      	b.n	800202c <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002026:	f06f 0303 	mvn.w	r3, #3
 800202a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800202c:	697b      	ldr	r3, [r7, #20]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000c0c 	.word	0x20000c0c

0800203c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002040:	f001 fa38 	bl	80034b4 <HAL_GetTick>
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <MX_I2C2_Init+0x80>)
 800205c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <MX_I2C2_Init+0x84>)
 8002062:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f002 fa1e 	bl	80044d0 <HAL_I2C_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800209e:	2100      	movs	r1, #0
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f004 fb19 	bl	80066d8 <HAL_I2CEx_ConfigAnalogFilter>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80020b0:	2100      	movs	r1, #0
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f004 fb5b 	bl	800676e <HAL_I2CEx_ConfigDigitalFilter>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40005800 	.word	0x40005800
 80020d0:	00702991 	.word	0x00702991

080020d4 <I2C2_MspInit>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0ac      	sub	sp, #176	; 0xb0
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2288      	movs	r2, #136	; 0x88
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00e fcf8 	bl	8010ada <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4618      	mov	r0, r3
 80020f8:	f005 fc40 	bl	800797c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fc:	4b50      	ldr	r3, [pc, #320]	; (8002240 <I2C2_MspInit+0x16c>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	4a4f      	ldr	r2, [pc, #316]	; (8002240 <I2C2_MspInit+0x16c>)
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002108:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <I2C2_MspInit+0x16c>)
 800210a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211c:	2312      	movs	r3, #18
 800211e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800212e:	2304      	movs	r3, #4
 8002130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002134:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002138:	4619      	mov	r1, r3
 800213a:	4842      	ldr	r0, [pc, #264]	; (8002244 <I2C2_MspInit+0x170>)
 800213c:	f001 fee2 	bl	8003f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002148:	2312      	movs	r3, #18
 800214a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 800215a:	2304      	movs	r3, #4
 800215c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002160:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002164:	4619      	mov	r1, r3
 8002166:	4837      	ldr	r0, [pc, #220]	; (8002244 <I2C2_MspInit+0x170>)
 8002168:	f001 fecc 	bl	8003f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800216c:	4b34      	ldr	r3, [pc, #208]	; (8002240 <I2C2_MspInit+0x16c>)
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	4a33      	ldr	r2, [pc, #204]	; (8002240 <I2C2_MspInit+0x16c>)
 8002172:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002176:	6593      	str	r3, [r2, #88]	; 0x58
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <I2C2_MspInit+0x16c>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral DMA init*/

    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8002184:	4b30      	ldr	r3, [pc, #192]	; (8002248 <I2C2_MspInit+0x174>)
 8002186:	4a31      	ldr	r2, [pc, #196]	; (800224c <I2C2_MspInit+0x178>)
 8002188:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 800218a:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <I2C2_MspInit+0x174>)
 800218c:	2203      	movs	r2, #3
 800218e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <I2C2_MspInit+0x174>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002196:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <I2C2_MspInit+0x174>)
 8002198:	2200      	movs	r2, #0
 800219a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <I2C2_MspInit+0x174>)
 800219e:	2280      	movs	r2, #128	; 0x80
 80021a0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a2:	4b29      	ldr	r3, [pc, #164]	; (8002248 <I2C2_MspInit+0x174>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <I2C2_MspInit+0x174>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <I2C2_MspInit+0x174>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <I2C2_MspInit+0x174>)
 80021b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ba:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_i2c2_rx);
 80021bc:	4822      	ldr	r0, [pc, #136]	; (8002248 <I2C2_MspInit+0x174>)
 80021be:	f001 fbc9 	bl	8003954 <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a20      	ldr	r2, [pc, #128]	; (8002248 <I2C2_MspInit+0x174>)
 80021c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80021c8:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <I2C2_MspInit+0x174>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6293      	str	r3, [r2, #40]	; 0x28

    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <I2C2_MspInit+0x17c>)
 80021d0:	4a20      	ldr	r2, [pc, #128]	; (8002254 <I2C2_MspInit+0x180>)
 80021d2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <I2C2_MspInit+0x17c>)
 80021d6:	2203      	movs	r2, #3
 80021d8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <I2C2_MspInit+0x17c>)
 80021dc:	2210      	movs	r2, #16
 80021de:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <I2C2_MspInit+0x17c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <I2C2_MspInit+0x17c>)
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <I2C2_MspInit+0x17c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <I2C2_MspInit+0x17c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <I2C2_MspInit+0x17c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <I2C2_MspInit+0x17c>)
 8002200:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002204:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_i2c2_tx);
 8002206:	4812      	ldr	r0, [pc, #72]	; (8002250 <I2C2_MspInit+0x17c>)
 8002208:	f001 fba4 	bl	8003954 <HAL_DMA_Init>

  __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a10      	ldr	r2, [pc, #64]	; (8002250 <I2C2_MspInit+0x17c>)
 8002210:	639a      	str	r2, [r3, #56]	; 0x38
 8002212:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <I2C2_MspInit+0x17c>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6293      	str	r3, [r2, #40]	; 0x28

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2105      	movs	r1, #5
 800221c:	2021      	movs	r0, #33	; 0x21
 800221e:	f001 fa55 	bl	80036cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002222:	2021      	movs	r0, #33	; 0x21
 8002224:	f001 fa6e 	bl	8003704 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2105      	movs	r1, #5
 800222c:	2022      	movs	r0, #34	; 0x22
 800222e:	f001 fa4d 	bl	80036cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002232:	2022      	movs	r0, #34	; 0x22
 8002234:	f001 fa66 	bl	8003704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002238:	bf00      	nop
 800223a:	37b0      	adds	r7, #176	; 0xb0
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	48000400 	.word	0x48000400
 8002248:	20000c64 	.word	0x20000c64
 800224c:	40020058 	.word	0x40020058
 8002250:	20000cac 	.word	0x20000cac
 8002254:	40020044 	.word	0x40020044

08002258 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <I2C2_MspDeInit+0x50>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <I2C2_MspDeInit+0x50>)
 8002266:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800226a:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 800226c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002270:	480e      	ldr	r0, [pc, #56]	; (80022ac <I2C2_MspDeInit+0x54>)
 8002272:	f001 fff1 	bl	8004258 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800227a:	480c      	ldr	r0, [pc, #48]	; (80022ac <I2C2_MspDeInit+0x54>)
 800227c:	f001 ffec 	bl	8004258 <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	4618      	mov	r0, r3
 8002286:	f001 fc1d 	bl	8003ac4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	4618      	mov	r0, r3
 8002290:	f001 fc18 	bl	8003ac4 <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8002294:	2021      	movs	r0, #33	; 0x21
 8002296:	f001 fa43 	bl	8003720 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800229a:	2022      	movs	r0, #34	; 0x22
 800229c:	f001 fa40 	bl	8003720 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	48000400 	.word	0x48000400

080022b0 <LIS3MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_RegisterBusIO(LIS3MDL_Object_t *pObj, LIS3MDL_IO_t *pIO)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3MDL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d103      	bne.n	80022cc <LIS3MDL_RegisterBusIO+0x1c>
  {
    ret = LIS3MDL_ERROR;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	e04d      	b.n	8002368 <LIS3MDL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	7b1a      	ldrb	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a1b      	ldr	r2, [pc, #108]	; (8002374 <LIS3MDL_RegisterBusIO+0xc4>)
 8002308:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a1a      	ldr	r2, [pc, #104]	; (8002378 <LIS3MDL_RegisterBusIO+0xc8>)
 800230e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d103      	bne.n	8002326 <LIS3MDL_RegisterBusIO+0x76>
    {
      ret = LIS3MDL_ERROR;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e020      	b.n	8002368 <LIS3MDL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS3MDL_OK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4798      	blx	r3
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <LIS3MDL_RegisterBusIO+0x8a>
    {
      ret = LIS3MDL_ERROR;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	e016      	b.n	8002368 <LIS3MDL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS3MDL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d112      	bne.n	8002368 <LIS3MDL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10d      	bne.n	8002368 <LIS3MDL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x07;
 800234c:	2307      	movs	r3, #7
 800234e:	72fb      	strb	r3, [r7, #11]

          if (LIS3MDL_Write_Reg(pObj, LIS3MDL_CTRL_REG3, data) != LIS3MDL_OK)
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	461a      	mov	r2, r3
 8002354:	2122      	movs	r1, #34	; 0x22
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f8fc 	bl	8002554 <LIS3MDL_Write_Reg>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <LIS3MDL_RegisterBusIO+0xb8>
          {
            ret = LIS3MDL_ERROR;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 8002368:	68fb      	ldr	r3, [r7, #12]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	0800258b 	.word	0x0800258b
 8002378:	080025ed 	.word	0x080025ed

0800237c <LIS3MDL_ReadID>:
  * @param  pObj pointer to Component object
  * @param  Id pointer to Component ID
  * @retval Component status
  */
int32_t LIS3MDL_ReadID(LIS3MDL_Object_t *pObj, uint8_t *Id)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  if (lis3mdl_device_id_get(&(pObj->Ctx), Id) != LIS3MDL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	331c      	adds	r3, #28
 800238a:	6839      	ldr	r1, [r7, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fa91 	bl	80028b4 <lis3mdl_device_id_get>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <LIS3MDL_ReadID+0x22>
  {
    return LIS3MDL_ERROR;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
 800239c:	e000      	b.n	80023a0 <LIS3MDL_ReadID+0x24>
  }

  return LIS3MDL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <LIS3MDL_MAG_Enable>:
  * @brief Enable the LIS3MDL accelerometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_Enable(LIS3MDL_Object_t *pObj)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <LIS3MDL_MAG_Enable+0x16>
  {
    return LIS3MDL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e010      	b.n	80023e0 <LIS3MDL_MAG_Enable+0x38>
  }

  /* Operating mode selection - continuous */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_CONTINUOUS_MODE) != LIS3MDL_OK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	331c      	adds	r3, #28
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f9de 	bl	8002786 <lis3mdl_operating_mode_set>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <LIS3MDL_MAG_Enable+0x2e>
  {
    return LIS3MDL_ERROR;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	e004      	b.n	80023e0 <LIS3MDL_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS3MDL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <LIS3MDL_MAG_SetOutputDataRate>:
  * @param pObj the device pObj
  * @param Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_SetOutputDataRate(LIS3MDL_Object_t *pObj, float Odr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	ed87 0a00 	vstr	s0, [r7]
  lis3mdl_om_t new_odr;

  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
            : (Odr <=  1.250f) ? LIS3MDL_LP_1Hz25
 80023f4:	edd7 7a00 	vldr	s15, [r7]
 80023f8:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 80023fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002404:	d801      	bhi.n	800240a <LIS3MDL_MAG_SetOutputDataRate+0x22>
 8002406:	2300      	movs	r3, #0
 8002408:	e042      	b.n	8002490 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 800240a:	edd7 7a00 	vldr	s15, [r7]
 800240e:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8002412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	d801      	bhi.n	8002420 <LIS3MDL_MAG_SetOutputDataRate+0x38>
 800241c:	2302      	movs	r3, #2
 800241e:	e037      	b.n	8002490 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8002420:	edd7 7a00 	vldr	s15, [r7]
 8002424:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	d801      	bhi.n	8002436 <LIS3MDL_MAG_SetOutputDataRate+0x4e>
 8002432:	2304      	movs	r3, #4
 8002434:	e02c      	b.n	8002490 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8002436:	edd7 7a00 	vldr	s15, [r7]
 800243a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800243e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002446:	d801      	bhi.n	800244c <LIS3MDL_MAG_SetOutputDataRate+0x64>
 8002448:	2306      	movs	r3, #6
 800244a:	e021      	b.n	8002490 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 800244c:	edd7 7a00 	vldr	s15, [r7]
 8002450:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245c:	d801      	bhi.n	8002462 <LIS3MDL_MAG_SetOutputDataRate+0x7a>
 800245e:	2308      	movs	r3, #8
 8002460:	e016      	b.n	8002490 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8002462:	edd7 7a00 	vldr	s15, [r7]
 8002466:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800246a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	d801      	bhi.n	8002478 <LIS3MDL_MAG_SetOutputDataRate+0x90>
 8002474:	230a      	movs	r3, #10
 8002476:	e00b      	b.n	8002490 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8002478:	edd7 7a00 	vldr	s15, [r7]
 800247c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80024b8 <LIS3MDL_MAG_SetOutputDataRate+0xd0>
 8002480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002488:	d801      	bhi.n	800248e <LIS3MDL_MAG_SetOutputDataRate+0xa6>
 800248a:	230c      	movs	r3, #12
 800248c:	e000      	b.n	8002490 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 800248e:	230e      	movs	r3, #14
  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
 8002490:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 10.000f) ? LIS3MDL_LP_10Hz
            : (Odr <= 20.000f) ? LIS3MDL_LP_20Hz
            : (Odr <= 40.000f) ? LIS3MDL_LP_40Hz
            :                      LIS3MDL_LP_80Hz;

  if (lis3mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS3MDL_OK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	331c      	adds	r3, #28
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f907 	bl	80026ae <lis3mdl_data_rate_set>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <LIS3MDL_MAG_SetOutputDataRate+0xc4>
  {
    return LIS3MDL_ERROR;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e000      	b.n	80024ae <LIS3MDL_MAG_SetOutputDataRate+0xc6>
  }

  return LIS3MDL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	42200000 	.word	0x42200000

080024bc <LIS3MDL_MAG_SetFullScale>:
  * @param pObj the device pObj
  * @param FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_SetFullScale(LIS3MDL_Object_t *pObj, int32_t FullScale)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t new_fs;

  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
           : (FullScale <= 8) ? LIS3MDL_8_GAUSS
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	dd0b      	ble.n	80024e4 <LIS3MDL_MAG_SetFullScale+0x28>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	dd06      	ble.n	80024e0 <LIS3MDL_MAG_SetFullScale+0x24>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b0c      	cmp	r3, #12
 80024d6:	dc01      	bgt.n	80024dc <LIS3MDL_MAG_SetFullScale+0x20>
 80024d8:	2302      	movs	r3, #2
 80024da:	e004      	b.n	80024e6 <LIS3MDL_MAG_SetFullScale+0x2a>
 80024dc:	2303      	movs	r3, #3
 80024de:	e002      	b.n	80024e6 <LIS3MDL_MAG_SetFullScale+0x2a>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <LIS3MDL_MAG_SetFullScale+0x2a>
 80024e4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
 80024e6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 12) ? LIS3MDL_12_GAUSS
           :                       LIS3MDL_16_GAUSS;

  if (lis3mdl_full_scale_set(&(pObj->Ctx), new_fs) != LIS3MDL_OK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	331c      	adds	r3, #28
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f922 	bl	800273a <lis3mdl_full_scale_set>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <LIS3MDL_MAG_SetFullScale+0x46>
  {
    return LIS3MDL_ERROR;
 80024fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002500:	e000      	b.n	8002504 <LIS3MDL_MAG_SetFullScale+0x48>
  }

  return LIS3MDL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <LIS3MDL_MAG_GetAxesRaw>:
  * @param pObj the device pObj
  * @param Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_GetAxesRaw(LIS3MDL_Object_t *pObj, LIS3MDL_AxesRaw_t *Value)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  lis3mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis3mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3MDL_OK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	331c      	adds	r3, #28
 800251a:	f107 0208 	add.w	r2, r7, #8
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f000 f97c 	bl	800281e <lis3mdl_magnetic_raw_get>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <LIS3MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS3MDL_ERROR;
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
 8002530:	e00c      	b.n	800254c <LIS3MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002532:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800253a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002542:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	809a      	strh	r2, [r3, #4]

  return LIS3MDL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <LIS3MDL_Write_Reg>:
  * @param Reg address to be written
  * @param Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_Write_Reg(LIS3MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
 8002560:	4613      	mov	r3, r2
 8002562:	70bb      	strb	r3, [r7, #2]
  if (lis3mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS3MDL_OK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f103 001c 	add.w	r0, r3, #28
 800256a:	1cba      	adds	r2, r7, #2
 800256c:	78f9      	ldrb	r1, [r7, #3]
 800256e:	2301      	movs	r3, #1
 8002570:	f000 f885 	bl	800267e <lis3mdl_write_reg>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <LIS3MDL_Write_Reg+0x2c>
  {
    return LIS3MDL_ERROR;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e000      	b.n	8002582 <LIS3MDL_Write_Reg+0x2e>
  }

  return LIS3MDL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <ReadRegWrap>:
  * @brief  Wrap Read register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800258a:	b590      	push	{r4, r7, lr}
 800258c:	b087      	sub	sp, #28
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	461a      	mov	r2, r3
 8002596:	460b      	mov	r3, r1
 8002598:	72fb      	strb	r3, [r7, #11]
 800259a:	4613      	mov	r3, r2
 800259c:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10e      	bne.n	80025c8 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	695c      	ldr	r4, [r3, #20]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	7b1b      	ldrb	r3, [r3, #12]
 80025b2:	b298      	uxth	r0, r3
 80025b4:	7afb      	ldrb	r3, [r7, #11]
 80025b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	b299      	uxth	r1, r3
 80025be:	893b      	ldrh	r3, [r7, #8]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	47a0      	blx	r4
 80025c4:	4603      	mov	r3, r0
 80025c6:	e00d      	b.n	80025e4 <ReadRegWrap+0x5a>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	695c      	ldr	r4, [r3, #20]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	7b1b      	ldrb	r3, [r3, #12]
 80025d0:	b298      	uxth	r0, r3
 80025d2:	7afb      	ldrb	r3, [r7, #11]
 80025d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	b299      	uxth	r1, r3
 80025dc:	893b      	ldrh	r3, [r7, #8]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	47a0      	blx	r4
 80025e2:	4603      	mov	r3, r0
  }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd90      	pop	{r4, r7, pc}

080025ec <WriteRegWrap>:
  * @brief  Wrap Write register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	461a      	mov	r2, r3
 80025f8:	460b      	mov	r3, r1
 80025fa:	72fb      	strb	r3, [r7, #11]
 80025fc:	4613      	mov	r3, r2
 80025fe:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10e      	bne.n	800262a <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	691c      	ldr	r4, [r3, #16]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	7b1b      	ldrb	r3, [r3, #12]
 8002614:	b298      	uxth	r0, r3
 8002616:	7afb      	ldrb	r3, [r7, #11]
 8002618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800261c:	b2db      	uxtb	r3, r3
 800261e:	b299      	uxth	r1, r3
 8002620:	893b      	ldrh	r3, [r7, #8]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	47a0      	blx	r4
 8002626:	4603      	mov	r3, r0
 8002628:	e00d      	b.n	8002646 <WriteRegWrap+0x5a>
  }
  else   /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	691c      	ldr	r4, [r3, #16]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	7b1b      	ldrb	r3, [r3, #12]
 8002632:	b298      	uxth	r0, r3
 8002634:	7afb      	ldrb	r3, [r7, #11]
 8002636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800263a:	b2db      	uxtb	r3, r3
 800263c:	b299      	uxth	r1, r3
 800263e:	893b      	ldrh	r3, [r7, #8]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	47a0      	blx	r4
 8002644:	4603      	mov	r3, r0
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}

0800264e <lis3mdl_read_reg>:
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800264e:	b590      	push	{r4, r7, lr}
 8002650:	b087      	sub	sp, #28
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	461a      	mov	r2, r3
 800265a:	460b      	mov	r3, r1
 800265c:	72fb      	strb	r3, [r7, #11]
 800265e:	4613      	mov	r3, r2
 8002660:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685c      	ldr	r4, [r3, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6898      	ldr	r0, [r3, #8]
 800266a:	893b      	ldrh	r3, [r7, #8]
 800266c:	7af9      	ldrb	r1, [r7, #11]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	47a0      	blx	r4
 8002672:	6178      	str	r0, [r7, #20]

  return ret;
 8002674:	697b      	ldr	r3, [r7, #20]
}
 8002676:	4618      	mov	r0, r3
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}

0800267e <lis3mdl_write_reg>:
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800267e:	b590      	push	{r4, r7, lr}
 8002680:	b087      	sub	sp, #28
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	461a      	mov	r2, r3
 800268a:	460b      	mov	r3, r1
 800268c:	72fb      	strb	r3, [r7, #11]
 800268e:	4613      	mov	r3, r2
 8002690:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681c      	ldr	r4, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6898      	ldr	r0, [r3, #8]
 800269a:	893b      	ldrh	r3, [r7, #8]
 800269c:	7af9      	ldrb	r1, [r7, #11]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	47a0      	blx	r4
 80026a2:	6178      	str	r0, [r7, #20]

  return ret;
 80026a4:	697b      	ldr	r3, [r7, #20]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd90      	pop	{r4, r7, pc}

080026ae <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80026ba:	f107 0210 	add.w	r2, r7, #16
 80026be:	2301      	movs	r3, #1
 80026c0:	2120      	movs	r1, #32
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ffc3 	bl	800264e <lis3mdl_read_reg>
 80026c8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10f      	bne.n	80026f0 <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	7c3b      	ldrb	r3, [r7, #16]
 80026da:	f362 0346 	bfi	r3, r2, #1, #6
 80026de:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80026e0:	f107 0210 	add.w	r2, r7, #16
 80026e4:	2301      	movs	r3, #1
 80026e6:	2120      	movs	r1, #32
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ffc8 	bl	800267e <lis3mdl_write_reg>
 80026ee:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 80026f6:	f107 020c 	add.w	r2, r7, #12
 80026fa:	2301      	movs	r3, #1
 80026fc:	2123      	movs	r1, #35	; 0x23
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffa5 	bl	800264e <lis3mdl_read_reg>
 8002704:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d111      	bne.n	8002730 <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	b2da      	uxtb	r2, r3
 8002718:	7b3b      	ldrb	r3, [r7, #12]
 800271a:	f362 0383 	bfi	r3, r2, #2, #2
 800271e:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 8002720:	f107 020c 	add.w	r2, r7, #12
 8002724:	2301      	movs	r3, #1
 8002726:	2123      	movs	r1, #35	; 0x23
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ffa8 	bl	800267e <lis3mdl_write_reg>
 800272e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8002730:	697b      	ldr	r3, [r7, #20]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002746:	f107 0208 	add.w	r2, r7, #8
 800274a:	2301      	movs	r3, #1
 800274c:	2121      	movs	r1, #33	; 0x21
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ff7d 	bl	800264e <lis3mdl_read_reg>
 8002754:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10f      	bne.n	800277c <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	b2da      	uxtb	r2, r3
 8002764:	7a3b      	ldrb	r3, [r7, #8]
 8002766:	f362 1346 	bfi	r3, r2, #5, #2
 800276a:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800276c:	f107 0208 	add.w	r2, r7, #8
 8002770:	2301      	movs	r3, #1
 8002772:	2121      	movs	r1, #33	; 0x21
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff82 	bl	800267e <lis3mdl_write_reg>
 800277a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800277c:	68fb      	ldr	r3, [r7, #12]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8002792:	f107 0208 	add.w	r2, r7, #8
 8002796:	2301      	movs	r3, #1
 8002798:	2122      	movs	r1, #34	; 0x22
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ff57 	bl	800264e <lis3mdl_read_reg>
 80027a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10f      	bne.n	80027c8 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	7a3b      	ldrb	r3, [r7, #8]
 80027b2:	f362 0301 	bfi	r3, r2, #0, #2
 80027b6:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 80027b8:	f107 0208 	add.w	r2, r7, #8
 80027bc:	2301      	movs	r3, #1
 80027be:	2122      	movs	r1, #34	; 0x22
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff5c 	bl	800267e <lis3mdl_write_reg>
 80027c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027c8:	68fb      	ldr	r3, [r7, #12]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 80027de:	f107 0208 	add.w	r2, r7, #8
 80027e2:	2301      	movs	r3, #1
 80027e4:	2124      	movs	r1, #36	; 0x24
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ff31 	bl	800264e <lis3mdl_read_reg>
 80027ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10f      	bne.n	8002814 <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	7a3b      	ldrb	r3, [r7, #8]
 80027fe:	f362 1386 	bfi	r3, r2, #6, #1
 8002802:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8002804:	f107 0208 	add.w	r2, r7, #8
 8002808:	2301      	movs	r3, #1
 800280a:	2124      	movs	r1, #36	; 0x24
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff36 	bl	800267e <lis3mdl_write_reg>
 8002812:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002814:	68fb      	ldr	r3, [r7, #12]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 8002828:	f107 020c 	add.w	r2, r7, #12
 800282c:	2306      	movs	r3, #6
 800282e:	2128      	movs	r1, #40	; 0x28
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff0c 	bl	800264e <lis3mdl_read_reg>
 8002836:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002838:	7b7b      	ldrb	r3, [r7, #13]
 800283a:	b21a      	sxth	r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002846:	b29b      	uxth	r3, r3
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	b29a      	uxth	r2, r3
 800284c:	7b3b      	ldrb	r3, [r7, #12]
 800284e:	b29b      	uxth	r3, r3
 8002850:	4413      	add	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	b21a      	sxth	r2, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	3302      	adds	r3, #2
 8002860:	b212      	sxth	r2, r2
 8002862:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	3302      	adds	r3, #2
 8002868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286c:	b29b      	uxth	r3, r3
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	b29a      	uxth	r2, r3
 8002872:	7bbb      	ldrb	r3, [r7, #14]
 8002874:	b29b      	uxth	r3, r3
 8002876:	4413      	add	r3, r2
 8002878:	b29a      	uxth	r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	3302      	adds	r3, #2
 800287e:	b212      	sxth	r2, r2
 8002880:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002882:	7c7a      	ldrb	r2, [r7, #17]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	3304      	adds	r3, #4
 8002888:	b212      	sxth	r2, r2
 800288a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	3304      	adds	r3, #4
 8002890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002894:	b29b      	uxth	r3, r3
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	b29a      	uxth	r2, r3
 800289a:	7c3b      	ldrb	r3, [r7, #16]
 800289c:	b29b      	uxth	r3, r3
 800289e:	4413      	add	r3, r2
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	3304      	adds	r3, #4
 80028a6:	b212      	sxth	r2, r2
 80028a8:	801a      	strh	r2, [r3, #0]

  return ret;
 80028aa:	697b      	ldr	r3, [r7, #20]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 80028be:	2301      	movs	r3, #1
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	210f      	movs	r1, #15
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fec2 	bl	800264e <lis3mdl_read_reg>
 80028ca:	60f8      	str	r0, [r7, #12]

  return ret;
 80028cc:	68fb      	ldr	r3, [r7, #12]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <lis3mdl_reset_set>:
  * @param  val      change the values of soft_rst in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80028e2:	f107 0208 	add.w	r2, r7, #8
 80028e6:	2301      	movs	r3, #1
 80028e8:	2121      	movs	r1, #33	; 0x21
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff feaf 	bl	800264e <lis3mdl_read_reg>
 80028f0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10f      	bne.n	8002918 <lis3mdl_reset_set+0x42>
  {
    ctrl_reg2.soft_rst = val;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	7a3b      	ldrb	r3, [r7, #8]
 8002902:	f362 0382 	bfi	r3, r2, #2, #1
 8002906:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002908:	f107 0208 	add.w	r2, r7, #8
 800290c:	2301      	movs	r3, #1
 800290e:	2121      	movs	r1, #33	; 0x21
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff feb4 	bl	800267e <lis3mdl_write_reg>
 8002916:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002918:	68fb      	ldr	r3, [r7, #12]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d103      	bne.n	8002940 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e04d      	b.n	80029dc <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	7b1a      	ldrb	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <LSM6DSL_RegisterBusIO+0xc4>)
 800297c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1a      	ldr	r2, [pc, #104]	; (80029ec <LSM6DSL_RegisterBusIO+0xc8>)
 8002982:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d103      	bne.n	800299a <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e020      	b.n	80029dc <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4798      	blx	r3
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e016      	b.n	80029dc <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d112      	bne.n	80029dc <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10d      	bne.n	80029dc <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80029c0:	230c      	movs	r3, #12
 80029c2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80029c4:	7afb      	ldrb	r3, [r7, #11]
 80029c6:	461a      	mov	r2, r3
 80029c8:	2112      	movs	r1, #18
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8d7 	bl	8002b7e <LSM6DSL_Write_Reg>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80029dc:	68fb      	ldr	r3, [r7, #12]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	08002cf7 	.word	0x08002cf7
 80029ec:	08002d2d 	.word	0x08002d2d

080029f0 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	331c      	adds	r3, #28
 80029fc:	2101      	movs	r1, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fad4 	bl	8002fac <lsm6dsl_auto_increment_set>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	e054      	b.n	8002aba <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	331c      	adds	r3, #28
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fa6b 	bl	8002ef2 <lsm6dsl_block_data_update_set>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	e048      	b.n	8002aba <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	331c      	adds	r3, #28
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fcc7 	bl	80033c2 <lsm6dsl_fifo_mode_set>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3e:	e03c      	b.n	8002aba <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2204      	movs	r2, #4
 8002a44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	331c      	adds	r3, #28
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f9dd 	bl	8002e0e <lsm6dsl_xl_data_rate_set>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	e02c      	b.n	8002aba <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	331c      	adds	r3, #28
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f9ab 	bl	8002dc2 <lsm6dsl_xl_full_scale_set>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8002a72:	f04f 33ff 	mov.w	r3, #4294967295
 8002a76:	e020      	b.n	8002aba <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	331c      	adds	r3, #28
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fa0d 	bl	8002ea6 <lsm6dsl_gy_data_rate_set>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e010      	b.n	8002aba <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	331c      	adds	r3, #28
 8002a9c:	2106      	movs	r1, #6
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f9db 	bl	8002e5a <lsm6dsl_gy_full_scale_set>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	e004      	b.n	8002aba <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	331c      	adds	r3, #28
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fa33 	bl	8002f3e <lsm6dsl_device_id_get>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	e000      	b.n	8002ae6 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e014      	b.n	8002b2e <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f103 021c 	add.w	r2, r3, #28
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f000 f97b 	bl	8002e0e <lsm6dsl_xl_data_rate_set>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b22:	e004      	b.n	8002b2e <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e014      	b.n	8002b76 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f103 021c 	add.w	r2, r3, #28
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f000 f9a3 	bl	8002ea6 <lsm6dsl_gy_data_rate_set>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6a:	e004      	b.n	8002b76 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	70fb      	strb	r3, [r7, #3]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f103 001c 	add.w	r0, r3, #28
 8002b94:	1cba      	adds	r2, r7, #2
 8002b96:	78f9      	ldrb	r1, [r7, #3]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f000 f8fa 	bl	8002d92 <lsm6dsl_write_reg>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba8:	e000      	b.n	8002bac <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <LSM6DSL_FIFO_Set_Watermark_Level>:
  * @param  pObj the device pObj
  * @param  Watermark FIFO watermark level
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_Set_Watermark_Level(LSM6DSL_Object_t *pObj, uint16_t Watermark)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
  if (lsm6dsl_fifo_watermark_set(&(pObj->Ctx), Watermark) != LSM6DSL_OK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	331c      	adds	r3, #28
 8002bc4:	887a      	ldrh	r2, [r7, #2]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fb78 	bl	80032be <lsm6dsl_fifo_watermark_set>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <LSM6DSL_FIFO_Set_Watermark_Level+0x26>
  {
    return LSM6DSL_ERROR;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd8:	e000      	b.n	8002bdc <LSM6DSL_FIFO_Set_Watermark_Level+0x28>
  }

  return LSM6DSL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <LSM6DSL_FIFO_Set_Mode>:
  * @param  pObj the device pObj
  * @param  Mode FIFO mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_Set_Mode(LSM6DSL_Object_t *pObj, uint8_t Mode)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_fifo_mode_t)Mode)
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	bf8c      	ite	hi
 8002bfa:	2201      	movhi	r2, #1
 8002bfc:	2200      	movls	r2, #0
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	2a00      	cmp	r2, #0
 8002c02:	d10b      	bne.n	8002c1c <LSM6DSL_FIFO_Set_Mode+0x38>
 8002c04:	2201      	movs	r2, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf14      	ite	ne
 8002c12:	2301      	movne	r3, #1
 8002c14:	2300      	moveq	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d103      	bne.n	8002c24 <LSM6DSL_FIFO_Set_Mode+0x40>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
    case LSM6DSL_STREAM_MODE:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c20:	60fb      	str	r3, [r7, #12]
      break;
 8002c22:	e000      	b.n	8002c26 <LSM6DSL_FIFO_Set_Mode+0x42>
      break;
 8002c24:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d101      	bne.n	8002c32 <LSM6DSL_FIFO_Set_Mode+0x4e>
  {
    return ret;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	e00d      	b.n	8002c4e <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), (lsm6dsl_fifo_mode_t)Mode) != LSM6DSL_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	331c      	adds	r3, #28
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fbc1 	bl	80033c2 <lsm6dsl_fifo_mode_set>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <LSM6DSL_FIFO_Set_Mode+0x68>
  {
    return LSM6DSL_ERROR;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4a:	e000      	b.n	8002c4e <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  return ret;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <LSM6DSL_FIFO_ACC_Set_Decimation>:
  * @param  pObj the device pObj
  * @param  Decimation FIFO accelero decimation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_ACC_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_xl_t)Decimation)
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	2b07      	cmp	r3, #7
 8002c6a:	d903      	bls.n	8002c74 <LSM6DSL_FIFO_ACC_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_XL_DEC_16:
    case LSM6DSL_FIFO_XL_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c70:	60fb      	str	r3, [r7, #12]
      break;
 8002c72:	e000      	b.n	8002c76 <LSM6DSL_FIFO_ACC_Set_Decimation+0x20>
      break;
 8002c74:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d101      	bne.n	8002c82 <LSM6DSL_FIFO_ACC_Set_Decimation+0x2c>
  {
    return ret;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	e00d      	b.n	8002c9e <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_xl_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_xl_t)Decimation) != LSM6DSL_OK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	331c      	adds	r3, #28
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fb4d 	bl	800332a <lsm6dsl_fifo_xl_batch_set>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <LSM6DSL_FIFO_ACC_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	e000      	b.n	8002c9e <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  return ret;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <LSM6DSL_FIFO_GYRO_Set_Decimation>:
  * @param  pObj the device pObj
  * @param  Decimation FIFO gyro decimation
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_FIFO_GYRO_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_gyro_t)Decimation)
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	2b07      	cmp	r3, #7
 8002cba:	d903      	bls.n	8002cc4 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_GY_DEC_16:
    case LSM6DSL_FIFO_GY_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	60fb      	str	r3, [r7, #12]
      break;
 8002cc2:	e000      	b.n	8002cc6 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x20>
      break;
 8002cc4:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d101      	bne.n	8002cd2 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x2c>
  {
    return ret;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	e00d      	b.n	8002cee <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_gy_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_gyro_t)Decimation) != LSM6DSL_OK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	331c      	adds	r3, #28
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fb4b 	bl	8003376 <lsm6dsl_fifo_gy_batch_set>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <LSM6DSL_FIFO_GYRO_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cea:	e000      	b.n	8002cee <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  return ret;
 8002cec:	68fb      	ldr	r3, [r7, #12]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cf6:	b590      	push	{r4, r7, lr}
 8002cf8:	b087      	sub	sp, #28
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	461a      	mov	r2, r3
 8002d02:	460b      	mov	r3, r1
 8002d04:	72fb      	strb	r3, [r7, #11]
 8002d06:	4613      	mov	r3, r2
 8002d08:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	695c      	ldr	r4, [r3, #20]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	7b1b      	ldrb	r3, [r3, #12]
 8002d16:	b298      	uxth	r0, r3
 8002d18:	7afb      	ldrb	r3, [r7, #11]
 8002d1a:	b299      	uxth	r1, r3
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	47a0      	blx	r4
 8002d22:	4603      	mov	r3, r0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}

08002d2c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	461a      	mov	r2, r3
 8002d38:	460b      	mov	r3, r1
 8002d3a:	72fb      	strb	r3, [r7, #11]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	691c      	ldr	r4, [r3, #16]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	7b1b      	ldrb	r3, [r3, #12]
 8002d4c:	b298      	uxth	r0, r3
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
 8002d50:	b299      	uxth	r1, r3
 8002d52:	893b      	ldrh	r3, [r7, #8]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	47a0      	blx	r4
 8002d58:	4603      	mov	r3, r0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd90      	pop	{r4, r7, pc}

08002d62 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002d62:	b590      	push	{r4, r7, lr}
 8002d64:	b087      	sub	sp, #28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	460b      	mov	r3, r1
 8002d70:	72fb      	strb	r3, [r7, #11]
 8002d72:	4613      	mov	r3, r2
 8002d74:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685c      	ldr	r4, [r3, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6898      	ldr	r0, [r3, #8]
 8002d7e:	893b      	ldrh	r3, [r7, #8]
 8002d80:	7af9      	ldrb	r1, [r7, #11]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	47a0      	blx	r4
 8002d86:	6178      	str	r0, [r7, #20]

  return ret;
 8002d88:	697b      	ldr	r3, [r7, #20]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd90      	pop	{r4, r7, pc}

08002d92 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002d92:	b590      	push	{r4, r7, lr}
 8002d94:	b087      	sub	sp, #28
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	460b      	mov	r3, r1
 8002da0:	72fb      	strb	r3, [r7, #11]
 8002da2:	4613      	mov	r3, r2
 8002da4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681c      	ldr	r4, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6898      	ldr	r0, [r3, #8]
 8002dae:	893b      	ldrh	r3, [r7, #8]
 8002db0:	7af9      	ldrb	r1, [r7, #11]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	47a0      	blx	r4
 8002db6:	6178      	str	r0, [r7, #20]

  return ret;
 8002db8:	697b      	ldr	r3, [r7, #20]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd90      	pop	{r4, r7, pc}

08002dc2 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002dce:	f107 0208 	add.w	r2, r7, #8
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	2110      	movs	r1, #16
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ffc3 	bl	8002d62 <lsm6dsl_read_reg>
 8002ddc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10f      	bne.n	8002e04 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	7a3b      	ldrb	r3, [r7, #8]
 8002dee:	f362 0383 	bfi	r3, r2, #2, #2
 8002df2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002df4:	f107 0208 	add.w	r2, r7, #8
 8002df8:	2301      	movs	r3, #1
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ffc8 	bl	8002d92 <lsm6dsl_write_reg>
 8002e02:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e04:	68fb      	ldr	r3, [r7, #12]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002e1a:	f107 0208 	add.w	r2, r7, #8
 8002e1e:	2301      	movs	r3, #1
 8002e20:	2110      	movs	r1, #16
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff9d 	bl	8002d62 <lsm6dsl_read_reg>
 8002e28:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10f      	bne.n	8002e50 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	7a3b      	ldrb	r3, [r7, #8]
 8002e3a:	f362 1307 	bfi	r3, r2, #4, #4
 8002e3e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002e40:	f107 0208 	add.w	r2, r7, #8
 8002e44:	2301      	movs	r3, #1
 8002e46:	2110      	movs	r1, #16
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ffa2 	bl	8002d92 <lsm6dsl_write_reg>
 8002e4e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e50:	68fb      	ldr	r3, [r7, #12]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002e66:	f107 0208 	add.w	r2, r7, #8
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	2111      	movs	r1, #17
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ff77 	bl	8002d62 <lsm6dsl_read_reg>
 8002e74:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10f      	bne.n	8002e9c <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	7a3b      	ldrb	r3, [r7, #8]
 8002e86:	f362 0343 	bfi	r3, r2, #1, #3
 8002e8a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002e8c:	f107 0208 	add.w	r2, r7, #8
 8002e90:	2301      	movs	r3, #1
 8002e92:	2111      	movs	r1, #17
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ff7c 	bl	8002d92 <lsm6dsl_write_reg>
 8002e9a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002eb2:	f107 0208 	add.w	r2, r7, #8
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	2111      	movs	r1, #17
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ff51 	bl	8002d62 <lsm6dsl_read_reg>
 8002ec0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10f      	bne.n	8002ee8 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	7a3b      	ldrb	r3, [r7, #8]
 8002ed2:	f362 1307 	bfi	r3, r2, #4, #4
 8002ed6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002ed8:	f107 0208 	add.w	r2, r7, #8
 8002edc:	2301      	movs	r3, #1
 8002ede:	2111      	movs	r1, #17
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ff56 	bl	8002d92 <lsm6dsl_write_reg>
 8002ee6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002efe:	f107 0208 	add.w	r2, r7, #8
 8002f02:	2301      	movs	r3, #1
 8002f04:	2112      	movs	r1, #18
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff2b 	bl	8002d62 <lsm6dsl_read_reg>
 8002f0c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10f      	bne.n	8002f34 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	7a3b      	ldrb	r3, [r7, #8]
 8002f1e:	f362 1386 	bfi	r3, r2, #6, #1
 8002f22:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002f24:	f107 0208 	add.w	r2, r7, #8
 8002f28:	2301      	movs	r3, #1
 8002f2a:	2112      	movs	r1, #18
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff30 	bl	8002d92 <lsm6dsl_write_reg>
 8002f32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f34:	68fb      	ldr	r3, [r7, #12]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8002f48:	2301      	movs	r3, #1
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	210f      	movs	r1, #15
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ff07 	bl	8002d62 <lsm6dsl_read_reg>
 8002f54:	60f8      	str	r0, [r7, #12]

  return ret;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002f6c:	f107 0208 	add.w	r2, r7, #8
 8002f70:	2301      	movs	r3, #1
 8002f72:	2112      	movs	r1, #18
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff fef4 	bl	8002d62 <lsm6dsl_read_reg>
 8002f7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10f      	bne.n	8002fa2 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	7a3b      	ldrb	r3, [r7, #8]
 8002f8c:	f362 0300 	bfi	r3, r2, #0, #1
 8002f90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002f92:	f107 0208 	add.w	r2, r7, #8
 8002f96:	2301      	movs	r3, #1
 8002f98:	2112      	movs	r1, #18
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fef9 	bl	8002d92 <lsm6dsl_write_reg>
 8002fa0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002fb8:	f107 0208 	add.w	r2, r7, #8
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	2112      	movs	r1, #18
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff fece 	bl	8002d62 <lsm6dsl_read_reg>
 8002fc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	7a3b      	ldrb	r3, [r7, #8]
 8002fd8:	f362 0382 	bfi	r3, r2, #2, #1
 8002fdc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002fde:	f107 0208 	add.w	r2, r7, #8
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	2112      	movs	r1, #18
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff fed3 	bl	8002d92 <lsm6dsl_write_reg>
 8002fec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003002:	f107 021c 	add.w	r2, r7, #28
 8003006:	2301      	movs	r3, #1
 8003008:	210d      	movs	r1, #13
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff fea9 	bl	8002d62 <lsm6dsl_read_reg>
 8003010:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == 0)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	d147      	bne.n	80030a8 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8003018:	783b      	ldrb	r3, [r7, #0]
 800301a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800301e:	b2da      	uxtb	r2, r3
 8003020:	7f3b      	ldrb	r3, [r7, #28]
 8003022:	f362 0300 	bfi	r3, r2, #0, #1
 8003026:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8003028:	783b      	ldrb	r3, [r7, #0]
 800302a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	7f3b      	ldrb	r3, [r7, #28]
 8003032:	f362 0341 	bfi	r3, r2, #1, #1
 8003036:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8003038:	783b      	ldrb	r3, [r7, #0]
 800303a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800303e:	b2da      	uxtb	r2, r3
 8003040:	7f3b      	ldrb	r3, [r7, #28]
 8003042:	f362 0382 	bfi	r3, r2, #2, #1
 8003046:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8003048:	783b      	ldrb	r3, [r7, #0]
 800304a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800304e:	b2da      	uxtb	r2, r3
 8003050:	7f3b      	ldrb	r3, [r7, #28]
 8003052:	f362 03c3 	bfi	r3, r2, #3, #1
 8003056:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8003058:	783b      	ldrb	r3, [r7, #0]
 800305a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800305e:	b2da      	uxtb	r2, r3
 8003060:	7f3b      	ldrb	r3, [r7, #28]
 8003062:	f362 1304 	bfi	r3, r2, #4, #1
 8003066:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8003068:	783b      	ldrb	r3, [r7, #0]
 800306a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	7f3b      	ldrb	r3, [r7, #28]
 8003072:	f362 1345 	bfi	r3, r2, #5, #1
 8003076:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8003078:	783b      	ldrb	r3, [r7, #0]
 800307a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	7f3b      	ldrb	r3, [r7, #28]
 8003082:	f362 1386 	bfi	r3, r2, #6, #1
 8003086:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8003088:	783b      	ldrb	r3, [r7, #0]
 800308a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800308e:	b2da      	uxtb	r2, r3
 8003090:	7f3b      	ldrb	r3, [r7, #28]
 8003092:	f362 13c7 	bfi	r3, r2, #7, #1
 8003096:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003098:	f107 021c 	add.w	r2, r7, #28
 800309c:	2301      	movs	r3, #1
 800309e:	210d      	movs	r1, #13
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fe76 	bl	8002d92 <lsm6dsl_write_reg>
 80030a6:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d107      	bne.n	80030be <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80030ae:	f107 0218 	add.w	r2, r7, #24
 80030b2:	2301      	movs	r3, #1
 80030b4:	215e      	movs	r1, #94	; 0x5e
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fe53 	bl	8002d62 <lsm6dsl_read_reg>
 80030bc:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80030c4:	f107 0214 	add.w	r2, r7, #20
 80030c8:	2301      	movs	r3, #1
 80030ca:	215f      	movs	r1, #95	; 0x5f
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fe48 	bl	8002d62 <lsm6dsl_read_reg>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d147      	bne.n	800316a <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 80030da:	787b      	ldrb	r3, [r7, #1]
 80030dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	7e3b      	ldrb	r3, [r7, #24]
 80030e4:	f362 0300 	bfi	r3, r2, #0, #1
 80030e8:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 80030ea:	787b      	ldrb	r3, [r7, #1]
 80030ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	7e3b      	ldrb	r3, [r7, #24]
 80030f4:	f362 0341 	bfi	r3, r2, #1, #1
 80030f8:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 80030fa:	787b      	ldrb	r3, [r7, #1]
 80030fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003100:	b2da      	uxtb	r2, r3
 8003102:	7e3b      	ldrb	r3, [r7, #24]
 8003104:	f362 0382 	bfi	r3, r2, #2, #1
 8003108:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 800310a:	787b      	ldrb	r3, [r7, #1]
 800310c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003110:	b2da      	uxtb	r2, r3
 8003112:	7e3b      	ldrb	r3, [r7, #24]
 8003114:	f362 03c3 	bfi	r3, r2, #3, #1
 8003118:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 800311a:	787b      	ldrb	r3, [r7, #1]
 800311c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003120:	b2da      	uxtb	r2, r3
 8003122:	7e3b      	ldrb	r3, [r7, #24]
 8003124:	f362 1304 	bfi	r3, r2, #4, #1
 8003128:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 800312a:	787b      	ldrb	r3, [r7, #1]
 800312c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003130:	b2da      	uxtb	r2, r3
 8003132:	7e3b      	ldrb	r3, [r7, #24]
 8003134:	f362 1345 	bfi	r3, r2, #5, #1
 8003138:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 800313a:	787b      	ldrb	r3, [r7, #1]
 800313c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	7e3b      	ldrb	r3, [r7, #24]
 8003144:	f362 1386 	bfi	r3, r2, #6, #1
 8003148:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 800314a:	787b      	ldrb	r3, [r7, #1]
 800314c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003150:	b2da      	uxtb	r2, r3
 8003152:	7e3b      	ldrb	r3, [r7, #24]
 8003154:	f362 13c7 	bfi	r3, r2, #7, #1
 8003158:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800315a:	f107 0218 	add.w	r2, r7, #24
 800315e:	2301      	movs	r3, #1
 8003160:	215e      	movs	r1, #94	; 0x5e
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff fe15 	bl	8002d92 <lsm6dsl_write_reg>
 8003168:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003170:	f107 0210 	add.w	r2, r7, #16
 8003174:	2301      	movs	r3, #1
 8003176:	2113      	movs	r1, #19
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff fdf2 	bl	8002d62 <lsm6dsl_read_reg>
 800317e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10f      	bne.n	80031a6 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8003186:	78bb      	ldrb	r3, [r7, #2]
 8003188:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800318c:	b2da      	uxtb	r2, r3
 800318e:	7c3b      	ldrb	r3, [r7, #16]
 8003190:	f362 1304 	bfi	r3, r2, #4, #1
 8003194:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003196:	f107 0210 	add.w	r2, r7, #16
 800319a:	2301      	movs	r3, #1
 800319c:	2113      	movs	r1, #19
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fdf7 	bl	8002d92 <lsm6dsl_write_reg>
 80031a4:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80031ac:	f107 0220 	add.w	r2, r7, #32
 80031b0:	2301      	movs	r3, #1
 80031b2:	211a      	movs	r1, #26
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff fdd4 	bl	8002d62 <lsm6dsl_read_reg>
 80031ba:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d111      	bne.n	80031e6 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 80031c2:	78bb      	ldrb	r3, [r7, #2]
 80031c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031ce:	f362 13c7 	bfi	r3, r2, #7, #1
 80031d2:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80031d6:	f107 0220 	add.w	r2, r7, #32
 80031da:	2301      	movs	r3, #1
 80031dc:	211a      	movs	r1, #26
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff fdd7 	bl	8002d92 <lsm6dsl_write_reg>
 80031e4:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d158      	bne.n	800329e <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 80031ec:	f107 020c 	add.w	r2, r7, #12
 80031f0:	2301      	movs	r3, #1
 80031f2:	2158      	movs	r1, #88	; 0x58
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fdb4 	bl	8002d62 <lsm6dsl_read_reg>
 80031fa:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 80031fc:	787b      	ldrb	r3, [r7, #1]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d141      	bne.n	800328c <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8003208:	787b      	ldrb	r3, [r7, #1]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8003210:	2b00      	cmp	r3, #0
 8003212:	d13b      	bne.n	800328c <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8003214:	787b      	ldrb	r3, [r7, #1]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800321c:	2b00      	cmp	r3, #0
 800321e:	d135      	bne.n	800328c <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8003220:	787b      	ldrb	r3, [r7, #1]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8003228:	2b00      	cmp	r3, #0
 800322a:	d12f      	bne.n	800328c <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800322c:	787b      	ldrb	r3, [r7, #1]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8003234:	2b00      	cmp	r3, #0
 8003236:	d129      	bne.n	800328c <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800323e:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8003240:	2b00      	cmp	r3, #0
 8003242:	d123      	bne.n	800328c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8003244:	7d3b      	ldrb	r3, [r7, #20]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 800324c:	2b00      	cmp	r3, #0
 800324e:	d11d      	bne.n	800328c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8003250:	7d3b      	ldrb	r3, [r7, #20]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8003258:	2b00      	cmp	r3, #0
 800325a:	d117      	bne.n	800328c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800325c:	7d3b      	ldrb	r3, [r7, #20]
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8003264:	2b00      	cmp	r3, #0
 8003266:	d111      	bne.n	800328c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8003268:	7d3b      	ldrb	r3, [r7, #20]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8003274:	7d3b      	ldrb	r3, [r7, #20]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8003280:	7d3b      	ldrb	r3, [r7, #20]
 8003282:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003286:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 800328c:	7b3b      	ldrb	r3, [r7, #12]
 800328e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003292:	733b      	strb	r3, [r7, #12]
 8003294:	e003      	b.n	800329e <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8003296:	7b3b      	ldrb	r3, [r7, #12]
 8003298:	f36f 13c7 	bfc	r3, #7, #1
 800329c:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 80032a4:	f107 020c 	add.w	r2, r7, #12
 80032a8:	2301      	movs	r3, #1
 80032aa:	2158      	movs	r1, #88	; 0x58
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff fd70 	bl	8002d92 <lsm6dsl_write_reg>
 80032b2:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3728      	adds	r7, #40	; 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	460b      	mov	r3, r1
 80032c8:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2,
 80032ca:	f107 020c 	add.w	r2, r7, #12
 80032ce:	2301      	movs	r3, #1
 80032d0:	2107      	movs	r1, #7
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff fd45 	bl	8002d62 <lsm6dsl_read_reg>
 80032d8:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d11f      	bne.n	8003320 <lsm6dsl_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.fth = (uint8_t)(0x00FFU & val);
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t)((0x0700U & val) >> 8);
 80032e6:	887b      	ldrh	r3, [r7, #2]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	7b3b      	ldrb	r3, [r7, #12]
 80032f4:	f362 0302 	bfi	r3, r2, #0, #3
 80032f8:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1,
 80032fa:	f107 0210 	add.w	r2, r7, #16
 80032fe:	2301      	movs	r3, #1
 8003300:	2106      	movs	r1, #6
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff fd45 	bl	8002d92 <lsm6dsl_write_reg>
 8003308:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl1, 1);

    if (ret == 0)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <lsm6dsl_fifo_watermark_set+0x62>
    {
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8003310:	f107 020c 	add.w	r2, r7, #12
 8003314:	2301      	movs	r3, #1
 8003316:	2107      	movs	r1, #7
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fd3a 	bl	8002d92 <lsm6dsl_write_reg>
 800331e:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_ctrl2, 1);
    }
  }

  return ret;
 8003320:	697b      	ldr	r3, [r7, #20]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8003336:	f107 0208 	add.w	r2, r7, #8
 800333a:	2301      	movs	r3, #1
 800333c:	2108      	movs	r1, #8
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff fd0f 	bl	8002d62 <lsm6dsl_read_reg>
 8003344:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10f      	bne.n	800336c <lsm6dsl_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	b2da      	uxtb	r2, r3
 8003354:	7a3b      	ldrb	r3, [r7, #8]
 8003356:	f362 0302 	bfi	r3, r2, #0, #3
 800335a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 800335c:	f107 0208 	add.w	r2, r7, #8
 8003360:	2301      	movs	r3, #1
 8003362:	2108      	movs	r1, #8
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff fd14 	bl	8002d92 <lsm6dsl_write_reg>
 800336a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 800336c:	68fb      	ldr	r3, [r7, #12]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8003382:	f107 0208 	add.w	r2, r7, #8
 8003386:	2301      	movs	r3, #1
 8003388:	2108      	movs	r1, #8
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fce9 	bl	8002d62 <lsm6dsl_read_reg>
 8003390:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10f      	bne.n	80033b8 <lsm6dsl_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	7a3b      	ldrb	r3, [r7, #8]
 80033a2:	f362 03c5 	bfi	r3, r2, #3, #3
 80033a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 80033a8:	f107 0208 	add.w	r2, r7, #8
 80033ac:	2301      	movs	r3, #1
 80033ae:	2108      	movs	r1, #8
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fcee 	bl	8002d92 <lsm6dsl_write_reg>
 80033b6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 80033b8:	68fb      	ldr	r3, [r7, #12]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80033ce:	f107 0208 	add.w	r2, r7, #8
 80033d2:	2301      	movs	r3, #1
 80033d4:	210a      	movs	r1, #10
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fcc3 	bl	8002d62 <lsm6dsl_read_reg>
 80033dc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10f      	bne.n	8003404 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	7a3b      	ldrb	r3, [r7, #8]
 80033ee:	f362 0302 	bfi	r3, r2, #0, #3
 80033f2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80033f4:	f107 0208 	add.w	r2, r7, #8
 80033f8:	2301      	movs	r3, #1
 80033fa:	210a      	movs	r1, #10
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff fcc8 	bl	8002d92 <lsm6dsl_write_reg>
 8003402:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8003404:	68fb      	ldr	r3, [r7, #12]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <lsm6dsl_fifo_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_odr_fifo_t val)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	460b      	mov	r3, r1
 8003418:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800341a:	f107 0208 	add.w	r2, r7, #8
 800341e:	2301      	movs	r3, #1
 8003420:	210a      	movs	r1, #10
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff fc9d 	bl	8002d62 <lsm6dsl_read_reg>
 8003428:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10f      	bne.n	8003450 <lsm6dsl_fifo_data_rate_set+0x42>
  {
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	b2da      	uxtb	r2, r3
 8003438:	7a3b      	ldrb	r3, [r7, #8]
 800343a:	f362 03c6 	bfi	r3, r2, #3, #4
 800343e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8003440:	f107 0208 	add.w	r2, r7, #8
 8003444:	2301      	movs	r3, #1
 8003446:	210a      	movs	r1, #10
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff fca2 	bl	8002d92 <lsm6dsl_write_reg>
 800344e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8003450:	68fb      	ldr	r3, [r7, #12]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003464:	2003      	movs	r0, #3
 8003466:	f000 f926 	bl	80036b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800346a:	200f      	movs	r0, #15
 800346c:	f7fe fb38 	bl	8001ae0 <HAL_InitTick>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	71fb      	strb	r3, [r7, #7]
 800347a:	e001      	b.n	8003480 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800347c:	f7fe f8b2 	bl	80015e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003480:	79fb      	ldrb	r3, [r7, #7]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_IncTick+0x20>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_IncTick+0x24>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4413      	add	r3, r2
 800349c:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <HAL_IncTick+0x24>)
 800349e:	6013      	str	r3, [r2, #0]
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000010 	.word	0x20000010
 80034b0:	20000cf4 	.word	0x20000cf4

080034b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return uwTick;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_GetTick+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000cf4 	.word	0x20000cf4

080034cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7ff ffee 	bl	80034b4 <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d005      	beq.n	80034f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_Delay+0x44>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034f2:	bf00      	nop
 80034f4:	f7ff ffde 	bl	80034b4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	d8f7      	bhi.n	80034f4 <HAL_Delay+0x28>
  {
  }
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000010 	.word	0x20000010

08003514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003530:	4013      	ands	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800353c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003546:	4a04      	ldr	r2, [pc, #16]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	60d3      	str	r3, [r2, #12]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <__NVIC_GetPriorityGrouping+0x18>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0307 	and.w	r3, r3, #7
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	2b00      	cmp	r3, #0
 8003588:	db0b      	blt.n	80035a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <__NVIC_EnableIRQ+0x38>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	2001      	movs	r0, #1
 800359a:	fa00 f202 	lsl.w	r2, r0, r2
 800359e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000e100 	.word	0xe000e100

080035b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	db12      	blt.n	80035ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	f003 021f 	and.w	r2, r3, #31
 80035cc:	490a      	ldr	r1, [pc, #40]	; (80035f8 <__NVIC_DisableIRQ+0x44>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2001      	movs	r0, #1
 80035d6:	fa00 f202 	lsl.w	r2, r0, r2
 80035da:	3320      	adds	r3, #32
 80035dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80035e0:	f3bf 8f4f 	dsb	sy
}
 80035e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035e6:	f3bf 8f6f 	isb	sy
}
 80035ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000e100 	.word	0xe000e100

080035fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	6039      	str	r1, [r7, #0]
 8003606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	2b00      	cmp	r3, #0
 800360e:	db0a      	blt.n	8003626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	490c      	ldr	r1, [pc, #48]	; (8003648 <__NVIC_SetPriority+0x4c>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	440b      	add	r3, r1
 8003620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003624:	e00a      	b.n	800363c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4908      	ldr	r1, [pc, #32]	; (800364c <__NVIC_SetPriority+0x50>)
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	3b04      	subs	r3, #4
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	440b      	add	r3, r1
 800363a:	761a      	strb	r2, [r3, #24]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000e100 	.word	0xe000e100
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f1c3 0307 	rsb	r3, r3, #7
 800366a:	2b04      	cmp	r3, #4
 800366c:	bf28      	it	cs
 800366e:	2304      	movcs	r3, #4
 8003670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3304      	adds	r3, #4
 8003676:	2b06      	cmp	r3, #6
 8003678:	d902      	bls.n	8003680 <NVIC_EncodePriority+0x30>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3b03      	subs	r3, #3
 800367e:	e000      	b.n	8003682 <NVIC_EncodePriority+0x32>
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003684:	f04f 32ff 	mov.w	r2, #4294967295
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43da      	mvns	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	401a      	ands	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003698:	f04f 31ff 	mov.w	r1, #4294967295
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	43d9      	mvns	r1, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	4313      	orrs	r3, r2
         );
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ff28 	bl	8003514 <__NVIC_SetPriorityGrouping>
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036de:	f7ff ff3d 	bl	800355c <__NVIC_GetPriorityGrouping>
 80036e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	6978      	ldr	r0, [r7, #20]
 80036ea:	f7ff ffb1 	bl	8003650 <NVIC_EncodePriority>
 80036ee:	4602      	mov	r2, r0
 80036f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ff80 	bl	80035fc <__NVIC_SetPriority>
}
 80036fc:	bf00      	nop
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff ff30 	bl	8003578 <__NVIC_EnableIRQ>
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ff40 	bl	80035b4 <__NVIC_DisableIRQ>
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0ac      	b.n	80038a8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f8b2 	bl	80038bc <DFSDM_GetChannelFromInstance>
 8003758:	4603      	mov	r3, r0
 800375a:	4a55      	ldr	r2, [pc, #340]	; (80038b0 <HAL_DFSDM_ChannelInit+0x174>)
 800375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e09f      	b.n	80038a8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7fd ff63 	bl	8001634 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800376e:	4b51      	ldr	r3, [pc, #324]	; (80038b4 <HAL_DFSDM_ChannelInit+0x178>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	4a4f      	ldr	r2, [pc, #316]	; (80038b4 <HAL_DFSDM_ChannelInit+0x178>)
 8003776:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003778:	4b4e      	ldr	r3, [pc, #312]	; (80038b4 <HAL_DFSDM_ChannelInit+0x178>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d125      	bne.n	80037cc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003780:	4b4d      	ldr	r3, [pc, #308]	; (80038b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a4c      	ldr	r2, [pc, #304]	; (80038b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003786:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800378a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800378c:	4b4a      	ldr	r3, [pc, #296]	; (80038b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4948      	ldr	r1, [pc, #288]	; (80038b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800379a:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a46      	ldr	r2, [pc, #280]	; (80038b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80037a0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80037a4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	791b      	ldrb	r3, [r3, #4]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d108      	bne.n	80037c0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80037ae:	4b42      	ldr	r3, [pc, #264]	; (80038b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	493f      	ldr	r1, [pc, #252]	; (80038b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80037c0:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a3c      	ldr	r2, [pc, #240]	; (80038b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80037c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037ca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80037da:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6819      	ldr	r1, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80037ea:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80037f0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 020f 	bic.w	r2, r2, #15
 8003808:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003830:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6899      	ldr	r1, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f002 0207 	and.w	r2, r2, #7
 800385c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003888:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f810 	bl	80038bc <DFSDM_GetChannelFromInstance>
 800389c:	4602      	mov	r2, r0
 800389e:	4904      	ldr	r1, [pc, #16]	; (80038b0 <HAL_DFSDM_ChannelInit+0x174>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000cfc 	.word	0x20000cfc
 80038b4:	20000cf8 	.word	0x20000cf8
 80038b8:	40016000 	.word	0x40016000

080038bc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <DFSDM_GetChannelFromInstance+0x7c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d102      	bne.n	80038d2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e02b      	b.n	800392a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a19      	ldr	r2, [pc, #100]	; (800393c <DFSDM_GetChannelFromInstance+0x80>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d102      	bne.n	80038e0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80038da:	2301      	movs	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e024      	b.n	800392a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a17      	ldr	r2, [pc, #92]	; (8003940 <DFSDM_GetChannelFromInstance+0x84>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d102      	bne.n	80038ee <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80038e8:	2302      	movs	r3, #2
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e01d      	b.n	800392a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <DFSDM_GetChannelFromInstance+0x88>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d102      	bne.n	80038fc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80038f6:	2304      	movs	r3, #4
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e016      	b.n	800392a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <DFSDM_GetChannelFromInstance+0x8c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d102      	bne.n	800390a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003904:	2305      	movs	r3, #5
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e00f      	b.n	800392a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a0f      	ldr	r2, [pc, #60]	; (800394c <DFSDM_GetChannelFromInstance+0x90>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d102      	bne.n	8003918 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003912:	2306      	movs	r3, #6
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	e008      	b.n	800392a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0d      	ldr	r2, [pc, #52]	; (8003950 <DFSDM_GetChannelFromInstance+0x94>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d102      	bne.n	8003926 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003920:	2307      	movs	r3, #7
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e001      	b.n	800392a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003926:	2303      	movs	r3, #3
 8003928:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800392a:	68fb      	ldr	r3, [r7, #12]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40016000 	.word	0x40016000
 800393c:	40016020 	.word	0x40016020
 8003940:	40016040 	.word	0x40016040
 8003944:	40016080 	.word	0x40016080
 8003948:	400160a0 	.word	0x400160a0
 800394c:	400160c0 	.word	0x400160c0
 8003950:	400160e0 	.word	0x400160e0

08003954 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e098      	b.n	8003a98 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	4b4d      	ldr	r3, [pc, #308]	; (8003aa4 <HAL_DMA_Init+0x150>)
 800396e:	429a      	cmp	r2, r3
 8003970:	d80f      	bhi.n	8003992 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	4b4b      	ldr	r3, [pc, #300]	; (8003aa8 <HAL_DMA_Init+0x154>)
 800397a:	4413      	add	r3, r2
 800397c:	4a4b      	ldr	r2, [pc, #300]	; (8003aac <HAL_DMA_Init+0x158>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	009a      	lsls	r2, r3, #2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a48      	ldr	r2, [pc, #288]	; (8003ab0 <HAL_DMA_Init+0x15c>)
 800398e:	641a      	str	r2, [r3, #64]	; 0x40
 8003990:	e00e      	b.n	80039b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	4b46      	ldr	r3, [pc, #280]	; (8003ab4 <HAL_DMA_Init+0x160>)
 800399a:	4413      	add	r3, r2
 800399c:	4a43      	ldr	r2, [pc, #268]	; (8003aac <HAL_DMA_Init+0x158>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	009a      	lsls	r2, r3, #2
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a42      	ldr	r2, [pc, #264]	; (8003ab8 <HAL_DMA_Init+0x164>)
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0a:	d039      	beq.n	8003a80 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	4a27      	ldr	r2, [pc, #156]	; (8003ab0 <HAL_DMA_Init+0x15c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d11a      	bne.n	8003a4c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <HAL_DMA_Init+0x168>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f003 031c 	and.w	r3, r3, #28
 8003a22:	210f      	movs	r1, #15
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	4924      	ldr	r1, [pc, #144]	; (8003abc <HAL_DMA_Init+0x168>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a30:	4b22      	ldr	r3, [pc, #136]	; (8003abc <HAL_DMA_Init+0x168>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f003 031c 	and.w	r3, r3, #28
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	491d      	ldr	r1, [pc, #116]	; (8003abc <HAL_DMA_Init+0x168>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
 8003a4a:	e019      	b.n	8003a80 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <HAL_DMA_Init+0x16c>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f003 031c 	and.w	r3, r3, #28
 8003a58:	210f      	movs	r1, #15
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	4917      	ldr	r1, [pc, #92]	; (8003ac0 <HAL_DMA_Init+0x16c>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <HAL_DMA_Init+0x16c>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6859      	ldr	r1, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f003 031c 	and.w	r3, r3, #28
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	4911      	ldr	r1, [pc, #68]	; (8003ac0 <HAL_DMA_Init+0x16c>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40020407 	.word	0x40020407
 8003aa8:	bffdfff8 	.word	0xbffdfff8
 8003aac:	cccccccd 	.word	0xcccccccd
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	bffdfbf8 	.word	0xbffdfbf8
 8003ab8:	40020400 	.word	0x40020400
 8003abc:	400200a8 	.word	0x400200a8
 8003ac0:	400204a8 	.word	0x400204a8

08003ac4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e072      	b.n	8003bbc <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <HAL_DMA_DeInit+0x104>)
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d80f      	bhi.n	8003b12 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b34      	ldr	r3, [pc, #208]	; (8003bcc <HAL_DMA_DeInit+0x108>)
 8003afa:	4413      	add	r3, r2
 8003afc:	4a34      	ldr	r2, [pc, #208]	; (8003bd0 <HAL_DMA_DeInit+0x10c>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	009a      	lsls	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a31      	ldr	r2, [pc, #196]	; (8003bd4 <HAL_DMA_DeInit+0x110>)
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8003b10:	e00e      	b.n	8003b30 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b2f      	ldr	r3, [pc, #188]	; (8003bd8 <HAL_DMA_DeInit+0x114>)
 8003b1a:	4413      	add	r3, r2
 8003b1c:	4a2c      	ldr	r2, [pc, #176]	; (8003bd0 <HAL_DMA_DeInit+0x10c>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	009a      	lsls	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_DMA_DeInit+0x118>)
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	f003 021c 	and.w	r2, r3, #28
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	2101      	movs	r1, #1
 8003b46:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <HAL_DMA_DeInit+0x110>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d10d      	bne.n	8003b72 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b56:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <HAL_DMA_DeInit+0x11c>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f003 031c 	and.w	r3, r3, #28
 8003b62:	210f      	movs	r1, #15
 8003b64:	fa01 f303 	lsl.w	r3, r1, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	491d      	ldr	r1, [pc, #116]	; (8003be0 <HAL_DMA_DeInit+0x11c>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]
 8003b70:	e00c      	b.n	8003b8c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b72:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <HAL_DMA_DeInit+0x120>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	f003 031c 	and.w	r3, r3, #28
 8003b7e:	210f      	movs	r1, #15
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	4917      	ldr	r1, [pc, #92]	; (8003be4 <HAL_DMA_DeInit+0x120>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40020407 	.word	0x40020407
 8003bcc:	bffdfff8 	.word	0xbffdfff8
 8003bd0:	cccccccd 	.word	0xcccccccd
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	bffdfbf8 	.word	0xbffdfbf8
 8003bdc:	40020400 	.word	0x40020400
 8003be0:	400200a8 	.word	0x400200a8
 8003be4:	400204a8 	.word	0x400204a8

08003be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_DMA_Start_IT+0x20>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e04b      	b.n	8003ca0 <HAL_DMA_Start_IT+0xb8>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d13a      	bne.n	8003c92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f92f 	bl	8003ea4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 020e 	orr.w	r2, r2, #14
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	e00f      	b.n	8003c80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0204 	bic.w	r2, r2, #4
 8003c6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 020a 	orr.w	r2, r2, #10
 8003c7e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e005      	b.n	8003c9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d005      	beq.n	8003ccc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
 8003cca:	e029      	b.n	8003d20 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 020e 	bic.w	r2, r2, #14
 8003cda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	f003 021c 	and.w	r2, r3, #28
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
    }
  }
  return status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f003 031c 	and.w	r3, r3, #28
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d026      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x7a>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d021      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0204 	bic.w	r2, r2, #4
 8003d7c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	f003 021c 	and.w	r2, r3, #28
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d90:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d071      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003da2:	e06c      	b.n	8003e7e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	f003 031c 	and.w	r3, r3, #28
 8003dac:	2202      	movs	r2, #2
 8003dae:	409a      	lsls	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02e      	beq.n	8003e16 <HAL_DMA_IRQHandler+0xec>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d029      	beq.n	8003e16 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 020a 	bic.w	r2, r2, #10
 8003dde:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f003 021c 	and.w	r2, r3, #28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2102      	movs	r1, #2
 8003df6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d038      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e14:	e033      	b.n	8003e7e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	f003 031c 	and.w	r3, r3, #28
 8003e1e:	2208      	movs	r2, #8
 8003e20:	409a      	lsls	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d02a      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x156>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d025      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 020e 	bic.w	r2, r2, #14
 8003e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	f003 021c 	and.w	r2, r3, #28
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f202 	lsl.w	r2, r1, r2
 8003e56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e7e:	bf00      	nop
 8003e80:	bf00      	nop
}
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e96:	b2db      	uxtb	r3, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f003 021c 	and.w	r2, r3, #28
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d108      	bne.n	8003ee8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ee6:	e007      	b.n	8003ef8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	60da      	str	r2, [r3, #12]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f12:	e17f      	b.n	8004214 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	2101      	movs	r1, #1
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	4013      	ands	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8171 	beq.w	800420e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d005      	beq.n	8003f44 <HAL_GPIO_Init+0x40>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d130      	bne.n	8003fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	f003 0201 	and.w	r2, r3, #1
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d118      	bne.n	8003fe4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003fb8:	2201      	movs	r2, #1
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	08db      	lsrs	r3, r3, #3
 8003fce:	f003 0201 	and.w	r2, r3, #1
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d017      	beq.n	8004020 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d123      	bne.n	8004074 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	08da      	lsrs	r2, r3, #3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3208      	adds	r2, #8
 8004034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004038:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	220f      	movs	r2, #15
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4013      	ands	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	08da      	lsrs	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3208      	adds	r2, #8
 800406e:	6939      	ldr	r1, [r7, #16]
 8004070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	2203      	movs	r2, #3
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0203 	and.w	r2, r3, #3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80ac 	beq.w	800420e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b6:	4b5f      	ldr	r3, [pc, #380]	; (8004234 <HAL_GPIO_Init+0x330>)
 80040b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ba:	4a5e      	ldr	r2, [pc, #376]	; (8004234 <HAL_GPIO_Init+0x330>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6613      	str	r3, [r2, #96]	; 0x60
 80040c2:	4b5c      	ldr	r3, [pc, #368]	; (8004234 <HAL_GPIO_Init+0x330>)
 80040c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040ce:	4a5a      	ldr	r2, [pc, #360]	; (8004238 <HAL_GPIO_Init+0x334>)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	089b      	lsrs	r3, r3, #2
 80040d4:	3302      	adds	r3, #2
 80040d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	220f      	movs	r2, #15
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040f8:	d025      	beq.n	8004146 <HAL_GPIO_Init+0x242>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a4f      	ldr	r2, [pc, #316]	; (800423c <HAL_GPIO_Init+0x338>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d01f      	beq.n	8004142 <HAL_GPIO_Init+0x23e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a4e      	ldr	r2, [pc, #312]	; (8004240 <HAL_GPIO_Init+0x33c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d019      	beq.n	800413e <HAL_GPIO_Init+0x23a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a4d      	ldr	r2, [pc, #308]	; (8004244 <HAL_GPIO_Init+0x340>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <HAL_GPIO_Init+0x236>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a4c      	ldr	r2, [pc, #304]	; (8004248 <HAL_GPIO_Init+0x344>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00d      	beq.n	8004136 <HAL_GPIO_Init+0x232>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a4b      	ldr	r2, [pc, #300]	; (800424c <HAL_GPIO_Init+0x348>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <HAL_GPIO_Init+0x22e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a4a      	ldr	r2, [pc, #296]	; (8004250 <HAL_GPIO_Init+0x34c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <HAL_GPIO_Init+0x22a>
 800412a:	2306      	movs	r3, #6
 800412c:	e00c      	b.n	8004148 <HAL_GPIO_Init+0x244>
 800412e:	2307      	movs	r3, #7
 8004130:	e00a      	b.n	8004148 <HAL_GPIO_Init+0x244>
 8004132:	2305      	movs	r3, #5
 8004134:	e008      	b.n	8004148 <HAL_GPIO_Init+0x244>
 8004136:	2304      	movs	r3, #4
 8004138:	e006      	b.n	8004148 <HAL_GPIO_Init+0x244>
 800413a:	2303      	movs	r3, #3
 800413c:	e004      	b.n	8004148 <HAL_GPIO_Init+0x244>
 800413e:	2302      	movs	r3, #2
 8004140:	e002      	b.n	8004148 <HAL_GPIO_Init+0x244>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_GPIO_Init+0x244>
 8004146:	2300      	movs	r3, #0
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	f002 0203 	and.w	r2, r2, #3
 800414e:	0092      	lsls	r2, r2, #2
 8004150:	4093      	lsls	r3, r2
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004158:	4937      	ldr	r1, [pc, #220]	; (8004238 <HAL_GPIO_Init+0x334>)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	3302      	adds	r3, #2
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004166:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <HAL_GPIO_Init+0x350>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	43db      	mvns	r3, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800418a:	4a32      	ldr	r2, [pc, #200]	; (8004254 <HAL_GPIO_Init+0x350>)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004190:	4b30      	ldr	r3, [pc, #192]	; (8004254 <HAL_GPIO_Init+0x350>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041b4:	4a27      	ldr	r2, [pc, #156]	; (8004254 <HAL_GPIO_Init+0x350>)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041ba:	4b26      	ldr	r3, [pc, #152]	; (8004254 <HAL_GPIO_Init+0x350>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	43db      	mvns	r3, r3
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041de:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <HAL_GPIO_Init+0x350>)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041e4:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_GPIO_Init+0x350>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	43db      	mvns	r3, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004208:	4a12      	ldr	r2, [pc, #72]	; (8004254 <HAL_GPIO_Init+0x350>)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3301      	adds	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	f47f ae78 	bne.w	8003f14 <HAL_GPIO_Init+0x10>
  }
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40021000 	.word	0x40021000
 8004238:	40010000 	.word	0x40010000
 800423c:	48000400 	.word	0x48000400
 8004240:	48000800 	.word	0x48000800
 8004244:	48000c00 	.word	0x48000c00
 8004248:	48001000 	.word	0x48001000
 800424c:	48001400 	.word	0x48001400
 8004250:	48001800 	.word	0x48001800
 8004254:	40010400 	.word	0x40010400

08004258 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004266:	e0cd      	b.n	8004404 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004268:	2201      	movs	r2, #1
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80c0 	beq.w	80043fe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800427e:	4a68      	ldr	r2, [pc, #416]	; (8004420 <HAL_GPIO_DeInit+0x1c8>)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	3302      	adds	r3, #2
 8004286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	220f      	movs	r2, #15
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4013      	ands	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042a6:	d025      	beq.n	80042f4 <HAL_GPIO_DeInit+0x9c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a5e      	ldr	r2, [pc, #376]	; (8004424 <HAL_GPIO_DeInit+0x1cc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d01f      	beq.n	80042f0 <HAL_GPIO_DeInit+0x98>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a5d      	ldr	r2, [pc, #372]	; (8004428 <HAL_GPIO_DeInit+0x1d0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d019      	beq.n	80042ec <HAL_GPIO_DeInit+0x94>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a5c      	ldr	r2, [pc, #368]	; (800442c <HAL_GPIO_DeInit+0x1d4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <HAL_GPIO_DeInit+0x90>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a5b      	ldr	r2, [pc, #364]	; (8004430 <HAL_GPIO_DeInit+0x1d8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00d      	beq.n	80042e4 <HAL_GPIO_DeInit+0x8c>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a5a      	ldr	r2, [pc, #360]	; (8004434 <HAL_GPIO_DeInit+0x1dc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <HAL_GPIO_DeInit+0x88>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a59      	ldr	r2, [pc, #356]	; (8004438 <HAL_GPIO_DeInit+0x1e0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_GPIO_DeInit+0x84>
 80042d8:	2306      	movs	r3, #6
 80042da:	e00c      	b.n	80042f6 <HAL_GPIO_DeInit+0x9e>
 80042dc:	2307      	movs	r3, #7
 80042de:	e00a      	b.n	80042f6 <HAL_GPIO_DeInit+0x9e>
 80042e0:	2305      	movs	r3, #5
 80042e2:	e008      	b.n	80042f6 <HAL_GPIO_DeInit+0x9e>
 80042e4:	2304      	movs	r3, #4
 80042e6:	e006      	b.n	80042f6 <HAL_GPIO_DeInit+0x9e>
 80042e8:	2303      	movs	r3, #3
 80042ea:	e004      	b.n	80042f6 <HAL_GPIO_DeInit+0x9e>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e002      	b.n	80042f6 <HAL_GPIO_DeInit+0x9e>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <HAL_GPIO_DeInit+0x9e>
 80042f4:	2300      	movs	r3, #0
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	f002 0203 	and.w	r2, r2, #3
 80042fc:	0092      	lsls	r2, r2, #2
 80042fe:	4093      	lsls	r3, r2
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	429a      	cmp	r2, r3
 8004304:	d132      	bne.n	800436c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004306:	4b4d      	ldr	r3, [pc, #308]	; (800443c <HAL_GPIO_DeInit+0x1e4>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	43db      	mvns	r3, r3
 800430e:	494b      	ldr	r1, [pc, #300]	; (800443c <HAL_GPIO_DeInit+0x1e4>)
 8004310:	4013      	ands	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004314:	4b49      	ldr	r3, [pc, #292]	; (800443c <HAL_GPIO_DeInit+0x1e4>)
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	43db      	mvns	r3, r3
 800431c:	4947      	ldr	r1, [pc, #284]	; (800443c <HAL_GPIO_DeInit+0x1e4>)
 800431e:	4013      	ands	r3, r2
 8004320:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004322:	4b46      	ldr	r3, [pc, #280]	; (800443c <HAL_GPIO_DeInit+0x1e4>)
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	43db      	mvns	r3, r3
 800432a:	4944      	ldr	r1, [pc, #272]	; (800443c <HAL_GPIO_DeInit+0x1e4>)
 800432c:	4013      	ands	r3, r2
 800432e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004330:	4b42      	ldr	r3, [pc, #264]	; (800443c <HAL_GPIO_DeInit+0x1e4>)
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	43db      	mvns	r3, r3
 8004338:	4940      	ldr	r1, [pc, #256]	; (800443c <HAL_GPIO_DeInit+0x1e4>)
 800433a:	4013      	ands	r3, r2
 800433c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	220f      	movs	r2, #15
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800434e:	4a34      	ldr	r2, [pc, #208]	; (8004420 <HAL_GPIO_DeInit+0x1c8>)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	089b      	lsrs	r3, r3, #2
 8004354:	3302      	adds	r3, #2
 8004356:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	43da      	mvns	r2, r3
 800435e:	4830      	ldr	r0, [pc, #192]	; (8004420 <HAL_GPIO_DeInit+0x1c8>)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	400a      	ands	r2, r1
 8004366:	3302      	adds	r3, #2
 8004368:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2103      	movs	r1, #3
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	08da      	lsrs	r2, r3, #3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3208      	adds	r2, #8
 8004388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	220f      	movs	r2, #15
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	08d2      	lsrs	r2, r2, #3
 80043a0:	4019      	ands	r1, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3208      	adds	r2, #8
 80043a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	2103      	movs	r1, #3
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	401a      	ands	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	2101      	movs	r1, #1
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	401a      	ands	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	2103      	movs	r1, #3
 80043de:	fa01 f303 	lsl.w	r3, r1, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	401a      	ands	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ee:	2101      	movs	r1, #1
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	401a      	ands	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	3301      	adds	r3, #1
 8004402:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f af2b 	bne.w	8004268 <HAL_GPIO_DeInit+0x10>
  }
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40010000 	.word	0x40010000
 8004424:	48000400 	.word	0x48000400
 8004428:	48000800 	.word	0x48000800
 800442c:	48000c00 	.word	0x48000c00
 8004430:	48001000 	.word	0x48001000
 8004434:	48001400 	.word	0x48001400
 8004438:	48001800 	.word	0x48001800
 800443c:	40010400 	.word	0x40010400

08004440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	887b      	ldrh	r3, [r7, #2]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	e001      	b.n	8004462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
 800447c:	4613      	mov	r3, r2
 800447e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004480:	787b      	ldrb	r3, [r7, #1]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004486:	887a      	ldrh	r2, [r7, #2]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800448c:	e002      	b.n	8004494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d006      	beq.n	80044c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044b6:	4a05      	ldr	r2, [pc, #20]	; (80044cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc fe1c 	bl	80010fc <HAL_GPIO_EXTI_Callback>
  }

}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40010400 	.word	0x40010400

080044d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e081      	b.n	80045e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f8a8 	bl	800464c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	; 0x24
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004520:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004530:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d107      	bne.n	800454a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004546:	609a      	str	r2, [r3, #8]
 8004548:	e006      	b.n	8004558 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004556:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d104      	bne.n	800456a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004568:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800458c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69d9      	ldr	r1, [r3, #28]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1a      	ldr	r2, [r3, #32]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e021      	b.n	8004644 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2224      	movs	r2, #36	; 0x24
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f821 	bl	8004660 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	461a      	mov	r2, r3
 8004682:	4603      	mov	r3, r0
 8004684:	817b      	strh	r3, [r7, #10]
 8004686:	460b      	mov	r3, r1
 8004688:	813b      	strh	r3, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b20      	cmp	r3, #32
 8004698:	f040 80f9 	bne.w	800488e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_I2C_Mem_Write+0x34>
 80046a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0ed      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_I2C_Mem_Write+0x4e>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0e6      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046ca:	f7fe fef3 	bl	80034b4 <HAL_GetTick>
 80046ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2319      	movs	r3, #25
 80046d6:	2201      	movs	r2, #1
 80046d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f001 fd58 	bl	8006192 <I2C_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0d1      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2221      	movs	r2, #33	; 0x21
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2240      	movs	r2, #64	; 0x40
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a3a      	ldr	r2, [r7, #32]
 8004706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800470c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004714:	88f8      	ldrh	r0, [r7, #6]
 8004716:	893a      	ldrh	r2, [r7, #8]
 8004718:	8979      	ldrh	r1, [r7, #10]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	4603      	mov	r3, r0
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 ffa7 	bl	8005678 <I2C_RequestMemoryWrite>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0a9      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2bff      	cmp	r3, #255	; 0xff
 8004744:	d90e      	bls.n	8004764 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	22ff      	movs	r2, #255	; 0xff
 800474a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	b2da      	uxtb	r2, r3
 8004752:	8979      	ldrh	r1, [r7, #10]
 8004754:	2300      	movs	r3, #0
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f001 fec1 	bl	80064e4 <I2C_TransferConfig>
 8004762:	e00f      	b.n	8004784 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	b2da      	uxtb	r2, r3
 8004774:	8979      	ldrh	r1, [r7, #10]
 8004776:	2300      	movs	r3, #0
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f001 feb0 	bl	80064e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f001 fd42 	bl	8006212 <I2C_WaitOnTXISFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e07b      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	781a      	ldrb	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d034      	beq.n	800483c <HAL_I2C_Mem_Write+0x1c8>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d130      	bne.n	800483c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	2200      	movs	r2, #0
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f001 fcd4 	bl	8006192 <I2C_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e04d      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2bff      	cmp	r3, #255	; 0xff
 80047fc:	d90e      	bls.n	800481c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	22ff      	movs	r2, #255	; 0xff
 8004802:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004808:	b2da      	uxtb	r2, r3
 800480a:	8979      	ldrh	r1, [r7, #10]
 800480c:	2300      	movs	r3, #0
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f001 fe65 	bl	80064e4 <I2C_TransferConfig>
 800481a:	e00f      	b.n	800483c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482a:	b2da      	uxtb	r2, r3
 800482c:	8979      	ldrh	r1, [r7, #10]
 800482e:	2300      	movs	r3, #0
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f001 fe54 	bl	80064e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d19e      	bne.n	8004784 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f001 fd21 	bl	8006292 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e01a      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2220      	movs	r2, #32
 8004860:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <HAL_I2C_Mem_Write+0x224>)
 800486e:	400b      	ands	r3, r1
 8004870:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e000      	b.n	8004890 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
  }
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	fe00e800 	.word	0xfe00e800

0800489c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	4608      	mov	r0, r1
 80048a6:	4611      	mov	r1, r2
 80048a8:	461a      	mov	r2, r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	817b      	strh	r3, [r7, #10]
 80048ae:	460b      	mov	r3, r1
 80048b0:	813b      	strh	r3, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b20      	cmp	r3, #32
 80048c0:	f040 80fd 	bne.w	8004abe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_I2C_Mem_Read+0x34>
 80048ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0f1      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_I2C_Mem_Read+0x4e>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e0ea      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048f2:	f7fe fddf 	bl	80034b4 <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	2319      	movs	r3, #25
 80048fe:	2201      	movs	r2, #1
 8004900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f001 fc44 	bl	8006192 <I2C_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0d5      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2222      	movs	r2, #34	; 0x22
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2240      	movs	r2, #64	; 0x40
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a3a      	ldr	r2, [r7, #32]
 800492e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004934:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800493c:	88f8      	ldrh	r0, [r7, #6]
 800493e:	893a      	ldrh	r2, [r7, #8]
 8004940:	8979      	ldrh	r1, [r7, #10]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4603      	mov	r3, r0
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fee7 	bl	8005720 <I2C_RequestMemoryRead>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0ad      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	2bff      	cmp	r3, #255	; 0xff
 800496c:	d90e      	bls.n	800498c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	22ff      	movs	r2, #255	; 0xff
 8004972:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004978:	b2da      	uxtb	r2, r3
 800497a:	8979      	ldrh	r1, [r7, #10]
 800497c:	4b52      	ldr	r3, [pc, #328]	; (8004ac8 <HAL_I2C_Mem_Read+0x22c>)
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f001 fdad 	bl	80064e4 <I2C_TransferConfig>
 800498a:	e00f      	b.n	80049ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499a:	b2da      	uxtb	r2, r3
 800499c:	8979      	ldrh	r1, [r7, #10]
 800499e:	4b4a      	ldr	r3, [pc, #296]	; (8004ac8 <HAL_I2C_Mem_Read+0x22c>)
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f001 fd9c 	bl	80064e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	2200      	movs	r2, #0
 80049b4:	2104      	movs	r1, #4
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f001 fbeb 	bl	8006192 <I2C_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e07c      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d034      	beq.n	8004a6c <HAL_I2C_Mem_Read+0x1d0>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d130      	bne.n	8004a6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	2200      	movs	r2, #0
 8004a12:	2180      	movs	r1, #128	; 0x80
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f001 fbbc 	bl	8006192 <I2C_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e04d      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2bff      	cmp	r3, #255	; 0xff
 8004a2c:	d90e      	bls.n	8004a4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	22ff      	movs	r2, #255	; 0xff
 8004a32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	8979      	ldrh	r1, [r7, #10]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f001 fd4d 	bl	80064e4 <I2C_TransferConfig>
 8004a4a:	e00f      	b.n	8004a6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	8979      	ldrh	r1, [r7, #10]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f001 fd3c 	bl	80064e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d19a      	bne.n	80049ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f001 fc09 	bl	8006292 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e01a      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <HAL_I2C_Mem_Read+0x230>)
 8004a9e:	400b      	ands	r3, r1
 8004aa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e000      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
  }
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	80002400 	.word	0x80002400
 8004acc:	fe00e800 	.word	0xfe00e800

08004ad0 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	817b      	strh	r3, [r7, #10]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	813b      	strh	r3, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	f040 80c2 	bne.w	8004c7c <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_I2C_Mem_Read_DMA+0x34>
 8004afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0b6      	b.n	8004c7e <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1e:	d101      	bne.n	8004b24 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
 8004b22:	e0ac      	b.n	8004c7e <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_I2C_Mem_Read_DMA+0x62>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e0a5      	b.n	8004c7e <HAL_I2C_Mem_Read_DMA+0x1ae>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2222      	movs	r2, #34	; 0x22
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2240      	movs	r2, #64	; 0x40
 8004b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a3a      	ldr	r2, [r7, #32]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a4a      	ldr	r2, [pc, #296]	; (8004c88 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8004b60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a49      	ldr	r2, [pc, #292]	; (8004c8c <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8004b66:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8004b68:	897a      	ldrh	r2, [r7, #10]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2bff      	cmp	r3, #255	; 0xff
 8004b76:	d903      	bls.n	8004b80 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	22ff      	movs	r2, #255	; 0xff
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
 8004b7e:	e004      	b.n	8004b8a <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d109      	bne.n	8004ba4 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b90:	893b      	ldrh	r3, [r7, #8]
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba0:	651a      	str	r2, [r3, #80]	; 0x50
 8004ba2:	e00b      	b.n	8004bbc <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ba4:	893b      	ldrh	r3, [r7, #8]
 8004ba6:	0a1b      	lsrs	r3, r3, #8
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8004bb2:	893b      	ldrh	r3, [r7, #8]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc8:	4a31      	ldr	r2, [pc, #196]	; (8004c90 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8004bca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	4a30      	ldr	r2, [pc, #192]	; (8004c94 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8004bd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	2200      	movs	r2, #0
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3324      	adds	r3, #36	; 0x24
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004bf6:	f7fe fff7 	bl	8003be8 <HAL_DMA_Start_IT>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d127      	bne.n	8004c54 <HAL_I2C_Mem_Read_DMA+0x184>
 8004c04:	e013      	b.n	8004c2e <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e027      	b.n	8004c7e <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	8979      	ldrh	r1, [r7, #10]
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f001 fc52 	bl	80064e4 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c48:	2101      	movs	r1, #1
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f001 fc7c 	bl	8006548 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	e014      	b.n	8004c7e <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c68:	f043 0210 	orr.w	r2, r3, #16
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8004c7c:	2302      	movs	r3, #2
  }
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	ffff0000 	.word	0xffff0000
 8004c8c:	08005271 	.word	0x08005271
 8004c90:	08006093 	.word	0x08006093
 8004c94:	08006129 	.word	0x08006129
 8004c98:	80002000 	.word	0x80002000

08004c9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
  }
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d010      	beq.n	8004d16 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	09db      	lsrs	r3, r3, #7
 8004cf8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	f043 0201 	orr.w	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d14:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	0a9b      	lsrs	r3, r3, #10
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d010      	beq.n	8004d44 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	09db      	lsrs	r3, r3, #7
 8004d26:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	f043 0208 	orr.w	r2, r3, #8
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d42:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	0a5b      	lsrs	r3, r3, #9
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d010      	beq.n	8004d72 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	09db      	lsrs	r3, r3, #7
 8004d54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d60:	f043 0202 	orr.w	r2, r3, #2
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d70:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 030b 	and.w	r3, r3, #11
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004d82:	68f9      	ldr	r1, [r7, #12]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f001 f869 	bl	8005e5c <I2C_ITError>
  }
}
 8004d8a:	bf00      	nop
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	460b      	mov	r3, r1
 8004dec:	70fb      	strb	r3, [r7, #3]
 8004dee:	4613      	mov	r3, r2
 8004df0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e5c:	b2db      	uxtb	r3, r3
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b086      	sub	sp, #24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <I2C_Slave_ISR_IT+0x24>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e0ec      	b.n	8005080 <I2C_Slave_ISR_IT+0x1fe>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004ec6:	6939      	ldr	r1, [r7, #16]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fe67 	bl	8005b9c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d04d      	beq.n	8004f76 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	091b      	lsrs	r3, r3, #4
 8004ede:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d047      	beq.n	8004f76 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d128      	bne.n	8004f42 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b28      	cmp	r3, #40	; 0x28
 8004efa:	d108      	bne.n	8004f0e <I2C_Slave_ISR_IT+0x8c>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f02:	d104      	bne.n	8004f0e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f04:	6939      	ldr	r1, [r7, #16]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 ff52 	bl	8005db0 <I2C_ITListenCplt>
 8004f0c:	e032      	b.n	8004f74 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b29      	cmp	r3, #41	; 0x29
 8004f18:	d10e      	bne.n	8004f38 <I2C_Slave_ISR_IT+0xb6>
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f20:	d00a      	beq.n	8004f38 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2210      	movs	r2, #16
 8004f28:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f001 f88d 	bl	800604a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fd0a 	bl	800594a <I2C_ITSlaveSeqCplt>
 8004f36:	e01d      	b.n	8004f74 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2210      	movs	r2, #16
 8004f3e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004f40:	e096      	b.n	8005070 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2210      	movs	r2, #16
 8004f48:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	f043 0204 	orr.w	r2, r3, #4
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d004      	beq.n	8004f66 <I2C_Slave_ISR_IT+0xe4>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f62:	f040 8085 	bne.w	8005070 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 ff75 	bl	8005e5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004f72:	e07d      	b.n	8005070 <I2C_Slave_ISR_IT+0x1ee>
 8004f74:	e07c      	b.n	8005070 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	089b      	lsrs	r3, r3, #2
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d030      	beq.n	8004fe4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	089b      	lsrs	r3, r3, #2
 8004f86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d02a      	beq.n	8004fe4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d018      	beq.n	8004fca <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d14f      	bne.n	8005074 <I2C_Slave_ISR_IT+0x1f2>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fda:	d04b      	beq.n	8005074 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fcb4 	bl	800594a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004fe2:	e047      	b.n	8005074 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	08db      	lsrs	r3, r3, #3
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	08db      	lsrs	r3, r3, #3
 8004ff4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004ffc:	6939      	ldr	r1, [r7, #16]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fbe2 	bl	80057c8 <I2C_ITAddrCplt>
 8005004:	e037      	b.n	8005076 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d031      	beq.n	8005076 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800501a:	2b00      	cmp	r3, #0
 800501c:	d02b      	beq.n	8005076 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d018      	beq.n	800505a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	851a      	strh	r2, [r3, #40]	; 0x28
 8005058:	e00d      	b.n	8005076 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005060:	d002      	beq.n	8005068 <I2C_Slave_ISR_IT+0x1e6>
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fc6e 	bl	800594a <I2C_ITSlaveSeqCplt>
 800506e:	e002      	b.n	8005076 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005070:	bf00      	nop
 8005072:	e000      	b.n	8005076 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005074:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <I2C_Master_ISR_DMA+0x1a>
 800509e:	2302      	movs	r3, #2
 80050a0:	e0e1      	b.n	8005266 <I2C_Master_ISR_DMA+0x1de>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	091b      	lsrs	r3, r3, #4
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d017      	beq.n	80050e6 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d011      	beq.n	80050e6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2210      	movs	r2, #16
 80050c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	f043 0204 	orr.w	r2, r3, #4
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80050d6:	2120      	movs	r1, #32
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f001 fa35 	bl	8006548 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 ffb3 	bl	800604a <I2C_Flush_TXDR>
 80050e4:	e0ba      	b.n	800525c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	09db      	lsrs	r3, r3, #7
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d072      	beq.n	80051d8 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	099b      	lsrs	r3, r3, #6
 80050f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d06c      	beq.n	80051d8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800510c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d04e      	beq.n	80051b6 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005124:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	2bff      	cmp	r3, #255	; 0xff
 800512e:	d906      	bls.n	800513e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	22ff      	movs	r2, #255	; 0xff
 8005134:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005136:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e010      	b.n	8005160 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005150:	d003      	beq.n	800515a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	e002      	b.n	8005160 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800515a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800515e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005164:	b2da      	uxtb	r2, r3
 8005166:	8a79      	ldrh	r1, [r7, #18]
 8005168:	2300      	movs	r3, #0
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f001 f9b8 	bl	80064e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b22      	cmp	r3, #34	; 0x22
 8005190:	d108      	bne.n	80051a4 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80051a2:	e05b      	b.n	800525c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80051b4:	e052      	b.n	800525c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051c4:	d003      	beq.n	80051ce <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 fb82 	bl	80058d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80051cc:	e046      	b.n	800525c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80051ce:	2140      	movs	r1, #64	; 0x40
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fe43 	bl	8005e5c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80051d6:	e041      	b.n	800525c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	099b      	lsrs	r3, r3, #6
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d029      	beq.n	8005238 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d023      	beq.n	8005238 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d119      	bne.n	800522e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005208:	d027      	beq.n	800525a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005212:	d108      	bne.n	8005226 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005222:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005224:	e019      	b.n	800525a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fb52 	bl	80058d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800522c:	e015      	b.n	800525a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800522e:	2140      	movs	r1, #64	; 0x40
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fe13 	bl	8005e5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005236:	e010      	b.n	800525a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00b      	beq.n	800525c <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 fbd8 	bl	8005a08 <I2C_ITMasterCplt>
 8005258:	e000      	b.n	800525c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800525a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800527c:	4b8c      	ldr	r3, [pc, #560]	; (80054b0 <I2C_Mem_ISR_DMA+0x240>)
 800527e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <I2C_Mem_ISR_DMA+0x1e>
 800528a:	2302      	movs	r3, #2
 800528c:	e10c      	b.n	80054a8 <I2C_Mem_ISR_DMA+0x238>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d017      	beq.n	80052d2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d011      	beq.n	80052d2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2210      	movs	r2, #16
 80052b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ba:	f043 0204 	orr.w	r2, r3, #4
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80052c2:	2120      	movs	r1, #32
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f001 f93f 	bl	8006548 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 febd 	bl	800604a <I2C_Flush_TXDR>
 80052d0:	e0e5      	b.n	800549e <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00f      	beq.n	80052fe <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f04f 32ff 	mov.w	r2, #4294967295
 80052fa:	651a      	str	r2, [r3, #80]	; 0x50
 80052fc:	e0cf      	b.n	800549e <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	09db      	lsrs	r3, r3, #7
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d05c      	beq.n	80053c4 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	099b      	lsrs	r3, r3, #6
 800530e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005312:	2b00      	cmp	r3, #0
 8005314:	d056      	beq.n	80053c4 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005316:	2110      	movs	r1, #16
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f001 f915 	bl	8006548 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d048      	beq.n	80053ba <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	2bff      	cmp	r3, #255	; 0xff
 8005330:	d910      	bls.n	8005354 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533c:	b299      	uxth	r1, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005342:	b2da      	uxtb	r2, r3
 8005344:	2300      	movs	r3, #0
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f001 f8c9 	bl	80064e4 <I2C_TransferConfig>
 8005352:	e011      	b.n	8005378 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005362:	b299      	uxth	r1, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005368:	b2da      	uxtb	r2, r3
 800536a:	2300      	movs	r3, #0
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f001 f8b6 	bl	80064e4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b22      	cmp	r3, #34	; 0x22
 8005394:	d108      	bne.n	80053a8 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80053a6:	e07a      	b.n	800549e <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80053b8:	e071      	b.n	800549e <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80053ba:	2140      	movs	r1, #64	; 0x40
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 fd4d 	bl	8005e5c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80053c2:	e06c      	b.n	800549e <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	099b      	lsrs	r3, r3, #6
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d056      	beq.n	800547e <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	099b      	lsrs	r3, r3, #6
 80053d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d050      	beq.n	800547e <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b22      	cmp	r3, #34	; 0x22
 80053e6:	d101      	bne.n	80053ec <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 80053e8:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <I2C_Mem_ISR_DMA+0x244>)
 80053ea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2bff      	cmp	r3, #255	; 0xff
 80053f4:	d910      	bls.n	8005418 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	22ff      	movs	r2, #255	; 0xff
 80053fa:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005400:	b299      	uxth	r1, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005406:	b2da      	uxtb	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f001 f867 	bl	80064e4 <I2C_TransferConfig>
 8005416:	e011      	b.n	800543c <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005426:	b299      	uxth	r1, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542c:	b2da      	uxtb	r2, r3
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f001 f854 	bl	80064e4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b22      	cmp	r3, #34	; 0x22
 8005458:	d108      	bne.n	800546c <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005468:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800546a:	e018      	b.n	800549e <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800547a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800547c:	e00f      	b.n	800549e <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fab5 	bl	8005a08 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	80002000 	.word	0x80002000
 80054b4:	80002400 	.word	0x80002400

080054b8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <I2C_Slave_ISR_DMA+0x24>
 80054d8:	2302      	movs	r3, #2
 80054da:	e0c9      	b.n	8005670 <I2C_Slave_ISR_DMA+0x1b8>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d009      	beq.n	8005504 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fb4c 	bl	8005b9c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	091b      	lsrs	r3, r3, #4
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 809a 	beq.w	8005646 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 8093 	beq.w	8005646 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	0b9b      	lsrs	r3, r3, #14
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	0bdb      	lsrs	r3, r3, #15
 8005530:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005534:	2b00      	cmp	r3, #0
 8005536:	d07f      	beq.n	8005638 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00d      	beq.n	800555c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	0bdb      	lsrs	r3, r3, #15
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8005558:	2301      	movs	r3, #1
 800555a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00d      	beq.n	8005580 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	0b9b      	lsrs	r3, r3, #14
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800557c:	2301      	movs	r3, #1
 800557e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d128      	bne.n	80055d8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b28      	cmp	r3, #40	; 0x28
 8005590:	d108      	bne.n	80055a4 <I2C_Slave_ISR_DMA+0xec>
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005598:	d104      	bne.n	80055a4 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 fc07 	bl	8005db0 <I2C_ITListenCplt>
 80055a2:	e048      	b.n	8005636 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b29      	cmp	r3, #41	; 0x29
 80055ae:	d10e      	bne.n	80055ce <I2C_Slave_ISR_DMA+0x116>
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055b6:	d00a      	beq.n	80055ce <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2210      	movs	r2, #16
 80055be:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fd42 	bl	800604a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f9bf 	bl	800594a <I2C_ITSlaveSeqCplt>
 80055cc:	e033      	b.n	8005636 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2210      	movs	r2, #16
 80055d4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80055d6:	e034      	b.n	8005642 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2210      	movs	r2, #16
 80055de:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e4:	f043 0204 	orr.w	r2, r3, #4
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <I2C_Slave_ISR_DMA+0x14a>
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005600:	d11f      	bne.n	8005642 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005602:	7dfb      	ldrb	r3, [r7, #23]
 8005604:	2b21      	cmp	r3, #33	; 0x21
 8005606:	d002      	beq.n	800560e <I2C_Slave_ISR_DMA+0x156>
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	2b29      	cmp	r3, #41	; 0x29
 800560c:	d103      	bne.n	8005616 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2221      	movs	r2, #33	; 0x21
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
 8005614:	e008      	b.n	8005628 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005616:	7dfb      	ldrb	r3, [r7, #23]
 8005618:	2b22      	cmp	r3, #34	; 0x22
 800561a:	d002      	beq.n	8005622 <I2C_Slave_ISR_DMA+0x16a>
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	2b2a      	cmp	r3, #42	; 0x2a
 8005620:	d102      	bne.n	8005628 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2222      	movs	r2, #34	; 0x22
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562c:	4619      	mov	r1, r3
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fc14 	bl	8005e5c <I2C_ITError>
      if (treatdmanack == 1U)
 8005634:	e005      	b.n	8005642 <I2C_Slave_ISR_DMA+0x18a>
 8005636:	e004      	b.n	8005642 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2210      	movs	r2, #16
 800563e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005640:	e011      	b.n	8005666 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8005642:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005644:	e00f      	b.n	8005666 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	08db      	lsrs	r3, r3, #3
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	08db      	lsrs	r3, r3, #3
 8005656:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f8b1 	bl	80057c8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3720      	adds	r7, #32
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	4603      	mov	r3, r0
 8005688:	817b      	strh	r3, [r7, #10]
 800568a:	460b      	mov	r3, r1
 800568c:	813b      	strh	r3, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	b2da      	uxtb	r2, r3
 8005696:	8979      	ldrh	r1, [r7, #10]
 8005698:	4b20      	ldr	r3, [pc, #128]	; (800571c <I2C_RequestMemoryWrite+0xa4>)
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 ff1f 	bl	80064e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	69b9      	ldr	r1, [r7, #24]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fdb1 	bl	8006212 <I2C_WaitOnTXISFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e02c      	b.n	8005714 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056c0:	893b      	ldrh	r3, [r7, #8]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	629a      	str	r2, [r3, #40]	; 0x28
 80056ca:	e015      	b.n	80056f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056cc:	893b      	ldrh	r3, [r7, #8]
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	69b9      	ldr	r1, [r7, #24]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fd97 	bl	8006212 <I2C_WaitOnTXISFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e012      	b.n	8005714 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056ee:	893b      	ldrh	r3, [r7, #8]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2200      	movs	r2, #0
 8005700:	2180      	movs	r1, #128	; 0x80
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fd45 	bl	8006192 <I2C_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	80002000 	.word	0x80002000

08005720 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	461a      	mov	r2, r3
 800572e:	4603      	mov	r3, r0
 8005730:	817b      	strh	r3, [r7, #10]
 8005732:	460b      	mov	r3, r1
 8005734:	813b      	strh	r3, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	8979      	ldrh	r1, [r7, #10]
 8005740:	4b20      	ldr	r3, [pc, #128]	; (80057c4 <I2C_RequestMemoryRead+0xa4>)
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	2300      	movs	r3, #0
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fecc 	bl	80064e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	69b9      	ldr	r1, [r7, #24]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fd5e 	bl	8006212 <I2C_WaitOnTXISFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e02c      	b.n	80057ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d105      	bne.n	8005772 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005766:	893b      	ldrh	r3, [r7, #8]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28
 8005770:	e015      	b.n	800579e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005772:	893b      	ldrh	r3, [r7, #8]
 8005774:	0a1b      	lsrs	r3, r3, #8
 8005776:	b29b      	uxth	r3, r3
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	69b9      	ldr	r1, [r7, #24]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fd44 	bl	8006212 <I2C_WaitOnTXISFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e012      	b.n	80057ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005794:	893b      	ldrh	r3, [r7, #8]
 8005796:	b2da      	uxtb	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2200      	movs	r2, #0
 80057a6:	2140      	movs	r1, #64	; 0x40
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fcf2 	bl	8006192 <I2C_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	80002000 	.word	0x80002000

080057c8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057de:	2b28      	cmp	r3, #40	; 0x28
 80057e0:	d16a      	bne.n	80058b8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	0c1b      	lsrs	r3, r3, #16
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	0c1b      	lsrs	r3, r3, #16
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005800:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800580e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800581c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d138      	bne.n	8005898 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005826:	897b      	ldrh	r3, [r7, #10]
 8005828:	09db      	lsrs	r3, r3, #7
 800582a:	b29a      	uxth	r2, r3
 800582c:	89bb      	ldrh	r3, [r7, #12]
 800582e:	4053      	eors	r3, r2
 8005830:	b29b      	uxth	r3, r3
 8005832:	f003 0306 	and.w	r3, r3, #6
 8005836:	2b00      	cmp	r3, #0
 8005838:	d11c      	bne.n	8005874 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800583a:	897b      	ldrh	r3, [r7, #10]
 800583c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584c:	2b02      	cmp	r3, #2
 800584e:	d13b      	bne.n	80058c8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2208      	movs	r2, #8
 800585c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005866:	89ba      	ldrh	r2, [r7, #12]
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff fab8 	bl	8004de2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005872:	e029      	b.n	80058c8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005874:	893b      	ldrh	r3, [r7, #8]
 8005876:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005878:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fecd 	bl	800661c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800588a:	89ba      	ldrh	r2, [r7, #12]
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff faa6 	bl	8004de2 <HAL_I2C_AddrCallback>
}
 8005896:	e017      	b.n	80058c8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 febd 	bl	800661c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80058aa:	89ba      	ldrh	r2, [r7, #12]
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fa96 	bl	8004de2 <HAL_I2C_AddrCallback>
}
 80058b6:	e007      	b.n	80058c8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2208      	movs	r2, #8
 80058be:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b21      	cmp	r3, #33	; 0x21
 80058ea:	d115      	bne.n	8005918 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2211      	movs	r2, #17
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005900:	2101      	movs	r1, #1
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fe8a 	bl	800661c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff fa3e 	bl	8004d92 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005916:	e014      	b.n	8005942 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2212      	movs	r2, #18
 8005924:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800592c:	2102      	movs	r1, #2
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fe74 	bl	800661c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff fa32 	bl	8004da6 <HAL_I2C_MasterRxCpltCallback>
}
 8005942:	bf00      	nop
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	0b9b      	lsrs	r3, r3, #14
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d008      	beq.n	8005980 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	e00d      	b.n	800599c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	0bdb      	lsrs	r3, r3, #15
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800599a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b29      	cmp	r3, #41	; 0x29
 80059a6:	d112      	bne.n	80059ce <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2228      	movs	r2, #40	; 0x28
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2221      	movs	r2, #33	; 0x21
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80059b6:	2101      	movs	r1, #1
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fe2f 	bl	800661c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7ff f9f7 	bl	8004dba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80059cc:	e017      	b.n	80059fe <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b2a      	cmp	r3, #42	; 0x2a
 80059d8:	d111      	bne.n	80059fe <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2228      	movs	r2, #40	; 0x28
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2222      	movs	r2, #34	; 0x22
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80059e8:	2102      	movs	r1, #2
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fe16 	bl	800661c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff f9e8 	bl	8004dce <HAL_I2C_SlaveRxCpltCallback>
}
 80059fe:	bf00      	nop
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b21      	cmp	r3, #33	; 0x21
 8005a28:	d107      	bne.n	8005a3a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fdf5 	bl	800661c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2211      	movs	r2, #17
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
 8005a38:	e00c      	b.n	8005a54 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b22      	cmp	r3, #34	; 0x22
 8005a44:	d106      	bne.n	8005a54 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a46:	2102      	movs	r1, #2
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fde7 	bl	800661c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2212      	movs	r2, #18
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6859      	ldr	r1, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b4d      	ldr	r3, [pc, #308]	; (8005b94 <I2C_ITMasterCplt+0x18c>)
 8005a60:	400b      	ands	r3, r1
 8005a62:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a4a      	ldr	r2, [pc, #296]	; (8005b98 <I2C_ITMasterCplt+0x190>)
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	091b      	lsrs	r3, r3, #4
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d009      	beq.n	8005a90 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2210      	movs	r2, #16
 8005a82:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a88:	f043 0204 	orr.w	r2, r3, #4
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b60      	cmp	r3, #96	; 0x60
 8005a9a:	d10b      	bne.n	8005ab4 <I2C_ITMasterCplt+0xac>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	089b      	lsrs	r3, r3, #2
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fac8 	bl	800604a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abe:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b60      	cmp	r3, #96	; 0x60
 8005aca:	d002      	beq.n	8005ad2 <I2C_ITMasterCplt+0xca>
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d006      	beq.n	8005ae0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f9bf 	bl	8005e5c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ade:	e054      	b.n	8005b8a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b21      	cmp	r3, #33	; 0x21
 8005aea:	d124      	bne.n	8005b36 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d10b      	bne.n	8005b1e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff f97b 	bl	8004e12 <HAL_I2C_MemTxCpltCallback>
}
 8005b1c:	e035      	b.n	8005b8a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff f92f 	bl	8004d92 <HAL_I2C_MasterTxCpltCallback>
}
 8005b34:	e029      	b.n	8005b8a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b22      	cmp	r3, #34	; 0x22
 8005b40:	d123      	bne.n	8005b8a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	d10b      	bne.n	8005b74 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7fb fae5 	bl	800113c <HAL_I2C_MemRxCpltCallback>
}
 8005b72:	e00a      	b.n	8005b8a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff f90e 	bl	8004da6 <HAL_I2C_MasterRxCpltCallback>
}
 8005b8a:	bf00      	nop
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	fe00e800 	.word	0xfe00e800
 8005b98:	ffff0000 	.word	0xffff0000

08005b9c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	2b21      	cmp	r3, #33	; 0x21
 8005bc6:	d002      	beq.n	8005bce <I2C_ITSlaveCplt+0x32>
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	2b29      	cmp	r3, #41	; 0x29
 8005bcc:	d108      	bne.n	8005be0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005bce:	f248 0101 	movw	r1, #32769	; 0x8001
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fd22 	bl	800661c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2221      	movs	r2, #33	; 0x21
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8005bde:	e00d      	b.n	8005bfc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	2b22      	cmp	r3, #34	; 0x22
 8005be4:	d002      	beq.n	8005bec <I2C_ITSlaveCplt+0x50>
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bea:	d107      	bne.n	8005bfc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005bec:	f248 0102 	movw	r1, #32770	; 0x8002
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fd13 	bl	800661c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2222      	movs	r2, #34	; 0x22
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6859      	ldr	r1, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b64      	ldr	r3, [pc, #400]	; (8005da8 <I2C_ITSlaveCplt+0x20c>)
 8005c18:	400b      	ands	r3, r1
 8005c1a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fa14 	bl	800604a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	0b9b      	lsrs	r3, r3, #14
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d013      	beq.n	8005c56 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c3c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d020      	beq.n	8005c88 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c54:	e018      	b.n	8005c88 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	0bdb      	lsrs	r3, r3, #15
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d012      	beq.n	8005c88 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	089b      	lsrs	r3, r3, #2
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d020      	beq.n	8005cd6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0304 	bic.w	r3, r3, #4
 8005c9a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00c      	beq.n	8005cd6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce4:	f043 0204 	orr.w	r2, r3, #4
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d010      	beq.n	8005d24 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f8a7 	bl	8005e5c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b28      	cmp	r3, #40	; 0x28
 8005d18:	d141      	bne.n	8005d9e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d1a:	6979      	ldr	r1, [r7, #20]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f847 	bl	8005db0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d22:	e03c      	b.n	8005d9e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d2c:	d014      	beq.n	8005d58 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff fe0b 	bl	800594a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a1d      	ldr	r2, [pc, #116]	; (8005dac <I2C_ITSlaveCplt+0x210>)
 8005d38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff f854 	bl	8004dfe <HAL_I2C_ListenCpltCallback>
}
 8005d56:	e022      	b.n	8005d9e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b22      	cmp	r3, #34	; 0x22
 8005d62:	d10e      	bne.n	8005d82 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff f827 	bl	8004dce <HAL_I2C_SlaveRxCpltCallback>
}
 8005d80:	e00d      	b.n	8005d9e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff f80e 	bl	8004dba <HAL_I2C_SlaveTxCpltCallback>
}
 8005d9e:	bf00      	nop
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	fe00e800 	.word	0xfe00e800
 8005dac:	ffff0000 	.word	0xffff0000

08005db0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a26      	ldr	r2, [pc, #152]	; (8005e58 <I2C_ITListenCplt+0xa8>)
 8005dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d022      	beq.n	8005e2e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d012      	beq.n	8005e2e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e26:	f043 0204 	orr.w	r2, r3, #4
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e2e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fbf2 	bl	800661c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2210      	movs	r2, #16
 8005e3e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7fe ffd8 	bl	8004dfe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	ffff0000 	.word	0xffff0000

08005e5c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a5d      	ldr	r2, [pc, #372]	; (8005ff0 <I2C_ITError+0x194>)
 8005e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	2b28      	cmp	r3, #40	; 0x28
 8005e92:	d005      	beq.n	8005ea0 <I2C_ITError+0x44>
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2b29      	cmp	r3, #41	; 0x29
 8005e98:	d002      	beq.n	8005ea0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e9e:	d10b      	bne.n	8005eb8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ea0:	2103      	movs	r1, #3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fbba 	bl	800661c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2228      	movs	r2, #40	; 0x28
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a50      	ldr	r2, [pc, #320]	; (8005ff4 <I2C_ITError+0x198>)
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8005eb6:	e011      	b.n	8005edc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005eb8:	f248 0103 	movw	r1, #32771	; 0x8003
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fbad 	bl	800661c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b60      	cmp	r3, #96	; 0x60
 8005ecc:	d003      	beq.n	8005ed6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d039      	beq.n	8005f5e <I2C_ITError+0x102>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b11      	cmp	r3, #17
 8005eee:	d002      	beq.n	8005ef6 <I2C_ITError+0x9a>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b21      	cmp	r3, #33	; 0x21
 8005ef4:	d133      	bne.n	8005f5e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f04:	d107      	bne.n	8005f16 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f14:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fd ffb4 	bl	8003e88 <HAL_DMA_GetState>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d017      	beq.n	8005f56 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	4a33      	ldr	r2, [pc, #204]	; (8005ff8 <I2C_ITError+0x19c>)
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fd feb4 	bl	8003ca8 <HAL_DMA_Abort_IT>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d04d      	beq.n	8005fe2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f50:	4610      	mov	r0, r2
 8005f52:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f54:	e045      	b.n	8005fe2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f850 	bl	8005ffc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f5c:	e041      	b.n	8005fe2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d039      	beq.n	8005fda <I2C_ITError+0x17e>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b12      	cmp	r3, #18
 8005f6a:	d002      	beq.n	8005f72 <I2C_ITError+0x116>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b22      	cmp	r3, #34	; 0x22
 8005f70:	d133      	bne.n	8005fda <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f80:	d107      	bne.n	8005f92 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f90:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fd ff76 	bl	8003e88 <HAL_DMA_GetState>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d017      	beq.n	8005fd2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	4a14      	ldr	r2, [pc, #80]	; (8005ff8 <I2C_ITError+0x19c>)
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fd fe76 	bl	8003ca8 <HAL_DMA_Abort_IT>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d011      	beq.n	8005fe6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fd0:	e009      	b.n	8005fe6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f812 	bl	8005ffc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fd8:	e005      	b.n	8005fe6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f80e 	bl	8005ffc <I2C_TreatErrorCallback>
  }
}
 8005fe0:	e002      	b.n	8005fe8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fe6:	bf00      	nop
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	ffff0000 	.word	0xffff0000
 8005ff4:	08004e83 	.word	0x08004e83
 8005ff8:	08006157 	.word	0x08006157

08005ffc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b60      	cmp	r3, #96	; 0x60
 800600e:	d10e      	bne.n	800602e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fe ff07 	bl	8004e3a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800602c:	e009      	b.n	8006042 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7fe fef2 	bl	8004e26 <HAL_I2C_ErrorCallback>
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b02      	cmp	r3, #2
 800605e:	d103      	bne.n	8006068 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2200      	movs	r2, #0
 8006066:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b01      	cmp	r3, #1
 8006074:	d007      	beq.n	8006086 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0201 	orr.w	r2, r2, #1
 8006084:	619a      	str	r2, [r3, #24]
  }
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060ae:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80060ba:	2120      	movs	r1, #32
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 fa43 	bl	8006548 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80060c2:	e02d      	b.n	8006120 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80060cc:	441a      	add	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2bff      	cmp	r3, #255	; 0xff
 80060da:	d903      	bls.n	80060e4 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	22ff      	movs	r2, #255	; 0xff
 80060e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80060e2:	e004      	b.n	80060ee <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3324      	adds	r3, #36	; 0x24
 80060f8:	4619      	mov	r1, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006104:	f7fd fd70 	bl	8003be8 <HAL_DMA_Start_IT>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800610e:	2110      	movs	r1, #16
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff fea3 	bl	8005e5c <I2C_ITError>
}
 8006116:	e003      	b.n	8006120 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006118:	2140      	movs	r1, #64	; 0x40
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fa14 	bl	8006548 <I2C_Enable_IRQ>
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006144:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006146:	2110      	movs	r1, #16
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff fe87 	bl	8005e5c <I2C_ITError>
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	2200      	movs	r2, #0
 8006172:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	2200      	movs	r2, #0
 8006182:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff ff39 	bl	8005ffc <I2C_TreatErrorCallback>
}
 800618a:	bf00      	nop
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061a2:	e022      	b.n	80061ea <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d01e      	beq.n	80061ea <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ac:	f7fd f982 	bl	80034b4 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d113      	bne.n	80061ea <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	f043 0220 	orr.w	r2, r3, #32
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e00f      	b.n	800620a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4013      	ands	r3, r2
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	bf0c      	ite	eq
 80061fa:	2301      	moveq	r3, #1
 80061fc:	2300      	movne	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	429a      	cmp	r2, r3
 8006206:	d0cd      	beq.n	80061a4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800621e:	e02c      	b.n	800627a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f871 	bl	800630c <I2C_IsErrorOccurred>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e02a      	b.n	800628a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623a:	d01e      	beq.n	800627a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623c:	f7fd f93a 	bl	80034b4 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	429a      	cmp	r2, r3
 800624a:	d302      	bcc.n	8006252 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d113      	bne.n	800627a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006256:	f043 0220 	orr.w	r2, r3, #32
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e007      	b.n	800628a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b02      	cmp	r3, #2
 8006286:	d1cb      	bne.n	8006220 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800629e:	e028      	b.n	80062f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f831 	bl	800630c <I2C_IsErrorOccurred>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e026      	b.n	8006302 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b4:	f7fd f8fe 	bl	80034b4 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d302      	bcc.n	80062ca <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d113      	bne.n	80062f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e007      	b.n	8006302 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d1cf      	bne.n	80062a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	f003 0310 	and.w	r3, r3, #16
 8006334:	2b00      	cmp	r3, #0
 8006336:	d075      	beq.n	8006424 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2210      	movs	r2, #16
 800633e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006340:	e056      	b.n	80063f0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d052      	beq.n	80063f0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800634a:	f7fd f8b3 	bl	80034b4 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <I2C_IsErrorOccurred+0x54>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d147      	bne.n	80063f0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800636a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006372:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800637e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006382:	d12e      	bne.n	80063e2 <I2C_IsErrorOccurred+0xd6>
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800638a:	d02a      	beq.n	80063e2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800638c:	7cfb      	ldrb	r3, [r7, #19]
 800638e:	2b20      	cmp	r3, #32
 8006390:	d027      	beq.n	80063e2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80063a2:	f7fd f887 	bl	80034b4 <HAL_GetTick>
 80063a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063a8:	e01b      	b.n	80063e2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80063aa:	f7fd f883 	bl	80034b4 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b19      	cmp	r3, #25
 80063b6:	d914      	bls.n	80063e2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063bc:	f043 0220 	orr.w	r2, r3, #32
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d1dc      	bne.n	80063aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d003      	beq.n	8006406 <I2C_IsErrorOccurred+0xfa>
 80063fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006402:	2b00      	cmp	r3, #0
 8006404:	d09d      	beq.n	8006342 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800640a:	2b00      	cmp	r3, #0
 800640c:	d103      	bne.n	8006416 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2220      	movs	r2, #32
 8006414:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f043 0304 	orr.w	r3, r3, #4
 800641c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00b      	beq.n	800644e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	f043 0301 	orr.w	r3, r3, #1
 800643c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006446:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	f043 0308 	orr.w	r3, r3, #8
 800645e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006468:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	f043 0302 	orr.w	r3, r3, #2
 8006480:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800648a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01c      	beq.n	80064d4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7ff fdd5 	bl	800604a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <I2C_IsErrorOccurred+0x1d4>)
 80064ac:	400b      	ands	r3, r1
 80064ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80064d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3728      	adds	r7, #40	; 0x28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	fe00e800 	.word	0xfe00e800

080064e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	460b      	mov	r3, r1
 80064f0:	817b      	strh	r3, [r7, #10]
 80064f2:	4613      	mov	r3, r2
 80064f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064f6:	897b      	ldrh	r3, [r7, #10]
 80064f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064fc:	7a7b      	ldrb	r3, [r7, #9]
 80064fe:	041b      	lsls	r3, r3, #16
 8006500:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006504:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	4313      	orrs	r3, r2
 800650e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006512:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	0d5b      	lsrs	r3, r3, #21
 800651e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006522:	4b08      	ldr	r3, [pc, #32]	; (8006544 <I2C_TransferConfig+0x60>)
 8006524:	430b      	orrs	r3, r1
 8006526:	43db      	mvns	r3, r3
 8006528:	ea02 0103 	and.w	r1, r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	430a      	orrs	r2, r1
 8006534:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	03ff63ff 	.word	0x03ff63ff

08006548 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655c:	4a2d      	ldr	r2, [pc, #180]	; (8006614 <I2C_Enable_IRQ+0xcc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d004      	beq.n	800656c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006566:	4a2c      	ldr	r2, [pc, #176]	; (8006618 <I2C_Enable_IRQ+0xd0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d11d      	bne.n	80065a8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800656c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006570:	2b00      	cmp	r3, #0
 8006572:	da03      	bge.n	800657c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800657a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800657c:	887b      	ldrh	r3, [r7, #2]
 800657e:	2b10      	cmp	r3, #16
 8006580:	d103      	bne.n	800658a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006588:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800658a:	887b      	ldrh	r3, [r7, #2]
 800658c:	2b20      	cmp	r3, #32
 800658e:	d103      	bne.n	8006598 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006596:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006598:	887b      	ldrh	r3, [r7, #2]
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d12c      	bne.n	80065f8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80065a6:	e027      	b.n	80065f8 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	da03      	bge.n	80065b8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80065b6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80065b8:	887b      	ldrh	r3, [r7, #2]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80065c8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80065ca:	887b      	ldrh	r3, [r7, #2]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80065da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80065dc:	887b      	ldrh	r3, [r7, #2]
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d103      	bne.n	80065ea <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80065e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80065ea:	887b      	ldrh	r3, [r7, #2]
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d103      	bne.n	80065f8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f043 0320 	orr.w	r3, r3, #32
 80065f6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6819      	ldr	r1, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	430a      	orrs	r2, r1
 8006606:	601a      	str	r2, [r3, #0]
}
 8006608:	bf00      	nop
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	08005089 	.word	0x08005089
 8006618:	080054b9 	.word	0x080054b9

0800661c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800662c:	887b      	ldrh	r3, [r7, #2]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00f      	beq.n	8006656 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800663c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800664a:	2b28      	cmp	r3, #40	; 0x28
 800664c:	d003      	beq.n	8006656 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006654:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006656:	887b      	ldrh	r3, [r7, #2]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00f      	beq.n	8006680 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006666:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006674:	2b28      	cmp	r3, #40	; 0x28
 8006676:	d003      	beq.n	8006680 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800667e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006680:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006684:	2b00      	cmp	r3, #0
 8006686:	da03      	bge.n	8006690 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800668e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006690:	887b      	ldrh	r3, [r7, #2]
 8006692:	2b10      	cmp	r3, #16
 8006694:	d103      	bne.n	800669e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800669c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800669e:	887b      	ldrh	r3, [r7, #2]
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d103      	bne.n	80066ac <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f043 0320 	orr.w	r3, r3, #32
 80066aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80066ac:	887b      	ldrh	r3, [r7, #2]
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d103      	bne.n	80066ba <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	43da      	mvns	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	400a      	ands	r2, r1
 80066ca:	601a      	str	r2, [r3, #0]
}
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d138      	bne.n	8006760 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e032      	b.n	8006762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2224      	movs	r2, #36	; 0x24
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800672a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6819      	ldr	r1, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	e000      	b.n	8006762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006760:	2302      	movs	r3, #2
  }
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b20      	cmp	r3, #32
 8006782:	d139      	bne.n	80067f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800678e:	2302      	movs	r3, #2
 8006790:	e033      	b.n	80067fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2224      	movs	r2, #36	; 0x24
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0201 	bic.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	e000      	b.n	80067fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067f8:	2302      	movs	r3, #2
  }
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006808:	b08f      	sub	sp, #60	; 0x3c
 800680a:	af0a      	add	r7, sp, #40	; 0x28
 800680c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e116      	b.n	8006a46 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fb f8b8 	bl	80019a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2203      	movs	r2, #3
 800683c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006848:	2b00      	cmp	r3, #0
 800684a:	d102      	bne.n	8006852 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f004 f83f 	bl	800a8da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	603b      	str	r3, [r7, #0]
 8006862:	687e      	ldr	r6, [r7, #4]
 8006864:	466d      	mov	r5, sp
 8006866:	f106 0410 	add.w	r4, r6, #16
 800686a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800686c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800686e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006876:	e885 0003 	stmia.w	r5, {r0, r1}
 800687a:	1d33      	adds	r3, r6, #4
 800687c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800687e:	6838      	ldr	r0, [r7, #0]
 8006880:	f003 ffff 	bl	800a882 <USB_CoreInit>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e0d7      	b.n	8006a46 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2100      	movs	r1, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f004 f82d 	bl	800a8fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068a2:	2300      	movs	r3, #0
 80068a4:	73fb      	strb	r3, [r7, #15]
 80068a6:	e04a      	b.n	800693e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80068a8:	7bfa      	ldrb	r2, [r7, #15]
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	333d      	adds	r3, #61	; 0x3d
 80068b8:	2201      	movs	r2, #1
 80068ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80068bc:	7bfa      	ldrb	r2, [r7, #15]
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4613      	mov	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	333c      	adds	r3, #60	; 0x3c
 80068cc:	7bfa      	ldrb	r2, [r7, #15]
 80068ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068d0:	7bfa      	ldrb	r2, [r7, #15]
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	b298      	uxth	r0, r3
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	3344      	adds	r3, #68	; 0x44
 80068e4:	4602      	mov	r2, r0
 80068e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068e8:	7bfa      	ldrb	r2, [r7, #15]
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	3340      	adds	r3, #64	; 0x40
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068fc:	7bfa      	ldrb	r2, [r7, #15]
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3348      	adds	r3, #72	; 0x48
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006910:	7bfa      	ldrb	r2, [r7, #15]
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	334c      	adds	r3, #76	; 0x4c
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006924:	7bfa      	ldrb	r2, [r7, #15]
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	4613      	mov	r3, r2
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	3354      	adds	r3, #84	; 0x54
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	3301      	adds	r3, #1
 800693c:	73fb      	strb	r3, [r7, #15]
 800693e:	7bfa      	ldrb	r2, [r7, #15]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	429a      	cmp	r2, r3
 8006946:	d3af      	bcc.n	80068a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006948:	2300      	movs	r3, #0
 800694a:	73fb      	strb	r3, [r7, #15]
 800694c:	e044      	b.n	80069d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800694e:	7bfa      	ldrb	r2, [r7, #15]
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006964:	7bfa      	ldrb	r2, [r7, #15]
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	4613      	mov	r3, r2
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	4413      	add	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006976:	7bfa      	ldrb	r2, [r7, #15]
 8006978:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800697a:	7bfa      	ldrb	r2, [r7, #15]
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006990:	7bfa      	ldrb	r2, [r7, #15]
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	4613      	mov	r3, r2
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80069a6:	7bfa      	ldrb	r2, [r7, #15]
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069bc:	7bfa      	ldrb	r2, [r7, #15]
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	4613      	mov	r3, r2
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	440b      	add	r3, r1
 80069ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	3301      	adds	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	7bfa      	ldrb	r2, [r7, #15]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d3b5      	bcc.n	800694e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	687e      	ldr	r6, [r7, #4]
 80069ea:	466d      	mov	r5, sp
 80069ec:	f106 0410 	add.w	r4, r6, #16
 80069f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a00:	1d33      	adds	r3, r6, #4
 8006a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a04:	6838      	ldr	r0, [r7, #0]
 8006a06:	f003 ffc5 	bl	800a994 <USB_DevInit>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e014      	b.n	8006a46 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d102      	bne.n	8006a3a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f80a 	bl	8006a4e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f004 f971 	bl	800ad26 <USB_DevDisconnect>

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a4e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a80:	f043 0303 	orr.w	r3, r3, #3
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a04      	ldr	r2, [pc, #16]	; (8006ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa6:	6013      	str	r3, [r2, #0]
}
 8006aa8:	bf00      	nop
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40007000 	.word	0x40007000

08006ab8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006abc:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40007000 	.word	0x40007000

08006ad4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae2:	d130      	bne.n	8006b46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ae4:	4b23      	ldr	r3, [pc, #140]	; (8006b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af0:	d038      	beq.n	8006b64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006af2:	4b20      	ldr	r3, [pc, #128]	; (8006b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006afa:	4a1e      	ldr	r2, [pc, #120]	; (8006b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b02:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2232      	movs	r2, #50	; 0x32
 8006b08:	fb02 f303 	mul.w	r3, r2, r3
 8006b0c:	4a1b      	ldr	r2, [pc, #108]	; (8006b7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	0c9b      	lsrs	r3, r3, #18
 8006b14:	3301      	adds	r3, #1
 8006b16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b18:	e002      	b.n	8006b20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b20:	4b14      	ldr	r3, [pc, #80]	; (8006b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2c:	d102      	bne.n	8006b34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1f2      	bne.n	8006b1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b34:	4b0f      	ldr	r3, [pc, #60]	; (8006b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b40:	d110      	bne.n	8006b64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e00f      	b.n	8006b66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b52:	d007      	beq.n	8006b64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006b54:	4b07      	ldr	r3, [pc, #28]	; (8006b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b5c:	4a05      	ldr	r2, [pc, #20]	; (8006b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	40007000 	.word	0x40007000
 8006b78:	20000008 	.word	0x20000008
 8006b7c:	431bde83 	.word	0x431bde83

08006b80 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	4a04      	ldr	r2, [pc, #16]	; (8006b9c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b8e:	6053      	str	r3, [r2, #4]
}
 8006b90:	bf00      	nop
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40007000 	.word	0x40007000

08006ba0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006ba8:	f7fc fc84 	bl	80034b4 <HAL_GetTick>
 8006bac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e063      	b.n	8006c80 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10b      	bne.n	8006bdc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fa fd95 	bl	80016fc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006bd2:	f241 3188 	movw	r1, #5000	; 0x1388
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f858 	bl	8006c8c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	021a      	lsls	r2, r3, #8
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2120      	movs	r1, #32
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f850 	bl	8006ca8 <QSPI_WaitFlagStateUntilTimeout>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006c0c:	7afb      	ldrb	r3, [r7, #11]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d131      	bne.n	8006c76 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c1c:	f023 0310 	bic.w	r3, r3, #16
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6852      	ldr	r2, [r2, #4]
 8006c24:	0611      	lsls	r1, r2, #24
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	68d2      	ldr	r2, [r2, #12]
 8006c2a:	4311      	orrs	r1, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	6812      	ldr	r2, [r2, #0]
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <HAL_QSPI_Init+0xe8>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6912      	ldr	r2, [r2, #16]
 8006c42:	0411      	lsls	r1, r2, #16
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6952      	ldr	r2, [r2, #20]
 8006c48:	4311      	orrs	r1, r2
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6992      	ldr	r2, [r2, #24]
 8006c4e:	4311      	orrs	r1, r2
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	ffe0f8fe 	.word	0xffe0f8fe

08006c8c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006cb8:	e01a      	b.n	8006cf0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc0:	d016      	beq.n	8006cf0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc2:	f7fc fbf7 	bl	80034b4 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d302      	bcc.n	8006cd8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10b      	bne.n	8006cf0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce4:	f043 0201 	orr.w	r2, r3, #1
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e00e      	b.n	8006d0e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bf14      	ite	ne
 8006cfe:	2301      	movne	r3, #1
 8006d00:	2300      	moveq	r3, #0
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d1d6      	bne.n	8006cba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e3ca      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d2a:	4b97      	ldr	r3, [pc, #604]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 030c 	and.w	r3, r3, #12
 8006d32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d34:	4b94      	ldr	r3, [pc, #592]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0303 	and.w	r3, r3, #3
 8006d3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0310 	and.w	r3, r3, #16
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80e4 	beq.w	8006f14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d007      	beq.n	8006d62 <HAL_RCC_OscConfig+0x4a>
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	2b0c      	cmp	r3, #12
 8006d56:	f040 808b 	bne.w	8006e70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	f040 8087 	bne.w	8006e70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d62:	4b89      	ldr	r3, [pc, #548]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_RCC_OscConfig+0x62>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e3a2      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1a      	ldr	r2, [r3, #32]
 8006d7e:	4b82      	ldr	r3, [pc, #520]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d004      	beq.n	8006d94 <HAL_RCC_OscConfig+0x7c>
 8006d8a:	4b7f      	ldr	r3, [pc, #508]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d92:	e005      	b.n	8006da0 <HAL_RCC_OscConfig+0x88>
 8006d94:	4b7c      	ldr	r3, [pc, #496]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d9a:	091b      	lsrs	r3, r3, #4
 8006d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d223      	bcs.n	8006dec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fd87 	bl	80078bc <RCC_SetFlashLatencyFromMSIRange>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e383      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006db8:	4b73      	ldr	r3, [pc, #460]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a72      	ldr	r2, [pc, #456]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006dbe:	f043 0308 	orr.w	r3, r3, #8
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	4b70      	ldr	r3, [pc, #448]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	496d      	ldr	r1, [pc, #436]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006dd6:	4b6c      	ldr	r3, [pc, #432]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	4968      	ldr	r1, [pc, #416]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	604b      	str	r3, [r1, #4]
 8006dea:	e025      	b.n	8006e38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006dec:	4b66      	ldr	r3, [pc, #408]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a65      	ldr	r2, [pc, #404]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006df2:	f043 0308 	orr.w	r3, r3, #8
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	4b63      	ldr	r3, [pc, #396]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	4960      	ldr	r1, [pc, #384]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e0a:	4b5f      	ldr	r3, [pc, #380]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	021b      	lsls	r3, r3, #8
 8006e18:	495b      	ldr	r1, [pc, #364]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 fd47 	bl	80078bc <RCC_SetFlashLatencyFromMSIRange>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e343      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e38:	f000 fc4a 	bl	80076d0 <HAL_RCC_GetSysClockFreq>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4b52      	ldr	r3, [pc, #328]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	091b      	lsrs	r3, r3, #4
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	4950      	ldr	r1, [pc, #320]	; (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006e4a:	5ccb      	ldrb	r3, [r1, r3]
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
 8006e54:	4a4e      	ldr	r2, [pc, #312]	; (8006f90 <HAL_RCC_OscConfig+0x278>)
 8006e56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006e58:	4b4e      	ldr	r3, [pc, #312]	; (8006f94 <HAL_RCC_OscConfig+0x27c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fa fe3f 	bl	8001ae0 <HAL_InitTick>
 8006e62:	4603      	mov	r3, r0
 8006e64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d052      	beq.n	8006f12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	e327      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d032      	beq.n	8006ede <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e78:	4b43      	ldr	r3, [pc, #268]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a42      	ldr	r2, [pc, #264]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006e7e:	f043 0301 	orr.w	r3, r3, #1
 8006e82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e84:	f7fc fb16 	bl	80034b4 <HAL_GetTick>
 8006e88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e8c:	f7fc fb12 	bl	80034b4 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e310      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e9e:	4b3a      	ldr	r3, [pc, #232]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006eaa:	4b37      	ldr	r3, [pc, #220]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a36      	ldr	r2, [pc, #216]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006eb0:	f043 0308 	orr.w	r3, r3, #8
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4b34      	ldr	r3, [pc, #208]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	4931      	ldr	r1, [pc, #196]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ec8:	4b2f      	ldr	r3, [pc, #188]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	492c      	ldr	r1, [pc, #176]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	604b      	str	r3, [r1, #4]
 8006edc:	e01a      	b.n	8006f14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006ede:	4b2a      	ldr	r3, [pc, #168]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a29      	ldr	r2, [pc, #164]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006eea:	f7fc fae3 	bl	80034b4 <HAL_GetTick>
 8006eee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ef2:	f7fc fadf 	bl	80034b4 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e2dd      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f04:	4b20      	ldr	r3, [pc, #128]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f0      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x1da>
 8006f10:	e000      	b.n	8006f14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d074      	beq.n	800700a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d005      	beq.n	8006f32 <HAL_RCC_OscConfig+0x21a>
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b0c      	cmp	r3, #12
 8006f2a:	d10e      	bne.n	8006f4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d10b      	bne.n	8006f4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d064      	beq.n	8007008 <HAL_RCC_OscConfig+0x2f0>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d160      	bne.n	8007008 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e2ba      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f52:	d106      	bne.n	8006f62 <HAL_RCC_OscConfig+0x24a>
 8006f54:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a0b      	ldr	r2, [pc, #44]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	e026      	b.n	8006fb0 <HAL_RCC_OscConfig+0x298>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f6a:	d115      	bne.n	8006f98 <HAL_RCC_OscConfig+0x280>
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a05      	ldr	r2, [pc, #20]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006f72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a02      	ldr	r2, [pc, #8]	; (8006f88 <HAL_RCC_OscConfig+0x270>)
 8006f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	e014      	b.n	8006fb0 <HAL_RCC_OscConfig+0x298>
 8006f86:	bf00      	nop
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	080125e4 	.word	0x080125e4
 8006f90:	20000008 	.word	0x20000008
 8006f94:	2000000c 	.word	0x2000000c
 8006f98:	4ba0      	ldr	r3, [pc, #640]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a9f      	ldr	r2, [pc, #636]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8006f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	4b9d      	ldr	r3, [pc, #628]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a9c      	ldr	r2, [pc, #624]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8006faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d013      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb8:	f7fc fa7c 	bl	80034b4 <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fc0:	f7fc fa78 	bl	80034b4 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b64      	cmp	r3, #100	; 0x64
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e276      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fd2:	4b92      	ldr	r3, [pc, #584]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f0      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x2a8>
 8006fde:	e014      	b.n	800700a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe0:	f7fc fa68 	bl	80034b4 <HAL_GetTick>
 8006fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fe8:	f7fc fa64 	bl	80034b4 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b64      	cmp	r3, #100	; 0x64
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e262      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ffa:	4b88      	ldr	r3, [pc, #544]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f0      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x2d0>
 8007006:	e000      	b.n	800700a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d060      	beq.n	80070d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b04      	cmp	r3, #4
 800701a:	d005      	beq.n	8007028 <HAL_RCC_OscConfig+0x310>
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2b0c      	cmp	r3, #12
 8007020:	d119      	bne.n	8007056 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b02      	cmp	r3, #2
 8007026:	d116      	bne.n	8007056 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007028:	4b7c      	ldr	r3, [pc, #496]	; (800721c <HAL_RCC_OscConfig+0x504>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_OscConfig+0x328>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e23f      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007040:	4b76      	ldr	r3, [pc, #472]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	061b      	lsls	r3, r3, #24
 800704e:	4973      	ldr	r1, [pc, #460]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007050:	4313      	orrs	r3, r2
 8007052:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007054:	e040      	b.n	80070d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d023      	beq.n	80070a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800705e:	4b6f      	ldr	r3, [pc, #444]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6e      	ldr	r2, [pc, #440]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706a:	f7fc fa23 	bl	80034b4 <HAL_GetTick>
 800706e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007070:	e008      	b.n	8007084 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007072:	f7fc fa1f 	bl	80034b4 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d901      	bls.n	8007084 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e21d      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007084:	4b65      	ldr	r3, [pc, #404]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0f0      	beq.n	8007072 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007090:	4b62      	ldr	r3, [pc, #392]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	061b      	lsls	r3, r3, #24
 800709e:	495f      	ldr	r1, [pc, #380]	; (800721c <HAL_RCC_OscConfig+0x504>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	604b      	str	r3, [r1, #4]
 80070a4:	e018      	b.n	80070d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070a6:	4b5d      	ldr	r3, [pc, #372]	; (800721c <HAL_RCC_OscConfig+0x504>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a5c      	ldr	r2, [pc, #368]	; (800721c <HAL_RCC_OscConfig+0x504>)
 80070ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b2:	f7fc f9ff 	bl	80034b4 <HAL_GetTick>
 80070b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070b8:	e008      	b.n	80070cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070ba:	f7fc f9fb 	bl	80034b4 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e1f9      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070cc:	4b53      	ldr	r3, [pc, #332]	; (800721c <HAL_RCC_OscConfig+0x504>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f0      	bne.n	80070ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0308 	and.w	r3, r3, #8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d03c      	beq.n	800715e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01c      	beq.n	8007126 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ec:	4b4b      	ldr	r3, [pc, #300]	; (800721c <HAL_RCC_OscConfig+0x504>)
 80070ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070f2:	4a4a      	ldr	r2, [pc, #296]	; (800721c <HAL_RCC_OscConfig+0x504>)
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fc:	f7fc f9da 	bl	80034b4 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007104:	f7fc f9d6 	bl	80034b4 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e1d4      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007116:	4b41      	ldr	r3, [pc, #260]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0ef      	beq.n	8007104 <HAL_RCC_OscConfig+0x3ec>
 8007124:	e01b      	b.n	800715e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007126:	4b3d      	ldr	r3, [pc, #244]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800712c:	4a3b      	ldr	r2, [pc, #236]	; (800721c <HAL_RCC_OscConfig+0x504>)
 800712e:	f023 0301 	bic.w	r3, r3, #1
 8007132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007136:	f7fc f9bd 	bl	80034b4 <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800713e:	f7fc f9b9 	bl	80034b4 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e1b7      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007150:	4b32      	ldr	r3, [pc, #200]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1ef      	bne.n	800713e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80a6 	beq.w	80072b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800716c:	2300      	movs	r3, #0
 800716e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007170:	4b2a      	ldr	r3, [pc, #168]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10d      	bne.n	8007198 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800717c:	4b27      	ldr	r3, [pc, #156]	; (800721c <HAL_RCC_OscConfig+0x504>)
 800717e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007180:	4a26      	ldr	r2, [pc, #152]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007186:	6593      	str	r3, [r2, #88]	; 0x58
 8007188:	4b24      	ldr	r3, [pc, #144]	; (800721c <HAL_RCC_OscConfig+0x504>)
 800718a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007190:	60bb      	str	r3, [r7, #8]
 8007192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007194:	2301      	movs	r3, #1
 8007196:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007198:	4b21      	ldr	r3, [pc, #132]	; (8007220 <HAL_RCC_OscConfig+0x508>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d118      	bne.n	80071d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071a4:	4b1e      	ldr	r3, [pc, #120]	; (8007220 <HAL_RCC_OscConfig+0x508>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1d      	ldr	r2, [pc, #116]	; (8007220 <HAL_RCC_OscConfig+0x508>)
 80071aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071b0:	f7fc f980 	bl	80034b4 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b8:	f7fc f97c 	bl	80034b4 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e17a      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071ca:	4b15      	ldr	r3, [pc, #84]	; (8007220 <HAL_RCC_OscConfig+0x508>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0f0      	beq.n	80071b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d108      	bne.n	80071f0 <HAL_RCC_OscConfig+0x4d8>
 80071de:	4b0f      	ldr	r3, [pc, #60]	; (800721c <HAL_RCC_OscConfig+0x504>)
 80071e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e4:	4a0d      	ldr	r2, [pc, #52]	; (800721c <HAL_RCC_OscConfig+0x504>)
 80071e6:	f043 0301 	orr.w	r3, r3, #1
 80071ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071ee:	e029      	b.n	8007244 <HAL_RCC_OscConfig+0x52c>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b05      	cmp	r3, #5
 80071f6:	d115      	bne.n	8007224 <HAL_RCC_OscConfig+0x50c>
 80071f8:	4b08      	ldr	r3, [pc, #32]	; (800721c <HAL_RCC_OscConfig+0x504>)
 80071fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fe:	4a07      	ldr	r2, [pc, #28]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007200:	f043 0304 	orr.w	r3, r3, #4
 8007204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007208:	4b04      	ldr	r3, [pc, #16]	; (800721c <HAL_RCC_OscConfig+0x504>)
 800720a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720e:	4a03      	ldr	r2, [pc, #12]	; (800721c <HAL_RCC_OscConfig+0x504>)
 8007210:	f043 0301 	orr.w	r3, r3, #1
 8007214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007218:	e014      	b.n	8007244 <HAL_RCC_OscConfig+0x52c>
 800721a:	bf00      	nop
 800721c:	40021000 	.word	0x40021000
 8007220:	40007000 	.word	0x40007000
 8007224:	4b9c      	ldr	r3, [pc, #624]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 8007226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722a:	4a9b      	ldr	r2, [pc, #620]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007234:	4b98      	ldr	r3, [pc, #608]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	4a97      	ldr	r2, [pc, #604]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 800723c:	f023 0304 	bic.w	r3, r3, #4
 8007240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d016      	beq.n	800727a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724c:	f7fc f932 	bl	80034b4 <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007252:	e00a      	b.n	800726a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007254:	f7fc f92e 	bl	80034b4 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007262:	4293      	cmp	r3, r2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e12a      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800726a:	4b8b      	ldr	r3, [pc, #556]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 800726c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0ed      	beq.n	8007254 <HAL_RCC_OscConfig+0x53c>
 8007278:	e015      	b.n	80072a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800727a:	f7fc f91b 	bl	80034b4 <HAL_GetTick>
 800727e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007280:	e00a      	b.n	8007298 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007282:	f7fc f917 	bl	80034b4 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007290:	4293      	cmp	r3, r2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e113      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007298:	4b7f      	ldr	r3, [pc, #508]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 800729a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1ed      	bne.n	8007282 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072a6:	7ffb      	ldrb	r3, [r7, #31]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d105      	bne.n	80072b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ac:	4b7a      	ldr	r3, [pc, #488]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 80072ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b0:	4a79      	ldr	r2, [pc, #484]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 80072b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80fe 	beq.w	80074be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	f040 80d0 	bne.w	800746c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80072cc:	4b72      	ldr	r3, [pc, #456]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f003 0203 	and.w	r2, r3, #3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	429a      	cmp	r2, r3
 80072de:	d130      	bne.n	8007342 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ea:	3b01      	subs	r3, #1
 80072ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d127      	bne.n	8007342 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072fe:	429a      	cmp	r2, r3
 8007300:	d11f      	bne.n	8007342 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800730c:	2a07      	cmp	r2, #7
 800730e:	bf14      	ite	ne
 8007310:	2201      	movne	r2, #1
 8007312:	2200      	moveq	r2, #0
 8007314:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007316:	4293      	cmp	r3, r2
 8007318:	d113      	bne.n	8007342 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007324:	085b      	lsrs	r3, r3, #1
 8007326:	3b01      	subs	r3, #1
 8007328:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800732a:	429a      	cmp	r2, r3
 800732c:	d109      	bne.n	8007342 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007338:	085b      	lsrs	r3, r3, #1
 800733a:	3b01      	subs	r3, #1
 800733c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800733e:	429a      	cmp	r2, r3
 8007340:	d06e      	beq.n	8007420 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b0c      	cmp	r3, #12
 8007346:	d069      	beq.n	800741c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007348:	4b53      	ldr	r3, [pc, #332]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007354:	4b50      	ldr	r3, [pc, #320]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e0ad      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007364:	4b4c      	ldr	r3, [pc, #304]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a4b      	ldr	r2, [pc, #300]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 800736a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800736e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007370:	f7fc f8a0 	bl	80034b4 <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007378:	f7fc f89c 	bl	80034b4 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e09a      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800738a:	4b43      	ldr	r3, [pc, #268]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f0      	bne.n	8007378 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007396:	4b40      	ldr	r3, [pc, #256]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	4b40      	ldr	r3, [pc, #256]	; (800749c <HAL_RCC_OscConfig+0x784>)
 800739c:	4013      	ands	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073a6:	3a01      	subs	r2, #1
 80073a8:	0112      	lsls	r2, r2, #4
 80073aa:	4311      	orrs	r1, r2
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073b0:	0212      	lsls	r2, r2, #8
 80073b2:	4311      	orrs	r1, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073b8:	0852      	lsrs	r2, r2, #1
 80073ba:	3a01      	subs	r2, #1
 80073bc:	0552      	lsls	r2, r2, #21
 80073be:	4311      	orrs	r1, r2
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80073c4:	0852      	lsrs	r2, r2, #1
 80073c6:	3a01      	subs	r2, #1
 80073c8:	0652      	lsls	r2, r2, #25
 80073ca:	4311      	orrs	r1, r2
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073d0:	0912      	lsrs	r2, r2, #4
 80073d2:	0452      	lsls	r2, r2, #17
 80073d4:	430a      	orrs	r2, r1
 80073d6:	4930      	ldr	r1, [pc, #192]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80073dc:	4b2e      	ldr	r3, [pc, #184]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a2d      	ldr	r2, [pc, #180]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 80073e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073e8:	4b2b      	ldr	r3, [pc, #172]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	4a2a      	ldr	r2, [pc, #168]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 80073ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80073f4:	f7fc f85e 	bl	80034b4 <HAL_GetTick>
 80073f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073fc:	f7fc f85a 	bl	80034b4 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e058      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800740e:	4b22      	ldr	r3, [pc, #136]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0f0      	beq.n	80073fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800741a:	e050      	b.n	80074be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e04f      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007420:	4b1d      	ldr	r3, [pc, #116]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d148      	bne.n	80074be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800742c:	4b1a      	ldr	r3, [pc, #104]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a19      	ldr	r2, [pc, #100]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 8007432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007436:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007438:	4b17      	ldr	r3, [pc, #92]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	4a16      	ldr	r2, [pc, #88]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 800743e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007442:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007444:	f7fc f836 	bl	80034b4 <HAL_GetTick>
 8007448:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800744a:	e008      	b.n	800745e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800744c:	f7fc f832 	bl	80034b4 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d901      	bls.n	800745e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e030      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800745e:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d0f0      	beq.n	800744c <HAL_RCC_OscConfig+0x734>
 800746a:	e028      	b.n	80074be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	2b0c      	cmp	r3, #12
 8007470:	d023      	beq.n	80074ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007472:	4b09      	ldr	r3, [pc, #36]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a08      	ldr	r2, [pc, #32]	; (8007498 <HAL_RCC_OscConfig+0x780>)
 8007478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747e:	f7fc f819 	bl	80034b4 <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007484:	e00c      	b.n	80074a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007486:	f7fc f815 	bl	80034b4 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d905      	bls.n	80074a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e013      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
 8007498:	40021000 	.word	0x40021000
 800749c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a0:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <HAL_RCC_OscConfig+0x7b0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1ec      	bne.n	8007486 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <HAL_RCC_OscConfig+0x7b0>)
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	4905      	ldr	r1, [pc, #20]	; (80074c8 <HAL_RCC_OscConfig+0x7b0>)
 80074b2:	4b06      	ldr	r3, [pc, #24]	; (80074cc <HAL_RCC_OscConfig+0x7b4>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	60cb      	str	r3, [r1, #12]
 80074b8:	e001      	b.n	80074be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3720      	adds	r7, #32
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40021000 	.word	0x40021000
 80074cc:	feeefffc 	.word	0xfeeefffc

080074d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0e7      	b.n	80076b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074e4:	4b75      	ldr	r3, [pc, #468]	; (80076bc <HAL_RCC_ClockConfig+0x1ec>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d910      	bls.n	8007514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f2:	4b72      	ldr	r3, [pc, #456]	; (80076bc <HAL_RCC_ClockConfig+0x1ec>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f023 0207 	bic.w	r2, r3, #7
 80074fa:	4970      	ldr	r1, [pc, #448]	; (80076bc <HAL_RCC_ClockConfig+0x1ec>)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	4313      	orrs	r3, r2
 8007500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007502:	4b6e      	ldr	r3, [pc, #440]	; (80076bc <HAL_RCC_ClockConfig+0x1ec>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d001      	beq.n	8007514 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e0cf      	b.n	80076b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d010      	beq.n	8007542 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	4b66      	ldr	r3, [pc, #408]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800752c:	429a      	cmp	r2, r3
 800752e:	d908      	bls.n	8007542 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007530:	4b63      	ldr	r3, [pc, #396]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	4960      	ldr	r1, [pc, #384]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 800753e:	4313      	orrs	r3, r2
 8007540:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d04c      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b03      	cmp	r3, #3
 8007554:	d107      	bne.n	8007566 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007556:	4b5a      	ldr	r3, [pc, #360]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d121      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e0a6      	b.n	80076b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d107      	bne.n	800757e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800756e:	4b54      	ldr	r3, [pc, #336]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d115      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e09a      	b.n	80076b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d107      	bne.n	8007596 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007586:	4b4e      	ldr	r3, [pc, #312]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d109      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e08e      	b.n	80076b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007596:	4b4a      	ldr	r3, [pc, #296]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e086      	b.n	80076b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075a6:	4b46      	ldr	r3, [pc, #280]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f023 0203 	bic.w	r2, r3, #3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	4943      	ldr	r1, [pc, #268]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b8:	f7fb ff7c 	bl	80034b4 <HAL_GetTick>
 80075bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075be:	e00a      	b.n	80075d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c0:	f7fb ff78 	bl	80034b4 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e06e      	b.n	80076b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075d6:	4b3a      	ldr	r3, [pc, #232]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 020c 	and.w	r2, r3, #12
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d1eb      	bne.n	80075c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d010      	beq.n	8007616 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007600:	429a      	cmp	r2, r3
 8007602:	d208      	bcs.n	8007616 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007604:	4b2e      	ldr	r3, [pc, #184]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	492b      	ldr	r1, [pc, #172]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007612:	4313      	orrs	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007616:	4b29      	ldr	r3, [pc, #164]	; (80076bc <HAL_RCC_ClockConfig+0x1ec>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d210      	bcs.n	8007646 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007624:	4b25      	ldr	r3, [pc, #148]	; (80076bc <HAL_RCC_ClockConfig+0x1ec>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f023 0207 	bic.w	r2, r3, #7
 800762c:	4923      	ldr	r1, [pc, #140]	; (80076bc <HAL_RCC_ClockConfig+0x1ec>)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	4313      	orrs	r3, r2
 8007632:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007634:	4b21      	ldr	r3, [pc, #132]	; (80076bc <HAL_RCC_ClockConfig+0x1ec>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	429a      	cmp	r2, r3
 8007640:	d001      	beq.n	8007646 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e036      	b.n	80076b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0304 	and.w	r3, r3, #4
 800764e:	2b00      	cmp	r3, #0
 8007650:	d008      	beq.n	8007664 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007652:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	4918      	ldr	r1, [pc, #96]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007660:	4313      	orrs	r3, r2
 8007662:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0308 	and.w	r3, r3, #8
 800766c:	2b00      	cmp	r3, #0
 800766e:	d009      	beq.n	8007684 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007670:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	00db      	lsls	r3, r3, #3
 800767e:	4910      	ldr	r1, [pc, #64]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007680:	4313      	orrs	r3, r2
 8007682:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007684:	f000 f824 	bl	80076d0 <HAL_RCC_GetSysClockFreq>
 8007688:	4602      	mov	r2, r0
 800768a:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <HAL_RCC_ClockConfig+0x1f0>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	091b      	lsrs	r3, r3, #4
 8007690:	f003 030f 	and.w	r3, r3, #15
 8007694:	490b      	ldr	r1, [pc, #44]	; (80076c4 <HAL_RCC_ClockConfig+0x1f4>)
 8007696:	5ccb      	ldrb	r3, [r1, r3]
 8007698:	f003 031f 	and.w	r3, r3, #31
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
 80076a0:	4a09      	ldr	r2, [pc, #36]	; (80076c8 <HAL_RCC_ClockConfig+0x1f8>)
 80076a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80076a4:	4b09      	ldr	r3, [pc, #36]	; (80076cc <HAL_RCC_ClockConfig+0x1fc>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fa fa19 	bl	8001ae0 <HAL_InitTick>
 80076ae:	4603      	mov	r3, r0
 80076b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80076b2:	7afb      	ldrb	r3, [r7, #11]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40022000 	.word	0x40022000
 80076c0:	40021000 	.word	0x40021000
 80076c4:	080125e4 	.word	0x080125e4
 80076c8:	20000008 	.word	0x20000008
 80076cc:	2000000c 	.word	0x2000000c

080076d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b089      	sub	sp, #36	; 0x24
 80076d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61fb      	str	r3, [r7, #28]
 80076da:	2300      	movs	r3, #0
 80076dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076de:	4b3e      	ldr	r3, [pc, #248]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 030c 	and.w	r3, r3, #12
 80076e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076e8:	4b3b      	ldr	r3, [pc, #236]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <HAL_RCC_GetSysClockFreq+0x34>
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2b0c      	cmp	r3, #12
 80076fc:	d121      	bne.n	8007742 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d11e      	bne.n	8007742 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007704:	4b34      	ldr	r3, [pc, #208]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0308 	and.w	r3, r3, #8
 800770c:	2b00      	cmp	r3, #0
 800770e:	d107      	bne.n	8007720 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007710:	4b31      	ldr	r3, [pc, #196]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007716:	0a1b      	lsrs	r3, r3, #8
 8007718:	f003 030f 	and.w	r3, r3, #15
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	e005      	b.n	800772c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007720:	4b2d      	ldr	r3, [pc, #180]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800772c:	4a2b      	ldr	r2, [pc, #172]	; (80077dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007734:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10d      	bne.n	8007758 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007740:	e00a      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	2b04      	cmp	r3, #4
 8007746:	d102      	bne.n	800774e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007748:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800774a:	61bb      	str	r3, [r7, #24]
 800774c:	e004      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	2b08      	cmp	r3, #8
 8007752:	d101      	bne.n	8007758 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007754:	4b23      	ldr	r3, [pc, #140]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007756:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2b0c      	cmp	r3, #12
 800775c:	d134      	bne.n	80077c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800775e:	4b1e      	ldr	r3, [pc, #120]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f003 0303 	and.w	r3, r3, #3
 8007766:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b02      	cmp	r3, #2
 800776c:	d003      	beq.n	8007776 <HAL_RCC_GetSysClockFreq+0xa6>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d003      	beq.n	800777c <HAL_RCC_GetSysClockFreq+0xac>
 8007774:	e005      	b.n	8007782 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007776:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007778:	617b      	str	r3, [r7, #20]
      break;
 800777a:	e005      	b.n	8007788 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800777c:	4b19      	ldr	r3, [pc, #100]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800777e:	617b      	str	r3, [r7, #20]
      break;
 8007780:	e002      	b.n	8007788 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	617b      	str	r3, [r7, #20]
      break;
 8007786:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007788:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	3301      	adds	r3, #1
 8007794:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007796:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	0a1b      	lsrs	r3, r3, #8
 800779c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	fb03 f202 	mul.w	r2, r3, r2
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077ae:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	0e5b      	lsrs	r3, r3, #25
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	3301      	adds	r3, #1
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80077c8:	69bb      	ldr	r3, [r7, #24]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3724      	adds	r7, #36	; 0x24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40021000 	.word	0x40021000
 80077dc:	080125fc 	.word	0x080125fc
 80077e0:	00f42400 	.word	0x00f42400
 80077e4:	007a1200 	.word	0x007a1200

080077e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077ec:	4b03      	ldr	r3, [pc, #12]	; (80077fc <HAL_RCC_GetHCLKFreq+0x14>)
 80077ee:	681b      	ldr	r3, [r3, #0]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	20000008 	.word	0x20000008

08007800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007804:	f7ff fff0 	bl	80077e8 <HAL_RCC_GetHCLKFreq>
 8007808:	4602      	mov	r2, r0
 800780a:	4b06      	ldr	r3, [pc, #24]	; (8007824 <HAL_RCC_GetPCLK1Freq+0x24>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	0a1b      	lsrs	r3, r3, #8
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	4904      	ldr	r1, [pc, #16]	; (8007828 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007816:	5ccb      	ldrb	r3, [r1, r3]
 8007818:	f003 031f 	and.w	r3, r3, #31
 800781c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007820:	4618      	mov	r0, r3
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40021000 	.word	0x40021000
 8007828:	080125f4 	.word	0x080125f4

0800782c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007830:	f7ff ffda 	bl	80077e8 <HAL_RCC_GetHCLKFreq>
 8007834:	4602      	mov	r2, r0
 8007836:	4b06      	ldr	r3, [pc, #24]	; (8007850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	0adb      	lsrs	r3, r3, #11
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	4904      	ldr	r1, [pc, #16]	; (8007854 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007842:	5ccb      	ldrb	r3, [r1, r3]
 8007844:	f003 031f 	and.w	r3, r3, #31
 8007848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800784c:	4618      	mov	r0, r3
 800784e:	bd80      	pop	{r7, pc}
 8007850:	40021000 	.word	0x40021000
 8007854:	080125f4 	.word	0x080125f4

08007858 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	220f      	movs	r2, #15
 8007866:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007868:	4b12      	ldr	r3, [pc, #72]	; (80078b4 <HAL_RCC_GetClockConfig+0x5c>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 0203 	and.w	r2, r3, #3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007874:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <HAL_RCC_GetClockConfig+0x5c>)
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007880:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <HAL_RCC_GetClockConfig+0x5c>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <HAL_RCC_GetClockConfig+0x5c>)
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	08db      	lsrs	r3, r3, #3
 8007892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800789a:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <HAL_RCC_GetClockConfig+0x60>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0207 	and.w	r2, r3, #7
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	601a      	str	r2, [r3, #0]
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40021000 	.word	0x40021000
 80078b8:	40022000 	.word	0x40022000

080078bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80078c4:	2300      	movs	r3, #0
 80078c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80078c8:	4b2a      	ldr	r3, [pc, #168]	; (8007974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80078d4:	f7ff f8f0 	bl	8006ab8 <HAL_PWREx_GetVoltageRange>
 80078d8:	6178      	str	r0, [r7, #20]
 80078da:	e014      	b.n	8007906 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80078dc:	4b25      	ldr	r3, [pc, #148]	; (8007974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e0:	4a24      	ldr	r2, [pc, #144]	; (8007974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078e6:	6593      	str	r3, [r2, #88]	; 0x58
 80078e8:	4b22      	ldr	r3, [pc, #136]	; (8007974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80078f4:	f7ff f8e0 	bl	8006ab8 <HAL_PWREx_GetVoltageRange>
 80078f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80078fa:	4b1e      	ldr	r3, [pc, #120]	; (8007974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fe:	4a1d      	ldr	r2, [pc, #116]	; (8007974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007904:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800790c:	d10b      	bne.n	8007926 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b80      	cmp	r3, #128	; 0x80
 8007912:	d919      	bls.n	8007948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2ba0      	cmp	r3, #160	; 0xa0
 8007918:	d902      	bls.n	8007920 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800791a:	2302      	movs	r3, #2
 800791c:	613b      	str	r3, [r7, #16]
 800791e:	e013      	b.n	8007948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007920:	2301      	movs	r3, #1
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	e010      	b.n	8007948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b80      	cmp	r3, #128	; 0x80
 800792a:	d902      	bls.n	8007932 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800792c:	2303      	movs	r3, #3
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	e00a      	b.n	8007948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b80      	cmp	r3, #128	; 0x80
 8007936:	d102      	bne.n	800793e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007938:	2302      	movs	r3, #2
 800793a:	613b      	str	r3, [r7, #16]
 800793c:	e004      	b.n	8007948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b70      	cmp	r3, #112	; 0x70
 8007942:	d101      	bne.n	8007948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007944:	2301      	movs	r3, #1
 8007946:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007948:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f023 0207 	bic.w	r2, r3, #7
 8007950:	4909      	ldr	r1, [pc, #36]	; (8007978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	4313      	orrs	r3, r2
 8007956:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007958:	4b07      	ldr	r3, [pc, #28]	; (8007978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	429a      	cmp	r2, r3
 8007964:	d001      	beq.n	800796a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40021000 	.word	0x40021000
 8007978:	40022000 	.word	0x40022000

0800797c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007984:	2300      	movs	r3, #0
 8007986:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007988:	2300      	movs	r3, #0
 800798a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007994:	2b00      	cmp	r3, #0
 8007996:	d041      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800799c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80079a0:	d02a      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80079a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80079a6:	d824      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80079a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079ac:	d008      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80079ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079b2:	d81e      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80079b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079bc:	d010      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80079be:	e018      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80079c0:	4b86      	ldr	r3, [pc, #536]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	4a85      	ldr	r2, [pc, #532]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80079cc:	e015      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	3304      	adds	r3, #4
 80079d2:	2100      	movs	r1, #0
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 facb 	bl	8007f70 <RCCEx_PLLSAI1_Config>
 80079da:	4603      	mov	r3, r0
 80079dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80079de:	e00c      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3320      	adds	r3, #32
 80079e4:	2100      	movs	r1, #0
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fbb6 	bl	8008158 <RCCEx_PLLSAI2_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80079f0:	e003      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	74fb      	strb	r3, [r7, #19]
      break;
 80079f6:	e000      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80079f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079fa:	7cfb      	ldrb	r3, [r7, #19]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a00:	4b76      	ldr	r3, [pc, #472]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a0e:	4973      	ldr	r1, [pc, #460]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007a16:	e001      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a18:	7cfb      	ldrb	r3, [r7, #19]
 8007a1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d041      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a30:	d02a      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007a32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a36:	d824      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a3c:	d008      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a42:	d81e      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a4c:	d010      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007a4e:	e018      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a50:	4b62      	ldr	r3, [pc, #392]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	4a61      	ldr	r2, [pc, #388]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a5c:	e015      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3304      	adds	r3, #4
 8007a62:	2100      	movs	r1, #0
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fa83 	bl	8007f70 <RCCEx_PLLSAI1_Config>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a6e:	e00c      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3320      	adds	r3, #32
 8007a74:	2100      	movs	r1, #0
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fb6e 	bl	8008158 <RCCEx_PLLSAI2_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a80:	e003      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	74fb      	strb	r3, [r7, #19]
      break;
 8007a86:	e000      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a8a:	7cfb      	ldrb	r3, [r7, #19]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10b      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a90:	4b52      	ldr	r3, [pc, #328]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a9e:	494f      	ldr	r1, [pc, #316]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007aa6:	e001      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa8:	7cfb      	ldrb	r3, [r7, #19]
 8007aaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 80a0 	beq.w	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007aba:	2300      	movs	r3, #0
 8007abc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007abe:	4b47      	ldr	r3, [pc, #284]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00d      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ad4:	4b41      	ldr	r3, [pc, #260]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad8:	4a40      	ldr	r2, [pc, #256]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ade:	6593      	str	r3, [r2, #88]	; 0x58
 8007ae0:	4b3e      	ldr	r3, [pc, #248]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae8:	60bb      	str	r3, [r7, #8]
 8007aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007aec:	2301      	movs	r3, #1
 8007aee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007af0:	4b3b      	ldr	r3, [pc, #236]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a3a      	ldr	r2, [pc, #232]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007afa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007afc:	f7fb fcda 	bl	80034b4 <HAL_GetTick>
 8007b00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b02:	e009      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b04:	f7fb fcd6 	bl	80034b4 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d902      	bls.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	74fb      	strb	r3, [r7, #19]
        break;
 8007b16:	e005      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b18:	4b31      	ldr	r3, [pc, #196]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0ef      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007b24:	7cfb      	ldrb	r3, [r7, #19]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d15c      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b2a:	4b2c      	ldr	r3, [pc, #176]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01f      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d019      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b48:	4b24      	ldr	r3, [pc, #144]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b54:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5a:	4a20      	ldr	r2, [pc, #128]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b64:	4b1d      	ldr	r3, [pc, #116]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6a:	4a1c      	ldr	r2, [pc, #112]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b74:	4a19      	ldr	r2, [pc, #100]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d016      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b86:	f7fb fc95 	bl	80034b4 <HAL_GetTick>
 8007b8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b8c:	e00b      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b8e:	f7fb fc91 	bl	80034b4 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d902      	bls.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	74fb      	strb	r3, [r7, #19]
            break;
 8007ba4:	e006      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ba6:	4b0d      	ldr	r3, [pc, #52]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0ec      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007bb4:	7cfb      	ldrb	r3, [r7, #19]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10c      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bba:	4b08      	ldr	r3, [pc, #32]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bca:	4904      	ldr	r1, [pc, #16]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007bd2:	e009      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bd4:	7cfb      	ldrb	r3, [r7, #19]
 8007bd6:	74bb      	strb	r3, [r7, #18]
 8007bd8:	e006      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007bda:	bf00      	nop
 8007bdc:	40021000 	.word	0x40021000
 8007be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be4:	7cfb      	ldrb	r3, [r7, #19]
 8007be6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007be8:	7c7b      	ldrb	r3, [r7, #17]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d105      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bee:	4b9e      	ldr	r3, [pc, #632]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf2:	4a9d      	ldr	r2, [pc, #628]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00a      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c06:	4b98      	ldr	r3, [pc, #608]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0c:	f023 0203 	bic.w	r2, r3, #3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	4994      	ldr	r1, [pc, #592]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c28:	4b8f      	ldr	r3, [pc, #572]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2e:	f023 020c 	bic.w	r2, r3, #12
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c36:	498c      	ldr	r1, [pc, #560]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c4a:	4b87      	ldr	r3, [pc, #540]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	4983      	ldr	r1, [pc, #524]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0308 	and.w	r3, r3, #8
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c6c:	4b7e      	ldr	r3, [pc, #504]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7a:	497b      	ldr	r1, [pc, #492]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0310 	and.w	r3, r3, #16
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c8e:	4b76      	ldr	r3, [pc, #472]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c9c:	4972      	ldr	r1, [pc, #456]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00a      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cb0:	4b6d      	ldr	r3, [pc, #436]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cbe:	496a      	ldr	r1, [pc, #424]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cd2:	4b65      	ldr	r3, [pc, #404]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce0:	4961      	ldr	r1, [pc, #388]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007cf4:	4b5c      	ldr	r3, [pc, #368]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d02:	4959      	ldr	r1, [pc, #356]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d16:	4b54      	ldr	r3, [pc, #336]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d24:	4950      	ldr	r1, [pc, #320]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d38:	4b4b      	ldr	r3, [pc, #300]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d46:	4948      	ldr	r1, [pc, #288]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d5a:	4b43      	ldr	r3, [pc, #268]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d68:	493f      	ldr	r1, [pc, #252]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d028      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d7c:	4b3a      	ldr	r3, [pc, #232]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d8a:	4937      	ldr	r1, [pc, #220]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d9a:	d106      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d9c:	4b32      	ldr	r3, [pc, #200]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4a31      	ldr	r2, [pc, #196]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007da6:	60d3      	str	r3, [r2, #12]
 8007da8:	e011      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007db2:	d10c      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3304      	adds	r3, #4
 8007db8:	2101      	movs	r1, #1
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 f8d8 	bl	8007f70 <RCCEx_PLLSAI1_Config>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007dc4:	7cfb      	ldrb	r3, [r7, #19]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007dca:	7cfb      	ldrb	r3, [r7, #19]
 8007dcc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d028      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007dda:	4b23      	ldr	r3, [pc, #140]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de8:	491f      	ldr	r1, [pc, #124]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007df8:	d106      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dfa:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e04:	60d3      	str	r3, [r2, #12]
 8007e06:	e011      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e10:	d10c      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3304      	adds	r3, #4
 8007e16:	2101      	movs	r1, #1
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 f8a9 	bl	8007f70 <RCCEx_PLLSAI1_Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e22:	7cfb      	ldrb	r3, [r7, #19]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007e28:	7cfb      	ldrb	r3, [r7, #19]
 8007e2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d02b      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e38:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e46:	4908      	ldr	r1, [pc, #32]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e56:	d109      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e58:	4b03      	ldr	r3, [pc, #12]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	4a02      	ldr	r2, [pc, #8]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e62:	60d3      	str	r3, [r2, #12]
 8007e64:	e014      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007e66:	bf00      	nop
 8007e68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e74:	d10c      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 f877 	bl	8007f70 <RCCEx_PLLSAI1_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e86:	7cfb      	ldrb	r3, [r7, #19]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007e8c:	7cfb      	ldrb	r3, [r7, #19]
 8007e8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d02f      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e9c:	4b2b      	ldr	r3, [pc, #172]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eaa:	4928      	ldr	r1, [pc, #160]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eba:	d10d      	bne.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f854 	bl	8007f70 <RCCEx_PLLSAI1_Config>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ecc:	7cfb      	ldrb	r3, [r7, #19]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d014      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007ed2:	7cfb      	ldrb	r3, [r7, #19]
 8007ed4:	74bb      	strb	r3, [r7, #18]
 8007ed6:	e011      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ee0:	d10c      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3320      	adds	r3, #32
 8007ee6:	2102      	movs	r1, #2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 f935 	bl	8008158 <RCCEx_PLLSAI2_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ef2:	7cfb      	ldrb	r3, [r7, #19]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007ef8:	7cfb      	ldrb	r3, [r7, #19]
 8007efa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00a      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f08:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f16:	490d      	ldr	r1, [pc, #52]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00b      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f2a:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f3a:	4904      	ldr	r1, [pc, #16]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007f42:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	40021000 	.word	0x40021000

08007f50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007f50:	b480      	push	{r7}
 8007f52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a04      	ldr	r2, [pc, #16]	; (8007f6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007f5a:	f043 0304 	orr.w	r3, r3, #4
 8007f5e:	6013      	str	r3, [r2, #0]
}
 8007f60:	bf00      	nop
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	40021000 	.word	0x40021000

08007f70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007f7e:	4b75      	ldr	r3, [pc, #468]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007f8a:	4b72      	ldr	r3, [pc, #456]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f003 0203 	and.w	r2, r3, #3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d10d      	bne.n	8007fb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
       ||
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007fa2:	4b6c      	ldr	r3, [pc, #432]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	091b      	lsrs	r3, r3, #4
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
       ||
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d047      	beq.n	8008046 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	73fb      	strb	r3, [r7, #15]
 8007fba:	e044      	b.n	8008046 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d018      	beq.n	8007ff6 <RCCEx_PLLSAI1_Config+0x86>
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d825      	bhi.n	8008014 <RCCEx_PLLSAI1_Config+0xa4>
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d002      	beq.n	8007fd2 <RCCEx_PLLSAI1_Config+0x62>
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d009      	beq.n	8007fe4 <RCCEx_PLLSAI1_Config+0x74>
 8007fd0:	e020      	b.n	8008014 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007fd2:	4b60      	ldr	r3, [pc, #384]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d11d      	bne.n	800801a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fe2:	e01a      	b.n	800801a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007fe4:	4b5b      	ldr	r3, [pc, #364]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d116      	bne.n	800801e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ff4:	e013      	b.n	800801e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007ff6:	4b57      	ldr	r3, [pc, #348]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10f      	bne.n	8008022 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008002:	4b54      	ldr	r3, [pc, #336]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d109      	bne.n	8008022 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008012:	e006      	b.n	8008022 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
      break;
 8008018:	e004      	b.n	8008024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800801a:	bf00      	nop
 800801c:	e002      	b.n	8008024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800801e:	bf00      	nop
 8008020:	e000      	b.n	8008024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008022:	bf00      	nop
    }

    if(status == HAL_OK)
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10d      	bne.n	8008046 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800802a:	4b4a      	ldr	r3, [pc, #296]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6819      	ldr	r1, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	3b01      	subs	r3, #1
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	430b      	orrs	r3, r1
 8008040:	4944      	ldr	r1, [pc, #272]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008042:	4313      	orrs	r3, r2
 8008044:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d17d      	bne.n	8008148 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800804c:	4b41      	ldr	r3, [pc, #260]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a40      	ldr	r2, [pc, #256]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008058:	f7fb fa2c 	bl	80034b4 <HAL_GetTick>
 800805c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800805e:	e009      	b.n	8008074 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008060:	f7fb fa28 	bl	80034b4 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d902      	bls.n	8008074 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	73fb      	strb	r3, [r7, #15]
        break;
 8008072:	e005      	b.n	8008080 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008074:	4b37      	ldr	r3, [pc, #220]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1ef      	bne.n	8008060 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d160      	bne.n	8008148 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d111      	bne.n	80080b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800808c:	4b31      	ldr	r3, [pc, #196]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6892      	ldr	r2, [r2, #8]
 800809c:	0211      	lsls	r1, r2, #8
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	68d2      	ldr	r2, [r2, #12]
 80080a2:	0912      	lsrs	r2, r2, #4
 80080a4:	0452      	lsls	r2, r2, #17
 80080a6:	430a      	orrs	r2, r1
 80080a8:	492a      	ldr	r1, [pc, #168]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	610b      	str	r3, [r1, #16]
 80080ae:	e027      	b.n	8008100 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d112      	bne.n	80080dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080b6:	4b27      	ldr	r3, [pc, #156]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80080be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	6892      	ldr	r2, [r2, #8]
 80080c6:	0211      	lsls	r1, r2, #8
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6912      	ldr	r2, [r2, #16]
 80080cc:	0852      	lsrs	r2, r2, #1
 80080ce:	3a01      	subs	r2, #1
 80080d0:	0552      	lsls	r2, r2, #21
 80080d2:	430a      	orrs	r2, r1
 80080d4:	491f      	ldr	r1, [pc, #124]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	610b      	str	r3, [r1, #16]
 80080da:	e011      	b.n	8008100 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080dc:	4b1d      	ldr	r3, [pc, #116]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80080e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	6892      	ldr	r2, [r2, #8]
 80080ec:	0211      	lsls	r1, r2, #8
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	6952      	ldr	r2, [r2, #20]
 80080f2:	0852      	lsrs	r2, r2, #1
 80080f4:	3a01      	subs	r2, #1
 80080f6:	0652      	lsls	r2, r2, #25
 80080f8:	430a      	orrs	r2, r1
 80080fa:	4916      	ldr	r1, [pc, #88]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008100:	4b14      	ldr	r3, [pc, #80]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a13      	ldr	r2, [pc, #76]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800810a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800810c:	f7fb f9d2 	bl	80034b4 <HAL_GetTick>
 8008110:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008112:	e009      	b.n	8008128 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008114:	f7fb f9ce 	bl	80034b4 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d902      	bls.n	8008128 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	73fb      	strb	r3, [r7, #15]
          break;
 8008126:	e005      	b.n	8008134 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008128:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0ef      	beq.n	8008114 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d106      	bne.n	8008148 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	4904      	ldr	r1, [pc, #16]	; (8008154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008144:	4313      	orrs	r3, r2
 8008146:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008148:	7bfb      	ldrb	r3, [r7, #15]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	40021000 	.word	0x40021000

08008158 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008166:	4b6a      	ldr	r3, [pc, #424]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d018      	beq.n	80081a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008172:	4b67      	ldr	r3, [pc, #412]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f003 0203 	and.w	r2, r3, #3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	429a      	cmp	r2, r3
 8008180:	d10d      	bne.n	800819e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
       ||
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800818a:	4b61      	ldr	r3, [pc, #388]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	091b      	lsrs	r3, r3, #4
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
       ||
 800819a:	429a      	cmp	r2, r3
 800819c:	d047      	beq.n	800822e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	73fb      	strb	r3, [r7, #15]
 80081a2:	e044      	b.n	800822e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d018      	beq.n	80081de <RCCEx_PLLSAI2_Config+0x86>
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d825      	bhi.n	80081fc <RCCEx_PLLSAI2_Config+0xa4>
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d002      	beq.n	80081ba <RCCEx_PLLSAI2_Config+0x62>
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d009      	beq.n	80081cc <RCCEx_PLLSAI2_Config+0x74>
 80081b8:	e020      	b.n	80081fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80081ba:	4b55      	ldr	r3, [pc, #340]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d11d      	bne.n	8008202 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081ca:	e01a      	b.n	8008202 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80081cc:	4b50      	ldr	r3, [pc, #320]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d116      	bne.n	8008206 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081dc:	e013      	b.n	8008206 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80081de:	4b4c      	ldr	r3, [pc, #304]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10f      	bne.n	800820a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80081ea:	4b49      	ldr	r3, [pc, #292]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081fa:	e006      	b.n	800820a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008200:	e004      	b.n	800820c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008202:	bf00      	nop
 8008204:	e002      	b.n	800820c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008206:	bf00      	nop
 8008208:	e000      	b.n	800820c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800820a:	bf00      	nop
    }

    if(status == HAL_OK)
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10d      	bne.n	800822e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008212:	4b3f      	ldr	r3, [pc, #252]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6819      	ldr	r1, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	3b01      	subs	r3, #1
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	430b      	orrs	r3, r1
 8008228:	4939      	ldr	r1, [pc, #228]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800822a:	4313      	orrs	r3, r2
 800822c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d167      	bne.n	8008304 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008234:	4b36      	ldr	r3, [pc, #216]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a35      	ldr	r2, [pc, #212]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800823a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800823e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008240:	f7fb f938 	bl	80034b4 <HAL_GetTick>
 8008244:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008246:	e009      	b.n	800825c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008248:	f7fb f934 	bl	80034b4 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d902      	bls.n	800825c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	73fb      	strb	r3, [r7, #15]
        break;
 800825a:	e005      	b.n	8008268 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800825c:	4b2c      	ldr	r3, [pc, #176]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1ef      	bne.n	8008248 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d14a      	bne.n	8008304 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d111      	bne.n	8008298 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008274:	4b26      	ldr	r3, [pc, #152]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800827c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6892      	ldr	r2, [r2, #8]
 8008284:	0211      	lsls	r1, r2, #8
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	68d2      	ldr	r2, [r2, #12]
 800828a:	0912      	lsrs	r2, r2, #4
 800828c:	0452      	lsls	r2, r2, #17
 800828e:	430a      	orrs	r2, r1
 8008290:	491f      	ldr	r1, [pc, #124]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008292:	4313      	orrs	r3, r2
 8008294:	614b      	str	r3, [r1, #20]
 8008296:	e011      	b.n	80082bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008298:	4b1d      	ldr	r3, [pc, #116]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80082a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6892      	ldr	r2, [r2, #8]
 80082a8:	0211      	lsls	r1, r2, #8
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6912      	ldr	r2, [r2, #16]
 80082ae:	0852      	lsrs	r2, r2, #1
 80082b0:	3a01      	subs	r2, #1
 80082b2:	0652      	lsls	r2, r2, #25
 80082b4:	430a      	orrs	r2, r1
 80082b6:	4916      	ldr	r1, [pc, #88]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80082bc:	4b14      	ldr	r3, [pc, #80]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a13      	ldr	r2, [pc, #76]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c8:	f7fb f8f4 	bl	80034b4 <HAL_GetTick>
 80082cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80082ce:	e009      	b.n	80082e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80082d0:	f7fb f8f0 	bl	80034b4 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d902      	bls.n	80082e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	73fb      	strb	r3, [r7, #15]
          break;
 80082e2:	e005      	b.n	80082f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80082e4:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0ef      	beq.n	80082d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80082f6:	4b06      	ldr	r3, [pc, #24]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082f8:	695a      	ldr	r2, [r3, #20]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	4904      	ldr	r1, [pc, #16]	; (8008310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008300:	4313      	orrs	r3, r2
 8008302:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	40021000 	.word	0x40021000

08008314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e095      	b.n	8008452 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d108      	bne.n	8008340 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008336:	d009      	beq.n	800834c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	61da      	str	r2, [r3, #28]
 800833e:	e005      	b.n	800834c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d106      	bne.n	800836c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7f9 fa0c 	bl	8001784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008382:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800838c:	d902      	bls.n	8008394 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	e002      	b.n	800839a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008398:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80083a2:	d007      	beq.n	80083b4 <HAL_SPI_Init+0xa0>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083ac:	d002      	beq.n	80083b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80083c4:	431a      	orrs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	431a      	orrs	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	431a      	orrs	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083ec:	431a      	orrs	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f6:	ea42 0103 	orr.w	r1, r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	0c1b      	lsrs	r3, r3, #16
 8008410:	f003 0204 	and.w	r2, r3, #4
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	431a      	orrs	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008422:	f003 0308 	and.w	r3, r3, #8
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008430:	ea42 0103 	orr.w	r1, r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b082      	sub	sp, #8
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e01a      	b.n	80084a2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008482:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7f9 f9c9 	bl	800181c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b088      	sub	sp, #32
 80084ae:	af02      	add	r7, sp, #8
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	603b      	str	r3, [r7, #0]
 80084b6:	4613      	mov	r3, r2
 80084b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084c6:	d112      	bne.n	80084ee <HAL_SPI_Receive+0x44>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10e      	bne.n	80084ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2204      	movs	r2, #4
 80084d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80084d8:	88fa      	ldrh	r2, [r7, #6]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	4613      	mov	r3, r2
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 f910 	bl	800870a <HAL_SPI_TransmitReceive>
 80084ea:	4603      	mov	r3, r0
 80084ec:	e109      	b.n	8008702 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_SPI_Receive+0x52>
 80084f8:	2302      	movs	r3, #2
 80084fa:	e102      	b.n	8008702 <HAL_SPI_Receive+0x258>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008504:	f7fa ffd6 	bl	80034b4 <HAL_GetTick>
 8008508:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b01      	cmp	r3, #1
 8008514:	d002      	beq.n	800851c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008516:	2302      	movs	r3, #2
 8008518:	75fb      	strb	r3, [r7, #23]
    goto error;
 800851a:	e0e9      	b.n	80086f0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <HAL_SPI_Receive+0x7e>
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800852c:	e0e0      	b.n	80086f0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2204      	movs	r2, #4
 8008532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	88fa      	ldrh	r2, [r7, #6]
 8008546:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	88fa      	ldrh	r2, [r7, #6]
 800854e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008578:	d908      	bls.n	800858c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008588:	605a      	str	r2, [r3, #4]
 800858a:	e007      	b.n	800859c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800859a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085a4:	d10f      	bne.n	80085c6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80085c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d0:	2b40      	cmp	r3, #64	; 0x40
 80085d2:	d007      	beq.n	80085e4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085ec:	d867      	bhi.n	80086be <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80085ee:	e030      	b.n	8008652 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d117      	bne.n	800862e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f103 020c 	add.w	r2, r3, #12
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	7812      	ldrb	r2, [r2, #0]
 800860c:	b2d2      	uxtb	r2, r2
 800860e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008620:	b29b      	uxth	r3, r3
 8008622:	3b01      	subs	r3, #1
 8008624:	b29a      	uxth	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800862c:	e011      	b.n	8008652 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800862e:	f7fa ff41 	bl	80034b4 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d803      	bhi.n	8008646 <HAL_SPI_Receive+0x19c>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008644:	d102      	bne.n	800864c <HAL_SPI_Receive+0x1a2>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d102      	bne.n	8008652 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008650:	e04e      	b.n	80086f0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1c8      	bne.n	80085f0 <HAL_SPI_Receive+0x146>
 800865e:	e034      	b.n	80086ca <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b01      	cmp	r3, #1
 800866c:	d115      	bne.n	800869a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008678:	b292      	uxth	r2, r2
 800867a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008680:	1c9a      	adds	r2, r3, #2
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800868c:	b29b      	uxth	r3, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	b29a      	uxth	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008698:	e011      	b.n	80086be <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800869a:	f7fa ff0b 	bl	80034b4 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d803      	bhi.n	80086b2 <HAL_SPI_Receive+0x208>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b0:	d102      	bne.n	80086b8 <HAL_SPI_Receive+0x20e>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d102      	bne.n	80086be <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80086bc:	e018      	b.n	80086f0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1ca      	bne.n	8008660 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f001 f802 	bl	80096d8 <SPI_EndRxTransaction>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2220      	movs	r2, #32
 80086de:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	75fb      	strb	r3, [r7, #23]
 80086ec:	e000      	b.n	80086f0 <HAL_SPI_Receive+0x246>
  }

error :
 80086ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008700:	7dfb      	ldrb	r3, [r7, #23]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b08a      	sub	sp, #40	; 0x28
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
 8008716:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008718:	2301      	movs	r3, #1
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008728:	2b01      	cmp	r3, #1
 800872a:	d101      	bne.n	8008730 <HAL_SPI_TransmitReceive+0x26>
 800872c:	2302      	movs	r3, #2
 800872e:	e1fb      	b.n	8008b28 <HAL_SPI_TransmitReceive+0x41e>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008738:	f7fa febc 	bl	80034b4 <HAL_GetTick>
 800873c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008744:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800874c:	887b      	ldrh	r3, [r7, #2]
 800874e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008750:	887b      	ldrh	r3, [r7, #2]
 8008752:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008754:	7efb      	ldrb	r3, [r7, #27]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d00e      	beq.n	8008778 <HAL_SPI_TransmitReceive+0x6e>
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008760:	d106      	bne.n	8008770 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <HAL_SPI_TransmitReceive+0x66>
 800876a:	7efb      	ldrb	r3, [r7, #27]
 800876c:	2b04      	cmp	r3, #4
 800876e:	d003      	beq.n	8008778 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008770:	2302      	movs	r3, #2
 8008772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008776:	e1cd      	b.n	8008b14 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <HAL_SPI_TransmitReceive+0x80>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <HAL_SPI_TransmitReceive+0x80>
 8008784:	887b      	ldrh	r3, [r7, #2]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d103      	bne.n	8008792 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008790:	e1c0      	b.n	8008b14 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b04      	cmp	r3, #4
 800879c:	d003      	beq.n	80087a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2205      	movs	r2, #5
 80087a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	887a      	ldrh	r2, [r7, #2]
 80087b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	887a      	ldrh	r2, [r7, #2]
 80087be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	887a      	ldrh	r2, [r7, #2]
 80087cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	887a      	ldrh	r2, [r7, #2]
 80087d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087e8:	d802      	bhi.n	80087f0 <HAL_SPI_TransmitReceive+0xe6>
 80087ea:	8a3b      	ldrh	r3, [r7, #16]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d908      	bls.n	8008802 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087fe:	605a      	str	r2, [r3, #4]
 8008800:	e007      	b.n	8008812 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008810:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881c:	2b40      	cmp	r3, #64	; 0x40
 800881e:	d007      	beq.n	8008830 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800882e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008838:	d97c      	bls.n	8008934 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <HAL_SPI_TransmitReceive+0x13e>
 8008842:	8a7b      	ldrh	r3, [r7, #18]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d169      	bne.n	800891c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884c:	881a      	ldrh	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008858:	1c9a      	adds	r2, r3, #2
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008862:	b29b      	uxth	r3, r3
 8008864:	3b01      	subs	r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800886c:	e056      	b.n	800891c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b02      	cmp	r3, #2
 800887a:	d11b      	bne.n	80088b4 <HAL_SPI_TransmitReceive+0x1aa>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d016      	beq.n	80088b4 <HAL_SPI_TransmitReceive+0x1aa>
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	2b01      	cmp	r3, #1
 800888a:	d113      	bne.n	80088b4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008890:	881a      	ldrh	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889c:	1c9a      	adds	r2, r3, #2
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d11c      	bne.n	80088fc <HAL_SPI_TransmitReceive+0x1f2>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d016      	beq.n	80088fc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d8:	b292      	uxth	r2, r2
 80088da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e0:	1c9a      	adds	r2, r3, #2
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	3b01      	subs	r3, #1
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088f8:	2301      	movs	r3, #1
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80088fc:	f7fa fdda 	bl	80034b4 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008908:	429a      	cmp	r2, r3
 800890a:	d807      	bhi.n	800891c <HAL_SPI_TransmitReceive+0x212>
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008912:	d003      	beq.n	800891c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800891a:	e0fb      	b.n	8008b14 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008920:	b29b      	uxth	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1a3      	bne.n	800886e <HAL_SPI_TransmitReceive+0x164>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800892c:	b29b      	uxth	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d19d      	bne.n	800886e <HAL_SPI_TransmitReceive+0x164>
 8008932:	e0df      	b.n	8008af4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <HAL_SPI_TransmitReceive+0x23a>
 800893c:	8a7b      	ldrh	r3, [r7, #18]
 800893e:	2b01      	cmp	r3, #1
 8008940:	f040 80cb 	bne.w	8008ada <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008948:	b29b      	uxth	r3, r3
 800894a:	2b01      	cmp	r3, #1
 800894c:	d912      	bls.n	8008974 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	881a      	ldrh	r2, [r3, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	1c9a      	adds	r2, r3, #2
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008968:	b29b      	uxth	r3, r3
 800896a:	3b02      	subs	r3, #2
 800896c:	b29a      	uxth	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008972:	e0b2      	b.n	8008ada <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	330c      	adds	r3, #12
 800897e:	7812      	ldrb	r2, [r2, #0]
 8008980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008990:	b29b      	uxth	r3, r3
 8008992:	3b01      	subs	r3, #1
 8008994:	b29a      	uxth	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800899a:	e09e      	b.n	8008ada <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d134      	bne.n	8008a14 <HAL_SPI_TransmitReceive+0x30a>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d02f      	beq.n	8008a14 <HAL_SPI_TransmitReceive+0x30a>
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d12c      	bne.n	8008a14 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089be:	b29b      	uxth	r3, r3
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d912      	bls.n	80089ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	881a      	ldrh	r2, [r3, #0]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	1c9a      	adds	r2, r3, #2
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089de:	b29b      	uxth	r3, r3
 80089e0:	3b02      	subs	r3, #2
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089e8:	e012      	b.n	8008a10 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	330c      	adds	r3, #12
 80089f4:	7812      	ldrb	r2, [r2, #0]
 80089f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d148      	bne.n	8008ab4 <HAL_SPI_TransmitReceive+0x3aa>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d042      	beq.n	8008ab4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d923      	bls.n	8008a82 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68da      	ldr	r2, [r3, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	b292      	uxth	r2, r2
 8008a46:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4c:	1c9a      	adds	r2, r3, #2
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	3b02      	subs	r3, #2
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d81f      	bhi.n	8008ab0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a7e:	605a      	str	r2, [r3, #4]
 8008a80:	e016      	b.n	8008ab0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f103 020c 	add.w	r2, r3, #12
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	7812      	ldrb	r2, [r2, #0]
 8008a90:	b2d2      	uxtb	r2, r2
 8008a92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a98:	1c5a      	adds	r2, r3, #1
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ab4:	f7fa fcfe 	bl	80034b4 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d803      	bhi.n	8008acc <HAL_SPI_TransmitReceive+0x3c2>
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d102      	bne.n	8008ad2 <HAL_SPI_TransmitReceive+0x3c8>
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d103      	bne.n	8008ada <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008ad8:	e01c      	b.n	8008b14 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f47f af5b 	bne.w	800899c <HAL_SPI_TransmitReceive+0x292>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f47f af54 	bne.w	800899c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008af4:	69fa      	ldr	r2, [r7, #28]
 8008af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 fe45 	bl	8009788 <SPI_EndRxTxTransaction>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d006      	beq.n	8008b12 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2220      	movs	r2, #32
 8008b0e:	661a      	str	r2, [r3, #96]	; 0x60
 8008b10:	e000      	b.n	8008b14 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008b12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3728      	adds	r7, #40	; 0x28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <HAL_SPI_Transmit_IT+0x20>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e072      	b.n	8008c36 <HAL_SPI_Transmit_IT+0x106>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <HAL_SPI_Transmit_IT+0x34>
 8008b5e:	88fb      	ldrh	r3, [r7, #6]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d102      	bne.n	8008b6a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b68:	e060      	b.n	8008c2c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d002      	beq.n	8008b7c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8008b76:	2302      	movs	r3, #2
 8008b78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b7a:	e057      	b.n	8008c2c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2203      	movs	r2, #3
 8008b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	88fa      	ldrh	r2, [r7, #6]
 8008b9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bc0:	d903      	bls.n	8008bca <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4a1f      	ldr	r2, [pc, #124]	; (8008c44 <HAL_SPI_Transmit_IT+0x114>)
 8008bc6:	651a      	str	r2, [r3, #80]	; 0x50
 8008bc8:	e002      	b.n	8008bd0 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4a1e      	ldr	r2, [pc, #120]	; (8008c48 <HAL_SPI_Transmit_IT+0x118>)
 8008bce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd8:	d10f      	bne.n	8008bfa <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8008c08:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c14:	2b40      	cmp	r3, #64	; 0x40
 8008c16:	d008      	beq.n	8008c2a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	e000      	b.n	8008c2c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8008c2a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	08009457 	.word	0x08009457
 8008c48:	08009411 	.word	0x08009411

08008c4c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4613      	mov	r3, r2
 8008c58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d110      	bne.n	8008c88 <HAL_SPI_Receive_IT+0x3c>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c6e:	d10b      	bne.n	8008c88 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2204      	movs	r2, #4
 8008c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8008c78:	88fb      	ldrh	r3, [r7, #6]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	68b9      	ldr	r1, [r7, #8]
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 f894 	bl	8008dac <HAL_SPI_TransmitReceive_IT>
 8008c84:	4603      	mov	r3, r0
 8008c86:	e089      	b.n	8008d9c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <HAL_SPI_Receive_IT+0x4a>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e082      	b.n	8008d9c <HAL_SPI_Receive_IT+0x150>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d002      	beq.n	8008cb0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8008caa:	2302      	movs	r3, #2
 8008cac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008cae:	e070      	b.n	8008d92 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <HAL_SPI_Receive_IT+0x70>
 8008cb6:	88fb      	ldrh	r3, [r7, #6]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008cc0:	e067      	b.n	8008d92 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2204      	movs	r2, #4
 8008cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	88fa      	ldrh	r2, [r7, #6]
 8008cda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	88fa      	ldrh	r2, [r7, #6]
 8008ce2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d06:	d90b      	bls.n	8008d20 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d16:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4a22      	ldr	r2, [pc, #136]	; (8008da4 <HAL_SPI_Receive_IT+0x158>)
 8008d1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d1e:	e00a      	b.n	8008d36 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d2e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4a1d      	ldr	r2, [pc, #116]	; (8008da8 <HAL_SPI_Receive_IT+0x15c>)
 8008d34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d3e:	d10f      	bne.n	8008d60 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d5e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008d6e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7a:	2b40      	cmp	r3, #64	; 0x40
 8008d7c:	d008      	beq.n	8008d90 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	e000      	b.n	8008d92 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8008d90:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3718      	adds	r7, #24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	080093c5 	.word	0x080093c5
 8008da8:	08009375 	.word	0x08009375

08008dac <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d101      	bne.n	8008dcc <HAL_SPI_TransmitReceive_IT+0x20>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e091      	b.n	8008ef0 <HAL_SPI_TransmitReceive_IT+0x144>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008dda:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008de2:	7dbb      	ldrb	r3, [r7, #22]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d00d      	beq.n	8008e04 <HAL_SPI_TransmitReceive_IT+0x58>
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dee:	d106      	bne.n	8008dfe <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <HAL_SPI_TransmitReceive_IT+0x52>
 8008df8:	7dbb      	ldrb	r3, [r7, #22]
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d002      	beq.n	8008e04 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8008dfe:	2302      	movs	r3, #2
 8008e00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e02:	e070      	b.n	8008ee6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d005      	beq.n	8008e16 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008e10:	887b      	ldrh	r3, [r7, #2]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d102      	bne.n	8008e1c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e1a:	e064      	b.n	8008ee6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	d003      	beq.n	8008e30 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2205      	movs	r2, #5
 8008e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	887a      	ldrh	r2, [r7, #2]
 8008e40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	887a      	ldrh	r2, [r7, #2]
 8008e46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	887a      	ldrh	r2, [r7, #2]
 8008e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	887a      	ldrh	r2, [r7, #2]
 8008e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e66:	d906      	bls.n	8008e76 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4a24      	ldr	r2, [pc, #144]	; (8008efc <HAL_SPI_TransmitReceive_IT+0x150>)
 8008e6c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4a23      	ldr	r2, [pc, #140]	; (8008f00 <HAL_SPI_TransmitReceive_IT+0x154>)
 8008e72:	651a      	str	r2, [r3, #80]	; 0x50
 8008e74:	e005      	b.n	8008e82 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4a22      	ldr	r2, [pc, #136]	; (8008f04 <HAL_SPI_TransmitReceive_IT+0x158>)
 8008e7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4a22      	ldr	r2, [pc, #136]	; (8008f08 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8008e80:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e8a:	d802      	bhi.n	8008e92 <HAL_SPI_TransmitReceive_IT+0xe6>
 8008e8c:	887b      	ldrh	r3, [r7, #2]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d908      	bls.n	8008ea4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ea0:	605a      	str	r2, [r3, #4]
 8008ea2:	e007      	b.n	8008eb4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008eb2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8008ec2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ece:	2b40      	cmp	r3, #64	; 0x40
 8008ed0:	d008      	beq.n	8008ee4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	e000      	b.n	8008ee6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8008ee4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	371c      	adds	r7, #28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	080092af 	.word	0x080092af
 8008f00:	08009315 	.word	0x08009315
 8008f04:	0800915f 	.word	0x0800915f
 8008f08:	0800921d 	.word	0x0800921d

08008f0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	099b      	lsrs	r3, r3, #6
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10f      	bne.n	8008f50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	099b      	lsrs	r3, r3, #6
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d004      	beq.n	8008f50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	4798      	blx	r3
    return;
 8008f4e:	e0d7      	b.n	8009100 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	085b      	lsrs	r3, r3, #1
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00a      	beq.n	8008f72 <HAL_SPI_IRQHandler+0x66>
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	09db      	lsrs	r3, r3, #7
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	4798      	blx	r3
    return;
 8008f70:	e0c6      	b.n	8009100 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	095b      	lsrs	r3, r3, #5
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10c      	bne.n	8008f98 <HAL_SPI_IRQHandler+0x8c>
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	099b      	lsrs	r3, r3, #6
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d106      	bne.n	8008f98 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	0a1b      	lsrs	r3, r3, #8
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f000 80b4 	beq.w	8009100 <HAL_SPI_IRQHandler+0x1f4>
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	095b      	lsrs	r3, r3, #5
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 80ad 	beq.w	8009100 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	099b      	lsrs	r3, r3, #6
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d023      	beq.n	8008ffa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d011      	beq.n	8008fe2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc2:	f043 0204 	orr.w	r2, r3, #4
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fca:	2300      	movs	r3, #0
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	617b      	str	r3, [r7, #20]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	e00b      	b.n	8008ffa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	613b      	str	r3, [r7, #16]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	613b      	str	r3, [r7, #16]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	613b      	str	r3, [r7, #16]
 8008ff6:	693b      	ldr	r3, [r7, #16]
        return;
 8008ff8:	e082      	b.n	8009100 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	095b      	lsrs	r3, r3, #5
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d014      	beq.n	8009030 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800900a:	f043 0201 	orr.w	r2, r3, #1
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009012:	2300      	movs	r3, #0
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	60fb      	str	r3, [r7, #12]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	0a1b      	lsrs	r3, r3, #8
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00c      	beq.n	8009056 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009040:	f043 0208 	orr.w	r2, r3, #8
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009048:	2300      	movs	r3, #0
 800904a:	60bb      	str	r3, [r7, #8]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	60bb      	str	r3, [r7, #8]
 8009054:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800905a:	2b00      	cmp	r3, #0
 800905c:	d04f      	beq.n	80090fe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800906c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	d104      	bne.n	800908a <HAL_SPI_IRQHandler+0x17e>
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	2b00      	cmp	r3, #0
 8009088:	d034      	beq.n	80090f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f022 0203 	bic.w	r2, r2, #3
 8009098:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d011      	beq.n	80090c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a6:	4a18      	ldr	r2, [pc, #96]	; (8009108 <HAL_SPI_IRQHandler+0x1fc>)
 80090a8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fa fdfa 	bl	8003ca8 <HAL_DMA_Abort_IT>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d005      	beq.n	80090c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d016      	beq.n	80090fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d2:	4a0d      	ldr	r2, [pc, #52]	; (8009108 <HAL_SPI_IRQHandler+0x1fc>)
 80090d4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fa fde4 	bl	8003ca8 <HAL_DMA_Abort_IT>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00a      	beq.n	80090fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80090f2:	e003      	b.n	80090fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f813 	bl	8009120 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80090fa:	e000      	b.n	80090fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80090fc:	bf00      	nop
    return;
 80090fe:	bf00      	nop
  }
}
 8009100:	3720      	adds	r7, #32
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	08009135 	.word	0x08009135

0800910c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009140:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f7ff ffe5 	bl	8009120 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009156:	bf00      	nop
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800916c:	b29b      	uxth	r3, r3
 800916e:	2b01      	cmp	r3, #1
 8009170:	d923      	bls.n	80091ba <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917c:	b292      	uxth	r2, r2
 800917e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009184:	1c9a      	adds	r2, r3, #2
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009190:	b29b      	uxth	r3, r3
 8009192:	3b02      	subs	r3, #2
 8009194:	b29a      	uxth	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d11f      	bne.n	80091e8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80091b6:	605a      	str	r2, [r3, #4]
 80091b8:	e016      	b.n	80091e8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f103 020c 	add.w	r2, r3, #12
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c6:	7812      	ldrb	r2, [r2, #0]
 80091c8:	b2d2      	uxtb	r2, r2
 80091ca:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d0:	1c5a      	adds	r2, r3, #1
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3b01      	subs	r3, #1
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10f      	bne.n	8009214 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009202:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009208:	b29b      	uxth	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d102      	bne.n	8009214 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fb00 	bl	8009814 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009214:	bf00      	nop
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009228:	b29b      	uxth	r3, r3
 800922a:	2b01      	cmp	r3, #1
 800922c:	d912      	bls.n	8009254 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009232:	881a      	ldrh	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923e:	1c9a      	adds	r2, r3, #2
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b02      	subs	r3, #2
 800924c:	b29a      	uxth	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009252:	e012      	b.n	800927a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	330c      	adds	r3, #12
 800925e:	7812      	ldrb	r2, [r2, #0]
 8009260:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009270:	b29b      	uxth	r3, r3
 8009272:	3b01      	subs	r3, #1
 8009274:	b29a      	uxth	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800927e:	b29b      	uxth	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d110      	bne.n	80092a6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009292:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800929a:	b29b      	uxth	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fab7 	bl	8009814 <SPI_CloseRxTx_ISR>
    }
  }
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68da      	ldr	r2, [r3, #12]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c0:	b292      	uxth	r2, r2
 80092c2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c8:	1c9a      	adds	r2, r3, #2
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	b29a      	uxth	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10f      	bne.n	800930c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009300:	b29b      	uxth	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d102      	bne.n	800930c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fa84 	bl	8009814 <SPI_CloseRxTx_ISR>
    }
  }
}
 800930c:	bf00      	nop
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009320:	881a      	ldrh	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932c:	1c9a      	adds	r2, r3, #2
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009336:	b29b      	uxth	r3, r3
 8009338:	3b01      	subs	r3, #1
 800933a:	b29a      	uxth	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009344:	b29b      	uxth	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d110      	bne.n	800936c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009358:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009360:	b29b      	uxth	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d102      	bne.n	800936c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa54 	bl	8009814 <SPI_CloseRxTx_ISR>
    }
  }
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f103 020c 	add.w	r2, r3, #12
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009388:	7812      	ldrb	r2, [r2, #0]
 800938a:	b2d2      	uxtb	r2, r2
 800938c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800939e:	b29b      	uxth	r3, r3
 80093a0:	3b01      	subs	r3, #1
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d102      	bne.n	80093bc <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fa6e 	bl	8009898 <SPI_CloseRx_ISR>
  }
}
 80093bc:	bf00      	nop
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d6:	b292      	uxth	r2, r2
 80093d8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	1c9a      	adds	r2, r3, #2
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	3b01      	subs	r3, #1
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d102      	bne.n	8009408 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fa48 	bl	8009898 <SPI_CloseRx_ISR>
  }
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	330c      	adds	r3, #12
 8009422:	7812      	ldrb	r2, [r2, #0]
 8009424:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009442:	b29b      	uxth	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fa55 	bl	80098f8 <SPI_CloseTx_ISR>
  }
}
 800944e:	bf00      	nop
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009462:	881a      	ldrh	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	1c9a      	adds	r2, r3, #2
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009478:	b29b      	uxth	r3, r3
 800947a:	3b01      	subs	r3, #1
 800947c:	b29a      	uxth	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009486:	b29b      	uxth	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d102      	bne.n	8009492 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fa33 	bl	80098f8 <SPI_CloseTx_ISR>
  }
}
 8009492:	bf00      	nop
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	4613      	mov	r3, r2
 80094aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80094ac:	f7fa f802 	bl	80034b4 <HAL_GetTick>
 80094b0:	4602      	mov	r2, r0
 80094b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b4:	1a9b      	subs	r3, r3, r2
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	4413      	add	r3, r2
 80094ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80094bc:	f7f9 fffa 	bl	80034b4 <HAL_GetTick>
 80094c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80094c2:	4b39      	ldr	r3, [pc, #228]	; (80095a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	015b      	lsls	r3, r3, #5
 80094c8:	0d1b      	lsrs	r3, r3, #20
 80094ca:	69fa      	ldr	r2, [r7, #28]
 80094cc:	fb02 f303 	mul.w	r3, r2, r3
 80094d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094d2:	e054      	b.n	800957e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094da:	d050      	beq.n	800957e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094dc:	f7f9 ffea 	bl	80034b4 <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	69fa      	ldr	r2, [r7, #28]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d902      	bls.n	80094f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d13d      	bne.n	800956e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800950a:	d111      	bne.n	8009530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009514:	d004      	beq.n	8009520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800951e:	d107      	bne.n	8009530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800952e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009538:	d10f      	bne.n	800955a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e017      	b.n	800959e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009574:	2300      	movs	r3, #0
 8009576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	3b01      	subs	r3, #1
 800957c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689a      	ldr	r2, [r3, #8]
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	4013      	ands	r3, r2
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	429a      	cmp	r2, r3
 800958c:	bf0c      	ite	eq
 800958e:	2301      	moveq	r3, #1
 8009590:	2300      	movne	r3, #0
 8009592:	b2db      	uxtb	r3, r3
 8009594:	461a      	mov	r2, r3
 8009596:	79fb      	ldrb	r3, [r7, #7]
 8009598:	429a      	cmp	r2, r3
 800959a:	d19b      	bne.n	80094d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3720      	adds	r7, #32
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20000008 	.word	0x20000008

080095ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08a      	sub	sp, #40	; 0x28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80095be:	f7f9 ff79 	bl	80034b4 <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	1a9b      	subs	r3, r3, r2
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	4413      	add	r3, r2
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80095ce:	f7f9 ff71 	bl	80034b4 <HAL_GetTick>
 80095d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	330c      	adds	r3, #12
 80095da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80095dc:	4b3d      	ldr	r3, [pc, #244]	; (80096d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	4613      	mov	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	00da      	lsls	r2, r3, #3
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	0d1b      	lsrs	r3, r3, #20
 80095ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ee:	fb02 f303 	mul.w	r3, r2, r3
 80095f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80095f4:	e060      	b.n	80096b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80095fc:	d107      	bne.n	800960e <SPI_WaitFifoStateUntilTimeout+0x62>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d104      	bne.n	800960e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800960c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009614:	d050      	beq.n	80096b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009616:	f7f9 ff4d 	bl	80034b4 <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009622:	429a      	cmp	r2, r3
 8009624:	d902      	bls.n	800962c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	2b00      	cmp	r3, #0
 800962a:	d13d      	bne.n	80096a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800963a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009644:	d111      	bne.n	800966a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800964e:	d004      	beq.n	800965a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009658:	d107      	bne.n	800966a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009672:	d10f      	bne.n	8009694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e010      	b.n	80096ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	3b01      	subs	r3, #1
 80096b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689a      	ldr	r2, [r3, #8]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	4013      	ands	r3, r2
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d196      	bne.n	80095f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3728      	adds	r7, #40	; 0x28
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20000008 	.word	0x20000008

080096d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af02      	add	r7, sp, #8
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096ec:	d111      	bne.n	8009712 <SPI_EndRxTransaction+0x3a>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096f6:	d004      	beq.n	8009702 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009700:	d107      	bne.n	8009712 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009710:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2200      	movs	r2, #0
 800971a:	2180      	movs	r1, #128	; 0x80
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f7ff febd 	bl	800949c <SPI_WaitFlagStateUntilTimeout>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d007      	beq.n	8009738 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972c:	f043 0220 	orr.w	r2, r3, #32
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	e023      	b.n	8009780 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009740:	d11d      	bne.n	800977e <SPI_EndRxTransaction+0xa6>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800974a:	d004      	beq.n	8009756 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009754:	d113      	bne.n	800977e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2200      	movs	r2, #0
 800975e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7ff ff22 	bl	80095ac <SPI_WaitFifoStateUntilTimeout>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d007      	beq.n	800977e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009772:	f043 0220 	orr.w	r2, r3, #32
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e000      	b.n	8009780 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af02      	add	r7, sp, #8
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2200      	movs	r2, #0
 800979c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f7ff ff03 	bl	80095ac <SPI_WaitFifoStateUntilTimeout>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d007      	beq.n	80097bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b0:	f043 0220 	orr.w	r2, r3, #32
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e027      	b.n	800980c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2200      	movs	r2, #0
 80097c4:	2180      	movs	r1, #128	; 0x80
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff fe68 	bl	800949c <SPI_WaitFlagStateUntilTimeout>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d007      	beq.n	80097e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d6:	f043 0220 	orr.w	r2, r3, #32
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e014      	b.n	800980c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f7ff fedc 	bl	80095ac <SPI_WaitFifoStateUntilTimeout>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d007      	beq.n	800980a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097fe:	f043 0220 	orr.w	r2, r3, #32
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	e000      	b.n	800980c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800981c:	f7f9 fe4a 	bl	80034b4 <HAL_GetTick>
 8009820:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 0220 	bic.w	r2, r2, #32
 8009830:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	2164      	movs	r1, #100	; 0x64
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff ffa6 	bl	8009788 <SPI_EndRxTxTransaction>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d005      	beq.n	800984e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009846:	f043 0220 	orr.w	r2, r3, #32
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009852:	2b00      	cmp	r3, #0
 8009854:	d115      	bne.n	8009882 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b04      	cmp	r3, #4
 8009860:	d107      	bne.n	8009872 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f006 ff06 	bl	801067c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009870:	e00e      	b.n	8009890 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7ff fc46 	bl	800910c <HAL_SPI_TxRxCpltCallback>
}
 8009880:	e006      	b.n	8009890 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7ff fc48 	bl	8009120 <HAL_SPI_ErrorCallback>
}
 8009890:	bf00      	nop
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80098ae:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80098b0:	f7f9 fe00 	bl	80034b4 <HAL_GetTick>
 80098b4:	4603      	mov	r3, r0
 80098b6:	461a      	mov	r2, r3
 80098b8:	2164      	movs	r1, #100	; 0x64
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff ff0c 	bl	80096d8 <SPI_EndRxTransaction>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d005      	beq.n	80098d2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ca:	f043 0220 	orr.w	r2, r3, #32
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d103      	bne.n	80098ea <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f006 feca 	bl	801067c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80098e8:	e002      	b.n	80098f0 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff fc18 	bl	8009120 <HAL_SPI_ErrorCallback>
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009900:	f7f9 fdd8 	bl	80034b4 <HAL_GetTick>
 8009904:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009914:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	2164      	movs	r1, #100	; 0x64
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7ff ff34 	bl	8009788 <SPI_EndRxTxTransaction>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800992a:	f043 0220 	orr.w	r2, r3, #32
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10a      	bne.n	8009950 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800993a:	2300      	movs	r3, #0
 800993c:	60bb      	str	r3, [r7, #8]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	60bb      	str	r3, [r7, #8]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	60bb      	str	r3, [r7, #8]
 800994e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff fbdd 	bl	8009120 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009966:	e002      	b.n	800996e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f006 fe9f 	bl	80106ac <HAL_SPI_TxCpltCallback>
}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e049      	b.n	8009a1c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d106      	bne.n	80099a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f841 	bl	8009a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3304      	adds	r3, #4
 80099b2:	4619      	mov	r1, r3
 80099b4:	4610      	mov	r0, r2
 80099b6:	f000 f9f7 	bl	8009da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d001      	beq.n	8009a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e04f      	b.n	8009af0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68da      	ldr	r2, [r3, #12]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0201 	orr.w	r2, r2, #1
 8009a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a23      	ldr	r2, [pc, #140]	; (8009afc <HAL_TIM_Base_Start_IT+0xc4>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d01d      	beq.n	8009aae <HAL_TIM_Base_Start_IT+0x76>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a7a:	d018      	beq.n	8009aae <HAL_TIM_Base_Start_IT+0x76>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a1f      	ldr	r2, [pc, #124]	; (8009b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d013      	beq.n	8009aae <HAL_TIM_Base_Start_IT+0x76>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a1e      	ldr	r2, [pc, #120]	; (8009b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d00e      	beq.n	8009aae <HAL_TIM_Base_Start_IT+0x76>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a1c      	ldr	r2, [pc, #112]	; (8009b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d009      	beq.n	8009aae <HAL_TIM_Base_Start_IT+0x76>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a1b      	ldr	r2, [pc, #108]	; (8009b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d004      	beq.n	8009aae <HAL_TIM_Base_Start_IT+0x76>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a19      	ldr	r2, [pc, #100]	; (8009b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d115      	bne.n	8009ada <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689a      	ldr	r2, [r3, #8]
 8009ab4:	4b17      	ldr	r3, [pc, #92]	; (8009b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2b06      	cmp	r3, #6
 8009abe:	d015      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xb4>
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ac6:	d011      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0201 	orr.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ad8:	e008      	b.n	8009aec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f042 0201 	orr.w	r2, r2, #1
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	e000      	b.n	8009aee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	40012c00 	.word	0x40012c00
 8009b00:	40000400 	.word	0x40000400
 8009b04:	40000800 	.word	0x40000800
 8009b08:	40000c00 	.word	0x40000c00
 8009b0c:	40013400 	.word	0x40013400
 8009b10:	40014000 	.word	0x40014000
 8009b14:	00010007 	.word	0x00010007

08009b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	f003 0302 	and.w	r3, r3, #2
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d122      	bne.n	8009b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d11b      	bne.n	8009b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f06f 0202 	mvn.w	r2, #2
 8009b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f905 	bl	8009d6a <HAL_TIM_IC_CaptureCallback>
 8009b60:	e005      	b.n	8009b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f8f7 	bl	8009d56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f908 	bl	8009d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d122      	bne.n	8009bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b04      	cmp	r3, #4
 8009b8e:	d11b      	bne.n	8009bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f06f 0204 	mvn.w	r2, #4
 8009b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f8db 	bl	8009d6a <HAL_TIM_IC_CaptureCallback>
 8009bb4:	e005      	b.n	8009bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f8cd 	bl	8009d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f8de 	bl	8009d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	f003 0308 	and.w	r3, r3, #8
 8009bd2:	2b08      	cmp	r3, #8
 8009bd4:	d122      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d11b      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f06f 0208 	mvn.w	r2, #8
 8009bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2204      	movs	r2, #4
 8009bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	f003 0303 	and.w	r3, r3, #3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f8b1 	bl	8009d6a <HAL_TIM_IC_CaptureCallback>
 8009c08:	e005      	b.n	8009c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f8a3 	bl	8009d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f8b4 	bl	8009d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	f003 0310 	and.w	r3, r3, #16
 8009c26:	2b10      	cmp	r3, #16
 8009c28:	d122      	bne.n	8009c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f003 0310 	and.w	r3, r3, #16
 8009c34:	2b10      	cmp	r3, #16
 8009c36:	d11b      	bne.n	8009c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f06f 0210 	mvn.w	r2, #16
 8009c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2208      	movs	r2, #8
 8009c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f887 	bl	8009d6a <HAL_TIM_IC_CaptureCallback>
 8009c5c:	e005      	b.n	8009c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f879 	bl	8009d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f88a 	bl	8009d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d10e      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d107      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f06f 0201 	mvn.w	r2, #1
 8009c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7f7 fb6c 	bl	8001374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca6:	2b80      	cmp	r3, #128	; 0x80
 8009ca8:	d10e      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb4:	2b80      	cmp	r3, #128	; 0x80
 8009cb6:	d107      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f914 	bl	8009ef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cd6:	d10e      	bne.n	8009cf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ce2:	2b80      	cmp	r3, #128	; 0x80
 8009ce4:	d107      	bne.n	8009cf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f907 	bl	8009f04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d00:	2b40      	cmp	r3, #64	; 0x40
 8009d02:	d10e      	bne.n	8009d22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d0e:	2b40      	cmp	r3, #64	; 0x40
 8009d10:	d107      	bne.n	8009d22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f838 	bl	8009d92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	f003 0320 	and.w	r3, r3, #32
 8009d2c:	2b20      	cmp	r3, #32
 8009d2e:	d10e      	bne.n	8009d4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	f003 0320 	and.w	r3, r3, #32
 8009d3a:	2b20      	cmp	r3, #32
 8009d3c:	d107      	bne.n	8009d4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f06f 0220 	mvn.w	r2, #32
 8009d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f8c7 	bl	8009edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b083      	sub	sp, #12
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d5e:	bf00      	nop
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d72:	bf00      	nop
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b083      	sub	sp, #12
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d86:	bf00      	nop
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b083      	sub	sp, #12
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d9a:	bf00      	nop
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
	...

08009da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a40      	ldr	r2, [pc, #256]	; (8009ebc <TIM_Base_SetConfig+0x114>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d013      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc6:	d00f      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a3d      	ldr	r2, [pc, #244]	; (8009ec0 <TIM_Base_SetConfig+0x118>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d00b      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a3c      	ldr	r2, [pc, #240]	; (8009ec4 <TIM_Base_SetConfig+0x11c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d007      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a3b      	ldr	r2, [pc, #236]	; (8009ec8 <TIM_Base_SetConfig+0x120>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d003      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a3a      	ldr	r2, [pc, #232]	; (8009ecc <TIM_Base_SetConfig+0x124>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d108      	bne.n	8009dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a2f      	ldr	r2, [pc, #188]	; (8009ebc <TIM_Base_SetConfig+0x114>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d01f      	beq.n	8009e42 <TIM_Base_SetConfig+0x9a>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e08:	d01b      	beq.n	8009e42 <TIM_Base_SetConfig+0x9a>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a2c      	ldr	r2, [pc, #176]	; (8009ec0 <TIM_Base_SetConfig+0x118>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d017      	beq.n	8009e42 <TIM_Base_SetConfig+0x9a>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a2b      	ldr	r2, [pc, #172]	; (8009ec4 <TIM_Base_SetConfig+0x11c>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d013      	beq.n	8009e42 <TIM_Base_SetConfig+0x9a>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a2a      	ldr	r2, [pc, #168]	; (8009ec8 <TIM_Base_SetConfig+0x120>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d00f      	beq.n	8009e42 <TIM_Base_SetConfig+0x9a>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a29      	ldr	r2, [pc, #164]	; (8009ecc <TIM_Base_SetConfig+0x124>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d00b      	beq.n	8009e42 <TIM_Base_SetConfig+0x9a>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a28      	ldr	r2, [pc, #160]	; (8009ed0 <TIM_Base_SetConfig+0x128>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d007      	beq.n	8009e42 <TIM_Base_SetConfig+0x9a>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a27      	ldr	r2, [pc, #156]	; (8009ed4 <TIM_Base_SetConfig+0x12c>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d003      	beq.n	8009e42 <TIM_Base_SetConfig+0x9a>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a26      	ldr	r2, [pc, #152]	; (8009ed8 <TIM_Base_SetConfig+0x130>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d108      	bne.n	8009e54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	689a      	ldr	r2, [r3, #8]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a10      	ldr	r2, [pc, #64]	; (8009ebc <TIM_Base_SetConfig+0x114>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d00f      	beq.n	8009ea0 <TIM_Base_SetConfig+0xf8>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a12      	ldr	r2, [pc, #72]	; (8009ecc <TIM_Base_SetConfig+0x124>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d00b      	beq.n	8009ea0 <TIM_Base_SetConfig+0xf8>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a11      	ldr	r2, [pc, #68]	; (8009ed0 <TIM_Base_SetConfig+0x128>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d007      	beq.n	8009ea0 <TIM_Base_SetConfig+0xf8>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a10      	ldr	r2, [pc, #64]	; (8009ed4 <TIM_Base_SetConfig+0x12c>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d003      	beq.n	8009ea0 <TIM_Base_SetConfig+0xf8>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a0f      	ldr	r2, [pc, #60]	; (8009ed8 <TIM_Base_SetConfig+0x130>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d103      	bne.n	8009ea8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	691a      	ldr	r2, [r3, #16]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	615a      	str	r2, [r3, #20]
}
 8009eae:	bf00      	nop
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	40012c00 	.word	0x40012c00
 8009ec0:	40000400 	.word	0x40000400
 8009ec4:	40000800 	.word	0x40000800
 8009ec8:	40000c00 	.word	0x40000c00
 8009ecc:	40013400 	.word	0x40013400
 8009ed0:	40014000 	.word	0x40014000
 8009ed4:	40014400 	.word	0x40014400
 8009ed8:	40014800 	.word	0x40014800

08009edc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e040      	b.n	8009fac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d106      	bne.n	8009f40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7f7 fc90 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2224      	movs	r2, #36	; 0x24
 8009f44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f022 0201 	bic.w	r2, r2, #1
 8009f54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f82c 	bl	8009fb4 <UART_SetConfig>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d101      	bne.n	8009f66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e022      	b.n	8009fac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d002      	beq.n	8009f74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fad8 	bl	800a524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	689a      	ldr	r2, [r3, #8]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f042 0201 	orr.w	r2, r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fb5f 	bl	800a668 <UART_CheckIdleState>
 8009faa:	4603      	mov	r3, r0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fb8:	b08a      	sub	sp, #40	; 0x28
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	69db      	ldr	r3, [r3, #28]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	4ba4      	ldr	r3, [pc, #656]	; (800a274 <UART_SetConfig+0x2c0>)
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	6812      	ldr	r2, [r2, #0]
 8009fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fec:	430b      	orrs	r3, r1
 8009fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a99      	ldr	r2, [pc, #612]	; (800a278 <UART_SetConfig+0x2c4>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d004      	beq.n	800a020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a01c:	4313      	orrs	r3, r2
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a030:	430a      	orrs	r2, r1
 800a032:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a90      	ldr	r2, [pc, #576]	; (800a27c <UART_SetConfig+0x2c8>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d126      	bne.n	800a08c <UART_SetConfig+0xd8>
 800a03e:	4b90      	ldr	r3, [pc, #576]	; (800a280 <UART_SetConfig+0x2cc>)
 800a040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a044:	f003 0303 	and.w	r3, r3, #3
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d81b      	bhi.n	800a084 <UART_SetConfig+0xd0>
 800a04c:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <UART_SetConfig+0xa0>)
 800a04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a052:	bf00      	nop
 800a054:	0800a065 	.word	0x0800a065
 800a058:	0800a075 	.word	0x0800a075
 800a05c:	0800a06d 	.word	0x0800a06d
 800a060:	0800a07d 	.word	0x0800a07d
 800a064:	2301      	movs	r3, #1
 800a066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a06a:	e116      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a06c:	2302      	movs	r3, #2
 800a06e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a072:	e112      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a074:	2304      	movs	r3, #4
 800a076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a07a:	e10e      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a07c:	2308      	movs	r3, #8
 800a07e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a082:	e10a      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a084:	2310      	movs	r3, #16
 800a086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a08a:	e106      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a7c      	ldr	r2, [pc, #496]	; (800a284 <UART_SetConfig+0x2d0>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d138      	bne.n	800a108 <UART_SetConfig+0x154>
 800a096:	4b7a      	ldr	r3, [pc, #488]	; (800a280 <UART_SetConfig+0x2cc>)
 800a098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09c:	f003 030c 	and.w	r3, r3, #12
 800a0a0:	2b0c      	cmp	r3, #12
 800a0a2:	d82d      	bhi.n	800a100 <UART_SetConfig+0x14c>
 800a0a4:	a201      	add	r2, pc, #4	; (adr r2, 800a0ac <UART_SetConfig+0xf8>)
 800a0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0aa:	bf00      	nop
 800a0ac:	0800a0e1 	.word	0x0800a0e1
 800a0b0:	0800a101 	.word	0x0800a101
 800a0b4:	0800a101 	.word	0x0800a101
 800a0b8:	0800a101 	.word	0x0800a101
 800a0bc:	0800a0f1 	.word	0x0800a0f1
 800a0c0:	0800a101 	.word	0x0800a101
 800a0c4:	0800a101 	.word	0x0800a101
 800a0c8:	0800a101 	.word	0x0800a101
 800a0cc:	0800a0e9 	.word	0x0800a0e9
 800a0d0:	0800a101 	.word	0x0800a101
 800a0d4:	0800a101 	.word	0x0800a101
 800a0d8:	0800a101 	.word	0x0800a101
 800a0dc:	0800a0f9 	.word	0x0800a0f9
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0e6:	e0d8      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0ee:	e0d4      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0f6:	e0d0      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a0f8:	2308      	movs	r3, #8
 800a0fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0fe:	e0cc      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a100:	2310      	movs	r3, #16
 800a102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a106:	e0c8      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a5e      	ldr	r2, [pc, #376]	; (800a288 <UART_SetConfig+0x2d4>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d125      	bne.n	800a15e <UART_SetConfig+0x1aa>
 800a112:	4b5b      	ldr	r3, [pc, #364]	; (800a280 <UART_SetConfig+0x2cc>)
 800a114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a11c:	2b30      	cmp	r3, #48	; 0x30
 800a11e:	d016      	beq.n	800a14e <UART_SetConfig+0x19a>
 800a120:	2b30      	cmp	r3, #48	; 0x30
 800a122:	d818      	bhi.n	800a156 <UART_SetConfig+0x1a2>
 800a124:	2b20      	cmp	r3, #32
 800a126:	d00a      	beq.n	800a13e <UART_SetConfig+0x18a>
 800a128:	2b20      	cmp	r3, #32
 800a12a:	d814      	bhi.n	800a156 <UART_SetConfig+0x1a2>
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <UART_SetConfig+0x182>
 800a130:	2b10      	cmp	r3, #16
 800a132:	d008      	beq.n	800a146 <UART_SetConfig+0x192>
 800a134:	e00f      	b.n	800a156 <UART_SetConfig+0x1a2>
 800a136:	2300      	movs	r3, #0
 800a138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a13c:	e0ad      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a13e:	2302      	movs	r3, #2
 800a140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a144:	e0a9      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a146:	2304      	movs	r3, #4
 800a148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a14c:	e0a5      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a14e:	2308      	movs	r3, #8
 800a150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a154:	e0a1      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a156:	2310      	movs	r3, #16
 800a158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a15c:	e09d      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a4a      	ldr	r2, [pc, #296]	; (800a28c <UART_SetConfig+0x2d8>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d125      	bne.n	800a1b4 <UART_SetConfig+0x200>
 800a168:	4b45      	ldr	r3, [pc, #276]	; (800a280 <UART_SetConfig+0x2cc>)
 800a16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a172:	2bc0      	cmp	r3, #192	; 0xc0
 800a174:	d016      	beq.n	800a1a4 <UART_SetConfig+0x1f0>
 800a176:	2bc0      	cmp	r3, #192	; 0xc0
 800a178:	d818      	bhi.n	800a1ac <UART_SetConfig+0x1f8>
 800a17a:	2b80      	cmp	r3, #128	; 0x80
 800a17c:	d00a      	beq.n	800a194 <UART_SetConfig+0x1e0>
 800a17e:	2b80      	cmp	r3, #128	; 0x80
 800a180:	d814      	bhi.n	800a1ac <UART_SetConfig+0x1f8>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <UART_SetConfig+0x1d8>
 800a186:	2b40      	cmp	r3, #64	; 0x40
 800a188:	d008      	beq.n	800a19c <UART_SetConfig+0x1e8>
 800a18a:	e00f      	b.n	800a1ac <UART_SetConfig+0x1f8>
 800a18c:	2300      	movs	r3, #0
 800a18e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a192:	e082      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a194:	2302      	movs	r3, #2
 800a196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a19a:	e07e      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a19c:	2304      	movs	r3, #4
 800a19e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1a2:	e07a      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a1a4:	2308      	movs	r3, #8
 800a1a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1aa:	e076      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a1ac:	2310      	movs	r3, #16
 800a1ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1b2:	e072      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a35      	ldr	r2, [pc, #212]	; (800a290 <UART_SetConfig+0x2dc>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d12a      	bne.n	800a214 <UART_SetConfig+0x260>
 800a1be:	4b30      	ldr	r3, [pc, #192]	; (800a280 <UART_SetConfig+0x2cc>)
 800a1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1cc:	d01a      	beq.n	800a204 <UART_SetConfig+0x250>
 800a1ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1d2:	d81b      	bhi.n	800a20c <UART_SetConfig+0x258>
 800a1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d8:	d00c      	beq.n	800a1f4 <UART_SetConfig+0x240>
 800a1da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1de:	d815      	bhi.n	800a20c <UART_SetConfig+0x258>
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d003      	beq.n	800a1ec <UART_SetConfig+0x238>
 800a1e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1e8:	d008      	beq.n	800a1fc <UART_SetConfig+0x248>
 800a1ea:	e00f      	b.n	800a20c <UART_SetConfig+0x258>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1f2:	e052      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1fa:	e04e      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a1fc:	2304      	movs	r3, #4
 800a1fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a202:	e04a      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a204:	2308      	movs	r3, #8
 800a206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a20a:	e046      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a20c:	2310      	movs	r3, #16
 800a20e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a212:	e042      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a17      	ldr	r2, [pc, #92]	; (800a278 <UART_SetConfig+0x2c4>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d13a      	bne.n	800a294 <UART_SetConfig+0x2e0>
 800a21e:	4b18      	ldr	r3, [pc, #96]	; (800a280 <UART_SetConfig+0x2cc>)
 800a220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a228:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a22c:	d01a      	beq.n	800a264 <UART_SetConfig+0x2b0>
 800a22e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a232:	d81b      	bhi.n	800a26c <UART_SetConfig+0x2b8>
 800a234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a238:	d00c      	beq.n	800a254 <UART_SetConfig+0x2a0>
 800a23a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a23e:	d815      	bhi.n	800a26c <UART_SetConfig+0x2b8>
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <UART_SetConfig+0x298>
 800a244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a248:	d008      	beq.n	800a25c <UART_SetConfig+0x2a8>
 800a24a:	e00f      	b.n	800a26c <UART_SetConfig+0x2b8>
 800a24c:	2300      	movs	r3, #0
 800a24e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a252:	e022      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a254:	2302      	movs	r3, #2
 800a256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a25a:	e01e      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a25c:	2304      	movs	r3, #4
 800a25e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a262:	e01a      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a264:	2308      	movs	r3, #8
 800a266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a26a:	e016      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a26c:	2310      	movs	r3, #16
 800a26e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a272:	e012      	b.n	800a29a <UART_SetConfig+0x2e6>
 800a274:	efff69f3 	.word	0xefff69f3
 800a278:	40008000 	.word	0x40008000
 800a27c:	40013800 	.word	0x40013800
 800a280:	40021000 	.word	0x40021000
 800a284:	40004400 	.word	0x40004400
 800a288:	40004800 	.word	0x40004800
 800a28c:	40004c00 	.word	0x40004c00
 800a290:	40005000 	.word	0x40005000
 800a294:	2310      	movs	r3, #16
 800a296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a9f      	ldr	r2, [pc, #636]	; (800a51c <UART_SetConfig+0x568>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d17a      	bne.n	800a39a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2a8:	2b08      	cmp	r3, #8
 800a2aa:	d824      	bhi.n	800a2f6 <UART_SetConfig+0x342>
 800a2ac:	a201      	add	r2, pc, #4	; (adr r2, 800a2b4 <UART_SetConfig+0x300>)
 800a2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b2:	bf00      	nop
 800a2b4:	0800a2d9 	.word	0x0800a2d9
 800a2b8:	0800a2f7 	.word	0x0800a2f7
 800a2bc:	0800a2e1 	.word	0x0800a2e1
 800a2c0:	0800a2f7 	.word	0x0800a2f7
 800a2c4:	0800a2e7 	.word	0x0800a2e7
 800a2c8:	0800a2f7 	.word	0x0800a2f7
 800a2cc:	0800a2f7 	.word	0x0800a2f7
 800a2d0:	0800a2f7 	.word	0x0800a2f7
 800a2d4:	0800a2ef 	.word	0x0800a2ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2d8:	f7fd fa92 	bl	8007800 <HAL_RCC_GetPCLK1Freq>
 800a2dc:	61f8      	str	r0, [r7, #28]
        break;
 800a2de:	e010      	b.n	800a302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2e0:	4b8f      	ldr	r3, [pc, #572]	; (800a520 <UART_SetConfig+0x56c>)
 800a2e2:	61fb      	str	r3, [r7, #28]
        break;
 800a2e4:	e00d      	b.n	800a302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2e6:	f7fd f9f3 	bl	80076d0 <HAL_RCC_GetSysClockFreq>
 800a2ea:	61f8      	str	r0, [r7, #28]
        break;
 800a2ec:	e009      	b.n	800a302 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2f2:	61fb      	str	r3, [r7, #28]
        break;
 800a2f4:	e005      	b.n	800a302 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a300:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 80fb 	beq.w	800a500 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	4613      	mov	r3, r2
 800a310:	005b      	lsls	r3, r3, #1
 800a312:	4413      	add	r3, r2
 800a314:	69fa      	ldr	r2, [r7, #28]
 800a316:	429a      	cmp	r2, r3
 800a318:	d305      	bcc.n	800a326 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a320:	69fa      	ldr	r2, [r7, #28]
 800a322:	429a      	cmp	r2, r3
 800a324:	d903      	bls.n	800a32e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a32c:	e0e8      	b.n	800a500 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	2200      	movs	r2, #0
 800a332:	461c      	mov	r4, r3
 800a334:	4615      	mov	r5, r2
 800a336:	f04f 0200 	mov.w	r2, #0
 800a33a:	f04f 0300 	mov.w	r3, #0
 800a33e:	022b      	lsls	r3, r5, #8
 800a340:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a344:	0222      	lsls	r2, r4, #8
 800a346:	68f9      	ldr	r1, [r7, #12]
 800a348:	6849      	ldr	r1, [r1, #4]
 800a34a:	0849      	lsrs	r1, r1, #1
 800a34c:	2000      	movs	r0, #0
 800a34e:	4688      	mov	r8, r1
 800a350:	4681      	mov	r9, r0
 800a352:	eb12 0a08 	adds.w	sl, r2, r8
 800a356:	eb43 0b09 	adc.w	fp, r3, r9
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	603b      	str	r3, [r7, #0]
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a368:	4650      	mov	r0, sl
 800a36a:	4659      	mov	r1, fp
 800a36c:	f7f5 ffd0 	bl	8000310 <__aeabi_uldivmod>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	4613      	mov	r3, r2
 800a376:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a37e:	d308      	bcc.n	800a392 <UART_SetConfig+0x3de>
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a386:	d204      	bcs.n	800a392 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	69ba      	ldr	r2, [r7, #24]
 800a38e:	60da      	str	r2, [r3, #12]
 800a390:	e0b6      	b.n	800a500 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a398:	e0b2      	b.n	800a500 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3a2:	d15e      	bne.n	800a462 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a3a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3a8:	2b08      	cmp	r3, #8
 800a3aa:	d828      	bhi.n	800a3fe <UART_SetConfig+0x44a>
 800a3ac:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <UART_SetConfig+0x400>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3d9 	.word	0x0800a3d9
 800a3b8:	0800a3e1 	.word	0x0800a3e1
 800a3bc:	0800a3e9 	.word	0x0800a3e9
 800a3c0:	0800a3ff 	.word	0x0800a3ff
 800a3c4:	0800a3ef 	.word	0x0800a3ef
 800a3c8:	0800a3ff 	.word	0x0800a3ff
 800a3cc:	0800a3ff 	.word	0x0800a3ff
 800a3d0:	0800a3ff 	.word	0x0800a3ff
 800a3d4:	0800a3f7 	.word	0x0800a3f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3d8:	f7fd fa12 	bl	8007800 <HAL_RCC_GetPCLK1Freq>
 800a3dc:	61f8      	str	r0, [r7, #28]
        break;
 800a3de:	e014      	b.n	800a40a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3e0:	f7fd fa24 	bl	800782c <HAL_RCC_GetPCLK2Freq>
 800a3e4:	61f8      	str	r0, [r7, #28]
        break;
 800a3e6:	e010      	b.n	800a40a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3e8:	4b4d      	ldr	r3, [pc, #308]	; (800a520 <UART_SetConfig+0x56c>)
 800a3ea:	61fb      	str	r3, [r7, #28]
        break;
 800a3ec:	e00d      	b.n	800a40a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ee:	f7fd f96f 	bl	80076d0 <HAL_RCC_GetSysClockFreq>
 800a3f2:	61f8      	str	r0, [r7, #28]
        break;
 800a3f4:	e009      	b.n	800a40a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3fa:	61fb      	str	r3, [r7, #28]
        break;
 800a3fc:	e005      	b.n	800a40a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d077      	beq.n	800a500 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	005a      	lsls	r2, r3, #1
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	085b      	lsrs	r3, r3, #1
 800a41a:	441a      	add	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	fbb2 f3f3 	udiv	r3, r2, r3
 800a424:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	2b0f      	cmp	r3, #15
 800a42a:	d916      	bls.n	800a45a <UART_SetConfig+0x4a6>
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a432:	d212      	bcs.n	800a45a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	b29b      	uxth	r3, r3
 800a438:	f023 030f 	bic.w	r3, r3, #15
 800a43c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	085b      	lsrs	r3, r3, #1
 800a442:	b29b      	uxth	r3, r3
 800a444:	f003 0307 	and.w	r3, r3, #7
 800a448:	b29a      	uxth	r2, r3
 800a44a:	8afb      	ldrh	r3, [r7, #22]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	8afa      	ldrh	r2, [r7, #22]
 800a456:	60da      	str	r2, [r3, #12]
 800a458:	e052      	b.n	800a500 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a460:	e04e      	b.n	800a500 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a466:	2b08      	cmp	r3, #8
 800a468:	d827      	bhi.n	800a4ba <UART_SetConfig+0x506>
 800a46a:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <UART_SetConfig+0x4bc>)
 800a46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a470:	0800a495 	.word	0x0800a495
 800a474:	0800a49d 	.word	0x0800a49d
 800a478:	0800a4a5 	.word	0x0800a4a5
 800a47c:	0800a4bb 	.word	0x0800a4bb
 800a480:	0800a4ab 	.word	0x0800a4ab
 800a484:	0800a4bb 	.word	0x0800a4bb
 800a488:	0800a4bb 	.word	0x0800a4bb
 800a48c:	0800a4bb 	.word	0x0800a4bb
 800a490:	0800a4b3 	.word	0x0800a4b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a494:	f7fd f9b4 	bl	8007800 <HAL_RCC_GetPCLK1Freq>
 800a498:	61f8      	str	r0, [r7, #28]
        break;
 800a49a:	e014      	b.n	800a4c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a49c:	f7fd f9c6 	bl	800782c <HAL_RCC_GetPCLK2Freq>
 800a4a0:	61f8      	str	r0, [r7, #28]
        break;
 800a4a2:	e010      	b.n	800a4c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4a4:	4b1e      	ldr	r3, [pc, #120]	; (800a520 <UART_SetConfig+0x56c>)
 800a4a6:	61fb      	str	r3, [r7, #28]
        break;
 800a4a8:	e00d      	b.n	800a4c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4aa:	f7fd f911 	bl	80076d0 <HAL_RCC_GetSysClockFreq>
 800a4ae:	61f8      	str	r0, [r7, #28]
        break;
 800a4b0:	e009      	b.n	800a4c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4b6:	61fb      	str	r3, [r7, #28]
        break;
 800a4b8:	e005      	b.n	800a4c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a4c4:	bf00      	nop
    }

    if (pclk != 0U)
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d019      	beq.n	800a500 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	085a      	lsrs	r2, r3, #1
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	441a      	add	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	2b0f      	cmp	r3, #15
 800a4e4:	d909      	bls.n	800a4fa <UART_SetConfig+0x546>
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ec:	d205      	bcs.n	800a4fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	60da      	str	r2, [r3, #12]
 800a4f8:	e002      	b.n	800a500 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a50c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a510:	4618      	mov	r0, r3
 800a512:	3728      	adds	r7, #40	; 0x28
 800a514:	46bd      	mov	sp, r7
 800a516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a51a:	bf00      	nop
 800a51c:	40008000 	.word	0x40008000
 800a520:	00f42400 	.word	0x00f42400

0800a524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00a      	beq.n	800a54e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	f003 0304 	and.w	r3, r3, #4
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	f003 0308 	and.w	r3, r3, #8
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	f003 0310 	and.w	r3, r3, #16
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	f003 0320 	and.w	r3, r3, #32
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01a      	beq.n	800a63a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a622:	d10a      	bne.n	800a63a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	430a      	orrs	r2, r1
 800a65a:	605a      	str	r2, [r3, #4]
  }
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af02      	add	r7, sp, #8
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a678:	f7f8 ff1c 	bl	80034b4 <HAL_GetTick>
 800a67c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0308 	and.w	r3, r3, #8
 800a688:	2b08      	cmp	r3, #8
 800a68a:	d10e      	bne.n	800a6aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a68c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f82d 	bl	800a6fa <UART_WaitOnFlagUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	e023      	b.n	800a6f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d10e      	bne.n	800a6d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f817 	bl	800a6fa <UART_WaitOnFlagUntilTimeout>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e00d      	b.n	800a6f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2220      	movs	r2, #32
 800a6da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b09c      	sub	sp, #112	; 0x70
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	603b      	str	r3, [r7, #0]
 800a706:	4613      	mov	r3, r2
 800a708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a70a:	e0a5      	b.n	800a858 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a70c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a712:	f000 80a1 	beq.w	800a858 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a716:	f7f8 fecd 	bl	80034b4 <HAL_GetTick>
 800a71a:	4602      	mov	r2, r0
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a722:	429a      	cmp	r2, r3
 800a724:	d302      	bcc.n	800a72c <UART_WaitOnFlagUntilTimeout+0x32>
 800a726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d13e      	bne.n	800a7aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a734:	e853 3f00 	ldrex	r3, [r3]
 800a738:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a73c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a740:	667b      	str	r3, [r7, #100]	; 0x64
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	461a      	mov	r2, r3
 800a748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a74a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a74c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a750:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a752:	e841 2300 	strex	r3, r2, [r1]
 800a756:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1e6      	bne.n	800a72c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3308      	adds	r3, #8
 800a764:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a768:	e853 3f00 	ldrex	r3, [r3]
 800a76c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a770:	f023 0301 	bic.w	r3, r3, #1
 800a774:	663b      	str	r3, [r7, #96]	; 0x60
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	3308      	adds	r3, #8
 800a77c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a77e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a780:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a786:	e841 2300 	strex	r3, r2, [r1]
 800a78a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1e5      	bne.n	800a75e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2220      	movs	r2, #32
 800a796:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2220      	movs	r2, #32
 800a79c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e067      	b.n	800a87a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0304 	and.w	r3, r3, #4
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d04f      	beq.n	800a858 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7c6:	d147      	bne.n	800a858 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7da:	e853 3f00 	ldrex	r3, [r3]
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a7f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7f8:	e841 2300 	strex	r3, r2, [r1]
 800a7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1e6      	bne.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3308      	adds	r3, #8
 800a80a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	e853 3f00 	ldrex	r3, [r3]
 800a812:	613b      	str	r3, [r7, #16]
   return(result);
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f023 0301 	bic.w	r3, r3, #1
 800a81a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3308      	adds	r3, #8
 800a822:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a824:	623a      	str	r2, [r7, #32]
 800a826:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a828:	69f9      	ldr	r1, [r7, #28]
 800a82a:	6a3a      	ldr	r2, [r7, #32]
 800a82c:	e841 2300 	strex	r3, r2, [r1]
 800a830:	61bb      	str	r3, [r7, #24]
   return(result);
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1e5      	bne.n	800a804 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2220      	movs	r2, #32
 800a83c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2220      	movs	r2, #32
 800a842:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2220      	movs	r2, #32
 800a848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e010      	b.n	800a87a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	69da      	ldr	r2, [r3, #28]
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	4013      	ands	r3, r2
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	429a      	cmp	r2, r3
 800a866:	bf0c      	ite	eq
 800a868:	2301      	moveq	r3, #1
 800a86a:	2300      	movne	r3, #0
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	461a      	mov	r2, r3
 800a870:	79fb      	ldrb	r3, [r7, #7]
 800a872:	429a      	cmp	r2, r3
 800a874:	f43f af4a 	beq.w	800a70c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3770      	adds	r7, #112	; 0x70
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a882:	b084      	sub	sp, #16
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	f107 001c 	add.w	r0, r7, #28
 800a890:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fa6f 	bl	800ad84 <USB_CoreReset>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d106      	bne.n	800a8be <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	639a      	str	r2, [r3, #56]	; 0x38
 800a8bc:	e005      	b.n	800a8ca <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8d6:	b004      	add	sp, #16
 800a8d8:	4770      	bx	lr

0800a8da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	f023 0201 	bic.w	r2, r3, #1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a908:	2300      	movs	r3, #0
 800a90a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a918:	78fb      	ldrb	r3, [r7, #3]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d115      	bne.n	800a94a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a92a:	2001      	movs	r0, #1
 800a92c:	f7f8 fdce 	bl	80034cc <HAL_Delay>
      ms++;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3301      	adds	r3, #1
 800a934:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fa16 	bl	800ad68 <USB_GetMode>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d01e      	beq.n	800a980 <USB_SetCurrentMode+0x84>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b31      	cmp	r3, #49	; 0x31
 800a946:	d9f0      	bls.n	800a92a <USB_SetCurrentMode+0x2e>
 800a948:	e01a      	b.n	800a980 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a94a:	78fb      	ldrb	r3, [r7, #3]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d115      	bne.n	800a97c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a95c:	2001      	movs	r0, #1
 800a95e:	f7f8 fdb5 	bl	80034cc <HAL_Delay>
      ms++;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3301      	adds	r3, #1
 800a966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f9fd 	bl	800ad68 <USB_GetMode>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d005      	beq.n	800a980 <USB_SetCurrentMode+0x84>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b31      	cmp	r3, #49	; 0x31
 800a978:	d9f0      	bls.n	800a95c <USB_SetCurrentMode+0x60>
 800a97a:	e001      	b.n	800a980 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e005      	b.n	800a98c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b32      	cmp	r3, #50	; 0x32
 800a984:	d101      	bne.n	800a98a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e000      	b.n	800a98c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a994:	b084      	sub	sp, #16
 800a996:	b580      	push	{r7, lr}
 800a998:	b086      	sub	sp, #24
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a9a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	613b      	str	r3, [r7, #16]
 800a9b2:	e009      	b.n	800a9c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	3340      	adds	r3, #64	; 0x40
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	2200      	movs	r2, #0
 800a9c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	613b      	str	r3, [r7, #16]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	2b0e      	cmp	r3, #14
 800a9cc:	d9f2      	bls.n	800a9b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d11c      	bne.n	800aa0e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9e2:	f043 0302 	orr.w	r3, r3, #2
 800a9e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	e005      	b.n	800aa1a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa20:	461a      	mov	r2, r3
 800aa22:	2300      	movs	r3, #0
 800aa24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa34:	461a      	mov	r2, r3
 800aa36:	680b      	ldr	r3, [r1, #0]
 800aa38:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aa3a:	2103      	movs	r1, #3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f959 	bl	800acf4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aa42:	2110      	movs	r1, #16
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f8f1 	bl	800ac2c <USB_FlushTxFifo>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 f91d 	bl	800ac94 <USB_FlushRxFifo>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa76:	461a      	mov	r2, r3
 800aa78:	2300      	movs	r3, #0
 800aa7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa82:	461a      	mov	r2, r3
 800aa84:	2300      	movs	r3, #0
 800aa86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa88:	2300      	movs	r3, #0
 800aa8a:	613b      	str	r3, [r7, #16]
 800aa8c:	e043      	b.n	800ab16 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	015a      	lsls	r2, r3, #5
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaa4:	d118      	bne.n	800aad8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10a      	bne.n	800aac2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab8:	461a      	mov	r2, r3
 800aaba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aabe:	6013      	str	r3, [r2, #0]
 800aac0:	e013      	b.n	800aaea <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aace:	461a      	mov	r2, r3
 800aad0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	e008      	b.n	800aaea <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae4:	461a      	mov	r2, r3
 800aae6:	2300      	movs	r3, #0
 800aae8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	2300      	movs	r3, #0
 800aafa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	015a      	lsls	r2, r3, #5
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	4413      	add	r3, r2
 800ab04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab08:	461a      	mov	r2, r3
 800ab0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	3301      	adds	r3, #1
 800ab14:	613b      	str	r3, [r7, #16]
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	693a      	ldr	r2, [r7, #16]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d3b7      	bcc.n	800aa8e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab1e:	2300      	movs	r3, #0
 800ab20:	613b      	str	r3, [r7, #16]
 800ab22:	e043      	b.n	800abac <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	015a      	lsls	r2, r3, #5
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab3a:	d118      	bne.n	800ab6e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10a      	bne.n	800ab58 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	015a      	lsls	r2, r3, #5
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	4413      	add	r3, r2
 800ab4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab4e:	461a      	mov	r2, r3
 800ab50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	e013      	b.n	800ab80 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab64:	461a      	mov	r2, r3
 800ab66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	e008      	b.n	800ab80 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	015a      	lsls	r2, r3, #5
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	4413      	add	r3, r2
 800ab76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	2300      	movs	r3, #0
 800ab90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aba4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	3301      	adds	r3, #1
 800abaa:	613b      	str	r3, [r7, #16]
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d3b7      	bcc.n	800ab24 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abc6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800abd4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	f043 0210 	orr.w	r2, r3, #16
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	699a      	ldr	r2, [r3, #24]
 800abe6:	4b10      	ldr	r3, [pc, #64]	; (800ac28 <USB_DevInit+0x294>)
 800abe8:	4313      	orrs	r3, r2
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800abee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d005      	beq.n	800ac00 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	f043 0208 	orr.w	r2, r3, #8
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ac00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d107      	bne.n	800ac16 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac0e:	f043 0304 	orr.w	r3, r3, #4
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac22:	b004      	add	sp, #16
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	803c3800 	.word	0x803c3800

0800ac2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4a13      	ldr	r2, [pc, #76]	; (800ac90 <USB_FlushTxFifo+0x64>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d901      	bls.n	800ac4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e01b      	b.n	800ac84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	daf2      	bge.n	800ac3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ac54:	2300      	movs	r3, #0
 800ac56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	019b      	lsls	r3, r3, #6
 800ac5c:	f043 0220 	orr.w	r2, r3, #32
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	3301      	adds	r3, #1
 800ac68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	4a08      	ldr	r2, [pc, #32]	; (800ac90 <USB_FlushTxFifo+0x64>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d901      	bls.n	800ac76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e006      	b.n	800ac84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	f003 0320 	and.w	r3, r3, #32
 800ac7e:	2b20      	cmp	r3, #32
 800ac80:	d0f0      	beq.n	800ac64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	00030d40 	.word	0x00030d40

0800ac94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3301      	adds	r3, #1
 800aca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	4a11      	ldr	r2, [pc, #68]	; (800acf0 <USB_FlushRxFifo+0x5c>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d901      	bls.n	800acb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e018      	b.n	800ace4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	daf2      	bge.n	800aca0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800acba:	2300      	movs	r3, #0
 800acbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2210      	movs	r2, #16
 800acc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4a08      	ldr	r2, [pc, #32]	; (800acf0 <USB_FlushRxFifo+0x5c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d901      	bls.n	800acd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e006      	b.n	800ace4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	f003 0310 	and.w	r3, r3, #16
 800acde:	2b10      	cmp	r3, #16
 800ace0:	d0f0      	beq.n	800acc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	00030d40 	.word	0x00030d40

0800acf4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	78fb      	ldrb	r3, [r7, #3]
 800ad0e:	68f9      	ldr	r1, [r7, #12]
 800ad10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad14:	4313      	orrs	r3, r2
 800ad16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b085      	sub	sp, #20
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad40:	f023 0303 	bic.w	r3, r3, #3
 800ad44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad54:	f043 0302 	orr.w	r3, r3, #2
 800ad58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3714      	adds	r7, #20
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	f003 0301 	and.w	r3, r3, #1
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3301      	adds	r3, #1
 800ad94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	4a13      	ldr	r2, [pc, #76]	; (800ade8 <USB_CoreReset+0x64>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d901      	bls.n	800ada2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e01b      	b.n	800adda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	daf2      	bge.n	800ad90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	f043 0201 	orr.w	r2, r3, #1
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3301      	adds	r3, #1
 800adbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	4a09      	ldr	r2, [pc, #36]	; (800ade8 <USB_CoreReset+0x64>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d901      	bls.n	800adcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e006      	b.n	800adda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b01      	cmp	r3, #1
 800add6:	d0f0      	beq.n	800adba <USB_CoreReset+0x36>

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	00030d40 	.word	0x00030d40

0800adec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	4603      	mov	r3, r0
 800adf4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800adf6:	2300      	movs	r3, #0
 800adf8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800adfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800adfe:	2b84      	cmp	r3, #132	; 0x84
 800ae00:	d005      	beq.n	800ae0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ae02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	4413      	add	r3, r2
 800ae0a:	3303      	adds	r3, #3
 800ae0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae22:	f3ef 8305 	mrs	r3, IPSR
 800ae26:	607b      	str	r3, [r7, #4]
  return(result);
 800ae28:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	bf14      	ite	ne
 800ae2e:	2301      	movne	r3, #1
 800ae30:	2300      	moveq	r3, #0
 800ae32:	b2db      	uxtb	r3, r3
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ae44:	f001 fb3e 	bl	800c4c4 <vTaskStartScheduler>
  
  return osOK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ae4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae50:	b089      	sub	sp, #36	; 0x24
 800ae52:	af04      	add	r7, sp, #16
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d020      	beq.n	800aea2 <osThreadCreate+0x54>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d01c      	beq.n	800aea2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685c      	ldr	r4, [r3, #4]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681d      	ldr	r5, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	691e      	ldr	r6, [r3, #16]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7ff ffb6 	bl	800adec <makeFreeRtosPriority>
 800ae80:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae8a:	9202      	str	r2, [sp, #8]
 800ae8c:	9301      	str	r3, [sp, #4]
 800ae8e:	9100      	str	r1, [sp, #0]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	4632      	mov	r2, r6
 800ae94:	4629      	mov	r1, r5
 800ae96:	4620      	mov	r0, r4
 800ae98:	f001 f914 	bl	800c0c4 <xTaskCreateStatic>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	e01c      	b.n	800aedc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685c      	ldr	r4, [r3, #4]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aeae:	b29e      	uxth	r6, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff ff98 	bl	800adec <makeFreeRtosPriority>
 800aebc:	4602      	mov	r2, r0
 800aebe:	f107 030c 	add.w	r3, r7, #12
 800aec2:	9301      	str	r3, [sp, #4]
 800aec4:	9200      	str	r2, [sp, #0]
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	4632      	mov	r2, r6
 800aeca:	4629      	mov	r1, r5
 800aecc:	4620      	mov	r0, r4
 800aece:	f001 f956 	bl	800c17e <xTaskCreate>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d001      	beq.n	800aedc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800aed8:	2300      	movs	r3, #0
 800aeda:	e000      	b.n	800aede <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aedc:	68fb      	ldr	r3, [r7, #12]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aee6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <osDelay+0x16>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	e000      	b.n	800aefe <osDelay+0x18>
 800aefc:	2301      	movs	r3, #1
 800aefe:	4618      	mov	r0, r3
 800af00:	f001 faa8 	bl	800c454 <vTaskDelay>
  
  return osOK;
 800af04:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d007      	beq.n	800af2e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	4619      	mov	r1, r3
 800af24:	2001      	movs	r0, #1
 800af26:	f000 fb92 	bl	800b64e <xQueueCreateMutexStatic>
 800af2a:	4603      	mov	r3, r0
 800af2c:	e003      	b.n	800af36 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800af2e:	2001      	movs	r0, #1
 800af30:	f000 fb75 	bl	800b61e <xQueueCreateMutex>
 800af34:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800af36:	4618      	mov	r0, r3
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
	...

0800af40 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800af4a:	2300      	movs	r3, #0
 800af4c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <osMutexWait+0x18>
    return osErrorParameter;
 800af54:	2380      	movs	r3, #128	; 0x80
 800af56:	e03a      	b.n	800afce <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af62:	d103      	bne.n	800af6c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800af64:	f04f 33ff 	mov.w	r3, #4294967295
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	e009      	b.n	800af80 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d006      	beq.n	800af80 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d101      	bne.n	800af80 <osMutexWait+0x40>
      ticks = 1;
 800af7c:	2301      	movs	r3, #1
 800af7e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800af80:	f7ff ff4c 	bl	800ae1c <inHandlerMode>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d017      	beq.n	800afba <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800af8a:	f107 0308 	add.w	r3, r7, #8
 800af8e:	461a      	mov	r2, r3
 800af90:	2100      	movs	r1, #0
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fe7a 	bl	800bc8c <xQueueReceiveFromISR>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d001      	beq.n	800afa2 <osMutexWait+0x62>
      return osErrorOS;
 800af9e:	23ff      	movs	r3, #255	; 0xff
 800afa0:	e015      	b.n	800afce <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d011      	beq.n	800afcc <osMutexWait+0x8c>
 800afa8:	4b0b      	ldr	r3, [pc, #44]	; (800afd8 <osMutexWait+0x98>)
 800afaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	e008      	b.n	800afcc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800afba:	68f9      	ldr	r1, [r7, #12]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fd29 	bl	800ba14 <xQueueSemaphoreTake>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d001      	beq.n	800afcc <osMutexWait+0x8c>
    return osErrorOS;
 800afc8:	23ff      	movs	r3, #255	; 0xff
 800afca:	e000      	b.n	800afce <osMutexWait+0x8e>
  }
  
  return osOK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	e000ed04 	.word	0xe000ed04

0800afdc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800afe8:	2300      	movs	r3, #0
 800afea:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800afec:	f7ff ff16 	bl	800ae1c <inHandlerMode>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d016      	beq.n	800b024 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800aff6:	f107 0308 	add.w	r3, r7, #8
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fc67 	bl	800b8d0 <xQueueGiveFromISR>
 800b002:	4603      	mov	r3, r0
 800b004:	2b01      	cmp	r3, #1
 800b006:	d001      	beq.n	800b00c <osMutexRelease+0x30>
      return osErrorOS;
 800b008:	23ff      	movs	r3, #255	; 0xff
 800b00a:	e017      	b.n	800b03c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d013      	beq.n	800b03a <osMutexRelease+0x5e>
 800b012:	4b0c      	ldr	r3, [pc, #48]	; (800b044 <osMutexRelease+0x68>)
 800b014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	e00a      	b.n	800b03a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b024:	2300      	movs	r3, #0
 800b026:	2200      	movs	r2, #0
 800b028:	2100      	movs	r1, #0
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fb2a 	bl	800b684 <xQueueGenericSend>
 800b030:	4603      	mov	r3, r0
 800b032:	2b01      	cmp	r3, #1
 800b034:	d001      	beq.n	800b03a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b036:	23ff      	movs	r3, #255	; 0xff
 800b038:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b03a:	68fb      	ldr	r3, [r7, #12]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	e000ed04 	.word	0xe000ed04

0800b048 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b050:	f7ff fee4 	bl	800ae1c <inHandlerMode>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <osMutexDelete+0x16>
    return osErrorISR;
 800b05a:	2382      	movs	r3, #130	; 0x82
 800b05c:	e003      	b.n	800b066 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 feb2 	bl	800bdc8 <vQueueDelete>

  return osOK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b06e:	b580      	push	{r7, lr}
 800b070:	b086      	sub	sp, #24
 800b072:	af02      	add	r7, sp, #8
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00f      	beq.n	800b0a0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d10a      	bne.n	800b09c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	2203      	movs	r2, #3
 800b08c:	9200      	str	r2, [sp, #0]
 800b08e:	2200      	movs	r2, #0
 800b090:	2100      	movs	r1, #0
 800b092:	2001      	movs	r0, #1
 800b094:	f000 f9d2 	bl	800b43c <xQueueGenericCreateStatic>
 800b098:	4603      	mov	r3, r0
 800b09a:	e016      	b.n	800b0ca <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	e014      	b.n	800b0ca <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d110      	bne.n	800b0c8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b0a6:	2203      	movs	r2, #3
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	f000 fa3e 	bl	800b52c <xQueueGenericCreate>
 800b0b0:	60f8      	str	r0, [r7, #12]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d005      	beq.n	800b0c4 <osSemaphoreCreate+0x56>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2100      	movs	r1, #0
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f000 fae0 	bl	800b684 <xQueueGenericSend>
      return sema;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	e000      	b.n	800b0ca <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b0c8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
	...

0800b0d4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d101      	bne.n	800b0ec <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b0e8:	2380      	movs	r3, #128	; 0x80
 800b0ea:	e03a      	b.n	800b162 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f6:	d103      	bne.n	800b100 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	e009      	b.n	800b114 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d006      	beq.n	800b114 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <osSemaphoreWait+0x40>
      ticks = 1;
 800b110:	2301      	movs	r3, #1
 800b112:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b114:	f7ff fe82 	bl	800ae1c <inHandlerMode>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d017      	beq.n	800b14e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b11e:	f107 0308 	add.w	r3, r7, #8
 800b122:	461a      	mov	r2, r3
 800b124:	2100      	movs	r1, #0
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fdb0 	bl	800bc8c <xQueueReceiveFromISR>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d001      	beq.n	800b136 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b132:	23ff      	movs	r3, #255	; 0xff
 800b134:	e015      	b.n	800b162 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d011      	beq.n	800b160 <osSemaphoreWait+0x8c>
 800b13c:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <osSemaphoreWait+0x98>)
 800b13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	e008      	b.n	800b160 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b14e:	68f9      	ldr	r1, [r7, #12]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 fc5f 	bl	800ba14 <xQueueSemaphoreTake>
 800b156:	4603      	mov	r3, r0
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d001      	beq.n	800b160 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b15c:	23ff      	movs	r3, #255	; 0xff
 800b15e:	e000      	b.n	800b162 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	e000ed04 	.word	0xe000ed04

0800b170 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b17c:	2300      	movs	r3, #0
 800b17e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b180:	f7ff fe4c 	bl	800ae1c <inHandlerMode>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d016      	beq.n	800b1b8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b18a:	f107 0308 	add.w	r3, r7, #8
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fb9d 	bl	800b8d0 <xQueueGiveFromISR>
 800b196:	4603      	mov	r3, r0
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d001      	beq.n	800b1a0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b19c:	23ff      	movs	r3, #255	; 0xff
 800b19e:	e017      	b.n	800b1d0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d013      	beq.n	800b1ce <osSemaphoreRelease+0x5e>
 800b1a6:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <osSemaphoreRelease+0x68>)
 800b1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	f3bf 8f6f 	isb	sy
 800b1b6:	e00a      	b.n	800b1ce <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	2100      	movs	r1, #0
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fa60 	bl	800b684 <xQueueGenericSend>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d001      	beq.n	800b1ce <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b1ca:	23ff      	movs	r3, #255	; 0xff
 800b1cc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	e000ed04 	.word	0xe000ed04

0800b1dc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b1e4:	f7ff fe1a 	bl	800ae1c <inHandlerMode>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d001      	beq.n	800b1f2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b1ee:	2382      	movs	r3, #130	; 0x82
 800b1f0:	e003      	b.n	800b1fa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fde8 	bl	800bdc8 <vQueueDelete>

  return osOK; 
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b202:	b480      	push	{r7}
 800b204:	b083      	sub	sp, #12
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f103 0208 	add.w	r2, r3, #8
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f04f 32ff 	mov.w	r2, #4294967295
 800b21a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f103 0208 	add.w	r2, r3, #8
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f103 0208 	add.w	r2, r3, #8
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b236:	bf00      	nop
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b242:	b480      	push	{r7}
 800b244:	b083      	sub	sp, #12
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	689a      	ldr	r2, [r3, #8]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	601a      	str	r2, [r3, #0]
}
 800b298:	bf00      	nop
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ba:	d103      	bne.n	800b2c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	60fb      	str	r3, [r7, #12]
 800b2c2:	e00c      	b.n	800b2de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	60fb      	str	r3, [r7, #12]
 800b2ca:	e002      	b.n	800b2d2 <vListInsert+0x2e>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	60fb      	str	r3, [r7, #12]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d2f6      	bcs.n	800b2cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	1c5a      	adds	r2, r3, #1
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	601a      	str	r2, [r3, #0]
}
 800b30a:	bf00      	nop
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	6892      	ldr	r2, [r2, #8]
 800b32c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	6852      	ldr	r2, [r2, #4]
 800b336:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d103      	bne.n	800b34a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	689a      	ldr	r2, [r3, #8]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	1e5a      	subs	r2, r3, #1
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
	...

0800b36c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10a      	bne.n	800b396 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b396:	f002 f855 	bl	800d444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a2:	68f9      	ldr	r1, [r7, #12]
 800b3a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3a6:	fb01 f303 	mul.w	r3, r1, r3
 800b3aa:	441a      	add	r2, r3
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	68f9      	ldr	r1, [r7, #12]
 800b3ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3cc:	fb01 f303 	mul.w	r3, r1, r3
 800b3d0:	441a      	add	r2, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	22ff      	movs	r2, #255	; 0xff
 800b3da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	22ff      	movs	r2, #255	; 0xff
 800b3e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d114      	bne.n	800b416 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d01a      	beq.n	800b42a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	3310      	adds	r3, #16
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f001 faf5 	bl	800c9e8 <xTaskRemoveFromEventList>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d012      	beq.n	800b42a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b404:	4b0c      	ldr	r3, [pc, #48]	; (800b438 <xQueueGenericReset+0xcc>)
 800b406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	e009      	b.n	800b42a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3310      	adds	r3, #16
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7ff fef1 	bl	800b202 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	3324      	adds	r3, #36	; 0x24
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff feec 	bl	800b202 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b42a:	f002 f83b 	bl	800d4a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b42e:	2301      	movs	r3, #1
}
 800b430:	4618      	mov	r0, r3
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	e000ed04 	.word	0xe000ed04

0800b43c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b08e      	sub	sp, #56	; 0x38
 800b440:	af02      	add	r7, sp, #8
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
 800b448:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d10a      	bne.n	800b466 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b462:	bf00      	nop
 800b464:	e7fe      	b.n	800b464 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10a      	bne.n	800b482 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b47e:	bf00      	nop
 800b480:	e7fe      	b.n	800b480 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <xQueueGenericCreateStatic+0x52>
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <xQueueGenericCreateStatic+0x56>
 800b48e:	2301      	movs	r3, #1
 800b490:	e000      	b.n	800b494 <xQueueGenericCreateStatic+0x58>
 800b492:	2300      	movs	r3, #0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10a      	bne.n	800b4ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49c:	f383 8811 	msr	BASEPRI, r3
 800b4a0:	f3bf 8f6f 	isb	sy
 800b4a4:	f3bf 8f4f 	dsb	sy
 800b4a8:	623b      	str	r3, [r7, #32]
}
 800b4aa:	bf00      	nop
 800b4ac:	e7fe      	b.n	800b4ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d102      	bne.n	800b4ba <xQueueGenericCreateStatic+0x7e>
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <xQueueGenericCreateStatic+0x82>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e000      	b.n	800b4c0 <xQueueGenericCreateStatic+0x84>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	61fb      	str	r3, [r7, #28]
}
 800b4d6:	bf00      	nop
 800b4d8:	e7fe      	b.n	800b4d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b4da:	2348      	movs	r3, #72	; 0x48
 800b4dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2b48      	cmp	r3, #72	; 0x48
 800b4e2:	d00a      	beq.n	800b4fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	61bb      	str	r3, [r7, #24]
}
 800b4f6:	bf00      	nop
 800b4f8:	e7fe      	b.n	800b4f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b4fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00d      	beq.n	800b522 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b50e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	4613      	mov	r3, r2
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	68b9      	ldr	r1, [r7, #8]
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 f83f 	bl	800b5a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b524:	4618      	mov	r0, r3
 800b526:	3730      	adds	r7, #48	; 0x30
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b08a      	sub	sp, #40	; 0x28
 800b530:	af02      	add	r7, sp, #8
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	4613      	mov	r3, r2
 800b538:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d10a      	bne.n	800b556 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	613b      	str	r3, [r7, #16]
}
 800b552:	bf00      	nop
 800b554:	e7fe      	b.n	800b554 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	fb02 f303 	mul.w	r3, r2, r3
 800b55e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	3348      	adds	r3, #72	; 0x48
 800b564:	4618      	mov	r0, r3
 800b566:	f002 f88f 	bl	800d688 <pvPortMalloc>
 800b56a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d011      	beq.n	800b596 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	3348      	adds	r3, #72	; 0x48
 800b57a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b584:	79fa      	ldrb	r2, [r7, #7]
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	4613      	mov	r3, r2
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	68b9      	ldr	r1, [r7, #8]
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f000 f805 	bl	800b5a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b596:	69bb      	ldr	r3, [r7, #24]
	}
 800b598:	4618      	mov	r0, r3
 800b59a:	3720      	adds	r7, #32
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d103      	bne.n	800b5bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	e002      	b.n	800b5c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	69b8      	ldr	r0, [r7, #24]
 800b5d2:	f7ff fecb 	bl	800b36c <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800b5d6:	78fb      	ldrb	r3, [r7, #3]
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	68f9      	ldr	r1, [r7, #12]
 800b5dc:	2073      	movs	r0, #115	; 0x73
 800b5de:	f003 f8e9 	bl	800e7b4 <SEGGER_SYSVIEW_RecordU32x3>
}
 800b5e2:	bf00      	nop
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b082      	sub	sp, #8
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00e      	beq.n	800b616 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b60a:	2300      	movs	r3, #0
 800b60c:	2200      	movs	r2, #0
 800b60e:	2100      	movs	r1, #0
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f837 	bl	800b684 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b086      	sub	sp, #24
 800b622:	af00      	add	r7, sp, #0
 800b624:	4603      	mov	r3, r0
 800b626:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b628:	2301      	movs	r3, #1
 800b62a:	617b      	str	r3, [r7, #20]
 800b62c:	2300      	movs	r3, #0
 800b62e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b630:	79fb      	ldrb	r3, [r7, #7]
 800b632:	461a      	mov	r2, r3
 800b634:	6939      	ldr	r1, [r7, #16]
 800b636:	6978      	ldr	r0, [r7, #20]
 800b638:	f7ff ff78 	bl	800b52c <xQueueGenericCreate>
 800b63c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7ff ffd3 	bl	800b5ea <prvInitialiseMutex>

		return xNewQueue;
 800b644:	68fb      	ldr	r3, [r7, #12]
	}
 800b646:	4618      	mov	r0, r3
 800b648:	3718      	adds	r7, #24
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b088      	sub	sp, #32
 800b652:	af02      	add	r7, sp, #8
 800b654:	4603      	mov	r3, r0
 800b656:	6039      	str	r1, [r7, #0]
 800b658:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b65a:	2301      	movs	r3, #1
 800b65c:	617b      	str	r3, [r7, #20]
 800b65e:	2300      	movs	r3, #0
 800b660:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	2200      	movs	r2, #0
 800b66a:	6939      	ldr	r1, [r7, #16]
 800b66c:	6978      	ldr	r0, [r7, #20]
 800b66e:	f7ff fee5 	bl	800b43c <xQueueGenericCreateStatic>
 800b672:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f7ff ffb8 	bl	800b5ea <prvInitialiseMutex>

		return xNewQueue;
 800b67a:	68fb      	ldr	r3, [r7, #12]
	}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b090      	sub	sp, #64	; 0x40
 800b688:	af02      	add	r7, sp, #8
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
 800b690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b692:	2300      	movs	r3, #0
 800b694:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <xQueueGenericSend+0x32>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d103      	bne.n	800b6c4 <xQueueGenericSend+0x40>
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <xQueueGenericSend+0x44>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e000      	b.n	800b6ca <xQueueGenericSend+0x46>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10a      	bne.n	800b6e4 <xQueueGenericSend+0x60>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6e0:	bf00      	nop
 800b6e2:	e7fe      	b.n	800b6e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d103      	bne.n	800b6f2 <xQueueGenericSend+0x6e>
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d101      	bne.n	800b6f6 <xQueueGenericSend+0x72>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e000      	b.n	800b6f8 <xQueueGenericSend+0x74>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <xQueueGenericSend+0x8e>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	623b      	str	r3, [r7, #32]
}
 800b70e:	bf00      	nop
 800b710:	e7fe      	b.n	800b710 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b712:	f001 fb2d 	bl	800cd70 <xTaskGetSchedulerState>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d102      	bne.n	800b722 <xQueueGenericSend+0x9e>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <xQueueGenericSend+0xa2>
 800b722:	2301      	movs	r3, #1
 800b724:	e000      	b.n	800b728 <xQueueGenericSend+0xa4>
 800b726:	2300      	movs	r3, #0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <xQueueGenericSend+0xbe>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	61fb      	str	r3, [r7, #28]
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b742:	f001 fe7f 	bl	800d444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74e:	429a      	cmp	r2, r3
 800b750:	d302      	bcc.n	800b758 <xQueueGenericSend+0xd4>
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	2b02      	cmp	r3, #2
 800b756:	d136      	bne.n	800b7c6 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800b758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75a:	4618      	mov	r0, r3
 800b75c:	f003 fce6 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	6879      	ldr	r1, [r7, #4]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	460b      	mov	r3, r1
 800b76a:	4601      	mov	r1, r0
 800b76c:	205a      	movs	r0, #90	; 0x5a
 800b76e:	f003 f897 	bl	800e8a0 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	68b9      	ldr	r1, [r7, #8]
 800b776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b778:	f000 fb6a 	bl	800be50 <prvCopyDataToQueue>
 800b77c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b782:	2b00      	cmp	r3, #0
 800b784:	d010      	beq.n	800b7a8 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	3324      	adds	r3, #36	; 0x24
 800b78a:	4618      	mov	r0, r3
 800b78c:	f001 f92c 	bl	800c9e8 <xTaskRemoveFromEventList>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d013      	beq.n	800b7be <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b796:	4b4d      	ldr	r3, [pc, #308]	; (800b8cc <xQueueGenericSend+0x248>)
 800b798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b79c:	601a      	str	r2, [r3, #0]
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	e00a      	b.n	800b7be <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d007      	beq.n	800b7be <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b7ae:	4b47      	ldr	r3, [pc, #284]	; (800b8cc <xQueueGenericSend+0x248>)
 800b7b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b7be:	f001 fe71 	bl	800d4a4 <vPortExitCritical>
				return pdPASS;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e07d      	b.n	800b8c2 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d110      	bne.n	800b7ee <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7cc:	f001 fe6a 	bl	800d4a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f003 fcaa 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	205a      	movs	r0, #90	; 0x5a
 800b7e6:	f003 f85b 	bl	800e8a0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e069      	b.n	800b8c2 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d106      	bne.n	800b802 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7f4:	f107 0314 	add.w	r3, r7, #20
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f001 f95b 	bl	800cab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7fe:	2301      	movs	r3, #1
 800b800:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b802:	f001 fe4f 	bl	800d4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b806:	f000 fed9 	bl	800c5bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b80a:	f001 fe1b 	bl	800d444 <vPortEnterCritical>
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b814:	b25b      	sxtb	r3, r3
 800b816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81a:	d103      	bne.n	800b824 <xQueueGenericSend+0x1a0>
 800b81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81e:	2200      	movs	r2, #0
 800b820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b82a:	b25b      	sxtb	r3, r3
 800b82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b830:	d103      	bne.n	800b83a <xQueueGenericSend+0x1b6>
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	2200      	movs	r2, #0
 800b836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b83a:	f001 fe33 	bl	800d4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b83e:	1d3a      	adds	r2, r7, #4
 800b840:	f107 0314 	add.w	r3, r7, #20
 800b844:	4611      	mov	r1, r2
 800b846:	4618      	mov	r0, r3
 800b848:	f001 f94a 	bl	800cae0 <xTaskCheckForTimeOut>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d124      	bne.n	800b89c <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b852:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b854:	f000 fbf4 	bl	800c040 <prvIsQueueFull>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d018      	beq.n	800b890 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b860:	3310      	adds	r3, #16
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	4611      	mov	r1, r2
 800b866:	4618      	mov	r0, r3
 800b868:	f001 f89a 	bl	800c9a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b86c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b86e:	f000 fb7f 	bl	800bf70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b872:	f000 feb1 	bl	800c5d8 <xTaskResumeAll>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f47f af62 	bne.w	800b742 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b87e:	4b13      	ldr	r3, [pc, #76]	; (800b8cc <xQueueGenericSend+0x248>)
 800b880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	e758      	b.n	800b742 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b892:	f000 fb6d 	bl	800bf70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b896:	f000 fe9f 	bl	800c5d8 <xTaskResumeAll>
 800b89a:	e752      	b.n	800b742 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b89c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b89e:	f000 fb67 	bl	800bf70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8a2:	f000 fe99 	bl	800c5d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f003 fc3f 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	6879      	ldr	r1, [r7, #4]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4601      	mov	r1, r0
 800b8ba:	205a      	movs	r0, #90	; 0x5a
 800b8bc:	f002 fff0 	bl	800e8a0 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800b8c0:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3738      	adds	r7, #56	; 0x38
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	e000ed04 	.word	0xe000ed04

0800b8d0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08e      	sub	sp, #56	; 0x38
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10a      	bne.n	800b8fa <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	623b      	str	r3, [r7, #32]
}
 800b8f6:	bf00      	nop
 800b8f8:	e7fe      	b.n	800b8f8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00a      	beq.n	800b918 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	61fb      	str	r3, [r7, #28]
}
 800b914:	bf00      	nop
 800b916:	e7fe      	b.n	800b916 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d103      	bne.n	800b928 <xQueueGiveFromISR+0x58>
 800b920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d101      	bne.n	800b92c <xQueueGiveFromISR+0x5c>
 800b928:	2301      	movs	r3, #1
 800b92a:	e000      	b.n	800b92e <xQueueGiveFromISR+0x5e>
 800b92c:	2300      	movs	r3, #0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10a      	bne.n	800b948 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	61bb      	str	r3, [r7, #24]
}
 800b944:	bf00      	nop
 800b946:	e7fe      	b.n	800b946 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b948:	f001 fe5e 	bl	800d608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b94c:	f3ef 8211 	mrs	r2, BASEPRI
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	617a      	str	r2, [r7, #20]
 800b962:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b964:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b966:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b974:	429a      	cmp	r2, r3
 800b976:	d235      	bcs.n	800b9e4 <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b984:	4618      	mov	r0, r3
 800b986:	f003 fbd1 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800b98a:	4601      	mov	r1, r0
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	461a      	mov	r2, r3
 800b990:	2060      	movs	r0, #96	; 0x60
 800b992:	f002 feb5 	bl	800e700 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	1c5a      	adds	r2, r3, #1
 800b99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b99e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a6:	d112      	bne.n	800b9ce <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d016      	beq.n	800b9de <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b2:	3324      	adds	r3, #36	; 0x24
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 f817 	bl	800c9e8 <xTaskRemoveFromEventList>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00e      	beq.n	800b9de <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00b      	beq.n	800b9de <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	e007      	b.n	800b9de <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	b25a      	sxtb	r2, r3
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b9e2:	e00b      	b.n	800b9fc <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f003 fba0 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800b9ec:	4601      	mov	r1, r0
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	2060      	movs	r0, #96	; 0x60
 800b9f4:	f002 fe84 	bl	800e700 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	637b      	str	r3, [r7, #52]	; 0x34
 800b9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fe:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3738      	adds	r7, #56	; 0x38
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ba14:	b590      	push	{r4, r7, lr}
 800ba16:	b091      	sub	sp, #68	; 0x44
 800ba18:	af02      	add	r7, sp, #8
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ba26:	2300      	movs	r3, #0
 800ba28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10a      	bne.n	800ba46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	623b      	str	r3, [r7, #32]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ba46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00a      	beq.n	800ba64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	61fb      	str	r3, [r7, #28]
}
 800ba60:	bf00      	nop
 800ba62:	e7fe      	b.n	800ba62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba64:	f001 f984 	bl	800cd70 <xTaskGetSchedulerState>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d102      	bne.n	800ba74 <xQueueSemaphoreTake+0x60>
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d101      	bne.n	800ba78 <xQueueSemaphoreTake+0x64>
 800ba74:	2301      	movs	r3, #1
 800ba76:	e000      	b.n	800ba7a <xQueueSemaphoreTake+0x66>
 800ba78:	2300      	movs	r3, #0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10a      	bne.n	800ba94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	61bb      	str	r3, [r7, #24]
}
 800ba90:	bf00      	nop
 800ba92:	e7fe      	b.n	800ba92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba94:	f001 fcd6 	bl	800d444 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ba98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ba9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d034      	beq.n	800bb0e <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 800baa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa6:	4618      	mov	r0, r3
 800baa8:	f003 fb40 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800baac:	4604      	mov	r4, r0
 800baae:	2000      	movs	r0, #0
 800bab0:	f003 fb3c 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800bab4:	4602      	mov	r2, r0
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	2101      	movs	r1, #1
 800baba:	9100      	str	r1, [sp, #0]
 800babc:	4621      	mov	r1, r4
 800babe:	205c      	movs	r0, #92	; 0x5c
 800bac0:	f002 feee 	bl	800e8a0 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	1e5a      	subs	r2, r3, #1
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d104      	bne.n	800bade <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bad4:	f001 fb0e 	bl	800d0f4 <pvTaskIncrementMutexHeldCount>
 800bad8:	4602      	mov	r2, r0
 800bada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800badc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00f      	beq.n	800bb06 <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae8:	3310      	adds	r3, #16
 800baea:	4618      	mov	r0, r3
 800baec:	f000 ff7c 	bl	800c9e8 <xTaskRemoveFromEventList>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d007      	beq.n	800bb06 <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800baf6:	4b64      	ldr	r3, [pc, #400]	; (800bc88 <xQueueSemaphoreTake+0x274>)
 800baf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bafc:	601a      	str	r2, [r3, #0]
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb06:	f001 fccd 	bl	800d4a4 <vPortExitCritical>
				return pdPASS;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e0b7      	b.n	800bc7e <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d121      	bne.n	800bb58 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00a      	beq.n	800bb30 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	617b      	str	r3, [r7, #20]
}
 800bb2c:	bf00      	nop
 800bb2e:	e7fe      	b.n	800bb2e <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bb30:	f001 fcb8 	bl	800d4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800bb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb36:	4618      	mov	r0, r3
 800bb38:	f003 faf8 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	2000      	movs	r0, #0
 800bb40:	f003 faf4 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800bb44:	4602      	mov	r2, r0
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2101      	movs	r1, #1
 800bb4a:	9100      	str	r1, [sp, #0]
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	205c      	movs	r0, #92	; 0x5c
 800bb50:	f002 fea6 	bl	800e8a0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800bb54:	2300      	movs	r3, #0
 800bb56:	e092      	b.n	800bc7e <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d106      	bne.n	800bb6c <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb5e:	f107 030c 	add.w	r3, r7, #12
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 ffa6 	bl	800cab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb6c:	f001 fc9a 	bl	800d4a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb70:	f000 fd24 	bl	800c5bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb74:	f001 fc66 	bl	800d444 <vPortEnterCritical>
 800bb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb7e:	b25b      	sxtb	r3, r3
 800bb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb84:	d103      	bne.n	800bb8e <xQueueSemaphoreTake+0x17a>
 800bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb94:	b25b      	sxtb	r3, r3
 800bb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9a:	d103      	bne.n	800bba4 <xQueueSemaphoreTake+0x190>
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bba4:	f001 fc7e 	bl	800d4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bba8:	463a      	mov	r2, r7
 800bbaa:	f107 030c 	add.w	r3, r7, #12
 800bbae:	4611      	mov	r1, r2
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 ff95 	bl	800cae0 <xTaskCheckForTimeOut>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d132      	bne.n	800bc22 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbbe:	f000 fa29 	bl	800c014 <prvIsQueueEmpty>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d026      	beq.n	800bc16 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d109      	bne.n	800bbe4 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 800bbd0:	f001 fc38 	bl	800d444 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f001 f8e7 	bl	800cdac <xTaskPriorityInherit>
 800bbde:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bbe0:	f001 fc60 	bl	800d4a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe6:	3324      	adds	r3, #36	; 0x24
 800bbe8:	683a      	ldr	r2, [r7, #0]
 800bbea:	4611      	mov	r1, r2
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 fed7 	bl	800c9a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbf4:	f000 f9bc 	bl	800bf70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbf8:	f000 fcee 	bl	800c5d8 <xTaskResumeAll>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f47f af48 	bne.w	800ba94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bc04:	4b20      	ldr	r3, [pc, #128]	; (800bc88 <xQueueSemaphoreTake+0x274>)
 800bc06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	e73e      	b.n	800ba94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bc16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc18:	f000 f9aa 	bl	800bf70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc1c:	f000 fcdc 	bl	800c5d8 <xTaskResumeAll>
 800bc20:	e738      	b.n	800ba94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bc22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc24:	f000 f9a4 	bl	800bf70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc28:	f000 fcd6 	bl	800c5d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc2e:	f000 f9f1 	bl	800c014 <prvIsQueueEmpty>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f43f af2d 	beq.w	800ba94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00d      	beq.n	800bc5c <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 800bc40:	f001 fc00 	bl	800d444 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bc44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc46:	f000 f8eb 	bl	800be20 <prvGetDisinheritPriorityAfterTimeout>
 800bc4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc52:	4618      	mov	r0, r3
 800bc54:	f001 f9b6 	bl	800cfc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bc58:	f001 fc24 	bl	800d4a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800bc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f003 fa64 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800bc64:	4604      	mov	r4, r0
 800bc66:	2000      	movs	r0, #0
 800bc68:	f003 fa60 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	2101      	movs	r1, #1
 800bc72:	9100      	str	r1, [sp, #0]
 800bc74:	4621      	mov	r1, r4
 800bc76:	205c      	movs	r0, #92	; 0x5c
 800bc78:	f002 fe12 	bl	800e8a0 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800bc7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	373c      	adds	r7, #60	; 0x3c
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd90      	pop	{r4, r7, pc}
 800bc86:	bf00      	nop
 800bc88:	e000ed04 	.word	0xe000ed04

0800bc8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc8c:	b590      	push	{r4, r7, lr}
 800bc8e:	b08f      	sub	sp, #60	; 0x3c
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10a      	bne.n	800bcb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	623b      	str	r3, [r7, #32]
}
 800bcb4:	bf00      	nop
 800bcb6:	e7fe      	b.n	800bcb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d103      	bne.n	800bcc6 <xQueueReceiveFromISR+0x3a>
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <xQueueReceiveFromISR+0x3e>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e000      	b.n	800bccc <xQueueReceiveFromISR+0x40>
 800bcca:	2300      	movs	r3, #0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10a      	bne.n	800bce6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	61fb      	str	r3, [r7, #28]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bce6:	f001 fc8f 	bl	800d608 <vPortValidateInterruptPriority>
	__asm volatile
 800bcea:	f3ef 8211 	mrs	r2, BASEPRI
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	61ba      	str	r2, [r7, #24]
 800bd00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bd02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d03e      	beq.n	800bd90 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f003 fa04 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800bd24:	4604      	mov	r4, r0
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f003 f9ff 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4621      	mov	r1, r4
 800bd34:	2062      	movs	r0, #98	; 0x62
 800bd36:	f002 fd3d 	bl	800e7b4 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd3a:	68b9      	ldr	r1, [r7, #8]
 800bd3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd3e:	f000 f8f1 	bl	800bf24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	1e5a      	subs	r2, r3, #1
 800bd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd48:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bd4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd52:	d112      	bne.n	800bd7a <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d016      	beq.n	800bd8a <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5e:	3310      	adds	r3, #16
 800bd60:	4618      	mov	r0, r3
 800bd62:	f000 fe41 	bl	800c9e8 <xTaskRemoveFromEventList>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00e      	beq.n	800bd8a <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00b      	beq.n	800bd8a <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	601a      	str	r2, [r3, #0]
 800bd78:	e007      	b.n	800bd8a <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bd7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd7e:	3301      	adds	r3, #1
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	b25a      	sxtb	r2, r3
 800bd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd8e:	e010      	b.n	800bdb2 <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 800bd90:	2300      	movs	r3, #0
 800bd92:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	4618      	mov	r0, r3
 800bd98:	f003 f9c8 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	4618      	mov	r0, r3
 800bda2:	f003 f9c3 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800bda6:	4602      	mov	r2, r0
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4621      	mov	r1, r4
 800bdac:	2062      	movs	r0, #98	; 0x62
 800bdae:	f002 fd01 	bl	800e7b4 <SEGGER_SYSVIEW_RecordU32x3>
 800bdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	f383 8811 	msr	BASEPRI, r3
}
 800bdbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	373c      	adds	r7, #60	; 0x3c
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd90      	pop	{r4, r7, pc}

0800bdc8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10a      	bne.n	800bdf0 <vQueueDelete+0x28>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	60bb      	str	r3, [r7, #8]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f003 f99a 	bl	800f12c <SEGGER_SYSVIEW_ShrinkId>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	205f      	movs	r0, #95	; 0x5f
 800bdfe:	f002 fc43 	bl	800e688 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f000 f934 	bl	800c070 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d102      	bne.n	800be18 <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f001 fd04 	bl	800d820 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800be18:	bf00      	nop
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d006      	beq.n	800be3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f1c3 0307 	rsb	r3, r3, #7
 800be3a:	60fb      	str	r3, [r7, #12]
 800be3c:	e001      	b.n	800be42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800be42:	68fb      	ldr	r3, [r7, #12]
	}
 800be44:	4618      	mov	r0, r3
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be5c:	2300      	movs	r3, #0
 800be5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10d      	bne.n	800be8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d14d      	bne.n	800bf12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	4618      	mov	r0, r3
 800be7c:	f001 f814 	bl	800cea8 <xTaskPriorityDisinherit>
 800be80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	609a      	str	r2, [r3, #8]
 800be88:	e043      	b.n	800bf12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d119      	bne.n	800bec4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6858      	ldr	r0, [r3, #4]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be98:	461a      	mov	r2, r3
 800be9a:	68b9      	ldr	r1, [r7, #8]
 800be9c:	f004 fe0f 	bl	8010abe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	685a      	ldr	r2, [r3, #4]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea8:	441a      	add	r2, r3
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	685a      	ldr	r2, [r3, #4]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d32b      	bcc.n	800bf12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	605a      	str	r2, [r3, #4]
 800bec2:	e026      	b.n	800bf12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	68d8      	ldr	r0, [r3, #12]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800becc:	461a      	mov	r2, r3
 800bece:	68b9      	ldr	r1, [r7, #8]
 800bed0:	f004 fdf5 	bl	8010abe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	68da      	ldr	r2, [r3, #12]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bedc:	425b      	negs	r3, r3
 800bede:	441a      	add	r2, r3
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	68da      	ldr	r2, [r3, #12]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	429a      	cmp	r2, r3
 800beee:	d207      	bcs.n	800bf00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	689a      	ldr	r2, [r3, #8]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef8:	425b      	negs	r3, r3
 800befa:	441a      	add	r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d105      	bne.n	800bf12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf1a:	697b      	ldr	r3, [r7, #20]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3718      	adds	r7, #24
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d018      	beq.n	800bf68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68da      	ldr	r2, [r3, #12]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3e:	441a      	add	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	68da      	ldr	r2, [r3, #12]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d303      	bcc.n	800bf58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	68d9      	ldr	r1, [r3, #12]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf60:	461a      	mov	r2, r3
 800bf62:	6838      	ldr	r0, [r7, #0]
 800bf64:	f004 fdab 	bl	8010abe <memcpy>
	}
}
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf78:	f001 fa64 	bl	800d444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf84:	e011      	b.n	800bfaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d012      	beq.n	800bfb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	3324      	adds	r3, #36	; 0x24
 800bf92:	4618      	mov	r0, r3
 800bf94:	f000 fd28 	bl	800c9e8 <xTaskRemoveFromEventList>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d001      	beq.n	800bfa2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bf9e:	f000 fe01 	bl	800cba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	dce9      	bgt.n	800bf86 <prvUnlockQueue+0x16>
 800bfb2:	e000      	b.n	800bfb6 <prvUnlockQueue+0x46>
					break;
 800bfb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	22ff      	movs	r2, #255	; 0xff
 800bfba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bfbe:	f001 fa71 	bl	800d4a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bfc2:	f001 fa3f 	bl	800d444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfce:	e011      	b.n	800bff4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d012      	beq.n	800bffe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	3310      	adds	r3, #16
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 fd03 	bl	800c9e8 <xTaskRemoveFromEventList>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d001      	beq.n	800bfec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bfe8:	f000 fddc 	bl	800cba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
 800bfee:	3b01      	subs	r3, #1
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dce9      	bgt.n	800bfd0 <prvUnlockQueue+0x60>
 800bffc:	e000      	b.n	800c000 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bffe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	22ff      	movs	r2, #255	; 0xff
 800c004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c008:	f001 fa4c 	bl	800d4a4 <vPortExitCritical>
}
 800c00c:	bf00      	nop
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c01c:	f001 fa12 	bl	800d444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c024:	2b00      	cmp	r3, #0
 800c026:	d102      	bne.n	800c02e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c028:	2301      	movs	r3, #1
 800c02a:	60fb      	str	r3, [r7, #12]
 800c02c:	e001      	b.n	800c032 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c02e:	2300      	movs	r3, #0
 800c030:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c032:	f001 fa37 	bl	800d4a4 <vPortExitCritical>

	return xReturn;
 800c036:	68fb      	ldr	r3, [r7, #12]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3710      	adds	r7, #16
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c048:	f001 f9fc 	bl	800d444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c054:	429a      	cmp	r2, r3
 800c056:	d102      	bne.n	800c05e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c058:	2301      	movs	r3, #1
 800c05a:	60fb      	str	r3, [r7, #12]
 800c05c:	e001      	b.n	800c062 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c05e:	2300      	movs	r3, #0
 800c060:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c062:	f001 fa1f 	bl	800d4a4 <vPortExitCritical>

	return xReturn;
 800c066:	68fb      	ldr	r3, [r7, #12]
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c078:	2300      	movs	r3, #0
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	e016      	b.n	800c0ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c07e:	4a10      	ldr	r2, [pc, #64]	; (800c0c0 <vQueueUnregisterQueue+0x50>)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	00db      	lsls	r3, r3, #3
 800c084:	4413      	add	r3, r2
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d10b      	bne.n	800c0a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c08e:	4a0c      	ldr	r2, [pc, #48]	; (800c0c0 <vQueueUnregisterQueue+0x50>)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2100      	movs	r1, #0
 800c094:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c098:	4a09      	ldr	r2, [pc, #36]	; (800c0c0 <vQueueUnregisterQueue+0x50>)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	4413      	add	r3, r2
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	605a      	str	r2, [r3, #4]
				break;
 800c0a4:	e006      	b.n	800c0b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2b07      	cmp	r3, #7
 800c0b0:	d9e5      	bls.n	800c07e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c0b2:	bf00      	nop
 800c0b4:	bf00      	nop
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	20000d1c 	.word	0x20000d1c

0800c0c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b08e      	sub	sp, #56	; 0x38
 800c0c8:	af04      	add	r7, sp, #16
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
 800c0d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10a      	bne.n	800c0ee <xTaskCreateStatic+0x2a>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	623b      	str	r3, [r7, #32]
}
 800c0ea:	bf00      	nop
 800c0ec:	e7fe      	b.n	800c0ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10a      	bne.n	800c10a <xTaskCreateStatic+0x46>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	61fb      	str	r3, [r7, #28]
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c10a:	23b4      	movs	r3, #180	; 0xb4
 800c10c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	2bb4      	cmp	r3, #180	; 0xb4
 800c112:	d00a      	beq.n	800c12a <xTaskCreateStatic+0x66>
	__asm volatile
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	61bb      	str	r3, [r7, #24]
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c12a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d01e      	beq.n	800c170 <xTaskCreateStatic+0xac>
 800c132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c134:	2b00      	cmp	r3, #0
 800c136:	d01b      	beq.n	800c170 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c140:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c144:	2202      	movs	r2, #2
 800c146:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c14a:	2300      	movs	r3, #0
 800c14c:	9303      	str	r3, [sp, #12]
 800c14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c150:	9302      	str	r3, [sp, #8]
 800c152:	f107 0314 	add.w	r3, r7, #20
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	68b9      	ldr	r1, [r7, #8]
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f000 f850 	bl	800c208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c16a:	f000 f8eb 	bl	800c344 <prvAddNewTaskToReadyList>
 800c16e:	e001      	b.n	800c174 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c170:	2300      	movs	r3, #0
 800c172:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c174:	697b      	ldr	r3, [r7, #20]
	}
 800c176:	4618      	mov	r0, r3
 800c178:	3728      	adds	r7, #40	; 0x28
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b08c      	sub	sp, #48	; 0x30
 800c182:	af04      	add	r7, sp, #16
 800c184:	60f8      	str	r0, [r7, #12]
 800c186:	60b9      	str	r1, [r7, #8]
 800c188:	603b      	str	r3, [r7, #0]
 800c18a:	4613      	mov	r3, r2
 800c18c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c18e:	88fb      	ldrh	r3, [r7, #6]
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4618      	mov	r0, r3
 800c194:	f001 fa78 	bl	800d688 <pvPortMalloc>
 800c198:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00e      	beq.n	800c1be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c1a0:	20b4      	movs	r0, #180	; 0xb4
 800c1a2:	f001 fa71 	bl	800d688 <pvPortMalloc>
 800c1a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	631a      	str	r2, [r3, #48]	; 0x30
 800c1b4:	e005      	b.n	800c1c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c1b6:	6978      	ldr	r0, [r7, #20]
 800c1b8:	f001 fb32 	bl	800d820 <vPortFree>
 800c1bc:	e001      	b.n	800c1c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d017      	beq.n	800c1f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c1d0:	88fa      	ldrh	r2, [r7, #6]
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	9303      	str	r3, [sp, #12]
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	9302      	str	r3, [sp, #8]
 800c1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1dc:	9301      	str	r3, [sp, #4]
 800c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	68b9      	ldr	r1, [r7, #8]
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 f80e 	bl	800c208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1ec:	69f8      	ldr	r0, [r7, #28]
 800c1ee:	f000 f8a9 	bl	800c344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	61bb      	str	r3, [r7, #24]
 800c1f6:	e002      	b.n	800c1fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c1fe:	69bb      	ldr	r3, [r7, #24]
	}
 800c200:	4618      	mov	r0, r3
 800c202:	3720      	adds	r7, #32
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
 800c214:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c220:	3b01      	subs	r3, #1
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	f023 0307 	bic.w	r3, r3, #7
 800c22e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	f003 0307 	and.w	r3, r3, #7
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00a      	beq.n	800c250 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23e:	f383 8811 	msr	BASEPRI, r3
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	617b      	str	r3, [r7, #20]
}
 800c24c:	bf00      	nop
 800c24e:	e7fe      	b.n	800c24e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d01f      	beq.n	800c296 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c256:	2300      	movs	r3, #0
 800c258:	61fb      	str	r3, [r7, #28]
 800c25a:	e012      	b.n	800c282 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	4413      	add	r3, r2
 800c262:	7819      	ldrb	r1, [r3, #0]
 800c264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	4413      	add	r3, r2
 800c26a:	3334      	adds	r3, #52	; 0x34
 800c26c:	460a      	mov	r2, r1
 800c26e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	4413      	add	r3, r2
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d006      	beq.n	800c28a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	3301      	adds	r3, #1
 800c280:	61fb      	str	r3, [r7, #28]
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	2b0f      	cmp	r3, #15
 800c286:	d9e9      	bls.n	800c25c <prvInitialiseNewTask+0x54>
 800c288:	e000      	b.n	800c28c <prvInitialiseNewTask+0x84>
			{
				break;
 800c28a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	2200      	movs	r2, #0
 800c290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c294:	e003      	b.n	800c29e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	2b06      	cmp	r3, #6
 800c2a2:	d901      	bls.n	800c2a8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c2a4:	2306      	movs	r3, #6
 800c2a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2b2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	3304      	adds	r3, #4
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fe ffbf 	bl	800b242 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c6:	3318      	adds	r3, #24
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fe ffba 	bl	800b242 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d6:	f1c3 0207 	rsb	r2, r3, #7
 800c2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	334c      	adds	r3, #76	; 0x4c
 800c2f8:	2260      	movs	r2, #96	; 0x60
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f004 fbec 	bl	8010ada <memset>
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	4a0c      	ldr	r2, [pc, #48]	; (800c338 <prvInitialiseNewTask+0x130>)
 800c306:	651a      	str	r2, [r3, #80]	; 0x50
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	4a0c      	ldr	r2, [pc, #48]	; (800c33c <prvInitialiseNewTask+0x134>)
 800c30c:	655a      	str	r2, [r3, #84]	; 0x54
 800c30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c310:	4a0b      	ldr	r2, [pc, #44]	; (800c340 <prvInitialiseNewTask+0x138>)
 800c312:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c314:	683a      	ldr	r2, [r7, #0]
 800c316:	68f9      	ldr	r1, [r7, #12]
 800c318:	69b8      	ldr	r0, [r7, #24]
 800c31a:	f000 ff65 	bl	800d1e8 <pxPortInitialiseStack>
 800c31e:	4602      	mov	r2, r0
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c326:	2b00      	cmp	r3, #0
 800c328:	d002      	beq.n	800c330 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c32e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c330:	bf00      	nop
 800c332:	3720      	adds	r7, #32
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	08012688 	.word	0x08012688
 800c33c:	080126a8 	.word	0x080126a8
 800c340:	08012668 	.word	0x08012668

0800c344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c344:	b5b0      	push	{r4, r5, r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af02      	add	r7, sp, #8
 800c34a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c34c:	f001 f87a 	bl	800d444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c350:	4b39      	ldr	r3, [pc, #228]	; (800c438 <prvAddNewTaskToReadyList+0xf4>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	3301      	adds	r3, #1
 800c356:	4a38      	ldr	r2, [pc, #224]	; (800c438 <prvAddNewTaskToReadyList+0xf4>)
 800c358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c35a:	4b38      	ldr	r3, [pc, #224]	; (800c43c <prvAddNewTaskToReadyList+0xf8>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d109      	bne.n	800c376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c362:	4a36      	ldr	r2, [pc, #216]	; (800c43c <prvAddNewTaskToReadyList+0xf8>)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c368:	4b33      	ldr	r3, [pc, #204]	; (800c438 <prvAddNewTaskToReadyList+0xf4>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d110      	bne.n	800c392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c370:	f000 fc3c 	bl	800cbec <prvInitialiseTaskLists>
 800c374:	e00d      	b.n	800c392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c376:	4b32      	ldr	r3, [pc, #200]	; (800c440 <prvAddNewTaskToReadyList+0xfc>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d109      	bne.n	800c392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c37e:	4b2f      	ldr	r3, [pc, #188]	; (800c43c <prvAddNewTaskToReadyList+0xf8>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c388:	429a      	cmp	r2, r3
 800c38a:	d802      	bhi.n	800c392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c38c:	4a2b      	ldr	r2, [pc, #172]	; (800c43c <prvAddNewTaskToReadyList+0xf8>)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c392:	4b2c      	ldr	r3, [pc, #176]	; (800c444 <prvAddNewTaskToReadyList+0x100>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3301      	adds	r3, #1
 800c398:	4a2a      	ldr	r2, [pc, #168]	; (800c444 <prvAddNewTaskToReadyList+0x100>)
 800c39a:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d016      	beq.n	800c3d0 <prvAddNewTaskToReadyList+0x8c>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f002 fdf5 	bl	800ef94 <SEGGER_SYSVIEW_OnTaskCreate>
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ba:	461d      	mov	r5, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	461c      	mov	r4, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c6:	1ae3      	subs	r3, r4, r3
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	462b      	mov	r3, r5
 800c3cc:	f003 f8bc 	bl	800f548 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f002 fe66 	bl	800f0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3dc:	2201      	movs	r2, #1
 800c3de:	409a      	lsls	r2, r3
 800c3e0:	4b19      	ldr	r3, [pc, #100]	; (800c448 <prvAddNewTaskToReadyList+0x104>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	4a18      	ldr	r2, [pc, #96]	; (800c448 <prvAddNewTaskToReadyList+0x104>)
 800c3e8:	6013      	str	r3, [r2, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4413      	add	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4a15      	ldr	r2, [pc, #84]	; (800c44c <prvAddNewTaskToReadyList+0x108>)
 800c3f8:	441a      	add	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	4619      	mov	r1, r3
 800c400:	4610      	mov	r0, r2
 800c402:	f7fe ff2b 	bl	800b25c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c406:	f001 f84d 	bl	800d4a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c40a:	4b0d      	ldr	r3, [pc, #52]	; (800c440 <prvAddNewTaskToReadyList+0xfc>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00e      	beq.n	800c430 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c412:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <prvAddNewTaskToReadyList+0xf8>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d207      	bcs.n	800c430 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c420:	4b0b      	ldr	r3, [pc, #44]	; (800c450 <prvAddNewTaskToReadyList+0x10c>)
 800c422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c430:	bf00      	nop
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bdb0      	pop	{r4, r5, r7, pc}
 800c438:	20000e5c 	.word	0x20000e5c
 800c43c:	20000d5c 	.word	0x20000d5c
 800c440:	20000e68 	.word	0x20000e68
 800c444:	20000e78 	.word	0x20000e78
 800c448:	20000e64 	.word	0x20000e64
 800c44c:	20000d60 	.word	0x20000d60
 800c450:	e000ed04 	.word	0xe000ed04

0800c454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c45c:	2300      	movs	r3, #0
 800c45e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d01b      	beq.n	800c49e <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c466:	4b15      	ldr	r3, [pc, #84]	; (800c4bc <vTaskDelay+0x68>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00a      	beq.n	800c484 <vTaskDelay+0x30>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	60bb      	str	r3, [r7, #8]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c484:	f000 f89a 	bl	800c5bc <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800c488:	6879      	ldr	r1, [r7, #4]
 800c48a:	2023      	movs	r0, #35	; 0x23
 800c48c:	f002 f8fc 	bl	800e688 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c490:	2100      	movs	r1, #0
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 fe42 	bl	800d11c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c498:	f000 f89e 	bl	800c5d8 <xTaskResumeAll>
 800c49c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d107      	bne.n	800c4b4 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 800c4a4:	4b06      	ldr	r3, [pc, #24]	; (800c4c0 <vTaskDelay+0x6c>)
 800c4a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4aa:	601a      	str	r2, [r3, #0]
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4b4:	bf00      	nop
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	20000e84 	.word	0x20000e84
 800c4c0:	e000ed04 	.word	0xe000ed04

0800c4c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b08a      	sub	sp, #40	; 0x28
 800c4c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4d2:	463a      	mov	r2, r7
 800c4d4:	1d39      	adds	r1, r7, #4
 800c4d6:	f107 0308 	add.w	r3, r7, #8
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7f4 fa22 	bl	8000924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4e0:	6839      	ldr	r1, [r7, #0]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	9202      	str	r2, [sp, #8]
 800c4e8:	9301      	str	r3, [sp, #4]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	460a      	mov	r2, r1
 800c4f2:	492a      	ldr	r1, [pc, #168]	; (800c59c <vTaskStartScheduler+0xd8>)
 800c4f4:	482a      	ldr	r0, [pc, #168]	; (800c5a0 <vTaskStartScheduler+0xdc>)
 800c4f6:	f7ff fde5 	bl	800c0c4 <xTaskCreateStatic>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	4a29      	ldr	r2, [pc, #164]	; (800c5a4 <vTaskStartScheduler+0xe0>)
 800c4fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c500:	4b28      	ldr	r3, [pc, #160]	; (800c5a4 <vTaskStartScheduler+0xe0>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c508:	2301      	movs	r3, #1
 800c50a:	617b      	str	r3, [r7, #20]
 800c50c:	e001      	b.n	800c512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c50e:	2300      	movs	r3, #0
 800c510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d12e      	bne.n	800c576 <vTaskStartScheduler+0xb2>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	613b      	str	r3, [r7, #16]
}
 800c52a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c52c:	4b1e      	ldr	r3, [pc, #120]	; (800c5a8 <vTaskStartScheduler+0xe4>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	334c      	adds	r3, #76	; 0x4c
 800c532:	4a1e      	ldr	r2, [pc, #120]	; (800c5ac <vTaskStartScheduler+0xe8>)
 800c534:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c536:	4b1e      	ldr	r3, [pc, #120]	; (800c5b0 <vTaskStartScheduler+0xec>)
 800c538:	f04f 32ff 	mov.w	r2, #4294967295
 800c53c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c53e:	4b1d      	ldr	r3, [pc, #116]	; (800c5b4 <vTaskStartScheduler+0xf0>)
 800c540:	2201      	movs	r2, #1
 800c542:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c544:	4b1c      	ldr	r3, [pc, #112]	; (800c5b8 <vTaskStartScheduler+0xf4>)
 800c546:	2200      	movs	r2, #0
 800c548:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800c54a:	4b17      	ldr	r3, [pc, #92]	; (800c5a8 <vTaskStartScheduler+0xe4>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3334      	adds	r3, #52	; 0x34
 800c550:	2205      	movs	r2, #5
 800c552:	4912      	ldr	r1, [pc, #72]	; (800c59c <vTaskStartScheduler+0xd8>)
 800c554:	4618      	mov	r0, r3
 800c556:	f004 faa2 	bl	8010a9e <memcmp>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d005      	beq.n	800c56c <vTaskStartScheduler+0xa8>
 800c560:	4b11      	ldr	r3, [pc, #68]	; (800c5a8 <vTaskStartScheduler+0xe4>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4618      	mov	r0, r3
 800c566:	f002 fd59 	bl	800f01c <SEGGER_SYSVIEW_OnTaskStartExec>
 800c56a:	e001      	b.n	800c570 <vTaskStartScheduler+0xac>
 800c56c:	f002 fcf6 	bl	800ef5c <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c570:	f000 fec6 	bl	800d300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c574:	e00e      	b.n	800c594 <vTaskStartScheduler+0xd0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57c:	d10a      	bne.n	800c594 <vTaskStartScheduler+0xd0>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	60fb      	str	r3, [r7, #12]
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <vTaskStartScheduler+0xce>
}
 800c594:	bf00      	nop
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	080120c0 	.word	0x080120c0
 800c5a0:	0800cbbd 	.word	0x0800cbbd
 800c5a4:	20000e80 	.word	0x20000e80
 800c5a8:	20000d5c 	.word	0x20000d5c
 800c5ac:	20000018 	.word	0x20000018
 800c5b0:	20000e7c 	.word	0x20000e7c
 800c5b4:	20000e68 	.word	0x20000e68
 800c5b8:	20000e60 	.word	0x20000e60

0800c5bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c5bc:	b480      	push	{r7}
 800c5be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c5c0:	4b04      	ldr	r3, [pc, #16]	; (800c5d4 <vTaskSuspendAll+0x18>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	4a03      	ldr	r2, [pc, #12]	; (800c5d4 <vTaskSuspendAll+0x18>)
 800c5c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c5ca:	bf00      	nop
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr
 800c5d4:	20000e84 	.word	0x20000e84

0800c5d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c5e6:	4b43      	ldr	r3, [pc, #268]	; (800c6f4 <xTaskResumeAll+0x11c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d10a      	bne.n	800c604 <xTaskResumeAll+0x2c>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	603b      	str	r3, [r7, #0]
}
 800c600:	bf00      	nop
 800c602:	e7fe      	b.n	800c602 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c604:	f000 ff1e 	bl	800d444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c608:	4b3a      	ldr	r3, [pc, #232]	; (800c6f4 <xTaskResumeAll+0x11c>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	4a39      	ldr	r2, [pc, #228]	; (800c6f4 <xTaskResumeAll+0x11c>)
 800c610:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c612:	4b38      	ldr	r3, [pc, #224]	; (800c6f4 <xTaskResumeAll+0x11c>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d165      	bne.n	800c6e6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c61a:	4b37      	ldr	r3, [pc, #220]	; (800c6f8 <xTaskResumeAll+0x120>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d061      	beq.n	800c6e6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c622:	e032      	b.n	800c68a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c624:	4b35      	ldr	r3, [pc, #212]	; (800c6fc <xTaskResumeAll+0x124>)
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	3318      	adds	r3, #24
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe fe70 	bl	800b316 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	3304      	adds	r3, #4
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fe fe6b 	bl	800b316 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	4618      	mov	r0, r3
 800c644:	f002 fd2e 	bl	800f0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64c:	2201      	movs	r2, #1
 800c64e:	409a      	lsls	r2, r3
 800c650:	4b2b      	ldr	r3, [pc, #172]	; (800c700 <xTaskResumeAll+0x128>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4313      	orrs	r3, r2
 800c656:	4a2a      	ldr	r2, [pc, #168]	; (800c700 <xTaskResumeAll+0x128>)
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c65e:	4613      	mov	r3, r2
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4a27      	ldr	r2, [pc, #156]	; (800c704 <xTaskResumeAll+0x12c>)
 800c668:	441a      	add	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	3304      	adds	r3, #4
 800c66e:	4619      	mov	r1, r3
 800c670:	4610      	mov	r0, r2
 800c672:	f7fe fdf3 	bl	800b25c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67a:	4b23      	ldr	r3, [pc, #140]	; (800c708 <xTaskResumeAll+0x130>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c680:	429a      	cmp	r2, r3
 800c682:	d302      	bcc.n	800c68a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800c684:	4b21      	ldr	r3, [pc, #132]	; (800c70c <xTaskResumeAll+0x134>)
 800c686:	2201      	movs	r2, #1
 800c688:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c68a:	4b1c      	ldr	r3, [pc, #112]	; (800c6fc <xTaskResumeAll+0x124>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1c8      	bne.n	800c624 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d001      	beq.n	800c69c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c698:	f000 fb4a 	bl	800cd30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c69c:	4b1c      	ldr	r3, [pc, #112]	; (800c710 <xTaskResumeAll+0x138>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d010      	beq.n	800c6ca <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c6a8:	f000 f848 	bl	800c73c <xTaskIncrementTick>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d002      	beq.n	800c6b8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800c6b2:	4b16      	ldr	r3, [pc, #88]	; (800c70c <xTaskResumeAll+0x134>)
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1f1      	bne.n	800c6a8 <xTaskResumeAll+0xd0>

						xPendedTicks = 0;
 800c6c4:	4b12      	ldr	r3, [pc, #72]	; (800c710 <xTaskResumeAll+0x138>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c6ca:	4b10      	ldr	r3, [pc, #64]	; (800c70c <xTaskResumeAll+0x134>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d009      	beq.n	800c6e6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6d6:	4b0f      	ldr	r3, [pc, #60]	; (800c714 <xTaskResumeAll+0x13c>)
 800c6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6dc:	601a      	str	r2, [r3, #0]
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6e6:	f000 fedd 	bl	800d4a4 <vPortExitCritical>

	return xAlreadyYielded;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	20000e84 	.word	0x20000e84
 800c6f8:	20000e5c 	.word	0x20000e5c
 800c6fc:	20000e1c 	.word	0x20000e1c
 800c700:	20000e64 	.word	0x20000e64
 800c704:	20000d60 	.word	0x20000d60
 800c708:	20000d5c 	.word	0x20000d5c
 800c70c:	20000e70 	.word	0x20000e70
 800c710:	20000e6c 	.word	0x20000e6c
 800c714:	e000ed04 	.word	0xe000ed04

0800c718 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c71e:	f000 ff73 	bl	800d608 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c722:	2300      	movs	r3, #0
 800c724:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c726:	4b04      	ldr	r3, [pc, #16]	; (800c738 <xTaskGetTickCountFromISR+0x20>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c72c:	683b      	ldr	r3, [r7, #0]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	20000e60 	.word	0x20000e60

0800c73c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b086      	sub	sp, #24
 800c740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c742:	2300      	movs	r3, #0
 800c744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c746:	4b50      	ldr	r3, [pc, #320]	; (800c888 <xTaskIncrementTick+0x14c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f040 8092 	bne.w	800c874 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c750:	4b4e      	ldr	r3, [pc, #312]	; (800c88c <xTaskIncrementTick+0x150>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3301      	adds	r3, #1
 800c756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c758:	4a4c      	ldr	r2, [pc, #304]	; (800c88c <xTaskIncrementTick+0x150>)
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d120      	bne.n	800c7a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c764:	4b4a      	ldr	r3, [pc, #296]	; (800c890 <xTaskIncrementTick+0x154>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00a      	beq.n	800c784 <xTaskIncrementTick+0x48>
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	603b      	str	r3, [r7, #0]
}
 800c780:	bf00      	nop
 800c782:	e7fe      	b.n	800c782 <xTaskIncrementTick+0x46>
 800c784:	4b42      	ldr	r3, [pc, #264]	; (800c890 <xTaskIncrementTick+0x154>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	4b42      	ldr	r3, [pc, #264]	; (800c894 <xTaskIncrementTick+0x158>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a40      	ldr	r2, [pc, #256]	; (800c890 <xTaskIncrementTick+0x154>)
 800c790:	6013      	str	r3, [r2, #0]
 800c792:	4a40      	ldr	r2, [pc, #256]	; (800c894 <xTaskIncrementTick+0x158>)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6013      	str	r3, [r2, #0]
 800c798:	4b3f      	ldr	r3, [pc, #252]	; (800c898 <xTaskIncrementTick+0x15c>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	3301      	adds	r3, #1
 800c79e:	4a3e      	ldr	r2, [pc, #248]	; (800c898 <xTaskIncrementTick+0x15c>)
 800c7a0:	6013      	str	r3, [r2, #0]
 800c7a2:	f000 fac5 	bl	800cd30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c7a6:	4b3d      	ldr	r3, [pc, #244]	; (800c89c <xTaskIncrementTick+0x160>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	693a      	ldr	r2, [r7, #16]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d34c      	bcc.n	800c84a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7b0:	4b37      	ldr	r3, [pc, #220]	; (800c890 <xTaskIncrementTick+0x154>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d104      	bne.n	800c7c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7ba:	4b38      	ldr	r3, [pc, #224]	; (800c89c <xTaskIncrementTick+0x160>)
 800c7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c0:	601a      	str	r2, [r3, #0]
					break;
 800c7c2:	e042      	b.n	800c84a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7c4:	4b32      	ldr	r3, [pc, #200]	; (800c890 <xTaskIncrementTick+0x154>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d203      	bcs.n	800c7e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c7dc:	4a2f      	ldr	r2, [pc, #188]	; (800c89c <xTaskIncrementTick+0x160>)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7e2:	e032      	b.n	800c84a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	3304      	adds	r3, #4
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fe fd94 	bl	800b316 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d004      	beq.n	800c800 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	3318      	adds	r3, #24
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fe fd8b 	bl	800b316 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	4618      	mov	r0, r3
 800c804:	f002 fc4e 	bl	800f0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80c:	2201      	movs	r2, #1
 800c80e:	409a      	lsls	r2, r3
 800c810:	4b23      	ldr	r3, [pc, #140]	; (800c8a0 <xTaskIncrementTick+0x164>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4313      	orrs	r3, r2
 800c816:	4a22      	ldr	r2, [pc, #136]	; (800c8a0 <xTaskIncrementTick+0x164>)
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c81e:	4613      	mov	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4413      	add	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4a1f      	ldr	r2, [pc, #124]	; (800c8a4 <xTaskIncrementTick+0x168>)
 800c828:	441a      	add	r2, r3
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	3304      	adds	r3, #4
 800c82e:	4619      	mov	r1, r3
 800c830:	4610      	mov	r0, r2
 800c832:	f7fe fd13 	bl	800b25c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c83a:	4b1b      	ldr	r3, [pc, #108]	; (800c8a8 <xTaskIncrementTick+0x16c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c840:	429a      	cmp	r2, r3
 800c842:	d3b5      	bcc.n	800c7b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c844:	2301      	movs	r3, #1
 800c846:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c848:	e7b2      	b.n	800c7b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c84a:	4b17      	ldr	r3, [pc, #92]	; (800c8a8 <xTaskIncrementTick+0x16c>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c850:	4914      	ldr	r1, [pc, #80]	; (800c8a4 <xTaskIncrementTick+0x168>)
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	440b      	add	r3, r1
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d901      	bls.n	800c866 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 800c862:	2301      	movs	r3, #1
 800c864:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c866:	4b11      	ldr	r3, [pc, #68]	; (800c8ac <xTaskIncrementTick+0x170>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d007      	beq.n	800c87e <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 800c86e:	2301      	movs	r3, #1
 800c870:	617b      	str	r3, [r7, #20]
 800c872:	e004      	b.n	800c87e <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c874:	4b0e      	ldr	r3, [pc, #56]	; (800c8b0 <xTaskIncrementTick+0x174>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	3301      	adds	r3, #1
 800c87a:	4a0d      	ldr	r2, [pc, #52]	; (800c8b0 <xTaskIncrementTick+0x174>)
 800c87c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c87e:	697b      	ldr	r3, [r7, #20]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3718      	adds	r7, #24
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	20000e84 	.word	0x20000e84
 800c88c:	20000e60 	.word	0x20000e60
 800c890:	20000e14 	.word	0x20000e14
 800c894:	20000e18 	.word	0x20000e18
 800c898:	20000e74 	.word	0x20000e74
 800c89c:	20000e7c 	.word	0x20000e7c
 800c8a0:	20000e64 	.word	0x20000e64
 800c8a4:	20000d60 	.word	0x20000d60
 800c8a8:	20000d5c 	.word	0x20000d5c
 800c8ac:	20000e70 	.word	0x20000e70
 800c8b0:	20000e6c 	.word	0x20000e6c

0800c8b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c8ba:	4b32      	ldr	r3, [pc, #200]	; (800c984 <vTaskSwitchContext+0xd0>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c8c2:	4b31      	ldr	r3, [pc, #196]	; (800c988 <vTaskSwitchContext+0xd4>)
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c8c8:	e057      	b.n	800c97a <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800c8ca:	4b2f      	ldr	r3, [pc, #188]	; (800c988 <vTaskSwitchContext+0xd4>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8d0:	4b2e      	ldr	r3, [pc, #184]	; (800c98c <vTaskSwitchContext+0xd8>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	fab3 f383 	clz	r3, r3
 800c8dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c8de:	7afb      	ldrb	r3, [r7, #11]
 800c8e0:	f1c3 031f 	rsb	r3, r3, #31
 800c8e4:	617b      	str	r3, [r7, #20]
 800c8e6:	492a      	ldr	r1, [pc, #168]	; (800c990 <vTaskSwitchContext+0xdc>)
 800c8e8:	697a      	ldr	r2, [r7, #20]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	440b      	add	r3, r1
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10a      	bne.n	800c910 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	607b      	str	r3, [r7, #4]
}
 800c90c:	bf00      	nop
 800c90e:	e7fe      	b.n	800c90e <vTaskSwitchContext+0x5a>
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	4613      	mov	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4413      	add	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4a1d      	ldr	r2, [pc, #116]	; (800c990 <vTaskSwitchContext+0xdc>)
 800c91c:	4413      	add	r3, r2
 800c91e:	613b      	str	r3, [r7, #16]
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	605a      	str	r2, [r3, #4]
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	685a      	ldr	r2, [r3, #4]
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	3308      	adds	r3, #8
 800c932:	429a      	cmp	r2, r3
 800c934:	d104      	bne.n	800c940 <vTaskSwitchContext+0x8c>
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	605a      	str	r2, [r3, #4]
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	4a13      	ldr	r2, [pc, #76]	; (800c994 <vTaskSwitchContext+0xe0>)
 800c948:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800c94a:	4b12      	ldr	r3, [pc, #72]	; (800c994 <vTaskSwitchContext+0xe0>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	3334      	adds	r3, #52	; 0x34
 800c950:	2205      	movs	r2, #5
 800c952:	4911      	ldr	r1, [pc, #68]	; (800c998 <vTaskSwitchContext+0xe4>)
 800c954:	4618      	mov	r0, r3
 800c956:	f004 f8a2 	bl	8010a9e <memcmp>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d005      	beq.n	800c96c <vTaskSwitchContext+0xb8>
 800c960:	4b0c      	ldr	r3, [pc, #48]	; (800c994 <vTaskSwitchContext+0xe0>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f002 fb59 	bl	800f01c <SEGGER_SYSVIEW_OnTaskStartExec>
 800c96a:	e001      	b.n	800c970 <vTaskSwitchContext+0xbc>
 800c96c:	f002 faf6 	bl	800ef5c <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c970:	4b08      	ldr	r3, [pc, #32]	; (800c994 <vTaskSwitchContext+0xe0>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	334c      	adds	r3, #76	; 0x4c
 800c976:	4a09      	ldr	r2, [pc, #36]	; (800c99c <vTaskSwitchContext+0xe8>)
 800c978:	6013      	str	r3, [r2, #0]
}
 800c97a:	bf00      	nop
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	20000e84 	.word	0x20000e84
 800c988:	20000e70 	.word	0x20000e70
 800c98c:	20000e64 	.word	0x20000e64
 800c990:	20000d60 	.word	0x20000d60
 800c994:	20000d5c 	.word	0x20000d5c
 800c998:	080120c0 	.word	0x080120c0
 800c99c:	20000018 	.word	0x20000018

0800c9a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d10a      	bne.n	800c9c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	60fb      	str	r3, [r7, #12]
}
 800c9c2:	bf00      	nop
 800c9c4:	e7fe      	b.n	800c9c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9c6:	4b07      	ldr	r3, [pc, #28]	; (800c9e4 <vTaskPlaceOnEventList+0x44>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	3318      	adds	r3, #24
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7fe fc68 	bl	800b2a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c9d4:	2101      	movs	r1, #1
 800c9d6:	6838      	ldr	r0, [r7, #0]
 800c9d8:	f000 fba0 	bl	800d11c <prvAddCurrentTaskToDelayedList>
}
 800c9dc:	bf00      	nop
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	20000d5c 	.word	0x20000d5c

0800c9e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	68db      	ldr	r3, [r3, #12]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10a      	bne.n	800ca14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	60fb      	str	r3, [r7, #12]
}
 800ca10:	bf00      	nop
 800ca12:	e7fe      	b.n	800ca12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	3318      	adds	r3, #24
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fe fc7c 	bl	800b316 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca1e:	4b1f      	ldr	r3, [pc, #124]	; (800ca9c <xTaskRemoveFromEventList+0xb4>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d120      	bne.n	800ca68 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fe fc73 	bl	800b316 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f002 fb36 	bl	800f0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	409a      	lsls	r2, r3
 800ca40:	4b17      	ldr	r3, [pc, #92]	; (800caa0 <xTaskRemoveFromEventList+0xb8>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	4a16      	ldr	r2, [pc, #88]	; (800caa0 <xTaskRemoveFromEventList+0xb8>)
 800ca48:	6013      	str	r3, [r2, #0]
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca4e:	4613      	mov	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	4a13      	ldr	r2, [pc, #76]	; (800caa4 <xTaskRemoveFromEventList+0xbc>)
 800ca58:	441a      	add	r2, r3
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	3304      	adds	r3, #4
 800ca5e:	4619      	mov	r1, r3
 800ca60:	4610      	mov	r0, r2
 800ca62:	f7fe fbfb 	bl	800b25c <vListInsertEnd>
 800ca66:	e005      	b.n	800ca74 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	3318      	adds	r3, #24
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	480e      	ldr	r0, [pc, #56]	; (800caa8 <xTaskRemoveFromEventList+0xc0>)
 800ca70:	f7fe fbf4 	bl	800b25c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca78:	4b0c      	ldr	r3, [pc, #48]	; (800caac <xTaskRemoveFromEventList+0xc4>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d905      	bls.n	800ca8e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca82:	2301      	movs	r3, #1
 800ca84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca86:	4b0a      	ldr	r3, [pc, #40]	; (800cab0 <xTaskRemoveFromEventList+0xc8>)
 800ca88:	2201      	movs	r2, #1
 800ca8a:	601a      	str	r2, [r3, #0]
 800ca8c:	e001      	b.n	800ca92 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca92:	697b      	ldr	r3, [r7, #20]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3718      	adds	r7, #24
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	20000e84 	.word	0x20000e84
 800caa0:	20000e64 	.word	0x20000e64
 800caa4:	20000d60 	.word	0x20000d60
 800caa8:	20000e1c 	.word	0x20000e1c
 800caac:	20000d5c 	.word	0x20000d5c
 800cab0:	20000e70 	.word	0x20000e70

0800cab4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cabc:	4b06      	ldr	r3, [pc, #24]	; (800cad8 <vTaskInternalSetTimeOutState+0x24>)
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cac4:	4b05      	ldr	r3, [pc, #20]	; (800cadc <vTaskInternalSetTimeOutState+0x28>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	605a      	str	r2, [r3, #4]
}
 800cacc:	bf00      	nop
 800cace:	370c      	adds	r7, #12
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr
 800cad8:	20000e74 	.word	0x20000e74
 800cadc:	20000e60 	.word	0x20000e60

0800cae0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b088      	sub	sp, #32
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d10a      	bne.n	800cb06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800caf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf4:	f383 8811 	msr	BASEPRI, r3
 800caf8:	f3bf 8f6f 	isb	sy
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	613b      	str	r3, [r7, #16]
}
 800cb02:	bf00      	nop
 800cb04:	e7fe      	b.n	800cb04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d10a      	bne.n	800cb22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	60fb      	str	r3, [r7, #12]
}
 800cb1e:	bf00      	nop
 800cb20:	e7fe      	b.n	800cb20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cb22:	f000 fc8f 	bl	800d444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cb26:	4b1d      	ldr	r3, [pc, #116]	; (800cb9c <xTaskCheckForTimeOut+0xbc>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	69ba      	ldr	r2, [r7, #24]
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb3e:	d102      	bne.n	800cb46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb40:	2300      	movs	r3, #0
 800cb42:	61fb      	str	r3, [r7, #28]
 800cb44:	e023      	b.n	800cb8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	4b15      	ldr	r3, [pc, #84]	; (800cba0 <xTaskCheckForTimeOut+0xc0>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d007      	beq.n	800cb62 <xTaskCheckForTimeOut+0x82>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	69ba      	ldr	r2, [r7, #24]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d302      	bcc.n	800cb62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	61fb      	str	r3, [r7, #28]
 800cb60:	e015      	b.n	800cb8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d20b      	bcs.n	800cb84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	1ad2      	subs	r2, r2, r3
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff ff9b 	bl	800cab4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	61fb      	str	r3, [r7, #28]
 800cb82:	e004      	b.n	800cb8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2200      	movs	r2, #0
 800cb88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb8e:	f000 fc89 	bl	800d4a4 <vPortExitCritical>

	return xReturn;
 800cb92:	69fb      	ldr	r3, [r7, #28]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3720      	adds	r7, #32
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	20000e60 	.word	0x20000e60
 800cba0:	20000e74 	.word	0x20000e74

0800cba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cba4:	b480      	push	{r7}
 800cba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cba8:	4b03      	ldr	r3, [pc, #12]	; (800cbb8 <vTaskMissedYield+0x14>)
 800cbaa:	2201      	movs	r2, #1
 800cbac:	601a      	str	r2, [r3, #0]
}
 800cbae:	bf00      	nop
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr
 800cbb8:	20000e70 	.word	0x20000e70

0800cbbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cbc4:	f000 f852 	bl	800cc6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cbc8:	4b06      	ldr	r3, [pc, #24]	; (800cbe4 <prvIdleTask+0x28>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d9f9      	bls.n	800cbc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cbd0:	4b05      	ldr	r3, [pc, #20]	; (800cbe8 <prvIdleTask+0x2c>)
 800cbd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cbe0:	e7f0      	b.n	800cbc4 <prvIdleTask+0x8>
 800cbe2:	bf00      	nop
 800cbe4:	20000d60 	.word	0x20000d60
 800cbe8:	e000ed04 	.word	0xe000ed04

0800cbec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	607b      	str	r3, [r7, #4]
 800cbf6:	e00c      	b.n	800cc12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	4413      	add	r3, r2
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	4a12      	ldr	r2, [pc, #72]	; (800cc4c <prvInitialiseTaskLists+0x60>)
 800cc04:	4413      	add	r3, r2
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fe fafb 	bl	800b202 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	607b      	str	r3, [r7, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b06      	cmp	r3, #6
 800cc16:	d9ef      	bls.n	800cbf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cc18:	480d      	ldr	r0, [pc, #52]	; (800cc50 <prvInitialiseTaskLists+0x64>)
 800cc1a:	f7fe faf2 	bl	800b202 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cc1e:	480d      	ldr	r0, [pc, #52]	; (800cc54 <prvInitialiseTaskLists+0x68>)
 800cc20:	f7fe faef 	bl	800b202 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cc24:	480c      	ldr	r0, [pc, #48]	; (800cc58 <prvInitialiseTaskLists+0x6c>)
 800cc26:	f7fe faec 	bl	800b202 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cc2a:	480c      	ldr	r0, [pc, #48]	; (800cc5c <prvInitialiseTaskLists+0x70>)
 800cc2c:	f7fe fae9 	bl	800b202 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cc30:	480b      	ldr	r0, [pc, #44]	; (800cc60 <prvInitialiseTaskLists+0x74>)
 800cc32:	f7fe fae6 	bl	800b202 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cc36:	4b0b      	ldr	r3, [pc, #44]	; (800cc64 <prvInitialiseTaskLists+0x78>)
 800cc38:	4a05      	ldr	r2, [pc, #20]	; (800cc50 <prvInitialiseTaskLists+0x64>)
 800cc3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cc3c:	4b0a      	ldr	r3, [pc, #40]	; (800cc68 <prvInitialiseTaskLists+0x7c>)
 800cc3e:	4a05      	ldr	r2, [pc, #20]	; (800cc54 <prvInitialiseTaskLists+0x68>)
 800cc40:	601a      	str	r2, [r3, #0]
}
 800cc42:	bf00      	nop
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20000d60 	.word	0x20000d60
 800cc50:	20000dec 	.word	0x20000dec
 800cc54:	20000e00 	.word	0x20000e00
 800cc58:	20000e1c 	.word	0x20000e1c
 800cc5c:	20000e30 	.word	0x20000e30
 800cc60:	20000e48 	.word	0x20000e48
 800cc64:	20000e14 	.word	0x20000e14
 800cc68:	20000e18 	.word	0x20000e18

0800cc6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc72:	e019      	b.n	800cca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc74:	f000 fbe6 	bl	800d444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc78:	4b10      	ldr	r3, [pc, #64]	; (800ccbc <prvCheckTasksWaitingTermination+0x50>)
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3304      	adds	r3, #4
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7fe fb46 	bl	800b316 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc8a:	4b0d      	ldr	r3, [pc, #52]	; (800ccc0 <prvCheckTasksWaitingTermination+0x54>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	4a0b      	ldr	r2, [pc, #44]	; (800ccc0 <prvCheckTasksWaitingTermination+0x54>)
 800cc92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc94:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <prvCheckTasksWaitingTermination+0x58>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	4a0a      	ldr	r2, [pc, #40]	; (800ccc4 <prvCheckTasksWaitingTermination+0x58>)
 800cc9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc9e:	f000 fc01 	bl	800d4a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 f810 	bl	800ccc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cca8:	4b06      	ldr	r3, [pc, #24]	; (800ccc4 <prvCheckTasksWaitingTermination+0x58>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1e1      	bne.n	800cc74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ccb0:	bf00      	nop
 800ccb2:	bf00      	nop
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	20000e30 	.word	0x20000e30
 800ccc0:	20000e5c 	.word	0x20000e5c
 800ccc4:	20000e44 	.word	0x20000e44

0800ccc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	334c      	adds	r3, #76	; 0x4c
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f004 f839 	bl	8010d4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d108      	bne.n	800ccf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce8:	4618      	mov	r0, r3
 800ccea:	f000 fd99 	bl	800d820 <vPortFree>
				vPortFree( pxTCB );
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fd96 	bl	800d820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ccf4:	e018      	b.n	800cd28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d103      	bne.n	800cd08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fd8d 	bl	800d820 <vPortFree>
	}
 800cd06:	e00f      	b.n	800cd28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d00a      	beq.n	800cd28 <prvDeleteTCB+0x60>
	__asm volatile
 800cd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd16:	f383 8811 	msr	BASEPRI, r3
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	60fb      	str	r3, [r7, #12]
}
 800cd24:	bf00      	nop
 800cd26:	e7fe      	b.n	800cd26 <prvDeleteTCB+0x5e>
	}
 800cd28:	bf00      	nop
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd36:	4b0c      	ldr	r3, [pc, #48]	; (800cd68 <prvResetNextTaskUnblockTime+0x38>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d104      	bne.n	800cd4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd40:	4b0a      	ldr	r3, [pc, #40]	; (800cd6c <prvResetNextTaskUnblockTime+0x3c>)
 800cd42:	f04f 32ff 	mov.w	r2, #4294967295
 800cd46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd48:	e008      	b.n	800cd5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd4a:	4b07      	ldr	r3, [pc, #28]	; (800cd68 <prvResetNextTaskUnblockTime+0x38>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	4a04      	ldr	r2, [pc, #16]	; (800cd6c <prvResetNextTaskUnblockTime+0x3c>)
 800cd5a:	6013      	str	r3, [r2, #0]
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr
 800cd68:	20000e14 	.word	0x20000e14
 800cd6c:	20000e7c 	.word	0x20000e7c

0800cd70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd76:	4b0b      	ldr	r3, [pc, #44]	; (800cda4 <xTaskGetSchedulerState+0x34>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d102      	bne.n	800cd84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	607b      	str	r3, [r7, #4]
 800cd82:	e008      	b.n	800cd96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd84:	4b08      	ldr	r3, [pc, #32]	; (800cda8 <xTaskGetSchedulerState+0x38>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d102      	bne.n	800cd92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd8c:	2302      	movs	r3, #2
 800cd8e:	607b      	str	r3, [r7, #4]
 800cd90:	e001      	b.n	800cd96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd92:	2300      	movs	r3, #0
 800cd94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd96:	687b      	ldr	r3, [r7, #4]
	}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	20000e68 	.word	0x20000e68
 800cda8:	20000e84 	.word	0x20000e84

0800cdac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d067      	beq.n	800ce92 <xTaskPriorityInherit+0xe6>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdc6:	4b35      	ldr	r3, [pc, #212]	; (800ce9c <xTaskPriorityInherit+0xf0>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d257      	bcs.n	800ce80 <xTaskPriorityInherit+0xd4>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	699b      	ldr	r3, [r3, #24]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	db06      	blt.n	800cde6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdd8:	4b30      	ldr	r3, [pc, #192]	; (800ce9c <xTaskPriorityInherit+0xf0>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdde:	f1c3 0207 	rsb	r2, r3, #7
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	6959      	ldr	r1, [r3, #20]
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdee:	4613      	mov	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	4a2a      	ldr	r2, [pc, #168]	; (800cea0 <xTaskPriorityInherit+0xf4>)
 800cdf8:	4413      	add	r3, r2
 800cdfa:	4299      	cmp	r1, r3
 800cdfc:	d133      	bne.n	800ce66 <xTaskPriorityInherit+0xba>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	3304      	adds	r3, #4
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fe fa87 	bl	800b316 <uxListRemove>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10a      	bne.n	800ce24 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce12:	2201      	movs	r2, #1
 800ce14:	fa02 f303 	lsl.w	r3, r2, r3
 800ce18:	43da      	mvns	r2, r3
 800ce1a:	4b22      	ldr	r3, [pc, #136]	; (800cea4 <xTaskPriorityInherit+0xf8>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4013      	ands	r3, r2
 800ce20:	4a20      	ldr	r2, [pc, #128]	; (800cea4 <xTaskPriorityInherit+0xf8>)
 800ce22:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce24:	4b1d      	ldr	r3, [pc, #116]	; (800ce9c <xTaskPriorityInherit+0xf0>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f002 f937 	bl	800f0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	409a      	lsls	r2, r3
 800ce3e:	4b19      	ldr	r3, [pc, #100]	; (800cea4 <xTaskPriorityInherit+0xf8>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	4a17      	ldr	r2, [pc, #92]	; (800cea4 <xTaskPriorityInherit+0xf8>)
 800ce46:	6013      	str	r3, [r2, #0]
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	4413      	add	r3, r2
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4a12      	ldr	r2, [pc, #72]	; (800cea0 <xTaskPriorityInherit+0xf4>)
 800ce56:	441a      	add	r2, r3
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	3304      	adds	r3, #4
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	4610      	mov	r0, r2
 800ce60:	f7fe f9fc 	bl	800b25c <vListInsertEnd>
 800ce64:	e004      	b.n	800ce70 <xTaskPriorityInherit+0xc4>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce66:	4b0d      	ldr	r3, [pc, #52]	; (800ce9c <xTaskPriorityInherit+0xf0>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4619      	mov	r1, r3
 800ce74:	2049      	movs	r0, #73	; 0x49
 800ce76:	f001 fc07 	bl	800e688 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	60fb      	str	r3, [r7, #12]
 800ce7e:	e008      	b.n	800ce92 <xTaskPriorityInherit+0xe6>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce84:	4b05      	ldr	r3, [pc, #20]	; (800ce9c <xTaskPriorityInherit+0xf0>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d201      	bcs.n	800ce92 <xTaskPriorityInherit+0xe6>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce92:	68fb      	ldr	r3, [r7, #12]
	}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3710      	adds	r7, #16
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	20000d5c 	.word	0x20000d5c
 800cea0:	20000d60 	.word	0x20000d60
 800cea4:	20000e64 	.word	0x20000e64

0800cea8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d077      	beq.n	800cfae <xTaskPriorityDisinherit+0x106>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cebe:	4b3e      	ldr	r3, [pc, #248]	; (800cfb8 <xTaskPriorityDisinherit+0x110>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d00a      	beq.n	800cede <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	f383 8811 	msr	BASEPRI, r3
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	60fb      	str	r3, [r7, #12]
}
 800ceda:	bf00      	nop
 800cedc:	e7fe      	b.n	800cedc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10a      	bne.n	800cefc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceea:	f383 8811 	msr	BASEPRI, r3
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	60bb      	str	r3, [r7, #8]
}
 800cef8:	bf00      	nop
 800cefa:	e7fe      	b.n	800cefa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf00:	1e5a      	subs	r2, r3, #1
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d04d      	beq.n	800cfae <xTaskPriorityDisinherit+0x106>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d149      	bne.n	800cfae <xTaskPriorityDisinherit+0x106>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe f9f9 	bl	800b316 <uxListRemove>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d115      	bne.n	800cf56 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2e:	4923      	ldr	r1, [pc, #140]	; (800cfbc <xTaskPriorityDisinherit+0x114>)
 800cf30:	4613      	mov	r3, r2
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	4413      	add	r3, r2
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	440b      	add	r3, r1
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10a      	bne.n	800cf56 <xTaskPriorityDisinherit+0xae>
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf44:	2201      	movs	r2, #1
 800cf46:	fa02 f303 	lsl.w	r3, r2, r3
 800cf4a:	43da      	mvns	r2, r3
 800cf4c:	4b1c      	ldr	r3, [pc, #112]	; (800cfc0 <xTaskPriorityDisinherit+0x118>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4013      	ands	r3, r2
 800cf52:	4a1b      	ldr	r2, [pc, #108]	; (800cfc0 <xTaskPriorityDisinherit+0x118>)
 800cf54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4619      	mov	r1, r3
 800cf5a:	204a      	movs	r0, #74	; 0x4a
 800cf5c:	f001 fb94 	bl	800e688 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6c:	f1c3 0207 	rsb	r2, r3, #7
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f002 f894 	bl	800f0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf80:	2201      	movs	r2, #1
 800cf82:	409a      	lsls	r2, r3
 800cf84:	4b0e      	ldr	r3, [pc, #56]	; (800cfc0 <xTaskPriorityDisinherit+0x118>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	4a0d      	ldr	r2, [pc, #52]	; (800cfc0 <xTaskPriorityDisinherit+0x118>)
 800cf8c:	6013      	str	r3, [r2, #0]
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf92:	4613      	mov	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4a08      	ldr	r2, [pc, #32]	; (800cfbc <xTaskPriorityDisinherit+0x114>)
 800cf9c:	441a      	add	r2, r3
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	f7fe f959 	bl	800b25c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfae:	697b      	ldr	r3, [r7, #20]
	}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3718      	adds	r7, #24
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	20000d5c 	.word	0x20000d5c
 800cfbc:	20000d60 	.word	0x20000d60
 800cfc0:	20000e64 	.word	0x20000e64

0800cfc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b088      	sub	sp, #32
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 8081 	beq.w	800d0e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d10a      	bne.n	800cffc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfea:	f383 8811 	msr	BASEPRI, r3
 800cfee:	f3bf 8f6f 	isb	sy
 800cff2:	f3bf 8f4f 	dsb	sy
 800cff6:	60fb      	str	r3, [r7, #12]
}
 800cff8:	bf00      	nop
 800cffa:	e7fe      	b.n	800cffa <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d000:	683a      	ldr	r2, [r7, #0]
 800d002:	429a      	cmp	r2, r3
 800d004:	d902      	bls.n	800d00c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	61fb      	str	r3, [r7, #28]
 800d00a:	e002      	b.n	800d012 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d010:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d016:	69fa      	ldr	r2, [r7, #28]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d061      	beq.n	800d0e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d020:	697a      	ldr	r2, [r7, #20]
 800d022:	429a      	cmp	r2, r3
 800d024:	d15c      	bne.n	800d0e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d026:	4b30      	ldr	r3, [pc, #192]	; (800d0e8 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	69ba      	ldr	r2, [r7, #24]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d10a      	bne.n	800d046 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800d030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	60bb      	str	r3, [r7, #8]
}
 800d042:	bf00      	nop
 800d044:	e7fe      	b.n	800d044 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4619      	mov	r1, r3
 800d04a:	204a      	movs	r0, #74	; 0x4a
 800d04c:	f001 fb1c 	bl	800e688 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d054:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	69fa      	ldr	r2, [r7, #28]
 800d05a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	699b      	ldr	r3, [r3, #24]
 800d060:	2b00      	cmp	r3, #0
 800d062:	db04      	blt.n	800d06e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	f1c3 0207 	rsb	r2, r3, #7
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	6959      	ldr	r1, [r3, #20]
 800d072:	693a      	ldr	r2, [r7, #16]
 800d074:	4613      	mov	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4413      	add	r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	4a1b      	ldr	r2, [pc, #108]	; (800d0ec <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d07e:	4413      	add	r3, r2
 800d080:	4299      	cmp	r1, r3
 800d082:	d12d      	bne.n	800d0e0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	3304      	adds	r3, #4
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fe f944 	bl	800b316 <uxListRemove>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10a      	bne.n	800d0aa <vTaskPriorityDisinheritAfterTimeout+0xe6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d098:	2201      	movs	r2, #1
 800d09a:	fa02 f303 	lsl.w	r3, r2, r3
 800d09e:	43da      	mvns	r2, r3
 800d0a0:	4b13      	ldr	r3, [pc, #76]	; (800d0f0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	4a12      	ldr	r2, [pc, #72]	; (800d0f0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d0a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f001 fff9 	bl	800f0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	409a      	lsls	r2, r3
 800d0ba:	4b0d      	ldr	r3, [pc, #52]	; (800d0f0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	4a0b      	ldr	r2, [pc, #44]	; (800d0f0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d0c2:	6013      	str	r3, [r2, #0]
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	4413      	add	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4a06      	ldr	r2, [pc, #24]	; (800d0ec <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d0d2:	441a      	add	r2, r3
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	3304      	adds	r3, #4
 800d0d8:	4619      	mov	r1, r3
 800d0da:	4610      	mov	r0, r2
 800d0dc:	f7fe f8be 	bl	800b25c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0e0:	bf00      	nop
 800d0e2:	3720      	adds	r7, #32
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	20000d5c 	.word	0x20000d5c
 800d0ec:	20000d60 	.word	0x20000d60
 800d0f0:	20000e64 	.word	0x20000e64

0800d0f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d0f4:	b480      	push	{r7}
 800d0f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d0f8:	4b07      	ldr	r3, [pc, #28]	; (800d118 <pvTaskIncrementMutexHeldCount+0x24>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d004      	beq.n	800d10a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d100:	4b05      	ldr	r3, [pc, #20]	; (800d118 <pvTaskIncrementMutexHeldCount+0x24>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d106:	3201      	adds	r2, #1
 800d108:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d10a:	4b03      	ldr	r3, [pc, #12]	; (800d118 <pvTaskIncrementMutexHeldCount+0x24>)
 800d10c:	681b      	ldr	r3, [r3, #0]
	}
 800d10e:	4618      	mov	r0, r3
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	20000d5c 	.word	0x20000d5c

0800d11c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d126:	4b29      	ldr	r3, [pc, #164]	; (800d1cc <prvAddCurrentTaskToDelayedList+0xb0>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d12c:	4b28      	ldr	r3, [pc, #160]	; (800d1d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3304      	adds	r3, #4
 800d132:	4618      	mov	r0, r3
 800d134:	f7fe f8ef 	bl	800b316 <uxListRemove>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10b      	bne.n	800d156 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d13e:	4b24      	ldr	r3, [pc, #144]	; (800d1d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d144:	2201      	movs	r2, #1
 800d146:	fa02 f303 	lsl.w	r3, r2, r3
 800d14a:	43da      	mvns	r2, r3
 800d14c:	4b21      	ldr	r3, [pc, #132]	; (800d1d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4013      	ands	r3, r2
 800d152:	4a20      	ldr	r2, [pc, #128]	; (800d1d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d154:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15c:	d10a      	bne.n	800d174 <prvAddCurrentTaskToDelayedList+0x58>
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d007      	beq.n	800d174 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d164:	4b1a      	ldr	r3, [pc, #104]	; (800d1d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	3304      	adds	r3, #4
 800d16a:	4619      	mov	r1, r3
 800d16c:	481a      	ldr	r0, [pc, #104]	; (800d1d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d16e:	f7fe f875 	bl	800b25c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d172:	e026      	b.n	800d1c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4413      	add	r3, r2
 800d17a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d17c:	4b14      	ldr	r3, [pc, #80]	; (800d1d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d184:	68ba      	ldr	r2, [r7, #8]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d209      	bcs.n	800d1a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d18c:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	4b0f      	ldr	r3, [pc, #60]	; (800d1d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3304      	adds	r3, #4
 800d196:	4619      	mov	r1, r3
 800d198:	4610      	mov	r0, r2
 800d19a:	f7fe f883 	bl	800b2a4 <vListInsert>
}
 800d19e:	e010      	b.n	800d1c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1a0:	4b0f      	ldr	r3, [pc, #60]	; (800d1e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	4b0a      	ldr	r3, [pc, #40]	; (800d1d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	3304      	adds	r3, #4
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	f7fe f879 	bl	800b2a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d1b2:	4b0c      	ldr	r3, [pc, #48]	; (800d1e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d202      	bcs.n	800d1c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d1bc:	4a09      	ldr	r2, [pc, #36]	; (800d1e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	6013      	str	r3, [r2, #0]
}
 800d1c2:	bf00      	nop
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	20000e60 	.word	0x20000e60
 800d1d0:	20000d5c 	.word	0x20000d5c
 800d1d4:	20000e64 	.word	0x20000e64
 800d1d8:	20000e48 	.word	0x20000e48
 800d1dc:	20000e18 	.word	0x20000e18
 800d1e0:	20000e14 	.word	0x20000e14
 800d1e4:	20000e7c 	.word	0x20000e7c

0800d1e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	3b04      	subs	r3, #4
 800d1f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	3b04      	subs	r3, #4
 800d206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	f023 0201 	bic.w	r2, r3, #1
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	3b04      	subs	r3, #4
 800d216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d218:	4a0c      	ldr	r2, [pc, #48]	; (800d24c <pxPortInitialiseStack+0x64>)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3b14      	subs	r3, #20
 800d222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	3b04      	subs	r3, #4
 800d22e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f06f 0202 	mvn.w	r2, #2
 800d236:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	3b20      	subs	r3, #32
 800d23c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d23e:	68fb      	ldr	r3, [r7, #12]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3714      	adds	r7, #20
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr
 800d24c:	0800d251 	.word	0x0800d251

0800d250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d25a:	4b12      	ldr	r3, [pc, #72]	; (800d2a4 <prvTaskExitError+0x54>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d262:	d00a      	beq.n	800d27a <prvTaskExitError+0x2a>
	__asm volatile
 800d264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d268:	f383 8811 	msr	BASEPRI, r3
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	60fb      	str	r3, [r7, #12]
}
 800d276:	bf00      	nop
 800d278:	e7fe      	b.n	800d278 <prvTaskExitError+0x28>
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	60bb      	str	r3, [r7, #8]
}
 800d28c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d28e:	bf00      	nop
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d0fc      	beq.n	800d290 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d296:	bf00      	nop
 800d298:	bf00      	nop
 800d29a:	3714      	adds	r7, #20
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr
 800d2a4:	20000014 	.word	0x20000014
	...

0800d2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2b0:	4b07      	ldr	r3, [pc, #28]	; (800d2d0 <pxCurrentTCBConst2>)
 800d2b2:	6819      	ldr	r1, [r3, #0]
 800d2b4:	6808      	ldr	r0, [r1, #0]
 800d2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ba:	f380 8809 	msr	PSP, r0
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f04f 0000 	mov.w	r0, #0
 800d2c6:	f380 8811 	msr	BASEPRI, r0
 800d2ca:	4770      	bx	lr
 800d2cc:	f3af 8000 	nop.w

0800d2d0 <pxCurrentTCBConst2>:
 800d2d0:	20000d5c 	.word	0x20000d5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d2d4:	bf00      	nop
 800d2d6:	bf00      	nop

0800d2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d2d8:	4808      	ldr	r0, [pc, #32]	; (800d2fc <prvPortStartFirstTask+0x24>)
 800d2da:	6800      	ldr	r0, [r0, #0]
 800d2dc:	6800      	ldr	r0, [r0, #0]
 800d2de:	f380 8808 	msr	MSP, r0
 800d2e2:	f04f 0000 	mov.w	r0, #0
 800d2e6:	f380 8814 	msr	CONTROL, r0
 800d2ea:	b662      	cpsie	i
 800d2ec:	b661      	cpsie	f
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	df00      	svc	0
 800d2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d2fa:	bf00      	nop
 800d2fc:	e000ed08 	.word	0xe000ed08

0800d300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d306:	4b46      	ldr	r3, [pc, #280]	; (800d420 <xPortStartScheduler+0x120>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a46      	ldr	r2, [pc, #280]	; (800d424 <xPortStartScheduler+0x124>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d10a      	bne.n	800d326 <xPortStartScheduler+0x26>
	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	613b      	str	r3, [r7, #16]
}
 800d322:	bf00      	nop
 800d324:	e7fe      	b.n	800d324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d326:	4b3e      	ldr	r3, [pc, #248]	; (800d420 <xPortStartScheduler+0x120>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a3f      	ldr	r2, [pc, #252]	; (800d428 <xPortStartScheduler+0x128>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d10a      	bne.n	800d346 <xPortStartScheduler+0x46>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	60fb      	str	r3, [r7, #12]
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d346:	4b39      	ldr	r3, [pc, #228]	; (800d42c <xPortStartScheduler+0x12c>)
 800d348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	22ff      	movs	r2, #255	; 0xff
 800d356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d360:	78fb      	ldrb	r3, [r7, #3]
 800d362:	b2db      	uxtb	r3, r3
 800d364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d368:	b2da      	uxtb	r2, r3
 800d36a:	4b31      	ldr	r3, [pc, #196]	; (800d430 <xPortStartScheduler+0x130>)
 800d36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d36e:	4b31      	ldr	r3, [pc, #196]	; (800d434 <xPortStartScheduler+0x134>)
 800d370:	2207      	movs	r2, #7
 800d372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d374:	e009      	b.n	800d38a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d376:	4b2f      	ldr	r3, [pc, #188]	; (800d434 <xPortStartScheduler+0x134>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	3b01      	subs	r3, #1
 800d37c:	4a2d      	ldr	r2, [pc, #180]	; (800d434 <xPortStartScheduler+0x134>)
 800d37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d380:	78fb      	ldrb	r3, [r7, #3]
 800d382:	b2db      	uxtb	r3, r3
 800d384:	005b      	lsls	r3, r3, #1
 800d386:	b2db      	uxtb	r3, r3
 800d388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d38a:	78fb      	ldrb	r3, [r7, #3]
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d392:	2b80      	cmp	r3, #128	; 0x80
 800d394:	d0ef      	beq.n	800d376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d396:	4b27      	ldr	r3, [pc, #156]	; (800d434 <xPortStartScheduler+0x134>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f1c3 0307 	rsb	r3, r3, #7
 800d39e:	2b04      	cmp	r3, #4
 800d3a0:	d00a      	beq.n	800d3b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	60bb      	str	r3, [r7, #8]
}
 800d3b4:	bf00      	nop
 800d3b6:	e7fe      	b.n	800d3b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d3b8:	4b1e      	ldr	r3, [pc, #120]	; (800d434 <xPortStartScheduler+0x134>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	4a1d      	ldr	r2, [pc, #116]	; (800d434 <xPortStartScheduler+0x134>)
 800d3c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3c2:	4b1c      	ldr	r3, [pc, #112]	; (800d434 <xPortStartScheduler+0x134>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d3ca:	4a1a      	ldr	r2, [pc, #104]	; (800d434 <xPortStartScheduler+0x134>)
 800d3cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d3d6:	4b18      	ldr	r3, [pc, #96]	; (800d438 <xPortStartScheduler+0x138>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a17      	ldr	r2, [pc, #92]	; (800d438 <xPortStartScheduler+0x138>)
 800d3dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d3e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d3e2:	4b15      	ldr	r3, [pc, #84]	; (800d438 <xPortStartScheduler+0x138>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a14      	ldr	r2, [pc, #80]	; (800d438 <xPortStartScheduler+0x138>)
 800d3e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d3ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d3ee:	f000 f8dd 	bl	800d5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d3f2:	4b12      	ldr	r3, [pc, #72]	; (800d43c <xPortStartScheduler+0x13c>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d3f8:	f000 f8fc 	bl	800d5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d3fc:	4b10      	ldr	r3, [pc, #64]	; (800d440 <xPortStartScheduler+0x140>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a0f      	ldr	r2, [pc, #60]	; (800d440 <xPortStartScheduler+0x140>)
 800d402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d408:	f7ff ff66 	bl	800d2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d40c:	f7ff fa52 	bl	800c8b4 <vTaskSwitchContext>
	prvTaskExitError();
 800d410:	f7ff ff1e 	bl	800d250 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	e000ed00 	.word	0xe000ed00
 800d424:	410fc271 	.word	0x410fc271
 800d428:	410fc270 	.word	0x410fc270
 800d42c:	e000e400 	.word	0xe000e400
 800d430:	20000e88 	.word	0x20000e88
 800d434:	20000e8c 	.word	0x20000e8c
 800d438:	e000ed20 	.word	0xe000ed20
 800d43c:	20000014 	.word	0x20000014
 800d440:	e000ef34 	.word	0xe000ef34

0800d444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
	__asm volatile
 800d44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44e:	f383 8811 	msr	BASEPRI, r3
 800d452:	f3bf 8f6f 	isb	sy
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	607b      	str	r3, [r7, #4]
}
 800d45c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d45e:	4b0f      	ldr	r3, [pc, #60]	; (800d49c <vPortEnterCritical+0x58>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	3301      	adds	r3, #1
 800d464:	4a0d      	ldr	r2, [pc, #52]	; (800d49c <vPortEnterCritical+0x58>)
 800d466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d468:	4b0c      	ldr	r3, [pc, #48]	; (800d49c <vPortEnterCritical+0x58>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d10f      	bne.n	800d490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d470:	4b0b      	ldr	r3, [pc, #44]	; (800d4a0 <vPortEnterCritical+0x5c>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00a      	beq.n	800d490 <vPortEnterCritical+0x4c>
	__asm volatile
 800d47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	603b      	str	r3, [r7, #0]
}
 800d48c:	bf00      	nop
 800d48e:	e7fe      	b.n	800d48e <vPortEnterCritical+0x4a>
	}
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	20000014 	.word	0x20000014
 800d4a0:	e000ed04 	.word	0xe000ed04

0800d4a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4aa:	4b12      	ldr	r3, [pc, #72]	; (800d4f4 <vPortExitCritical+0x50>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10a      	bne.n	800d4c8 <vPortExitCritical+0x24>
	__asm volatile
 800d4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b6:	f383 8811 	msr	BASEPRI, r3
 800d4ba:	f3bf 8f6f 	isb	sy
 800d4be:	f3bf 8f4f 	dsb	sy
 800d4c2:	607b      	str	r3, [r7, #4]
}
 800d4c4:	bf00      	nop
 800d4c6:	e7fe      	b.n	800d4c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	; (800d4f4 <vPortExitCritical+0x50>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	4a09      	ldr	r2, [pc, #36]	; (800d4f4 <vPortExitCritical+0x50>)
 800d4d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d4d2:	4b08      	ldr	r3, [pc, #32]	; (800d4f4 <vPortExitCritical+0x50>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d105      	bne.n	800d4e6 <vPortExitCritical+0x42>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	f383 8811 	msr	BASEPRI, r3
}
 800d4e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d4e6:	bf00      	nop
 800d4e8:	370c      	adds	r7, #12
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	20000014 	.word	0x20000014
	...

0800d500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d500:	f3ef 8009 	mrs	r0, PSP
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	4b15      	ldr	r3, [pc, #84]	; (800d560 <pxCurrentTCBConst>)
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	f01e 0f10 	tst.w	lr, #16
 800d510:	bf08      	it	eq
 800d512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51a:	6010      	str	r0, [r2, #0]
 800d51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d520:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d524:	f380 8811 	msr	BASEPRI, r0
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	f3bf 8f6f 	isb	sy
 800d530:	f7ff f9c0 	bl	800c8b4 <vTaskSwitchContext>
 800d534:	f04f 0000 	mov.w	r0, #0
 800d538:	f380 8811 	msr	BASEPRI, r0
 800d53c:	bc09      	pop	{r0, r3}
 800d53e:	6819      	ldr	r1, [r3, #0]
 800d540:	6808      	ldr	r0, [r1, #0]
 800d542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d546:	f01e 0f10 	tst.w	lr, #16
 800d54a:	bf08      	it	eq
 800d54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d550:	f380 8809 	msr	PSP, r0
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	f3af 8000 	nop.w

0800d560 <pxCurrentTCBConst>:
 800d560:	20000d5c 	.word	0x20000d5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop

0800d568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
	__asm volatile
 800d56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d572:	f383 8811 	msr	BASEPRI, r3
 800d576:	f3bf 8f6f 	isb	sy
 800d57a:	f3bf 8f4f 	dsb	sy
 800d57e:	607b      	str	r3, [r7, #4]
}
 800d580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d582:	f7ff f8db 	bl	800c73c <xTaskIncrementTick>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d003      	beq.n	800d594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d58c:	4b06      	ldr	r3, [pc, #24]	; (800d5a8 <SysTick_Handler+0x40>)
 800d58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d592:	601a      	str	r2, [r3, #0]
 800d594:	2300      	movs	r3, #0
 800d596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	f383 8811 	msr	BASEPRI, r3
}
 800d59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	e000ed04 	.word	0xe000ed04

0800d5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5b0:	4b0b      	ldr	r3, [pc, #44]	; (800d5e0 <vPortSetupTimerInterrupt+0x34>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5b6:	4b0b      	ldr	r3, [pc, #44]	; (800d5e4 <vPortSetupTimerInterrupt+0x38>)
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5bc:	4b0a      	ldr	r3, [pc, #40]	; (800d5e8 <vPortSetupTimerInterrupt+0x3c>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a0a      	ldr	r2, [pc, #40]	; (800d5ec <vPortSetupTimerInterrupt+0x40>)
 800d5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5c6:	099b      	lsrs	r3, r3, #6
 800d5c8:	4a09      	ldr	r2, [pc, #36]	; (800d5f0 <vPortSetupTimerInterrupt+0x44>)
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5ce:	4b04      	ldr	r3, [pc, #16]	; (800d5e0 <vPortSetupTimerInterrupt+0x34>)
 800d5d0:	2207      	movs	r2, #7
 800d5d2:	601a      	str	r2, [r3, #0]
}
 800d5d4:	bf00      	nop
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	e000e010 	.word	0xe000e010
 800d5e4:	e000e018 	.word	0xe000e018
 800d5e8:	20000008 	.word	0x20000008
 800d5ec:	10624dd3 	.word	0x10624dd3
 800d5f0:	e000e014 	.word	0xe000e014

0800d5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d604 <vPortEnableVFP+0x10>
 800d5f8:	6801      	ldr	r1, [r0, #0]
 800d5fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d5fe:	6001      	str	r1, [r0, #0]
 800d600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d602:	bf00      	nop
 800d604:	e000ed88 	.word	0xe000ed88

0800d608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d608:	b480      	push	{r7}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d60e:	f3ef 8305 	mrs	r3, IPSR
 800d612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2b0f      	cmp	r3, #15
 800d618:	d914      	bls.n	800d644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d61a:	4a17      	ldr	r2, [pc, #92]	; (800d678 <vPortValidateInterruptPriority+0x70>)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	4413      	add	r3, r2
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d624:	4b15      	ldr	r3, [pc, #84]	; (800d67c <vPortValidateInterruptPriority+0x74>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	7afa      	ldrb	r2, [r7, #11]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d20a      	bcs.n	800d644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d632:	f383 8811 	msr	BASEPRI, r3
 800d636:	f3bf 8f6f 	isb	sy
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	607b      	str	r3, [r7, #4]
}
 800d640:	bf00      	nop
 800d642:	e7fe      	b.n	800d642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d644:	4b0e      	ldr	r3, [pc, #56]	; (800d680 <vPortValidateInterruptPriority+0x78>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d64c:	4b0d      	ldr	r3, [pc, #52]	; (800d684 <vPortValidateInterruptPriority+0x7c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	429a      	cmp	r2, r3
 800d652:	d90a      	bls.n	800d66a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d658:	f383 8811 	msr	BASEPRI, r3
 800d65c:	f3bf 8f6f 	isb	sy
 800d660:	f3bf 8f4f 	dsb	sy
 800d664:	603b      	str	r3, [r7, #0]
}
 800d666:	bf00      	nop
 800d668:	e7fe      	b.n	800d668 <vPortValidateInterruptPriority+0x60>
	}
 800d66a:	bf00      	nop
 800d66c:	3714      	adds	r7, #20
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	e000e3f0 	.word	0xe000e3f0
 800d67c:	20000e88 	.word	0x20000e88
 800d680:	e000ed0c 	.word	0xe000ed0c
 800d684:	20000e8c 	.word	0x20000e8c

0800d688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b08a      	sub	sp, #40	; 0x28
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d690:	2300      	movs	r3, #0
 800d692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d694:	f7fe ff92 	bl	800c5bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d698:	4b5b      	ldr	r3, [pc, #364]	; (800d808 <pvPortMalloc+0x180>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d6a0:	f000 f920 	bl	800d8e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6a4:	4b59      	ldr	r3, [pc, #356]	; (800d80c <pvPortMalloc+0x184>)
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f040 8093 	bne.w	800d7d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d01d      	beq.n	800d6f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d6b8:	2208      	movs	r2, #8
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4413      	add	r3, r2
 800d6be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f003 0307 	and.w	r3, r3, #7
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d014      	beq.n	800d6f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f023 0307 	bic.w	r3, r3, #7
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f003 0307 	and.w	r3, r3, #7
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00a      	beq.n	800d6f4 <pvPortMalloc+0x6c>
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	617b      	str	r3, [r7, #20]
}
 800d6f0:	bf00      	nop
 800d6f2:	e7fe      	b.n	800d6f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d06e      	beq.n	800d7d8 <pvPortMalloc+0x150>
 800d6fa:	4b45      	ldr	r3, [pc, #276]	; (800d810 <pvPortMalloc+0x188>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	429a      	cmp	r2, r3
 800d702:	d869      	bhi.n	800d7d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d704:	4b43      	ldr	r3, [pc, #268]	; (800d814 <pvPortMalloc+0x18c>)
 800d706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d708:	4b42      	ldr	r3, [pc, #264]	; (800d814 <pvPortMalloc+0x18c>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d70e:	e004      	b.n	800d71a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	429a      	cmp	r2, r3
 800d722:	d903      	bls.n	800d72c <pvPortMalloc+0xa4>
 800d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1f1      	bne.n	800d710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d72c:	4b36      	ldr	r3, [pc, #216]	; (800d808 <pvPortMalloc+0x180>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d732:	429a      	cmp	r2, r3
 800d734:	d050      	beq.n	800d7d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2208      	movs	r2, #8
 800d73c:	4413      	add	r3, r2
 800d73e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74a:	685a      	ldr	r2, [r3, #4]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	1ad2      	subs	r2, r2, r3
 800d750:	2308      	movs	r3, #8
 800d752:	005b      	lsls	r3, r3, #1
 800d754:	429a      	cmp	r2, r3
 800d756:	d91f      	bls.n	800d798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4413      	add	r3, r2
 800d75e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	f003 0307 	and.w	r3, r3, #7
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00a      	beq.n	800d780 <pvPortMalloc+0xf8>
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	613b      	str	r3, [r7, #16]
}
 800d77c:	bf00      	nop
 800d77e:	e7fe      	b.n	800d77e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d782:	685a      	ldr	r2, [r3, #4]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	1ad2      	subs	r2, r2, r3
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d792:	69b8      	ldr	r0, [r7, #24]
 800d794:	f000 f908 	bl	800d9a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d798:	4b1d      	ldr	r3, [pc, #116]	; (800d810 <pvPortMalloc+0x188>)
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	1ad3      	subs	r3, r2, r3
 800d7a2:	4a1b      	ldr	r2, [pc, #108]	; (800d810 <pvPortMalloc+0x188>)
 800d7a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7a6:	4b1a      	ldr	r3, [pc, #104]	; (800d810 <pvPortMalloc+0x188>)
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	4b1b      	ldr	r3, [pc, #108]	; (800d818 <pvPortMalloc+0x190>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d203      	bcs.n	800d7ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7b2:	4b17      	ldr	r3, [pc, #92]	; (800d810 <pvPortMalloc+0x188>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a18      	ldr	r2, [pc, #96]	; (800d818 <pvPortMalloc+0x190>)
 800d7b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7bc:	685a      	ldr	r2, [r3, #4]
 800d7be:	4b13      	ldr	r3, [pc, #76]	; (800d80c <pvPortMalloc+0x184>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d7ce:	4b13      	ldr	r3, [pc, #76]	; (800d81c <pvPortMalloc+0x194>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	4a11      	ldr	r2, [pc, #68]	; (800d81c <pvPortMalloc+0x194>)
 800d7d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7d8:	f7fe fefe 	bl	800c5d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	f003 0307 	and.w	r3, r3, #7
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00a      	beq.n	800d7fc <pvPortMalloc+0x174>
	__asm volatile
 800d7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ea:	f383 8811 	msr	BASEPRI, r3
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	60fb      	str	r3, [r7, #12]
}
 800d7f8:	bf00      	nop
 800d7fa:	e7fe      	b.n	800d7fa <pvPortMalloc+0x172>
	return pvReturn;
 800d7fc:	69fb      	ldr	r3, [r7, #28]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3728      	adds	r7, #40	; 0x28
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	20001a50 	.word	0x20001a50
 800d80c:	20001a64 	.word	0x20001a64
 800d810:	20001a54 	.word	0x20001a54
 800d814:	20001a48 	.word	0x20001a48
 800d818:	20001a58 	.word	0x20001a58
 800d81c:	20001a5c 	.word	0x20001a5c

0800d820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b086      	sub	sp, #24
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d04d      	beq.n	800d8ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d832:	2308      	movs	r3, #8
 800d834:	425b      	negs	r3, r3
 800d836:	697a      	ldr	r2, [r7, #20]
 800d838:	4413      	add	r3, r2
 800d83a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	685a      	ldr	r2, [r3, #4]
 800d844:	4b24      	ldr	r3, [pc, #144]	; (800d8d8 <vPortFree+0xb8>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4013      	ands	r3, r2
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d10a      	bne.n	800d864 <vPortFree+0x44>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	60fb      	str	r3, [r7, #12]
}
 800d860:	bf00      	nop
 800d862:	e7fe      	b.n	800d862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00a      	beq.n	800d882 <vPortFree+0x62>
	__asm volatile
 800d86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d870:	f383 8811 	msr	BASEPRI, r3
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	60bb      	str	r3, [r7, #8]
}
 800d87e:	bf00      	nop
 800d880:	e7fe      	b.n	800d880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	685a      	ldr	r2, [r3, #4]
 800d886:	4b14      	ldr	r3, [pc, #80]	; (800d8d8 <vPortFree+0xb8>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4013      	ands	r3, r2
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d01e      	beq.n	800d8ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d11a      	bne.n	800d8ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	685a      	ldr	r2, [r3, #4]
 800d89c:	4b0e      	ldr	r3, [pc, #56]	; (800d8d8 <vPortFree+0xb8>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	43db      	mvns	r3, r3
 800d8a2:	401a      	ands	r2, r3
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8a8:	f7fe fe88 	bl	800c5bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	685a      	ldr	r2, [r3, #4]
 800d8b0:	4b0a      	ldr	r3, [pc, #40]	; (800d8dc <vPortFree+0xbc>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	4a09      	ldr	r2, [pc, #36]	; (800d8dc <vPortFree+0xbc>)
 800d8b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8ba:	6938      	ldr	r0, [r7, #16]
 800d8bc:	f000 f874 	bl	800d9a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d8c0:	4b07      	ldr	r3, [pc, #28]	; (800d8e0 <vPortFree+0xc0>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	4a06      	ldr	r2, [pc, #24]	; (800d8e0 <vPortFree+0xc0>)
 800d8c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d8ca:	f7fe fe85 	bl	800c5d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8ce:	bf00      	nop
 800d8d0:	3718      	adds	r7, #24
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20001a64 	.word	0x20001a64
 800d8dc:	20001a54 	.word	0x20001a54
 800d8e0:	20001a60 	.word	0x20001a60

0800d8e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d8ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8f0:	4b27      	ldr	r3, [pc, #156]	; (800d990 <prvHeapInit+0xac>)
 800d8f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f003 0307 	and.w	r3, r3, #7
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00c      	beq.n	800d918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	3307      	adds	r3, #7
 800d902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f023 0307 	bic.w	r3, r3, #7
 800d90a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d90c:	68ba      	ldr	r2, [r7, #8]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	4a1f      	ldr	r2, [pc, #124]	; (800d990 <prvHeapInit+0xac>)
 800d914:	4413      	add	r3, r2
 800d916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d91c:	4a1d      	ldr	r2, [pc, #116]	; (800d994 <prvHeapInit+0xb0>)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d922:	4b1c      	ldr	r3, [pc, #112]	; (800d994 <prvHeapInit+0xb0>)
 800d924:	2200      	movs	r2, #0
 800d926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	4413      	add	r3, r2
 800d92e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d930:	2208      	movs	r2, #8
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	1a9b      	subs	r3, r3, r2
 800d936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f023 0307 	bic.w	r3, r3, #7
 800d93e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	4a15      	ldr	r2, [pc, #84]	; (800d998 <prvHeapInit+0xb4>)
 800d944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d946:	4b14      	ldr	r3, [pc, #80]	; (800d998 <prvHeapInit+0xb4>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2200      	movs	r2, #0
 800d94c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d94e:	4b12      	ldr	r3, [pc, #72]	; (800d998 <prvHeapInit+0xb4>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2200      	movs	r2, #0
 800d954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	1ad2      	subs	r2, r2, r3
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d964:	4b0c      	ldr	r3, [pc, #48]	; (800d998 <prvHeapInit+0xb4>)
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	4a0a      	ldr	r2, [pc, #40]	; (800d99c <prvHeapInit+0xb8>)
 800d972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	4a09      	ldr	r2, [pc, #36]	; (800d9a0 <prvHeapInit+0xbc>)
 800d97a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d97c:	4b09      	ldr	r3, [pc, #36]	; (800d9a4 <prvHeapInit+0xc0>)
 800d97e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d982:	601a      	str	r2, [r3, #0]
}
 800d984:	bf00      	nop
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	20000e90 	.word	0x20000e90
 800d994:	20001a48 	.word	0x20001a48
 800d998:	20001a50 	.word	0x20001a50
 800d99c:	20001a58 	.word	0x20001a58
 800d9a0:	20001a54 	.word	0x20001a54
 800d9a4:	20001a64 	.word	0x20001a64

0800d9a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9b0:	4b28      	ldr	r3, [pc, #160]	; (800da54 <prvInsertBlockIntoFreeList+0xac>)
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	e002      	b.n	800d9bc <prvInsertBlockIntoFreeList+0x14>
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	60fb      	str	r3, [r7, #12]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d8f7      	bhi.n	800d9b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	68ba      	ldr	r2, [r7, #8]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d108      	bne.n	800d9ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	685a      	ldr	r2, [r3, #4]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	441a      	add	r2, r3
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	441a      	add	r2, r3
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d118      	bne.n	800da30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	4b15      	ldr	r3, [pc, #84]	; (800da58 <prvInsertBlockIntoFreeList+0xb0>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	429a      	cmp	r2, r3
 800da08:	d00d      	beq.n	800da26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	685a      	ldr	r2, [r3, #4]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	441a      	add	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	e008      	b.n	800da38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da26:	4b0c      	ldr	r3, [pc, #48]	; (800da58 <prvInsertBlockIntoFreeList+0xb0>)
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	601a      	str	r2, [r3, #0]
 800da2e:	e003      	b.n	800da38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d002      	beq.n	800da46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da46:	bf00      	nop
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	20001a48 	.word	0x20001a48
 800da58:	20001a50 	.word	0x20001a50

0800da5c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800da62:	4b21      	ldr	r3, [pc, #132]	; (800dae8 <_DoInit+0x8c>)
 800da64:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2203      	movs	r2, #3
 800da6a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2203      	movs	r2, #3
 800da70:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4a1d      	ldr	r2, [pc, #116]	; (800daec <_DoInit+0x90>)
 800da76:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4a1d      	ldr	r2, [pc, #116]	; (800daf0 <_DoInit+0x94>)
 800da7c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800da84:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	4a14      	ldr	r2, [pc, #80]	; (800daec <_DoInit+0x90>)
 800da9c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a14      	ldr	r2, [pc, #80]	; (800daf4 <_DoInit+0x98>)
 800daa2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2210      	movs	r2, #16
 800daa8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2200      	movs	r2, #0
 800dab4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	3307      	adds	r3, #7
 800dac0:	4a0d      	ldr	r2, [pc, #52]	; (800daf8 <_DoInit+0x9c>)
 800dac2:	6810      	ldr	r0, [r2, #0]
 800dac4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a0c      	ldr	r2, [pc, #48]	; (800dafc <_DoInit+0xa0>)
 800daca:	6810      	ldr	r0, [r2, #0]
 800dacc:	6018      	str	r0, [r3, #0]
 800dace:	8891      	ldrh	r1, [r2, #4]
 800dad0:	7992      	ldrb	r2, [r2, #6]
 800dad2:	8099      	strh	r1, [r3, #4]
 800dad4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2220      	movs	r2, #32
 800dada:	719a      	strb	r2, [r3, #6]
}
 800dadc:	bf00      	nop
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	20001a68 	.word	0x20001a68
 800daec:	080120c8 	.word	0x080120c8
 800daf0:	20001b10 	.word	0x20001b10
 800daf4:	20001f10 	.word	0x20001f10
 800daf8:	080120d4 	.word	0x080120d4
 800dafc:	080120d8 	.word	0x080120d8

0800db00 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800db00:	b580      	push	{r7, lr}
 800db02:	b088      	sub	sp, #32
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800db0c:	2300      	movs	r3, #0
 800db0e:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	691b      	ldr	r3, [r3, #16]
 800db1a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	429a      	cmp	r2, r3
 800db22:	d905      	bls.n	800db30 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800db24:	693a      	ldr	r2, [r7, #16]
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	1ad3      	subs	r3, r2, r3
 800db2a:	3b01      	subs	r3, #1
 800db2c:	61fb      	str	r3, [r7, #28]
 800db2e:	e007      	b.n	800db40 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	689a      	ldr	r2, [r3, #8]
 800db34:	6939      	ldr	r1, [r7, #16]
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	1acb      	subs	r3, r1, r3
 800db3a:	4413      	add	r3, r2
 800db3c:	3b01      	subs	r3, #1
 800db3e:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	689a      	ldr	r2, [r3, #8]
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	69fa      	ldr	r2, [r7, #28]
 800db4a:	4293      	cmp	r3, r2
 800db4c:	bf28      	it	cs
 800db4e:	4613      	movcs	r3, r2
 800db50:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800db52:	69fa      	ldr	r2, [r7, #28]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4293      	cmp	r3, r2
 800db58:	bf28      	it	cs
 800db5a:	4613      	movcs	r3, r2
 800db5c:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	685a      	ldr	r2, [r3, #4]
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	4413      	add	r3, r2
 800db66:	69fa      	ldr	r2, [r7, #28]
 800db68:	68b9      	ldr	r1, [r7, #8]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f002 ffa7 	bl	8010abe <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800db70:	69ba      	ldr	r2, [r7, #24]
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	4413      	add	r3, r2
 800db76:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	69fb      	ldr	r3, [r7, #28]
 800db7c:	4413      	add	r3, r2
 800db7e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	1ad3      	subs	r3, r2, r3
 800db86:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800db88:	697a      	ldr	r2, [r7, #20]
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	4413      	add	r3, r2
 800db8e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	697a      	ldr	r2, [r7, #20]
 800db96:	429a      	cmp	r2, r3
 800db98:	d101      	bne.n	800db9e <_WriteBlocking+0x9e>
      WrOff = 0u;
 800db9a:	2300      	movs	r3, #0
 800db9c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1b5      	bne.n	800db16 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800dbaa:	69bb      	ldr	r3, [r7, #24]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3720      	adds	r7, #32
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b088      	sub	sp, #32
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	689a      	ldr	r2, [r3, #8]
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800dbd0:	69ba      	ldr	r2, [r7, #24]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d90e      	bls.n	800dbf6 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	685a      	ldr	r2, [r3, #4]
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	4413      	add	r3, r2
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	68b9      	ldr	r1, [r7, #8]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f002 ff6a 	bl	8010abe <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 800dbea:	69fa      	ldr	r2, [r7, #28]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	441a      	add	r2, r3
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800dbf4:	e01a      	b.n	800dc2c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	685a      	ldr	r2, [r3, #4]
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	4413      	add	r3, r2
 800dc02:	697a      	ldr	r2, [r7, #20]
 800dc04:	68b9      	ldr	r1, [r7, #8]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f002 ff59 	bl	8010abe <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	1ad3      	subs	r3, r2, r3
 800dc12:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6858      	ldr	r0, [r3, #4]
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	697a      	ldr	r2, [r7, #20]
 800dc20:	4619      	mov	r1, r3
 800dc22:	f002 ff4c 	bl	8010abe <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	697a      	ldr	r2, [r7, #20]
 800dc2a:	60da      	str	r2, [r3, #12]
}
 800dc2c:	bf00      	nop
 800dc2e:	3720      	adds	r7, #32
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800dc34:	b480      	push	{r7}
 800dc36:	b087      	sub	sp, #28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	691b      	ldr	r3, [r3, #16]
 800dc40:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800dc48:	693a      	ldr	r2, [r7, #16]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d808      	bhi.n	800dc62 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	689a      	ldr	r2, [r3, #8]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	1ad2      	subs	r2, r2, r3
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	617b      	str	r3, [r7, #20]
 800dc60:	e004      	b.n	800dc6c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800dc62:	693a      	ldr	r2, [r7, #16]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	1ad3      	subs	r3, r2, r3
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800dc6c:	697b      	ldr	r3, [r7, #20]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	371c      	adds	r7, #28
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
	...

0800dc7c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b08a      	sub	sp, #40	; 0x28
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800dc88:	4b3c      	ldr	r3, [pc, #240]	; (800dd7c <SEGGER_RTT_ReadNoLock+0x100>)
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d101      	bne.n	800dc94 <SEGGER_RTT_ReadNoLock+0x18>
 800dc90:	f7ff fee4 	bl	800da5c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800dc94:	68fa      	ldr	r2, [r7, #12]
 800dc96:	4613      	mov	r3, r2
 800dc98:	005b      	lsls	r3, r3, #1
 800dc9a:	4413      	add	r3, r2
 800dc9c:	00db      	lsls	r3, r3, #3
 800dc9e:	3360      	adds	r3, #96	; 0x60
 800dca0:	4a36      	ldr	r2, [pc, #216]	; (800dd7c <SEGGER_RTT_ReadNoLock+0x100>)
 800dca2:	4413      	add	r3, r2
 800dca4:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	691b      	ldr	r3, [r3, #16]
 800dcae:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800dcba:	6a3a      	ldr	r2, [r7, #32]
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d92a      	bls.n	800dd18 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	689a      	ldr	r2, [r3, #8]
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	bf28      	it	cs
 800dcd4:	4613      	movcs	r3, r2
 800dcd6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	685a      	ldr	r2, [r3, #4]
 800dcdc:	6a3b      	ldr	r3, [r7, #32]
 800dcde:	4413      	add	r3, r2
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	4619      	mov	r1, r3
 800dce4:	69f8      	ldr	r0, [r7, #28]
 800dce6:	f002 feea 	bl	8010abe <memcpy>
    NumBytesRead += NumBytesRem;
 800dcea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	4413      	add	r3, r2
 800dcf0:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800dcf2:	69fa      	ldr	r2, [r7, #28]
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	1ad3      	subs	r3, r2, r3
 800dd00:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800dd02:	6a3a      	ldr	r2, [r7, #32]
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	4413      	add	r3, r2
 800dd08:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	6a3a      	ldr	r2, [r7, #32]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d101      	bne.n	800dd18 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800dd14:	2300      	movs	r3, #0
 800dd16:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800dd18:	697a      	ldr	r2, [r7, #20]
 800dd1a:	6a3b      	ldr	r3, [r7, #32]
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800dd20:	693a      	ldr	r2, [r7, #16]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4293      	cmp	r3, r2
 800dd26:	bf28      	it	cs
 800dd28:	4613      	movcs	r3, r2
 800dd2a:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d018      	beq.n	800dd64 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	685a      	ldr	r2, [r3, #4]
 800dd36:	6a3b      	ldr	r3, [r7, #32]
 800dd38:	4413      	add	r3, r2
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	69f8      	ldr	r0, [r7, #28]
 800dd40:	f002 febd 	bl	8010abe <memcpy>
    NumBytesRead += NumBytesRem;
 800dd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	4413      	add	r3, r2
 800dd4a:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800dd4c:	69fa      	ldr	r2, [r7, #28]
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	4413      	add	r3, r2
 800dd52:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800dd5c:	6a3a      	ldr	r2, [r7, #32]
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	4413      	add	r3, r2
 800dd62:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 800dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d002      	beq.n	800dd70 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	6a3a      	ldr	r2, [r7, #32]
 800dd6e:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800dd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3728      	adds	r7, #40	; 0x28
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	20001a68 	.word	0x20001a68

0800dd80 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b088      	sub	sp, #32
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	1c5a      	adds	r2, r3, #1
 800dd94:	4613      	mov	r3, r2
 800dd96:	005b      	lsls	r3, r3, #1
 800dd98:	4413      	add	r3, r2
 800dd9a:	00db      	lsls	r3, r3, #3
 800dd9c:	4a1f      	ldr	r2, [pc, #124]	; (800de1c <SEGGER_RTT_WriteNoLock+0x9c>)
 800dd9e:	4413      	add	r3, r2
 800dda0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	695b      	ldr	r3, [r3, #20]
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	d029      	beq.n	800ddfe <SEGGER_RTT_WriteNoLock+0x7e>
 800ddaa:	2b02      	cmp	r3, #2
 800ddac:	d82e      	bhi.n	800de0c <SEGGER_RTT_WriteNoLock+0x8c>
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d002      	beq.n	800ddb8 <SEGGER_RTT_WriteNoLock+0x38>
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d013      	beq.n	800ddde <SEGGER_RTT_WriteNoLock+0x5e>
 800ddb6:	e029      	b.n	800de0c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800ddb8:	6978      	ldr	r0, [r7, #20]
 800ddba:	f7ff ff3b 	bl	800dc34 <_GetAvailWriteSpace>
 800ddbe:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800ddc0:	693a      	ldr	r2, [r7, #16]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d202      	bcs.n	800ddce <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800ddcc:	e021      	b.n	800de12 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	69b9      	ldr	r1, [r7, #24]
 800ddd6:	6978      	ldr	r0, [r7, #20]
 800ddd8:	f7ff feec 	bl	800dbb4 <_WriteNoCheck>
    break;
 800dddc:	e019      	b.n	800de12 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800ddde:	6978      	ldr	r0, [r7, #20]
 800dde0:	f7ff ff28 	bl	800dc34 <_GetAvailWriteSpace>
 800dde4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	4293      	cmp	r3, r2
 800ddec:	bf28      	it	cs
 800ddee:	4613      	movcs	r3, r2
 800ddf0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800ddf2:	69fa      	ldr	r2, [r7, #28]
 800ddf4:	69b9      	ldr	r1, [r7, #24]
 800ddf6:	6978      	ldr	r0, [r7, #20]
 800ddf8:	f7ff fedc 	bl	800dbb4 <_WriteNoCheck>
    break;
 800ddfc:	e009      	b.n	800de12 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	69b9      	ldr	r1, [r7, #24]
 800de02:	6978      	ldr	r0, [r7, #20]
 800de04:	f7ff fe7c 	bl	800db00 <_WriteBlocking>
 800de08:	61f8      	str	r0, [r7, #28]
    break;
 800de0a:	e002      	b.n	800de12 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800de0c:	2300      	movs	r3, #0
 800de0e:	61fb      	str	r3, [r7, #28]
    break;
 800de10:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800de12:	69fb      	ldr	r3, [r7, #28]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3720      	adds	r7, #32
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	20001a68 	.word	0x20001a68

0800de20 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 800de2c:	4b0d      	ldr	r3, [pc, #52]	; (800de64 <SEGGER_RTT_Write+0x44>)
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d101      	bne.n	800de38 <SEGGER_RTT_Write+0x18>
 800de34:	f7ff fe12 	bl	800da5c <_DoInit>
  SEGGER_RTT_LOCK();
 800de38:	f3ef 8311 	mrs	r3, BASEPRI
 800de3c:	f04f 0120 	mov.w	r1, #32
 800de40:	f381 8811 	msr	BASEPRI, r1
 800de44:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	68b9      	ldr	r1, [r7, #8]
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f7ff ff98 	bl	800dd80 <SEGGER_RTT_WriteNoLock>
 800de50:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 800de58:	693b      	ldr	r3, [r7, #16]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3718      	adds	r7, #24
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	20001a68 	.word	0x20001a68

0800de68 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
 800de74:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800de76:	4b30      	ldr	r3, [pc, #192]	; (800df38 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d101      	bne.n	800de82 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800de7e:	f7ff fded 	bl	800da5c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800de82:	4b2d      	ldr	r3, [pc, #180]	; (800df38 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800de84:	691b      	ldr	r3, [r3, #16]
 800de86:	461a      	mov	r2, r3
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d24c      	bcs.n	800df28 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800de8e:	f3ef 8311 	mrs	r3, BASEPRI
 800de92:	f04f 0120 	mov.w	r1, #32
 800de96:	f381 8811 	msr	BASEPRI, r1
 800de9a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d032      	beq.n	800df08 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800dea2:	4925      	ldr	r1, [pc, #148]	; (800df38 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	1c5a      	adds	r2, r3, #1
 800dea8:	4613      	mov	r3, r2
 800deaa:	005b      	lsls	r3, r3, #1
 800deac:	4413      	add	r3, r2
 800deae:	00db      	lsls	r3, r3, #3
 800deb0:	440b      	add	r3, r1
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800deb6:	4920      	ldr	r1, [pc, #128]	; (800df38 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	1c5a      	adds	r2, r3, #1
 800debc:	4613      	mov	r3, r2
 800debe:	005b      	lsls	r3, r3, #1
 800dec0:	4413      	add	r3, r2
 800dec2:	00db      	lsls	r3, r3, #3
 800dec4:	440b      	add	r3, r1
 800dec6:	3304      	adds	r3, #4
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800decc:	491a      	ldr	r1, [pc, #104]	; (800df38 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	4613      	mov	r3, r2
 800ded2:	005b      	lsls	r3, r3, #1
 800ded4:	4413      	add	r3, r2
 800ded6:	00db      	lsls	r3, r3, #3
 800ded8:	440b      	add	r3, r1
 800deda:	3320      	adds	r3, #32
 800dedc:	683a      	ldr	r2, [r7, #0]
 800dede:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800dee0:	4915      	ldr	r1, [pc, #84]	; (800df38 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	4613      	mov	r3, r2
 800dee6:	005b      	lsls	r3, r3, #1
 800dee8:	4413      	add	r3, r2
 800deea:	00db      	lsls	r3, r3, #3
 800deec:	440b      	add	r3, r1
 800deee:	3328      	adds	r3, #40	; 0x28
 800def0:	2200      	movs	r2, #0
 800def2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800def4:	4910      	ldr	r1, [pc, #64]	; (800df38 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	4613      	mov	r3, r2
 800defa:	005b      	lsls	r3, r3, #1
 800defc:	4413      	add	r3, r2
 800defe:	00db      	lsls	r3, r3, #3
 800df00:	440b      	add	r3, r1
 800df02:	3324      	adds	r3, #36	; 0x24
 800df04:	2200      	movs	r2, #0
 800df06:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800df08:	490b      	ldr	r1, [pc, #44]	; (800df38 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	4613      	mov	r3, r2
 800df0e:	005b      	lsls	r3, r3, #1
 800df10:	4413      	add	r3, r2
 800df12:	00db      	lsls	r3, r3, #3
 800df14:	440b      	add	r3, r1
 800df16:	332c      	adds	r3, #44	; 0x2c
 800df18:	6a3a      	ldr	r2, [r7, #32]
 800df1a:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800df22:	2300      	movs	r3, #0
 800df24:	617b      	str	r3, [r7, #20]
 800df26:	e002      	b.n	800df2e <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800df28:	f04f 33ff 	mov.w	r3, #4294967295
 800df2c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800df2e:	697b      	ldr	r3, [r7, #20]
}
 800df30:	4618      	mov	r0, r3
 800df32:	3718      	adds	r7, #24
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	20001a68 	.word	0x20001a68

0800df3c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
 800df48:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800df4a:	4b30      	ldr	r3, [pc, #192]	; (800e00c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d101      	bne.n	800df56 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800df52:	f7ff fd83 	bl	800da5c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800df56:	4b2d      	ldr	r3, [pc, #180]	; (800e00c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800df58:	695b      	ldr	r3, [r3, #20]
 800df5a:	461a      	mov	r2, r3
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	4293      	cmp	r3, r2
 800df60:	d24b      	bcs.n	800dffa <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800df62:	f3ef 8311 	mrs	r3, BASEPRI
 800df66:	f04f 0120 	mov.w	r1, #32
 800df6a:	f381 8811 	msr	BASEPRI, r1
 800df6e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d031      	beq.n	800dfda <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800df76:	4925      	ldr	r1, [pc, #148]	; (800e00c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800df78:	68fa      	ldr	r2, [r7, #12]
 800df7a:	4613      	mov	r3, r2
 800df7c:	005b      	lsls	r3, r3, #1
 800df7e:	4413      	add	r3, r2
 800df80:	00db      	lsls	r3, r3, #3
 800df82:	440b      	add	r3, r1
 800df84:	3360      	adds	r3, #96	; 0x60
 800df86:	68ba      	ldr	r2, [r7, #8]
 800df88:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800df8a:	4920      	ldr	r1, [pc, #128]	; (800e00c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	4613      	mov	r3, r2
 800df90:	005b      	lsls	r3, r3, #1
 800df92:	4413      	add	r3, r2
 800df94:	00db      	lsls	r3, r3, #3
 800df96:	440b      	add	r3, r1
 800df98:	3364      	adds	r3, #100	; 0x64
 800df9a:	687a      	ldr	r2, [r7, #4]
 800df9c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800df9e:	491b      	ldr	r1, [pc, #108]	; (800e00c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	4613      	mov	r3, r2
 800dfa4:	005b      	lsls	r3, r3, #1
 800dfa6:	4413      	add	r3, r2
 800dfa8:	00db      	lsls	r3, r3, #3
 800dfaa:	440b      	add	r3, r1
 800dfac:	3368      	adds	r3, #104	; 0x68
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800dfb2:	4916      	ldr	r1, [pc, #88]	; (800e00c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	005b      	lsls	r3, r3, #1
 800dfba:	4413      	add	r3, r2
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	440b      	add	r3, r1
 800dfc0:	3370      	adds	r3, #112	; 0x70
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800dfc6:	4911      	ldr	r1, [pc, #68]	; (800e00c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	005b      	lsls	r3, r3, #1
 800dfce:	4413      	add	r3, r2
 800dfd0:	00db      	lsls	r3, r3, #3
 800dfd2:	440b      	add	r3, r1
 800dfd4:	336c      	adds	r3, #108	; 0x6c
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800dfda:	490c      	ldr	r1, [pc, #48]	; (800e00c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800dfdc:	68fa      	ldr	r2, [r7, #12]
 800dfde:	4613      	mov	r3, r2
 800dfe0:	005b      	lsls	r3, r3, #1
 800dfe2:	4413      	add	r3, r2
 800dfe4:	00db      	lsls	r3, r3, #3
 800dfe6:	440b      	add	r3, r1
 800dfe8:	3374      	adds	r3, #116	; 0x74
 800dfea:	6a3a      	ldr	r2, [r7, #32]
 800dfec:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800dff4:	2300      	movs	r3, #0
 800dff6:	617b      	str	r3, [r7, #20]
 800dff8:	e002      	b.n	800e000 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800dffa:	f04f 33ff 	mov.w	r3, #4294967295
 800dffe:	617b      	str	r3, [r7, #20]
  }
  return r;
 800e000:	697b      	ldr	r3, [r7, #20]
}
 800e002:	4618      	mov	r0, r3
 800e004:	3718      	adds	r7, #24
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	20001a68 	.word	0x20001a68

0800e010 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
int _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	607a      	str	r2, [r7, #4]
 800e01c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800e01e:	683a      	ldr	r2, [r7, #0]
 800e020:	6879      	ldr	r1, [r7, #4]
 800e022:	2000      	movs	r0, #0
 800e024:	f7ff fefc 	bl	800de20 <SEGGER_RTT_Write>
  return len;
 800e028:	683b      	ldr	r3, [r7, #0]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3710      	adds	r7, #16
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800e032:	b480      	push	{r7}
 800e034:	b087      	sub	sp, #28
 800e036:	af00      	add	r7, sp, #0
 800e038:	60f8      	str	r0, [r7, #12]
 800e03a:	60b9      	str	r1, [r7, #8]
 800e03c:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800e042:	e002      	b.n	800e04a <_EncodeStr+0x18>
    Len++;
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	3301      	adds	r3, #1
 800e048:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800e04a:	68ba      	ldr	r2, [r7, #8]
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	4413      	add	r3, r2
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1f6      	bne.n	800e044 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800e056:	693a      	ldr	r2, [r7, #16]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d901      	bls.n	800e062 <_EncodeStr+0x30>
    Len = Limit;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	2bfe      	cmp	r3, #254	; 0xfe
 800e066:	d806      	bhi.n	800e076 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	1c5a      	adds	r2, r3, #1
 800e06c:	60fa      	str	r2, [r7, #12]
 800e06e:	693a      	ldr	r2, [r7, #16]
 800e070:	b2d2      	uxtb	r2, r2
 800e072:	701a      	strb	r2, [r3, #0]
 800e074:	e011      	b.n	800e09a <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	60fa      	str	r2, [r7, #12]
 800e07c:	22ff      	movs	r2, #255	; 0xff
 800e07e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	1c5a      	adds	r2, r3, #1
 800e084:	60fa      	str	r2, [r7, #12]
 800e086:	693a      	ldr	r2, [r7, #16]
 800e088:	b2d2      	uxtb	r2, r2
 800e08a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	0a19      	lsrs	r1, r3, #8
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	1c5a      	adds	r2, r3, #1
 800e094:	60fa      	str	r2, [r7, #12]
 800e096:	b2ca      	uxtb	r2, r1
 800e098:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800e09e:	e00a      	b.n	800e0b6 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	1c53      	adds	r3, r2, #1
 800e0a4:	60bb      	str	r3, [r7, #8]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	1c59      	adds	r1, r3, #1
 800e0aa:	60f9      	str	r1, [r7, #12]
 800e0ac:	7812      	ldrb	r2, [r2, #0]
 800e0ae:	701a      	strb	r2, [r3, #0]
    n++;
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800e0b6:	697a      	ldr	r2, [r7, #20]
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d3f0      	bcc.n	800e0a0 <_EncodeStr+0x6e>
  }
  return pPayload;
 800e0be:	68fb      	ldr	r3, [r7, #12]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	371c      	adds	r7, #28
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	3304      	adds	r3, #4
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	370c      	adds	r7, #12
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e0ea:	1cfb      	adds	r3, r7, #3
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	2001      	movs	r0, #1
 800e0f2:	f7ff fdc3 	bl	800dc7c <SEGGER_RTT_ReadNoLock>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	dd4c      	ble.n	800e19a <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 800e100:	78fb      	ldrb	r3, [r7, #3]
 800e102:	2b07      	cmp	r3, #7
 800e104:	dc16      	bgt.n	800e134 <_HandleIncomingPacket+0x50>
 800e106:	2b00      	cmp	r3, #0
 800e108:	dd3c      	ble.n	800e184 <_HandleIncomingPacket+0xa0>
 800e10a:	3b01      	subs	r3, #1
 800e10c:	2b06      	cmp	r3, #6
 800e10e:	d839      	bhi.n	800e184 <_HandleIncomingPacket+0xa0>
 800e110:	a201      	add	r2, pc, #4	; (adr r2, 800e118 <_HandleIncomingPacket+0x34>)
 800e112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e116:	bf00      	nop
 800e118:	0800e13b 	.word	0x0800e13b
 800e11c:	0800e141 	.word	0x0800e141
 800e120:	0800e147 	.word	0x0800e147
 800e124:	0800e14d 	.word	0x0800e14d
 800e128:	0800e153 	.word	0x0800e153
 800e12c:	0800e159 	.word	0x0800e159
 800e130:	0800e15f 	.word	0x0800e15f
 800e134:	2b80      	cmp	r3, #128	; 0x80
 800e136:	d015      	beq.n	800e164 <_HandleIncomingPacket+0x80>
 800e138:	e024      	b.n	800e184 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800e13a:	f000 fc43 	bl	800e9c4 <SEGGER_SYSVIEW_Start>
      break;
 800e13e:	e031      	b.n	800e1a4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800e140:	f000 fcfc 	bl	800eb3c <SEGGER_SYSVIEW_Stop>
      break;
 800e144:	e02e      	b.n	800e1a4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800e146:	f000 fed7 	bl	800eef8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800e14a:	e02b      	b.n	800e1a4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800e14c:	f000 fe9c 	bl	800ee88 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800e150:	e028      	b.n	800e1a4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800e152:	f000 fd19 	bl	800eb88 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800e156:	e025      	b.n	800e1a4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800e158:	f001 f898 	bl	800f28c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800e15c:	e022      	b.n	800e1a4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800e15e:	f001 f877 	bl	800f250 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800e162:	e01f      	b.n	800e1a4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e164:	1cfb      	adds	r3, r7, #3
 800e166:	2201      	movs	r2, #1
 800e168:	4619      	mov	r1, r3
 800e16a:	2001      	movs	r0, #1
 800e16c:	f7ff fd86 	bl	800dc7c <SEGGER_RTT_ReadNoLock>
 800e170:	4603      	mov	r3, r0
 800e172:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	dd11      	ble.n	800e19e <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800e17a:	78fb      	ldrb	r3, [r7, #3]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f000 ffe7 	bl	800f150 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800e182:	e00c      	b.n	800e19e <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800e184:	78fb      	ldrb	r3, [r7, #3]
 800e186:	b25b      	sxtb	r3, r3
 800e188:	2b00      	cmp	r3, #0
 800e18a:	da0a      	bge.n	800e1a2 <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800e18c:	1cfb      	adds	r3, r7, #3
 800e18e:	2201      	movs	r2, #1
 800e190:	4619      	mov	r1, r3
 800e192:	2001      	movs	r0, #1
 800e194:	f7ff fd72 	bl	800dc7c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800e198:	e003      	b.n	800e1a2 <_HandleIncomingPacket+0xbe>
    }
  }
 800e19a:	bf00      	nop
 800e19c:	e002      	b.n	800e1a4 <_HandleIncomingPacket+0xc0>
      break;
 800e19e:	bf00      	nop
 800e1a0:	e000      	b.n	800e1a4 <_HandleIncomingPacket+0xc0>
      break;
 800e1a2:	bf00      	nop
}
 800e1a4:	bf00      	nop
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b08c      	sub	sp, #48	; 0x30
 800e1b0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800e1b6:	1d3b      	adds	r3, r7, #4
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1c0:	4b30      	ldr	r3, [pc, #192]	; (800e284 <_TrySendOverflowPacket+0xd8>)
 800e1c2:	695b      	ldr	r3, [r3, #20]
 800e1c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1c6:	e00b      	b.n	800e1e0 <_TrySendOverflowPacket+0x34>
 800e1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ce:	1c59      	adds	r1, r3, #1
 800e1d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e1d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e1d6:	b2d2      	uxtb	r2, r2
 800e1d8:	701a      	strb	r2, [r3, #0]
 800e1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1dc:	09db      	lsrs	r3, r3, #7
 800e1de:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e2:	2b7f      	cmp	r3, #127	; 0x7f
 800e1e4:	d8f0      	bhi.n	800e1c8 <_TrySendOverflowPacket+0x1c>
 800e1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e8:	1c5a      	adds	r2, r3, #1
 800e1ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e1ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1ee:	b2d2      	uxtb	r2, r2
 800e1f0:	701a      	strb	r2, [r3, #0]
 800e1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e1f6:	4b24      	ldr	r3, [pc, #144]	; (800e288 <_TrySendOverflowPacket+0xdc>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800e1fc:	4b21      	ldr	r3, [pc, #132]	; (800e284 <_TrySendOverflowPacket+0xd8>)
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	69ba      	ldr	r2, [r7, #24]
 800e202:	1ad3      	subs	r3, r2, r3
 800e204:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	627b      	str	r3, [r7, #36]	; 0x24
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	623b      	str	r3, [r7, #32]
 800e20e:	e00b      	b.n	800e228 <_TrySendOverflowPacket+0x7c>
 800e210:	6a3b      	ldr	r3, [r7, #32]
 800e212:	b2da      	uxtb	r2, r3
 800e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e216:	1c59      	adds	r1, r3, #1
 800e218:	6279      	str	r1, [r7, #36]	; 0x24
 800e21a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e21e:	b2d2      	uxtb	r2, r2
 800e220:	701a      	strb	r2, [r3, #0]
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	09db      	lsrs	r3, r3, #7
 800e226:	623b      	str	r3, [r7, #32]
 800e228:	6a3b      	ldr	r3, [r7, #32]
 800e22a:	2b7f      	cmp	r3, #127	; 0x7f
 800e22c:	d8f0      	bhi.n	800e210 <_TrySendOverflowPacket+0x64>
 800e22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e230:	1c5a      	adds	r2, r3, #1
 800e232:	627a      	str	r2, [r7, #36]	; 0x24
 800e234:	6a3a      	ldr	r2, [r7, #32]
 800e236:	b2d2      	uxtb	r2, r2
 800e238:	701a      	strb	r2, [r3, #0]
 800e23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800e23e:	1d3b      	adds	r3, r7, #4
 800e240:	69fa      	ldr	r2, [r7, #28]
 800e242:	1ad3      	subs	r3, r2, r3
 800e244:	461a      	mov	r2, r3
 800e246:	1d3b      	adds	r3, r7, #4
 800e248:	4619      	mov	r1, r3
 800e24a:	2001      	movs	r0, #1
 800e24c:	f7f1 ffc0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800e250:	4603      	mov	r3, r0
 800e252:	613b      	str	r3, [r7, #16]
  if (Status) {
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d009      	beq.n	800e26e <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800e25a:	4a0a      	ldr	r2, [pc, #40]	; (800e284 <_TrySendOverflowPacket+0xd8>)
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800e260:	4b08      	ldr	r3, [pc, #32]	; (800e284 <_TrySendOverflowPacket+0xd8>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	3b01      	subs	r3, #1
 800e266:	b2da      	uxtb	r2, r3
 800e268:	4b06      	ldr	r3, [pc, #24]	; (800e284 <_TrySendOverflowPacket+0xd8>)
 800e26a:	701a      	strb	r2, [r3, #0]
 800e26c:	e004      	b.n	800e278 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800e26e:	4b05      	ldr	r3, [pc, #20]	; (800e284 <_TrySendOverflowPacket+0xd8>)
 800e270:	695b      	ldr	r3, [r3, #20]
 800e272:	3301      	adds	r3, #1
 800e274:	4a03      	ldr	r2, [pc, #12]	; (800e284 <_TrySendOverflowPacket+0xd8>)
 800e276:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800e278:	693b      	ldr	r3, [r7, #16]
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3730      	adds	r7, #48	; 0x30
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	20002328 	.word	0x20002328
 800e288:	e0001004 	.word	0xe0001004

0800e28c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b08a      	sub	sp, #40	; 0x28
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800e298:	4b63      	ldr	r3, [pc, #396]	; (800e428 <_SendPacket+0x19c>)
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d010      	beq.n	800e2c2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800e2a0:	4b61      	ldr	r3, [pc, #388]	; (800e428 <_SendPacket+0x19c>)
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f000 80a1 	beq.w	800e3ec <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800e2aa:	4b5f      	ldr	r3, [pc, #380]	; (800e428 <_SendPacket+0x19c>)
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	d109      	bne.n	800e2c6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800e2b2:	f7ff ff7b 	bl	800e1ac <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800e2b6:	4b5c      	ldr	r3, [pc, #368]	; (800e428 <_SendPacket+0x19c>)
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	2b01      	cmp	r3, #1
 800e2bc:	f040 8098 	bne.w	800e3f0 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800e2c0:	e001      	b.n	800e2c6 <_SendPacket+0x3a>
    goto Send;
 800e2c2:	bf00      	nop
 800e2c4:	e000      	b.n	800e2c8 <_SendPacket+0x3c>
Send:
 800e2c6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2b1f      	cmp	r3, #31
 800e2cc:	d809      	bhi.n	800e2e2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800e2ce:	4b56      	ldr	r3, [pc, #344]	; (800e428 <_SendPacket+0x19c>)
 800e2d0:	69da      	ldr	r2, [r3, #28]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	fa22 f303 	lsr.w	r3, r2, r3
 800e2d8:	f003 0301 	and.w	r3, r3, #1
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f040 8089 	bne.w	800e3f4 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2b17      	cmp	r3, #23
 800e2e6:	d807      	bhi.n	800e2f8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	60fb      	str	r3, [r7, #12]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	b2da      	uxtb	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	701a      	strb	r2, [r3, #0]
 800e2f6:	e03d      	b.n	800e374 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	2b7f      	cmp	r3, #127	; 0x7f
 800e304:	d912      	bls.n	800e32c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	09da      	lsrs	r2, r3, #7
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	3b01      	subs	r3, #1
 800e30e:	60fb      	str	r3, [r7, #12]
 800e310:	b2d2      	uxtb	r2, r2
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	68fa      	ldr	r2, [r7, #12]
 800e31c:	3a01      	subs	r2, #1
 800e31e:	60fa      	str	r2, [r7, #12]
 800e320:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e324:	b2da      	uxtb	r2, r3
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	701a      	strb	r2, [r3, #0]
 800e32a:	e006      	b.n	800e33a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	3b01      	subs	r3, #1
 800e330:	60fb      	str	r3, [r7, #12]
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	b2da      	uxtb	r2, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2b7f      	cmp	r3, #127	; 0x7f
 800e33e:	d912      	bls.n	800e366 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	09da      	lsrs	r2, r3, #7
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	3b01      	subs	r3, #1
 800e348:	60fb      	str	r3, [r7, #12]
 800e34a:	b2d2      	uxtb	r2, r2
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	b2db      	uxtb	r3, r3
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	3a01      	subs	r2, #1
 800e358:	60fa      	str	r2, [r7, #12]
 800e35a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	701a      	strb	r2, [r3, #0]
 800e364:	e006      	b.n	800e374 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	3b01      	subs	r3, #1
 800e36a:	60fb      	str	r3, [r7, #12]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e374:	4b2d      	ldr	r3, [pc, #180]	; (800e42c <_SendPacket+0x1a0>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800e37a:	4b2b      	ldr	r3, [pc, #172]	; (800e428 <_SendPacket+0x19c>)
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	69ba      	ldr	r2, [r7, #24]
 800e380:	1ad3      	subs	r3, r2, r3
 800e382:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	627b      	str	r3, [r7, #36]	; 0x24
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	623b      	str	r3, [r7, #32]
 800e38c:	e00b      	b.n	800e3a6 <_SendPacket+0x11a>
 800e38e:	6a3b      	ldr	r3, [r7, #32]
 800e390:	b2da      	uxtb	r2, r3
 800e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e394:	1c59      	adds	r1, r3, #1
 800e396:	6279      	str	r1, [r7, #36]	; 0x24
 800e398:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e39c:	b2d2      	uxtb	r2, r2
 800e39e:	701a      	strb	r2, [r3, #0]
 800e3a0:	6a3b      	ldr	r3, [r7, #32]
 800e3a2:	09db      	lsrs	r3, r3, #7
 800e3a4:	623b      	str	r3, [r7, #32]
 800e3a6:	6a3b      	ldr	r3, [r7, #32]
 800e3a8:	2b7f      	cmp	r3, #127	; 0x7f
 800e3aa:	d8f0      	bhi.n	800e38e <_SendPacket+0x102>
 800e3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ae:	1c5a      	adds	r2, r3, #1
 800e3b0:	627a      	str	r2, [r7, #36]	; 0x24
 800e3b2:	6a3a      	ldr	r2, [r7, #32]
 800e3b4:	b2d2      	uxtb	r2, r2
 800e3b6:	701a      	strb	r2, [r3, #0]
 800e3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ba:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	68f9      	ldr	r1, [r7, #12]
 800e3c6:	2001      	movs	r0, #1
 800e3c8:	f7f1 ff02 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	613b      	str	r3, [r7, #16]
  if (Status) {
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d003      	beq.n	800e3de <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800e3d6:	4a14      	ldr	r2, [pc, #80]	; (800e428 <_SendPacket+0x19c>)
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	60d3      	str	r3, [r2, #12]
 800e3dc:	e00b      	b.n	800e3f6 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800e3de:	4b12      	ldr	r3, [pc, #72]	; (800e428 <_SendPacket+0x19c>)
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	b2da      	uxtb	r2, r3
 800e3e6:	4b10      	ldr	r3, [pc, #64]	; (800e428 <_SendPacket+0x19c>)
 800e3e8:	701a      	strb	r2, [r3, #0]
 800e3ea:	e004      	b.n	800e3f6 <_SendPacket+0x16a>
    goto SendDone;
 800e3ec:	bf00      	nop
 800e3ee:	e002      	b.n	800e3f6 <_SendPacket+0x16a>
      goto SendDone;
 800e3f0:	bf00      	nop
 800e3f2:	e000      	b.n	800e3f6 <_SendPacket+0x16a>
      goto SendDone;
 800e3f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800e3f6:	4b0e      	ldr	r3, [pc, #56]	; (800e430 <_SendPacket+0x1a4>)
 800e3f8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800e3fc:	4b0c      	ldr	r3, [pc, #48]	; (800e430 <_SendPacket+0x1a4>)
 800e3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e402:	429a      	cmp	r2, r3
 800e404:	d00b      	beq.n	800e41e <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800e406:	4b08      	ldr	r3, [pc, #32]	; (800e428 <_SendPacket+0x19c>)
 800e408:	789b      	ldrb	r3, [r3, #2]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d107      	bne.n	800e41e <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800e40e:	4b06      	ldr	r3, [pc, #24]	; (800e428 <_SendPacket+0x19c>)
 800e410:	2201      	movs	r2, #1
 800e412:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800e414:	f7ff fe66 	bl	800e0e4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800e418:	4b03      	ldr	r3, [pc, #12]	; (800e428 <_SendPacket+0x19c>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800e41e:	bf00      	nop
 800e420:	3728      	adds	r7, #40	; 0x28
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	20002328 	.word	0x20002328
 800e42c:	e0001004 	.word	0xe0001004
 800e430:	20001a68 	.word	0x20001a68

0800e434 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800e434:	b580      	push	{r7, lr}
 800e436:	b0a2      	sub	sp, #136	; 0x88
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 800e444:	2300      	movs	r3, #0
 800e446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 800e44a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e44c:	1c5a      	adds	r2, r3, #1
 800e44e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 800e456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d01d      	beq.n	800e49a <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800e45e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e462:	2b25      	cmp	r3, #37	; 0x25
 800e464:	d1f1      	bne.n	800e44a <_VPrintHost+0x16>
      c = *p;
 800e466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	1d19      	adds	r1, r3, #4
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	6011      	str	r1, [r2, #0]
 800e478:	6819      	ldr	r1, [r3, #0]
 800e47a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e47e:	1c5a      	adds	r2, r3, #1
 800e480:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e484:	460a      	mov	r2, r1
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	3388      	adds	r3, #136	; 0x88
 800e48a:	443b      	add	r3, r7
 800e48c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800e490:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e494:	2b10      	cmp	r3, #16
 800e496:	d002      	beq.n	800e49e <_VPrintHost+0x6a>
    c = *p++;
 800e498:	e7d7      	b.n	800e44a <_VPrintHost+0x16>
      break;
 800e49a:	bf00      	nop
 800e49c:	e000      	b.n	800e4a0 <_VPrintHost+0x6c>
        break;
 800e49e:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800e4a0:	f3ef 8311 	mrs	r3, BASEPRI
 800e4a4:	f04f 0120 	mov.w	r1, #32
 800e4a8:	f381 8811 	msr	BASEPRI, r1
 800e4ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800e4ae:	483f      	ldr	r0, [pc, #252]	; (800e5ac <_VPrintHost+0x178>)
 800e4b0:	f7ff fe0c 	bl	800e0cc <_PreparePacket>
 800e4b4:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e4b6:	2280      	movs	r2, #128	; 0x80
 800e4b8:	68f9      	ldr	r1, [r7, #12]
 800e4ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e4bc:	f7ff fdb9 	bl	800e032 <_EncodeStr>
 800e4c0:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 800e4c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4c4:	677b      	str	r3, [r7, #116]	; 0x74
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	673b      	str	r3, [r7, #112]	; 0x70
 800e4ca:	e00b      	b.n	800e4e4 <_VPrintHost+0xb0>
 800e4cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4ce:	b2da      	uxtb	r2, r3
 800e4d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4d2:	1c59      	adds	r1, r3, #1
 800e4d4:	6779      	str	r1, [r7, #116]	; 0x74
 800e4d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e4da:	b2d2      	uxtb	r2, r2
 800e4dc:	701a      	strb	r2, [r3, #0]
 800e4de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4e0:	09db      	lsrs	r3, r3, #7
 800e4e2:	673b      	str	r3, [r7, #112]	; 0x70
 800e4e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4e6:	2b7f      	cmp	r3, #127	; 0x7f
 800e4e8:	d8f0      	bhi.n	800e4cc <_VPrintHost+0x98>
 800e4ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4ec:	1c5a      	adds	r2, r3, #1
 800e4ee:	677a      	str	r2, [r7, #116]	; 0x74
 800e4f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e4f2:	b2d2      	uxtb	r2, r2
 800e4f4:	701a      	strb	r2, [r3, #0]
 800e4f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4f8:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 800e4fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e4fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e502:	66bb      	str	r3, [r7, #104]	; 0x68
 800e504:	e00b      	b.n	800e51e <_VPrintHost+0xea>
 800e506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e50c:	1c59      	adds	r1, r3, #1
 800e50e:	66f9      	str	r1, [r7, #108]	; 0x6c
 800e510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e514:	b2d2      	uxtb	r2, r2
 800e516:	701a      	strb	r2, [r3, #0]
 800e518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e51a:	09db      	lsrs	r3, r3, #7
 800e51c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e51e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e520:	2b7f      	cmp	r3, #127	; 0x7f
 800e522:	d8f0      	bhi.n	800e506 <_VPrintHost+0xd2>
 800e524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e526:	1c5a      	adds	r2, r3, #1
 800e528:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e52a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e52c:	b2d2      	uxtb	r2, r2
 800e52e:	701a      	strb	r2, [r3, #0]
 800e530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e532:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 800e534:	f107 0314 	add.w	r3, r7, #20
 800e538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800e53c:	e022      	b.n	800e584 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800e53e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e540:	667b      	str	r3, [r7, #100]	; 0x64
 800e542:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	663b      	str	r3, [r7, #96]	; 0x60
 800e54a:	e00b      	b.n	800e564 <_VPrintHost+0x130>
 800e54c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e552:	1c59      	adds	r1, r3, #1
 800e554:	6679      	str	r1, [r7, #100]	; 0x64
 800e556:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e55a:	b2d2      	uxtb	r2, r2
 800e55c:	701a      	strb	r2, [r3, #0]
 800e55e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e560:	09db      	lsrs	r3, r3, #7
 800e562:	663b      	str	r3, [r7, #96]	; 0x60
 800e564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e566:	2b7f      	cmp	r3, #127	; 0x7f
 800e568:	d8f0      	bhi.n	800e54c <_VPrintHost+0x118>
 800e56a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e56c:	1c5a      	adds	r2, r3, #1
 800e56e:	667a      	str	r2, [r7, #100]	; 0x64
 800e570:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e572:	b2d2      	uxtb	r2, r2
 800e574:	701a      	strb	r2, [r3, #0]
 800e576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e578:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 800e57a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e57e:	3304      	adds	r3, #4
 800e580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800e584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e588:	1e5a      	subs	r2, r3, #1
 800e58a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d1d5      	bne.n	800e53e <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800e592:	221a      	movs	r2, #26
 800e594:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e596:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e598:	f7ff fe78 	bl	800e28c <_SendPacket>
    RECORD_END();
 800e59c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e59e:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800e5a2:	2300      	movs	r3, #0
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3788      	adds	r7, #136	; 0x88
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	20002358 	.word	0x20002358

0800e5b0 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af02      	add	r7, sp, #8
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
 800e5bc:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e5be:	2300      	movs	r3, #0
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5c6:	4a14      	ldr	r2, [pc, #80]	; (800e618 <SEGGER_SYSVIEW_Init+0x68>)
 800e5c8:	4914      	ldr	r1, [pc, #80]	; (800e61c <SEGGER_SYSVIEW_Init+0x6c>)
 800e5ca:	2001      	movs	r0, #1
 800e5cc:	f7ff fc4c 	bl	800de68 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	9300      	str	r3, [sp, #0]
 800e5d4:	2308      	movs	r3, #8
 800e5d6:	4a12      	ldr	r2, [pc, #72]	; (800e620 <SEGGER_SYSVIEW_Init+0x70>)
 800e5d8:	4910      	ldr	r1, [pc, #64]	; (800e61c <SEGGER_SYSVIEW_Init+0x6c>)
 800e5da:	2001      	movs	r0, #1
 800e5dc:	f7ff fcae 	bl	800df3c <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800e5e0:	4b10      	ldr	r3, [pc, #64]	; (800e624 <SEGGER_SYSVIEW_Init+0x74>)
 800e5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5e6:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e5e8:	4b0f      	ldr	r3, [pc, #60]	; (800e628 <SEGGER_SYSVIEW_Init+0x78>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a0d      	ldr	r2, [pc, #52]	; (800e624 <SEGGER_SYSVIEW_Init+0x74>)
 800e5ee:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800e5f0:	4a0c      	ldr	r2, [pc, #48]	; (800e624 <SEGGER_SYSVIEW_Init+0x74>)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800e5f6:	4a0b      	ldr	r2, [pc, #44]	; (800e624 <SEGGER_SYSVIEW_Init+0x74>)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800e5fc:	4a09      	ldr	r2, [pc, #36]	; (800e624 <SEGGER_SYSVIEW_Init+0x74>)
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800e602:	4a08      	ldr	r2, [pc, #32]	; (800e624 <SEGGER_SYSVIEW_Init+0x74>)
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800e608:	4b06      	ldr	r3, [pc, #24]	; (800e624 <SEGGER_SYSVIEW_Init+0x74>)
 800e60a:	2200      	movs	r2, #0
 800e60c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800e60e:	bf00      	nop
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	20001f20 	.word	0x20001f20
 800e61c:	080120e0 	.word	0x080120e0
 800e620:	20002320 	.word	0x20002320
 800e624:	20002328 	.word	0x20002328
 800e628:	e0001004 	.word	0xe0001004

0800e62c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800e62c:	b480      	push	{r7}
 800e62e:	b083      	sub	sp, #12
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800e634:	4a04      	ldr	r2, [pc, #16]	; (800e648 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6113      	str	r3, [r2, #16]
}
 800e63a:	bf00      	nop
 800e63c:	370c      	adds	r7, #12
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	20002328 	.word	0x20002328

0800e64c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800e654:	f3ef 8311 	mrs	r3, BASEPRI
 800e658:	f04f 0120 	mov.w	r1, #32
 800e65c:	f381 8811 	msr	BASEPRI, r1
 800e660:	60fb      	str	r3, [r7, #12]
 800e662:	4808      	ldr	r0, [pc, #32]	; (800e684 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800e664:	f7ff fd32 	bl	800e0cc <_PreparePacket>
 800e668:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	68b9      	ldr	r1, [r7, #8]
 800e66e:	68b8      	ldr	r0, [r7, #8]
 800e670:	f7ff fe0c 	bl	800e28c <_SendPacket>
  RECORD_END();
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f383 8811 	msr	BASEPRI, r3
}
 800e67a:	bf00      	nop
 800e67c:	3710      	adds	r7, #16
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	20002358 	.word	0x20002358

0800e688 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800e688:	b580      	push	{r7, lr}
 800e68a:	b088      	sub	sp, #32
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e692:	f3ef 8311 	mrs	r3, BASEPRI
 800e696:	f04f 0120 	mov.w	r1, #32
 800e69a:	f381 8811 	msr	BASEPRI, r1
 800e69e:	617b      	str	r3, [r7, #20]
 800e6a0:	4816      	ldr	r0, [pc, #88]	; (800e6fc <SEGGER_SYSVIEW_RecordU32+0x74>)
 800e6a2:	f7ff fd13 	bl	800e0cc <_PreparePacket>
 800e6a6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	61fb      	str	r3, [r7, #28]
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	61bb      	str	r3, [r7, #24]
 800e6b4:	e00b      	b.n	800e6ce <SEGGER_SYSVIEW_RecordU32+0x46>
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	b2da      	uxtb	r2, r3
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	1c59      	adds	r1, r3, #1
 800e6be:	61f9      	str	r1, [r7, #28]
 800e6c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e6c4:	b2d2      	uxtb	r2, r2
 800e6c6:	701a      	strb	r2, [r3, #0]
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	09db      	lsrs	r3, r3, #7
 800e6cc:	61bb      	str	r3, [r7, #24]
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	2b7f      	cmp	r3, #127	; 0x7f
 800e6d2:	d8f0      	bhi.n	800e6b6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	1c5a      	adds	r2, r3, #1
 800e6d8:	61fa      	str	r2, [r7, #28]
 800e6da:	69ba      	ldr	r2, [r7, #24]
 800e6dc:	b2d2      	uxtb	r2, r2
 800e6de:	701a      	strb	r2, [r3, #0]
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	68f9      	ldr	r1, [r7, #12]
 800e6e8:	6938      	ldr	r0, [r7, #16]
 800e6ea:	f7ff fdcf 	bl	800e28c <_SendPacket>
  RECORD_END();
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	f383 8811 	msr	BASEPRI, r3
}
 800e6f4:	bf00      	nop
 800e6f6:	3720      	adds	r7, #32
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	20002358 	.word	0x20002358

0800e700 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800e700:	b580      	push	{r7, lr}
 800e702:	b08c      	sub	sp, #48	; 0x30
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800e70c:	f3ef 8311 	mrs	r3, BASEPRI
 800e710:	f04f 0120 	mov.w	r1, #32
 800e714:	f381 8811 	msr	BASEPRI, r1
 800e718:	61fb      	str	r3, [r7, #28]
 800e71a:	4825      	ldr	r0, [pc, #148]	; (800e7b0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800e71c:	f7ff fcd6 	bl	800e0cc <_PreparePacket>
 800e720:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e72e:	e00b      	b.n	800e748 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800e730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e732:	b2da      	uxtb	r2, r3
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	1c59      	adds	r1, r3, #1
 800e738:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e73a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e73e:	b2d2      	uxtb	r2, r2
 800e740:	701a      	strb	r2, [r3, #0]
 800e742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e744:	09db      	lsrs	r3, r3, #7
 800e746:	62bb      	str	r3, [r7, #40]	; 0x28
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	2b7f      	cmp	r3, #127	; 0x7f
 800e74c:	d8f0      	bhi.n	800e730 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800e74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e750:	1c5a      	adds	r2, r3, #1
 800e752:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e756:	b2d2      	uxtb	r2, r2
 800e758:	701a      	strb	r2, [r3, #0]
 800e75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	627b      	str	r3, [r7, #36]	; 0x24
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	623b      	str	r3, [r7, #32]
 800e766:	e00b      	b.n	800e780 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800e768:	6a3b      	ldr	r3, [r7, #32]
 800e76a:	b2da      	uxtb	r2, r3
 800e76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76e:	1c59      	adds	r1, r3, #1
 800e770:	6279      	str	r1, [r7, #36]	; 0x24
 800e772:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e776:	b2d2      	uxtb	r2, r2
 800e778:	701a      	strb	r2, [r3, #0]
 800e77a:	6a3b      	ldr	r3, [r7, #32]
 800e77c:	09db      	lsrs	r3, r3, #7
 800e77e:	623b      	str	r3, [r7, #32]
 800e780:	6a3b      	ldr	r3, [r7, #32]
 800e782:	2b7f      	cmp	r3, #127	; 0x7f
 800e784:	d8f0      	bhi.n	800e768 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	1c5a      	adds	r2, r3, #1
 800e78a:	627a      	str	r2, [r7, #36]	; 0x24
 800e78c:	6a3a      	ldr	r2, [r7, #32]
 800e78e:	b2d2      	uxtb	r2, r2
 800e790:	701a      	strb	r2, [r3, #0]
 800e792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e794:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	6979      	ldr	r1, [r7, #20]
 800e79a:	69b8      	ldr	r0, [r7, #24]
 800e79c:	f7ff fd76 	bl	800e28c <_SendPacket>
  RECORD_END();
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	f383 8811 	msr	BASEPRI, r3
}
 800e7a6:	bf00      	nop
 800e7a8:	3730      	adds	r7, #48	; 0x30
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	20002358 	.word	0x20002358

0800e7b4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b08e      	sub	sp, #56	; 0x38
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]
 800e7c0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800e7c2:	f3ef 8311 	mrs	r3, BASEPRI
 800e7c6:	f04f 0120 	mov.w	r1, #32
 800e7ca:	f381 8811 	msr	BASEPRI, r1
 800e7ce:	61fb      	str	r3, [r7, #28]
 800e7d0:	4832      	ldr	r0, [pc, #200]	; (800e89c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800e7d2:	f7ff fc7b 	bl	800e0cc <_PreparePacket>
 800e7d6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	637b      	str	r3, [r7, #52]	; 0x34
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	633b      	str	r3, [r7, #48]	; 0x30
 800e7e4:	e00b      	b.n	800e7fe <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800e7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ec:	1c59      	adds	r1, r3, #1
 800e7ee:	6379      	str	r1, [r7, #52]	; 0x34
 800e7f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e7f4:	b2d2      	uxtb	r2, r2
 800e7f6:	701a      	strb	r2, [r3, #0]
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fa:	09db      	lsrs	r3, r3, #7
 800e7fc:	633b      	str	r3, [r7, #48]	; 0x30
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	2b7f      	cmp	r3, #127	; 0x7f
 800e802:	d8f0      	bhi.n	800e7e6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800e804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e806:	1c5a      	adds	r2, r3, #1
 800e808:	637a      	str	r2, [r7, #52]	; 0x34
 800e80a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e80c:	b2d2      	uxtb	r2, r2
 800e80e:	701a      	strb	r2, [r3, #0]
 800e810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e812:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e81c:	e00b      	b.n	800e836 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	b2da      	uxtb	r2, r3
 800e822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e824:	1c59      	adds	r1, r3, #1
 800e826:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e828:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e82c:	b2d2      	uxtb	r2, r2
 800e82e:	701a      	strb	r2, [r3, #0]
 800e830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e832:	09db      	lsrs	r3, r3, #7
 800e834:	62bb      	str	r3, [r7, #40]	; 0x28
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	2b7f      	cmp	r3, #127	; 0x7f
 800e83a:	d8f0      	bhi.n	800e81e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e844:	b2d2      	uxtb	r2, r2
 800e846:	701a      	strb	r2, [r3, #0]
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	627b      	str	r3, [r7, #36]	; 0x24
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	623b      	str	r3, [r7, #32]
 800e854:	e00b      	b.n	800e86e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85c:	1c59      	adds	r1, r3, #1
 800e85e:	6279      	str	r1, [r7, #36]	; 0x24
 800e860:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e864:	b2d2      	uxtb	r2, r2
 800e866:	701a      	strb	r2, [r3, #0]
 800e868:	6a3b      	ldr	r3, [r7, #32]
 800e86a:	09db      	lsrs	r3, r3, #7
 800e86c:	623b      	str	r3, [r7, #32]
 800e86e:	6a3b      	ldr	r3, [r7, #32]
 800e870:	2b7f      	cmp	r3, #127	; 0x7f
 800e872:	d8f0      	bhi.n	800e856 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	1c5a      	adds	r2, r3, #1
 800e878:	627a      	str	r2, [r7, #36]	; 0x24
 800e87a:	6a3a      	ldr	r2, [r7, #32]
 800e87c:	b2d2      	uxtb	r2, r2
 800e87e:	701a      	strb	r2, [r3, #0]
 800e880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e882:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	6979      	ldr	r1, [r7, #20]
 800e888:	69b8      	ldr	r0, [r7, #24]
 800e88a:	f7ff fcff 	bl	800e28c <_SendPacket>
  RECORD_END();
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	f383 8811 	msr	BASEPRI, r3
}
 800e894:	bf00      	nop
 800e896:	3738      	adds	r7, #56	; 0x38
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	20002358 	.word	0x20002358

0800e8a0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b090      	sub	sp, #64	; 0x40
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	60b9      	str	r1, [r7, #8]
 800e8aa:	607a      	str	r2, [r7, #4]
 800e8ac:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800e8ae:	f3ef 8311 	mrs	r3, BASEPRI
 800e8b2:	f04f 0120 	mov.w	r1, #32
 800e8b6:	f381 8811 	msr	BASEPRI, r1
 800e8ba:	61fb      	str	r3, [r7, #28]
 800e8bc:	4840      	ldr	r0, [pc, #256]	; (800e9c0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800e8be:	f7ff fc05 	bl	800e0cc <_PreparePacket>
 800e8c2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800e8c4:	69bb      	ldr	r3, [r7, #24]
 800e8c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8d0:	e00b      	b.n	800e8ea <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800e8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d4:	b2da      	uxtb	r2, r3
 800e8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d8:	1c59      	adds	r1, r3, #1
 800e8da:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e8dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e8e0:	b2d2      	uxtb	r2, r2
 800e8e2:	701a      	strb	r2, [r3, #0]
 800e8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e6:	09db      	lsrs	r3, r3, #7
 800e8e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ec:	2b7f      	cmp	r3, #127	; 0x7f
 800e8ee:	d8f0      	bhi.n	800e8d2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800e8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f2:	1c5a      	adds	r2, r3, #1
 800e8f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e8f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8f8:	b2d2      	uxtb	r2, r2
 800e8fa:	701a      	strb	r2, [r3, #0]
 800e8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	637b      	str	r3, [r7, #52]	; 0x34
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	633b      	str	r3, [r7, #48]	; 0x30
 800e908:	e00b      	b.n	800e922 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800e90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90c:	b2da      	uxtb	r2, r3
 800e90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e910:	1c59      	adds	r1, r3, #1
 800e912:	6379      	str	r1, [r7, #52]	; 0x34
 800e914:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e918:	b2d2      	uxtb	r2, r2
 800e91a:	701a      	strb	r2, [r3, #0]
 800e91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91e:	09db      	lsrs	r3, r3, #7
 800e920:	633b      	str	r3, [r7, #48]	; 0x30
 800e922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e924:	2b7f      	cmp	r3, #127	; 0x7f
 800e926:	d8f0      	bhi.n	800e90a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800e928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e92a:	1c5a      	adds	r2, r3, #1
 800e92c:	637a      	str	r2, [r7, #52]	; 0x34
 800e92e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e930:	b2d2      	uxtb	r2, r2
 800e932:	701a      	strb	r2, [r3, #0]
 800e934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e936:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e940:	e00b      	b.n	800e95a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800e942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e944:	b2da      	uxtb	r2, r3
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	1c59      	adds	r1, r3, #1
 800e94a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e94c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e950:	b2d2      	uxtb	r2, r2
 800e952:	701a      	strb	r2, [r3, #0]
 800e954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e956:	09db      	lsrs	r3, r3, #7
 800e958:	62bb      	str	r3, [r7, #40]	; 0x28
 800e95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95c:	2b7f      	cmp	r3, #127	; 0x7f
 800e95e:	d8f0      	bhi.n	800e942 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	1c5a      	adds	r2, r3, #1
 800e964:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e968:	b2d2      	uxtb	r2, r2
 800e96a:	701a      	strb	r2, [r3, #0]
 800e96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	627b      	str	r3, [r7, #36]	; 0x24
 800e974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e976:	623b      	str	r3, [r7, #32]
 800e978:	e00b      	b.n	800e992 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800e97a:	6a3b      	ldr	r3, [r7, #32]
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	1c59      	adds	r1, r3, #1
 800e982:	6279      	str	r1, [r7, #36]	; 0x24
 800e984:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e988:	b2d2      	uxtb	r2, r2
 800e98a:	701a      	strb	r2, [r3, #0]
 800e98c:	6a3b      	ldr	r3, [r7, #32]
 800e98e:	09db      	lsrs	r3, r3, #7
 800e990:	623b      	str	r3, [r7, #32]
 800e992:	6a3b      	ldr	r3, [r7, #32]
 800e994:	2b7f      	cmp	r3, #127	; 0x7f
 800e996:	d8f0      	bhi.n	800e97a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99a:	1c5a      	adds	r2, r3, #1
 800e99c:	627a      	str	r2, [r7, #36]	; 0x24
 800e99e:	6a3a      	ldr	r2, [r7, #32]
 800e9a0:	b2d2      	uxtb	r2, r2
 800e9a2:	701a      	strb	r2, [r3, #0]
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800e9a8:	68fa      	ldr	r2, [r7, #12]
 800e9aa:	6979      	ldr	r1, [r7, #20]
 800e9ac:	69b8      	ldr	r0, [r7, #24]
 800e9ae:	f7ff fc6d 	bl	800e28c <_SendPacket>
  RECORD_END();
 800e9b2:	69fb      	ldr	r3, [r7, #28]
 800e9b4:	f383 8811 	msr	BASEPRI, r3
}
 800e9b8:	bf00      	nop
 800e9ba:	3740      	adds	r7, #64	; 0x40
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	20002358 	.word	0x20002358

0800e9c4 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b08c      	sub	sp, #48	; 0x30
 800e9c8:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800e9ca:	4b59      	ldr	r3, [pc, #356]	; (800eb30 <SEGGER_SYSVIEW_Start+0x16c>)
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	f040 80aa 	bne.w	800eb28 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800e9d4:	4b56      	ldr	r3, [pc, #344]	; (800eb30 <SEGGER_SYSVIEW_Start+0x16c>)
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800e9da:	f3ef 8311 	mrs	r3, BASEPRI
 800e9de:	f04f 0120 	mov.w	r1, #32
 800e9e2:	f381 8811 	msr	BASEPRI, r1
 800e9e6:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800e9e8:	220a      	movs	r2, #10
 800e9ea:	4952      	ldr	r1, [pc, #328]	; (800eb34 <SEGGER_SYSVIEW_Start+0x170>)
 800e9ec:	2001      	movs	r0, #1
 800e9ee:	f7f1 fbef 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800e9f8:	200a      	movs	r0, #10
 800e9fa:	f7ff fe27 	bl	800e64c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800e9fe:	f3ef 8311 	mrs	r3, BASEPRI
 800ea02:	f04f 0120 	mov.w	r1, #32
 800ea06:	f381 8811 	msr	BASEPRI, r1
 800ea0a:	60bb      	str	r3, [r7, #8]
 800ea0c:	484a      	ldr	r0, [pc, #296]	; (800eb38 <SEGGER_SYSVIEW_Start+0x174>)
 800ea0e:	f7ff fb5d 	bl	800e0cc <_PreparePacket>
 800ea12:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea1c:	4b44      	ldr	r3, [pc, #272]	; (800eb30 <SEGGER_SYSVIEW_Start+0x16c>)
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea22:	e00b      	b.n	800ea3c <SEGGER_SYSVIEW_Start+0x78>
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	b2da      	uxtb	r2, r3
 800ea28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2a:	1c59      	adds	r1, r3, #1
 800ea2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ea2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea32:	b2d2      	uxtb	r2, r2
 800ea34:	701a      	strb	r2, [r3, #0]
 800ea36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea38:	09db      	lsrs	r3, r3, #7
 800ea3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3e:	2b7f      	cmp	r3, #127	; 0x7f
 800ea40:	d8f0      	bhi.n	800ea24 <SEGGER_SYSVIEW_Start+0x60>
 800ea42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea44:	1c5a      	adds	r2, r3, #1
 800ea46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea4a:	b2d2      	uxtb	r2, r2
 800ea4c:	701a      	strb	r2, [r3, #0]
 800ea4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea50:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	627b      	str	r3, [r7, #36]	; 0x24
 800ea56:	4b36      	ldr	r3, [pc, #216]	; (800eb30 <SEGGER_SYSVIEW_Start+0x16c>)
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	623b      	str	r3, [r7, #32]
 800ea5c:	e00b      	b.n	800ea76 <SEGGER_SYSVIEW_Start+0xb2>
 800ea5e:	6a3b      	ldr	r3, [r7, #32]
 800ea60:	b2da      	uxtb	r2, r3
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	1c59      	adds	r1, r3, #1
 800ea66:	6279      	str	r1, [r7, #36]	; 0x24
 800ea68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea6c:	b2d2      	uxtb	r2, r2
 800ea6e:	701a      	strb	r2, [r3, #0]
 800ea70:	6a3b      	ldr	r3, [r7, #32]
 800ea72:	09db      	lsrs	r3, r3, #7
 800ea74:	623b      	str	r3, [r7, #32]
 800ea76:	6a3b      	ldr	r3, [r7, #32]
 800ea78:	2b7f      	cmp	r3, #127	; 0x7f
 800ea7a:	d8f0      	bhi.n	800ea5e <SEGGER_SYSVIEW_Start+0x9a>
 800ea7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7e:	1c5a      	adds	r2, r3, #1
 800ea80:	627a      	str	r2, [r7, #36]	; 0x24
 800ea82:	6a3a      	ldr	r2, [r7, #32]
 800ea84:	b2d2      	uxtb	r2, r2
 800ea86:	701a      	strb	r2, [r3, #0]
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	61fb      	str	r3, [r7, #28]
 800ea90:	4b27      	ldr	r3, [pc, #156]	; (800eb30 <SEGGER_SYSVIEW_Start+0x16c>)
 800ea92:	691b      	ldr	r3, [r3, #16]
 800ea94:	61bb      	str	r3, [r7, #24]
 800ea96:	e00b      	b.n	800eab0 <SEGGER_SYSVIEW_Start+0xec>
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	1c59      	adds	r1, r3, #1
 800eaa0:	61f9      	str	r1, [r7, #28]
 800eaa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eaa6:	b2d2      	uxtb	r2, r2
 800eaa8:	701a      	strb	r2, [r3, #0]
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	09db      	lsrs	r3, r3, #7
 800eaae:	61bb      	str	r3, [r7, #24]
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	2b7f      	cmp	r3, #127	; 0x7f
 800eab4:	d8f0      	bhi.n	800ea98 <SEGGER_SYSVIEW_Start+0xd4>
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	1c5a      	adds	r2, r3, #1
 800eaba:	61fa      	str	r2, [r7, #28]
 800eabc:	69ba      	ldr	r2, [r7, #24]
 800eabe:	b2d2      	uxtb	r2, r2
 800eac0:	701a      	strb	r2, [r3, #0]
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	617b      	str	r3, [r7, #20]
 800eaca:	2302      	movs	r3, #2
 800eacc:	613b      	str	r3, [r7, #16]
 800eace:	e00b      	b.n	800eae8 <SEGGER_SYSVIEW_Start+0x124>
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	1c59      	adds	r1, r3, #1
 800ead8:	6179      	str	r1, [r7, #20]
 800eada:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eade:	b2d2      	uxtb	r2, r2
 800eae0:	701a      	strb	r2, [r3, #0]
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	09db      	lsrs	r3, r3, #7
 800eae6:	613b      	str	r3, [r7, #16]
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	2b7f      	cmp	r3, #127	; 0x7f
 800eaec:	d8f0      	bhi.n	800ead0 <SEGGER_SYSVIEW_Start+0x10c>
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	1c5a      	adds	r2, r3, #1
 800eaf2:	617a      	str	r2, [r7, #20]
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	b2d2      	uxtb	r2, r2
 800eaf8:	701a      	strb	r2, [r3, #0]
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800eafe:	2218      	movs	r2, #24
 800eb00:	6839      	ldr	r1, [r7, #0]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7ff fbc2 	bl	800e28c <_SendPacket>
      RECORD_END();
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800eb0e:	4b08      	ldr	r3, [pc, #32]	; (800eb30 <SEGGER_SYSVIEW_Start+0x16c>)
 800eb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d002      	beq.n	800eb1c <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800eb16:	4b06      	ldr	r3, [pc, #24]	; (800eb30 <SEGGER_SYSVIEW_Start+0x16c>)
 800eb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1a:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800eb1c:	f000 f9ec 	bl	800eef8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800eb20:	f000 f9b2 	bl	800ee88 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800eb24:	f000 fbb2 	bl	800f28c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800eb28:	bf00      	nop
 800eb2a:	3730      	adds	r7, #48	; 0x30
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	20002328 	.word	0x20002328
 800eb34:	0801262c 	.word	0x0801262c
 800eb38:	20002358 	.word	0x20002358

0800eb3c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800eb42:	f3ef 8311 	mrs	r3, BASEPRI
 800eb46:	f04f 0120 	mov.w	r1, #32
 800eb4a:	f381 8811 	msr	BASEPRI, r1
 800eb4e:	607b      	str	r3, [r7, #4]
 800eb50:	480b      	ldr	r0, [pc, #44]	; (800eb80 <SEGGER_SYSVIEW_Stop+0x44>)
 800eb52:	f7ff fabb 	bl	800e0cc <_PreparePacket>
 800eb56:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800eb58:	4b0a      	ldr	r3, [pc, #40]	; (800eb84 <SEGGER_SYSVIEW_Stop+0x48>)
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d007      	beq.n	800eb70 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800eb60:	220b      	movs	r2, #11
 800eb62:	6839      	ldr	r1, [r7, #0]
 800eb64:	6838      	ldr	r0, [r7, #0]
 800eb66:	f7ff fb91 	bl	800e28c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800eb6a:	4b06      	ldr	r3, [pc, #24]	; (800eb84 <SEGGER_SYSVIEW_Stop+0x48>)
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f383 8811 	msr	BASEPRI, r3
}
 800eb76:	bf00      	nop
 800eb78:	3708      	adds	r7, #8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	20002358 	.word	0x20002358
 800eb84:	20002328 	.word	0x20002328

0800eb88 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b08c      	sub	sp, #48	; 0x30
 800eb8c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800eb8e:	f3ef 8311 	mrs	r3, BASEPRI
 800eb92:	f04f 0120 	mov.w	r1, #32
 800eb96:	f381 8811 	msr	BASEPRI, r1
 800eb9a:	60fb      	str	r3, [r7, #12]
 800eb9c:	4845      	ldr	r0, [pc, #276]	; (800ecb4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800eb9e:	f7ff fa95 	bl	800e0cc <_PreparePacket>
 800eba2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebac:	4b42      	ldr	r3, [pc, #264]	; (800ecb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebb2:	e00b      	b.n	800ebcc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800ebb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb6:	b2da      	uxtb	r2, r3
 800ebb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebba:	1c59      	adds	r1, r3, #1
 800ebbc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ebbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ebc2:	b2d2      	uxtb	r2, r2
 800ebc4:	701a      	strb	r2, [r3, #0]
 800ebc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc8:	09db      	lsrs	r3, r3, #7
 800ebca:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebce:	2b7f      	cmp	r3, #127	; 0x7f
 800ebd0:	d8f0      	bhi.n	800ebb4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800ebd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd4:	1c5a      	adds	r2, r3, #1
 800ebd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebda:	b2d2      	uxtb	r2, r2
 800ebdc:	701a      	strb	r2, [r3, #0]
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	627b      	str	r3, [r7, #36]	; 0x24
 800ebe6:	4b34      	ldr	r3, [pc, #208]	; (800ecb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	623b      	str	r3, [r7, #32]
 800ebec:	e00b      	b.n	800ec06 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800ebee:	6a3b      	ldr	r3, [r7, #32]
 800ebf0:	b2da      	uxtb	r2, r3
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf4:	1c59      	adds	r1, r3, #1
 800ebf6:	6279      	str	r1, [r7, #36]	; 0x24
 800ebf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ebfc:	b2d2      	uxtb	r2, r2
 800ebfe:	701a      	strb	r2, [r3, #0]
 800ec00:	6a3b      	ldr	r3, [r7, #32]
 800ec02:	09db      	lsrs	r3, r3, #7
 800ec04:	623b      	str	r3, [r7, #32]
 800ec06:	6a3b      	ldr	r3, [r7, #32]
 800ec08:	2b7f      	cmp	r3, #127	; 0x7f
 800ec0a:	d8f0      	bhi.n	800ebee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	1c5a      	adds	r2, r3, #1
 800ec10:	627a      	str	r2, [r7, #36]	; 0x24
 800ec12:	6a3a      	ldr	r2, [r7, #32]
 800ec14:	b2d2      	uxtb	r2, r2
 800ec16:	701a      	strb	r2, [r3, #0]
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	61fb      	str	r3, [r7, #28]
 800ec20:	4b25      	ldr	r3, [pc, #148]	; (800ecb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ec22:	691b      	ldr	r3, [r3, #16]
 800ec24:	61bb      	str	r3, [r7, #24]
 800ec26:	e00b      	b.n	800ec40 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	b2da      	uxtb	r2, r3
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	1c59      	adds	r1, r3, #1
 800ec30:	61f9      	str	r1, [r7, #28]
 800ec32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ec36:	b2d2      	uxtb	r2, r2
 800ec38:	701a      	strb	r2, [r3, #0]
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	09db      	lsrs	r3, r3, #7
 800ec3e:	61bb      	str	r3, [r7, #24]
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	2b7f      	cmp	r3, #127	; 0x7f
 800ec44:	d8f0      	bhi.n	800ec28 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	1c5a      	adds	r2, r3, #1
 800ec4a:	61fa      	str	r2, [r7, #28]
 800ec4c:	69ba      	ldr	r2, [r7, #24]
 800ec4e:	b2d2      	uxtb	r2, r2
 800ec50:	701a      	strb	r2, [r3, #0]
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	617b      	str	r3, [r7, #20]
 800ec5a:	2302      	movs	r3, #2
 800ec5c:	613b      	str	r3, [r7, #16]
 800ec5e:	e00b      	b.n	800ec78 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	b2da      	uxtb	r2, r3
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	1c59      	adds	r1, r3, #1
 800ec68:	6179      	str	r1, [r7, #20]
 800ec6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ec6e:	b2d2      	uxtb	r2, r2
 800ec70:	701a      	strb	r2, [r3, #0]
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	09db      	lsrs	r3, r3, #7
 800ec76:	613b      	str	r3, [r7, #16]
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	2b7f      	cmp	r3, #127	; 0x7f
 800ec7c:	d8f0      	bhi.n	800ec60 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	1c5a      	adds	r2, r3, #1
 800ec82:	617a      	str	r2, [r7, #20]
 800ec84:	693a      	ldr	r2, [r7, #16]
 800ec86:	b2d2      	uxtb	r2, r2
 800ec88:	701a      	strb	r2, [r3, #0]
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ec8e:	2218      	movs	r2, #24
 800ec90:	6879      	ldr	r1, [r7, #4]
 800ec92:	68b8      	ldr	r0, [r7, #8]
 800ec94:	f7ff fafa 	bl	800e28c <_SendPacket>
  RECORD_END();
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ec9e:	4b06      	ldr	r3, [pc, #24]	; (800ecb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800eca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d002      	beq.n	800ecac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800eca6:	4b04      	ldr	r3, [pc, #16]	; (800ecb8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800eca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecaa:	4798      	blx	r3
  }
}
 800ecac:	bf00      	nop
 800ecae:	3730      	adds	r7, #48	; 0x30
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	20002358 	.word	0x20002358
 800ecb8:	20002328 	.word	0x20002328

0800ecbc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b092      	sub	sp, #72	; 0x48
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800ecc4:	f3ef 8311 	mrs	r3, BASEPRI
 800ecc8:	f04f 0120 	mov.w	r1, #32
 800eccc:	f381 8811 	msr	BASEPRI, r1
 800ecd0:	617b      	str	r3, [r7, #20]
 800ecd2:	486b      	ldr	r0, [pc, #428]	; (800ee80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800ecd4:	f7ff f9fa 	bl	800e0cc <_PreparePacket>
 800ecd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	647b      	str	r3, [r7, #68]	; 0x44
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	4b67      	ldr	r3, [pc, #412]	; (800ee84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800ece8:	691b      	ldr	r3, [r3, #16]
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	089b      	lsrs	r3, r3, #2
 800ecee:	643b      	str	r3, [r7, #64]	; 0x40
 800ecf0:	e00b      	b.n	800ed0a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800ecf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecf4:	b2da      	uxtb	r2, r3
 800ecf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecf8:	1c59      	adds	r1, r3, #1
 800ecfa:	6479      	str	r1, [r7, #68]	; 0x44
 800ecfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed00:	b2d2      	uxtb	r2, r2
 800ed02:	701a      	strb	r2, [r3, #0]
 800ed04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed06:	09db      	lsrs	r3, r3, #7
 800ed08:	643b      	str	r3, [r7, #64]	; 0x40
 800ed0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed0c:	2b7f      	cmp	r3, #127	; 0x7f
 800ed0e:	d8f0      	bhi.n	800ecf2 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800ed10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed12:	1c5a      	adds	r2, r3, #1
 800ed14:	647a      	str	r2, [r7, #68]	; 0x44
 800ed16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed18:	b2d2      	uxtb	r2, r2
 800ed1a:	701a      	strb	r2, [r3, #0]
 800ed1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed2a:	e00b      	b.n	800ed44 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800ed2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2e:	b2da      	uxtb	r2, r3
 800ed30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed32:	1c59      	adds	r1, r3, #1
 800ed34:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ed36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed3a:	b2d2      	uxtb	r2, r2
 800ed3c:	701a      	strb	r2, [r3, #0]
 800ed3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed40:	09db      	lsrs	r3, r3, #7
 800ed42:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed46:	2b7f      	cmp	r3, #127	; 0x7f
 800ed48:	d8f0      	bhi.n	800ed2c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800ed4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed4c:	1c5a      	adds	r2, r3, #1
 800ed4e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ed50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed52:	b2d2      	uxtb	r2, r2
 800ed54:	701a      	strb	r2, [r3, #0]
 800ed56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed58:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	2220      	movs	r2, #32
 800ed60:	4619      	mov	r1, r3
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	f7ff f965 	bl	800e032 <_EncodeStr>
 800ed68:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800ed6a:	2209      	movs	r2, #9
 800ed6c:	68f9      	ldr	r1, [r7, #12]
 800ed6e:	6938      	ldr	r0, [r7, #16]
 800ed70:	f7ff fa8c 	bl	800e28c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	4b40      	ldr	r3, [pc, #256]	; (800ee84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800ed82:	691b      	ldr	r3, [r3, #16]
 800ed84:	1ad3      	subs	r3, r2, r3
 800ed86:	089b      	lsrs	r3, r3, #2
 800ed88:	633b      	str	r3, [r7, #48]	; 0x30
 800ed8a:	e00b      	b.n	800eda4 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800ed8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8e:	b2da      	uxtb	r2, r3
 800ed90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed92:	1c59      	adds	r1, r3, #1
 800ed94:	6379      	str	r1, [r7, #52]	; 0x34
 800ed96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed9a:	b2d2      	uxtb	r2, r2
 800ed9c:	701a      	strb	r2, [r3, #0]
 800ed9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda0:	09db      	lsrs	r3, r3, #7
 800eda2:	633b      	str	r3, [r7, #48]	; 0x30
 800eda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda6:	2b7f      	cmp	r3, #127	; 0x7f
 800eda8:	d8f0      	bhi.n	800ed8c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800edaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edac:	1c5a      	adds	r2, r3, #1
 800edae:	637a      	str	r2, [r7, #52]	; 0x34
 800edb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edb2:	b2d2      	uxtb	r2, r2
 800edb4:	701a      	strb	r2, [r3, #0]
 800edb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	68db      	ldr	r3, [r3, #12]
 800edc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800edc4:	e00b      	b.n	800edde <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800edc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc8:	b2da      	uxtb	r2, r3
 800edca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edcc:	1c59      	adds	r1, r3, #1
 800edce:	62f9      	str	r1, [r7, #44]	; 0x2c
 800edd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800edd4:	b2d2      	uxtb	r2, r2
 800edd6:	701a      	strb	r2, [r3, #0]
 800edd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edda:	09db      	lsrs	r3, r3, #7
 800eddc:	62bb      	str	r3, [r7, #40]	; 0x28
 800edde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede0:	2b7f      	cmp	r3, #127	; 0x7f
 800ede2:	d8f0      	bhi.n	800edc6 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800ede4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede6:	1c5a      	adds	r2, r3, #1
 800ede8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800edea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edec:	b2d2      	uxtb	r2, r2
 800edee:	701a      	strb	r2, [r3, #0]
 800edf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	627b      	str	r3, [r7, #36]	; 0x24
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	691b      	ldr	r3, [r3, #16]
 800edfc:	623b      	str	r3, [r7, #32]
 800edfe:	e00b      	b.n	800ee18 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800ee00:	6a3b      	ldr	r3, [r7, #32]
 800ee02:	b2da      	uxtb	r2, r3
 800ee04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee06:	1c59      	adds	r1, r3, #1
 800ee08:	6279      	str	r1, [r7, #36]	; 0x24
 800ee0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ee0e:	b2d2      	uxtb	r2, r2
 800ee10:	701a      	strb	r2, [r3, #0]
 800ee12:	6a3b      	ldr	r3, [r7, #32]
 800ee14:	09db      	lsrs	r3, r3, #7
 800ee16:	623b      	str	r3, [r7, #32]
 800ee18:	6a3b      	ldr	r3, [r7, #32]
 800ee1a:	2b7f      	cmp	r3, #127	; 0x7f
 800ee1c:	d8f0      	bhi.n	800ee00 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee20:	1c5a      	adds	r2, r3, #1
 800ee22:	627a      	str	r2, [r7, #36]	; 0x24
 800ee24:	6a3a      	ldr	r2, [r7, #32]
 800ee26:	b2d2      	uxtb	r2, r2
 800ee28:	701a      	strb	r2, [r3, #0]
 800ee2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	61fb      	str	r3, [r7, #28]
 800ee32:	2300      	movs	r3, #0
 800ee34:	61bb      	str	r3, [r7, #24]
 800ee36:	e00b      	b.n	800ee50 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	b2da      	uxtb	r2, r3
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	1c59      	adds	r1, r3, #1
 800ee40:	61f9      	str	r1, [r7, #28]
 800ee42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ee46:	b2d2      	uxtb	r2, r2
 800ee48:	701a      	strb	r2, [r3, #0]
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	09db      	lsrs	r3, r3, #7
 800ee4e:	61bb      	str	r3, [r7, #24]
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	2b7f      	cmp	r3, #127	; 0x7f
 800ee54:	d8f0      	bhi.n	800ee38 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	1c5a      	adds	r2, r3, #1
 800ee5a:	61fa      	str	r2, [r7, #28]
 800ee5c:	69ba      	ldr	r2, [r7, #24]
 800ee5e:	b2d2      	uxtb	r2, r2
 800ee60:	701a      	strb	r2, [r3, #0]
 800ee62:	69fb      	ldr	r3, [r7, #28]
 800ee64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800ee66:	2215      	movs	r2, #21
 800ee68:	68f9      	ldr	r1, [r7, #12]
 800ee6a:	6938      	ldr	r0, [r7, #16]
 800ee6c:	f7ff fa0e 	bl	800e28c <_SendPacket>
  RECORD_END();
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	f383 8811 	msr	BASEPRI, r3
}
 800ee76:	bf00      	nop
 800ee78:	3748      	adds	r7, #72	; 0x48
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	20002358 	.word	0x20002358
 800ee84:	20002328 	.word	0x20002328

0800ee88 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800ee8c:	4b07      	ldr	r3, [pc, #28]	; (800eeac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ee8e:	6a1b      	ldr	r3, [r3, #32]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d008      	beq.n	800eea6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800ee94:	4b05      	ldr	r3, [pc, #20]	; (800eeac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ee96:	6a1b      	ldr	r3, [r3, #32]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800ee9e:	4b03      	ldr	r3, [pc, #12]	; (800eeac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	4798      	blx	r3
  }
}
 800eea6:	bf00      	nop
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	20002328 	.word	0x20002328

0800eeb0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b086      	sub	sp, #24
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800eeb8:	f3ef 8311 	mrs	r3, BASEPRI
 800eebc:	f04f 0120 	mov.w	r1, #32
 800eec0:	f381 8811 	msr	BASEPRI, r1
 800eec4:	617b      	str	r3, [r7, #20]
 800eec6:	480b      	ldr	r0, [pc, #44]	; (800eef4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800eec8:	f7ff f900 	bl	800e0cc <_PreparePacket>
 800eecc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800eece:	2280      	movs	r2, #128	; 0x80
 800eed0:	6879      	ldr	r1, [r7, #4]
 800eed2:	6938      	ldr	r0, [r7, #16]
 800eed4:	f7ff f8ad 	bl	800e032 <_EncodeStr>
 800eed8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800eeda:	220e      	movs	r2, #14
 800eedc:	68f9      	ldr	r1, [r7, #12]
 800eede:	6938      	ldr	r0, [r7, #16]
 800eee0:	f7ff f9d4 	bl	800e28c <_SendPacket>
  RECORD_END();
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	f383 8811 	msr	BASEPRI, r3
}
 800eeea:	bf00      	nop
 800eeec:	3718      	adds	r7, #24
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	20002358 	.word	0x20002358

0800eef8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800eef8:	b590      	push	{r4, r7, lr}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800eefe:	4b15      	ldr	r3, [pc, #84]	; (800ef54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800ef00:	6a1b      	ldr	r3, [r3, #32]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d01a      	beq.n	800ef3c <SEGGER_SYSVIEW_RecordSystime+0x44>
 800ef06:	4b13      	ldr	r3, [pc, #76]	; (800ef54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800ef08:	6a1b      	ldr	r3, [r3, #32]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d015      	beq.n	800ef3c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800ef10:	4b10      	ldr	r3, [pc, #64]	; (800ef54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800ef12:	6a1b      	ldr	r3, [r3, #32]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4798      	blx	r3
 800ef18:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800ef1c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800ef1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef22:	f04f 0200 	mov.w	r2, #0
 800ef26:	f04f 0300 	mov.w	r3, #0
 800ef2a:	000a      	movs	r2, r1
 800ef2c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800ef2e:	4613      	mov	r3, r2
 800ef30:	461a      	mov	r2, r3
 800ef32:	4621      	mov	r1, r4
 800ef34:	200d      	movs	r0, #13
 800ef36:	f7ff fbe3 	bl	800e700 <SEGGER_SYSVIEW_RecordU32x2>
 800ef3a:	e006      	b.n	800ef4a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800ef3c:	4b06      	ldr	r3, [pc, #24]	; (800ef58 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4619      	mov	r1, r3
 800ef42:	200c      	movs	r0, #12
 800ef44:	f7ff fba0 	bl	800e688 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800ef48:	bf00      	nop
 800ef4a:	bf00      	nop
 800ef4c:	370c      	adds	r7, #12
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd90      	pop	{r4, r7, pc}
 800ef52:	bf00      	nop
 800ef54:	20002328 	.word	0x20002328
 800ef58:	e0001004 	.word	0xe0001004

0800ef5c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ef62:	f3ef 8311 	mrs	r3, BASEPRI
 800ef66:	f04f 0120 	mov.w	r1, #32
 800ef6a:	f381 8811 	msr	BASEPRI, r1
 800ef6e:	607b      	str	r3, [r7, #4]
 800ef70:	4807      	ldr	r0, [pc, #28]	; (800ef90 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800ef72:	f7ff f8ab 	bl	800e0cc <_PreparePacket>
 800ef76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800ef78:	2211      	movs	r2, #17
 800ef7a:	6839      	ldr	r1, [r7, #0]
 800ef7c:	6838      	ldr	r0, [r7, #0]
 800ef7e:	f7ff f985 	bl	800e28c <_SendPacket>
  RECORD_END();
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f383 8811 	msr	BASEPRI, r3
}
 800ef88:	bf00      	nop
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	20002358 	.word	0x20002358

0800ef94 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b088      	sub	sp, #32
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ef9c:	f3ef 8311 	mrs	r3, BASEPRI
 800efa0:	f04f 0120 	mov.w	r1, #32
 800efa4:	f381 8811 	msr	BASEPRI, r1
 800efa8:	617b      	str	r3, [r7, #20]
 800efaa:	481a      	ldr	r0, [pc, #104]	; (800f014 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800efac:	f7ff f88e 	bl	800e0cc <_PreparePacket>
 800efb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800efb6:	4b18      	ldr	r3, [pc, #96]	; (800f018 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800efb8:	691b      	ldr	r3, [r3, #16]
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	089b      	lsrs	r3, r3, #2
 800efc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	61fb      	str	r3, [r7, #28]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	61bb      	str	r3, [r7, #24]
 800efca:	e00b      	b.n	800efe4 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	b2da      	uxtb	r2, r3
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	1c59      	adds	r1, r3, #1
 800efd4:	61f9      	str	r1, [r7, #28]
 800efd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800efda:	b2d2      	uxtb	r2, r2
 800efdc:	701a      	strb	r2, [r3, #0]
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	09db      	lsrs	r3, r3, #7
 800efe2:	61bb      	str	r3, [r7, #24]
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	2b7f      	cmp	r3, #127	; 0x7f
 800efe8:	d8f0      	bhi.n	800efcc <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	1c5a      	adds	r2, r3, #1
 800efee:	61fa      	str	r2, [r7, #28]
 800eff0:	69ba      	ldr	r2, [r7, #24]
 800eff2:	b2d2      	uxtb	r2, r2
 800eff4:	701a      	strb	r2, [r3, #0]
 800eff6:	69fb      	ldr	r3, [r7, #28]
 800eff8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800effa:	2208      	movs	r2, #8
 800effc:	68f9      	ldr	r1, [r7, #12]
 800effe:	6938      	ldr	r0, [r7, #16]
 800f000:	f7ff f944 	bl	800e28c <_SendPacket>
  RECORD_END();
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	f383 8811 	msr	BASEPRI, r3
}
 800f00a:	bf00      	nop
 800f00c:	3720      	adds	r7, #32
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	20002358 	.word	0x20002358
 800f018:	20002328 	.word	0x20002328

0800f01c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b088      	sub	sp, #32
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f024:	f3ef 8311 	mrs	r3, BASEPRI
 800f028:	f04f 0120 	mov.w	r1, #32
 800f02c:	f381 8811 	msr	BASEPRI, r1
 800f030:	617b      	str	r3, [r7, #20]
 800f032:	481a      	ldr	r0, [pc, #104]	; (800f09c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800f034:	f7ff f84a 	bl	800e0cc <_PreparePacket>
 800f038:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f03e:	4b18      	ldr	r3, [pc, #96]	; (800f0a0 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800f040:	691b      	ldr	r3, [r3, #16]
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	1ad3      	subs	r3, r2, r3
 800f046:	089b      	lsrs	r3, r3, #2
 800f048:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	61fb      	str	r3, [r7, #28]
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	61bb      	str	r3, [r7, #24]
 800f052:	e00b      	b.n	800f06c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	b2da      	uxtb	r2, r3
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	1c59      	adds	r1, r3, #1
 800f05c:	61f9      	str	r1, [r7, #28]
 800f05e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f062:	b2d2      	uxtb	r2, r2
 800f064:	701a      	strb	r2, [r3, #0]
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	09db      	lsrs	r3, r3, #7
 800f06a:	61bb      	str	r3, [r7, #24]
 800f06c:	69bb      	ldr	r3, [r7, #24]
 800f06e:	2b7f      	cmp	r3, #127	; 0x7f
 800f070:	d8f0      	bhi.n	800f054 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800f072:	69fb      	ldr	r3, [r7, #28]
 800f074:	1c5a      	adds	r2, r3, #1
 800f076:	61fa      	str	r2, [r7, #28]
 800f078:	69ba      	ldr	r2, [r7, #24]
 800f07a:	b2d2      	uxtb	r2, r2
 800f07c:	701a      	strb	r2, [r3, #0]
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800f082:	2204      	movs	r2, #4
 800f084:	68f9      	ldr	r1, [r7, #12]
 800f086:	6938      	ldr	r0, [r7, #16]
 800f088:	f7ff f900 	bl	800e28c <_SendPacket>
  RECORD_END();
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f383 8811 	msr	BASEPRI, r3
}
 800f092:	bf00      	nop
 800f094:	3720      	adds	r7, #32
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	20002358 	.word	0x20002358
 800f0a0:	20002328 	.word	0x20002328

0800f0a4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b088      	sub	sp, #32
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f0ac:	f3ef 8311 	mrs	r3, BASEPRI
 800f0b0:	f04f 0120 	mov.w	r1, #32
 800f0b4:	f381 8811 	msr	BASEPRI, r1
 800f0b8:	617b      	str	r3, [r7, #20]
 800f0ba:	481a      	ldr	r0, [pc, #104]	; (800f124 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800f0bc:	f7ff f806 	bl	800e0cc <_PreparePacket>
 800f0c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f0c6:	4b18      	ldr	r3, [pc, #96]	; (800f128 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800f0c8:	691b      	ldr	r3, [r3, #16]
 800f0ca:	687a      	ldr	r2, [r7, #4]
 800f0cc:	1ad3      	subs	r3, r2, r3
 800f0ce:	089b      	lsrs	r3, r3, #2
 800f0d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	61fb      	str	r3, [r7, #28]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	61bb      	str	r3, [r7, #24]
 800f0da:	e00b      	b.n	800f0f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800f0dc:	69bb      	ldr	r3, [r7, #24]
 800f0de:	b2da      	uxtb	r2, r3
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	1c59      	adds	r1, r3, #1
 800f0e4:	61f9      	str	r1, [r7, #28]
 800f0e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f0ea:	b2d2      	uxtb	r2, r2
 800f0ec:	701a      	strb	r2, [r3, #0]
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	09db      	lsrs	r3, r3, #7
 800f0f2:	61bb      	str	r3, [r7, #24]
 800f0f4:	69bb      	ldr	r3, [r7, #24]
 800f0f6:	2b7f      	cmp	r3, #127	; 0x7f
 800f0f8:	d8f0      	bhi.n	800f0dc <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	1c5a      	adds	r2, r3, #1
 800f0fe:	61fa      	str	r2, [r7, #28]
 800f100:	69ba      	ldr	r2, [r7, #24]
 800f102:	b2d2      	uxtb	r2, r2
 800f104:	701a      	strb	r2, [r3, #0]
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800f10a:	2206      	movs	r2, #6
 800f10c:	68f9      	ldr	r1, [r7, #12]
 800f10e:	6938      	ldr	r0, [r7, #16]
 800f110:	f7ff f8bc 	bl	800e28c <_SendPacket>
  RECORD_END();
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	f383 8811 	msr	BASEPRI, r3
}
 800f11a:	bf00      	nop
 800f11c:	3720      	adds	r7, #32
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
 800f122:	bf00      	nop
 800f124:	20002358 	.word	0x20002358
 800f128:	20002328 	.word	0x20002328

0800f12c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800f134:	4b05      	ldr	r3, [pc, #20]	; (800f14c <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800f136:	691b      	ldr	r3, [r3, #16]
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	1ad3      	subs	r3, r2, r3
 800f13c:	089b      	lsrs	r3, r3, #2
}
 800f13e:	4618      	mov	r0, r3
 800f140:	370c      	adds	r7, #12
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop
 800f14c:	20002328 	.word	0x20002328

0800f150 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800f150:	b580      	push	{r7, lr}
 800f152:	b08c      	sub	sp, #48	; 0x30
 800f154:	af00      	add	r7, sp, #0
 800f156:	4603      	mov	r3, r0
 800f158:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800f15a:	4b3b      	ldr	r3, [pc, #236]	; (800f248 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d06d      	beq.n	800f23e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800f162:	4b39      	ldr	r3, [pc, #228]	; (800f248 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800f168:	2300      	movs	r3, #0
 800f16a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f16c:	e008      	b.n	800f180 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800f16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f170:	691b      	ldr	r3, [r3, #16]
 800f172:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800f174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f176:	2b00      	cmp	r3, #0
 800f178:	d007      	beq.n	800f18a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800f17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17c:	3301      	adds	r3, #1
 800f17e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f180:	79fb      	ldrb	r3, [r7, #7]
 800f182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f184:	429a      	cmp	r2, r3
 800f186:	d3f2      	bcc.n	800f16e <SEGGER_SYSVIEW_SendModule+0x1e>
 800f188:	e000      	b.n	800f18c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800f18a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800f18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d055      	beq.n	800f23e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f192:	f3ef 8311 	mrs	r3, BASEPRI
 800f196:	f04f 0120 	mov.w	r1, #32
 800f19a:	f381 8811 	msr	BASEPRI, r1
 800f19e:	617b      	str	r3, [r7, #20]
 800f1a0:	482a      	ldr	r0, [pc, #168]	; (800f24c <SEGGER_SYSVIEW_SendModule+0xfc>)
 800f1a2:	f7fe ff93 	bl	800e0cc <_PreparePacket>
 800f1a6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	627b      	str	r3, [r7, #36]	; 0x24
 800f1b0:	79fb      	ldrb	r3, [r7, #7]
 800f1b2:	623b      	str	r3, [r7, #32]
 800f1b4:	e00b      	b.n	800f1ce <SEGGER_SYSVIEW_SendModule+0x7e>
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	b2da      	uxtb	r2, r3
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1bc:	1c59      	adds	r1, r3, #1
 800f1be:	6279      	str	r1, [r7, #36]	; 0x24
 800f1c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f1c4:	b2d2      	uxtb	r2, r2
 800f1c6:	701a      	strb	r2, [r3, #0]
 800f1c8:	6a3b      	ldr	r3, [r7, #32]
 800f1ca:	09db      	lsrs	r3, r3, #7
 800f1cc:	623b      	str	r3, [r7, #32]
 800f1ce:	6a3b      	ldr	r3, [r7, #32]
 800f1d0:	2b7f      	cmp	r3, #127	; 0x7f
 800f1d2:	d8f0      	bhi.n	800f1b6 <SEGGER_SYSVIEW_SendModule+0x66>
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	1c5a      	adds	r2, r3, #1
 800f1d8:	627a      	str	r2, [r7, #36]	; 0x24
 800f1da:	6a3a      	ldr	r2, [r7, #32]
 800f1dc:	b2d2      	uxtb	r2, r2
 800f1de:	701a      	strb	r2, [r3, #0]
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	61fb      	str	r3, [r7, #28]
 800f1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	61bb      	str	r3, [r7, #24]
 800f1ee:	e00b      	b.n	800f208 <SEGGER_SYSVIEW_SendModule+0xb8>
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	b2da      	uxtb	r2, r3
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	1c59      	adds	r1, r3, #1
 800f1f8:	61f9      	str	r1, [r7, #28]
 800f1fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f1fe:	b2d2      	uxtb	r2, r2
 800f200:	701a      	strb	r2, [r3, #0]
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	09db      	lsrs	r3, r3, #7
 800f206:	61bb      	str	r3, [r7, #24]
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	2b7f      	cmp	r3, #127	; 0x7f
 800f20c:	d8f0      	bhi.n	800f1f0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	1c5a      	adds	r2, r3, #1
 800f212:	61fa      	str	r2, [r7, #28]
 800f214:	69ba      	ldr	r2, [r7, #24]
 800f216:	b2d2      	uxtb	r2, r2
 800f218:	701a      	strb	r2, [r3, #0]
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2280      	movs	r2, #128	; 0x80
 800f224:	4619      	mov	r1, r3
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f7fe ff03 	bl	800e032 <_EncodeStr>
 800f22c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800f22e:	2216      	movs	r2, #22
 800f230:	68f9      	ldr	r1, [r7, #12]
 800f232:	6938      	ldr	r0, [r7, #16]
 800f234:	f7ff f82a 	bl	800e28c <_SendPacket>
      RECORD_END();
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800f23e:	bf00      	nop
 800f240:	3730      	adds	r7, #48	; 0x30
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	20002350 	.word	0x20002350
 800f24c:	20002358 	.word	0x20002358

0800f250 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800f256:	4b0c      	ldr	r3, [pc, #48]	; (800f288 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00f      	beq.n	800f27e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800f25e:	4b0a      	ldr	r3, [pc, #40]	; (800f288 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d002      	beq.n	800f272 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	691b      	ldr	r3, [r3, #16]
 800f276:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1f2      	bne.n	800f264 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800f27e:	bf00      	nop
 800f280:	3708      	adds	r7, #8
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	20002350 	.word	0x20002350

0800f28c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b086      	sub	sp, #24
 800f290:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800f292:	f3ef 8311 	mrs	r3, BASEPRI
 800f296:	f04f 0120 	mov.w	r1, #32
 800f29a:	f381 8811 	msr	BASEPRI, r1
 800f29e:	60fb      	str	r3, [r7, #12]
 800f2a0:	4817      	ldr	r0, [pc, #92]	; (800f300 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800f2a2:	f7fe ff13 	bl	800e0cc <_PreparePacket>
 800f2a6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	617b      	str	r3, [r7, #20]
 800f2b0:	4b14      	ldr	r3, [pc, #80]	; (800f304 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	613b      	str	r3, [r7, #16]
 800f2b6:	e00b      	b.n	800f2d0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	b2da      	uxtb	r2, r3
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	1c59      	adds	r1, r3, #1
 800f2c0:	6179      	str	r1, [r7, #20]
 800f2c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f2c6:	b2d2      	uxtb	r2, r2
 800f2c8:	701a      	strb	r2, [r3, #0]
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	09db      	lsrs	r3, r3, #7
 800f2ce:	613b      	str	r3, [r7, #16]
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	2b7f      	cmp	r3, #127	; 0x7f
 800f2d4:	d8f0      	bhi.n	800f2b8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	1c5a      	adds	r2, r3, #1
 800f2da:	617a      	str	r2, [r7, #20]
 800f2dc:	693a      	ldr	r2, [r7, #16]
 800f2de:	b2d2      	uxtb	r2, r2
 800f2e0:	701a      	strb	r2, [r3, #0]
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800f2e6:	221b      	movs	r2, #27
 800f2e8:	6879      	ldr	r1, [r7, #4]
 800f2ea:	68b8      	ldr	r0, [r7, #8]
 800f2ec:	f7fe ffce 	bl	800e28c <_SendPacket>
  RECORD_END();
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f383 8811 	msr	BASEPRI, r3
}
 800f2f6:	bf00      	nop
 800f2f8:	3718      	adds	r7, #24
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	20002358 	.word	0x20002358
 800f304:	20002354 	.word	0x20002354

0800f308 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800f308:	b40f      	push	{r0, r1, r2, r3}
 800f30a:	b580      	push	{r7, lr}
 800f30c:	b082      	sub	sp, #8
 800f30e:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800f310:	f107 0314 	add.w	r3, r7, #20
 800f314:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800f316:	1d3b      	adds	r3, r7, #4
 800f318:	461a      	mov	r2, r3
 800f31a:	2100      	movs	r1, #0
 800f31c:	6938      	ldr	r0, [r7, #16]
 800f31e:	f7ff f889 	bl	800e434 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800f322:	bf00      	nop
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f32c:	b004      	add	sp, #16
 800f32e:	4770      	bx	lr

0800f330 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800f330:	b580      	push	{r7, lr}
 800f332:	b08a      	sub	sp, #40	; 0x28
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f338:	f3ef 8311 	mrs	r3, BASEPRI
 800f33c:	f04f 0120 	mov.w	r1, #32
 800f340:	f381 8811 	msr	BASEPRI, r1
 800f344:	617b      	str	r3, [r7, #20]
 800f346:	4827      	ldr	r0, [pc, #156]	; (800f3e4 <SEGGER_SYSVIEW_Warn+0xb4>)
 800f348:	f7fe fec0 	bl	800e0cc <_PreparePacket>
 800f34c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f34e:	2280      	movs	r2, #128	; 0x80
 800f350:	6879      	ldr	r1, [r7, #4]
 800f352:	6938      	ldr	r0, [r7, #16]
 800f354:	f7fe fe6d 	bl	800e032 <_EncodeStr>
 800f358:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	627b      	str	r3, [r7, #36]	; 0x24
 800f35e:	2301      	movs	r3, #1
 800f360:	623b      	str	r3, [r7, #32]
 800f362:	e00b      	b.n	800f37c <SEGGER_SYSVIEW_Warn+0x4c>
 800f364:	6a3b      	ldr	r3, [r7, #32]
 800f366:	b2da      	uxtb	r2, r3
 800f368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36a:	1c59      	adds	r1, r3, #1
 800f36c:	6279      	str	r1, [r7, #36]	; 0x24
 800f36e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f372:	b2d2      	uxtb	r2, r2
 800f374:	701a      	strb	r2, [r3, #0]
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	09db      	lsrs	r3, r3, #7
 800f37a:	623b      	str	r3, [r7, #32]
 800f37c:	6a3b      	ldr	r3, [r7, #32]
 800f37e:	2b7f      	cmp	r3, #127	; 0x7f
 800f380:	d8f0      	bhi.n	800f364 <SEGGER_SYSVIEW_Warn+0x34>
 800f382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f384:	1c5a      	adds	r2, r3, #1
 800f386:	627a      	str	r2, [r7, #36]	; 0x24
 800f388:	6a3a      	ldr	r2, [r7, #32]
 800f38a:	b2d2      	uxtb	r2, r2
 800f38c:	701a      	strb	r2, [r3, #0]
 800f38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f390:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	61fb      	str	r3, [r7, #28]
 800f396:	2300      	movs	r3, #0
 800f398:	61bb      	str	r3, [r7, #24]
 800f39a:	e00b      	b.n	800f3b4 <SEGGER_SYSVIEW_Warn+0x84>
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	b2da      	uxtb	r2, r3
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	1c59      	adds	r1, r3, #1
 800f3a4:	61f9      	str	r1, [r7, #28]
 800f3a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f3aa:	b2d2      	uxtb	r2, r2
 800f3ac:	701a      	strb	r2, [r3, #0]
 800f3ae:	69bb      	ldr	r3, [r7, #24]
 800f3b0:	09db      	lsrs	r3, r3, #7
 800f3b2:	61bb      	str	r3, [r7, #24]
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	2b7f      	cmp	r3, #127	; 0x7f
 800f3b8:	d8f0      	bhi.n	800f39c <SEGGER_SYSVIEW_Warn+0x6c>
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	1c5a      	adds	r2, r3, #1
 800f3be:	61fa      	str	r2, [r7, #28]
 800f3c0:	69ba      	ldr	r2, [r7, #24]
 800f3c2:	b2d2      	uxtb	r2, r2
 800f3c4:	701a      	strb	r2, [r3, #0]
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800f3ca:	221a      	movs	r2, #26
 800f3cc:	68f9      	ldr	r1, [r7, #12]
 800f3ce:	6938      	ldr	r0, [r7, #16]
 800f3d0:	f7fe ff5c 	bl	800e28c <_SendPacket>
  RECORD_END();
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	f383 8811 	msr	BASEPRI, r3
}
 800f3da:	bf00      	nop
 800f3dc:	3728      	adds	r7, #40	; 0x28
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	20002358 	.word	0x20002358

0800f3e8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800f3ec:	4803      	ldr	r0, [pc, #12]	; (800f3fc <_cbSendSystemDesc+0x14>)
 800f3ee:	f7ff fd5f 	bl	800eeb0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800f3f2:	4803      	ldr	r0, [pc, #12]	; (800f400 <_cbSendSystemDesc+0x18>)
 800f3f4:	f7ff fd5c 	bl	800eeb0 <SEGGER_SYSVIEW_SendSysDesc>
}
 800f3f8:	bf00      	nop
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	080120e8 	.word	0x080120e8
 800f400:	0801211c 	.word	0x0801211c

0800f404 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800f404:	b580      	push	{r7, lr}
 800f406:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800f408:	4b06      	ldr	r3, [pc, #24]	; (800f424 <SEGGER_SYSVIEW_Conf+0x20>)
 800f40a:	6818      	ldr	r0, [r3, #0]
 800f40c:	4b05      	ldr	r3, [pc, #20]	; (800f424 <SEGGER_SYSVIEW_Conf+0x20>)
 800f40e:	6819      	ldr	r1, [r3, #0]
 800f410:	4b05      	ldr	r3, [pc, #20]	; (800f428 <SEGGER_SYSVIEW_Conf+0x24>)
 800f412:	4a06      	ldr	r2, [pc, #24]	; (800f42c <SEGGER_SYSVIEW_Conf+0x28>)
 800f414:	f7ff f8cc 	bl	800e5b0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800f418:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f41c:	f7ff f906 	bl	800e62c <SEGGER_SYSVIEW_SetRAMBase>
}
 800f420:	bf00      	nop
 800f422:	bd80      	pop	{r7, pc}
 800f424:	20000008 	.word	0x20000008
 800f428:	0800f3e9 	.word	0x0800f3e9
 800f42c:	08012638 	.word	0x08012638

0800f430 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800f430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f432:	b085      	sub	sp, #20
 800f434:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800f436:	2300      	movs	r3, #0
 800f438:	607b      	str	r3, [r7, #4]
 800f43a:	e033      	b.n	800f4a4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800f43c:	491e      	ldr	r1, [pc, #120]	; (800f4b8 <_cbSendTaskList+0x88>)
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	4613      	mov	r3, r2
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	4413      	add	r3, r2
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	440b      	add	r3, r1
 800f44a:	6818      	ldr	r0, [r3, #0]
 800f44c:	491a      	ldr	r1, [pc, #104]	; (800f4b8 <_cbSendTaskList+0x88>)
 800f44e:	687a      	ldr	r2, [r7, #4]
 800f450:	4613      	mov	r3, r2
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	4413      	add	r3, r2
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	440b      	add	r3, r1
 800f45a:	3304      	adds	r3, #4
 800f45c:	6819      	ldr	r1, [r3, #0]
 800f45e:	4c16      	ldr	r4, [pc, #88]	; (800f4b8 <_cbSendTaskList+0x88>)
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	4613      	mov	r3, r2
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	4413      	add	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4423      	add	r3, r4
 800f46c:	3308      	adds	r3, #8
 800f46e:	681c      	ldr	r4, [r3, #0]
 800f470:	4d11      	ldr	r5, [pc, #68]	; (800f4b8 <_cbSendTaskList+0x88>)
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	4613      	mov	r3, r2
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	4413      	add	r3, r2
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	442b      	add	r3, r5
 800f47e:	330c      	adds	r3, #12
 800f480:	681d      	ldr	r5, [r3, #0]
 800f482:	4e0d      	ldr	r6, [pc, #52]	; (800f4b8 <_cbSendTaskList+0x88>)
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	4613      	mov	r3, r2
 800f488:	009b      	lsls	r3, r3, #2
 800f48a:	4413      	add	r3, r2
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	4433      	add	r3, r6
 800f490:	3310      	adds	r3, #16
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	462b      	mov	r3, r5
 800f498:	4622      	mov	r2, r4
 800f49a:	f000 f8bd 	bl	800f618 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	607b      	str	r3, [r7, #4]
 800f4a4:	4b05      	ldr	r3, [pc, #20]	; (800f4bc <_cbSendTaskList+0x8c>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d3c6      	bcc.n	800f43c <_cbSendTaskList+0xc>
  }
}
 800f4ae:	bf00      	nop
 800f4b0:	bf00      	nop
 800f4b2:	370c      	adds	r7, #12
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4b8:	2000243c 	.word	0x2000243c
 800f4bc:	200024dc 	.word	0x200024dc

0800f4c0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800f4c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4c4:	b082      	sub	sp, #8
 800f4c6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800f4c8:	f7fd f926 	bl	800c718 <xTaskGetTickCountFromISR>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	469a      	mov	sl, r3
 800f4d2:	4693      	mov	fp, r2
 800f4d4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800f4d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4dc:	4602      	mov	r2, r0
 800f4de:	460b      	mov	r3, r1
 800f4e0:	f04f 0a00 	mov.w	sl, #0
 800f4e4:	f04f 0b00 	mov.w	fp, #0
 800f4e8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800f4ec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800f4f0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800f4f4:	4652      	mov	r2, sl
 800f4f6:	465b      	mov	r3, fp
 800f4f8:	1a14      	subs	r4, r2, r0
 800f4fa:	eb63 0501 	sbc.w	r5, r3, r1
 800f4fe:	f04f 0200 	mov.w	r2, #0
 800f502:	f04f 0300 	mov.w	r3, #0
 800f506:	00ab      	lsls	r3, r5, #2
 800f508:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800f50c:	00a2      	lsls	r2, r4, #2
 800f50e:	4614      	mov	r4, r2
 800f510:	461d      	mov	r5, r3
 800f512:	eb14 0800 	adds.w	r8, r4, r0
 800f516:	eb45 0901 	adc.w	r9, r5, r1
 800f51a:	f04f 0200 	mov.w	r2, #0
 800f51e:	f04f 0300 	mov.w	r3, #0
 800f522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f52a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f52e:	4690      	mov	r8, r2
 800f530:	4699      	mov	r9, r3
 800f532:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800f536:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800f53a:	4610      	mov	r0, r2
 800f53c:	4619      	mov	r1, r3
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800f548 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800f548:	b580      	push	{r7, lr}
 800f54a:	b086      	sub	sp, #24
 800f54c:	af02      	add	r7, sp, #8
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
 800f554:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800f556:	2205      	movs	r2, #5
 800f558:	492b      	ldr	r1, [pc, #172]	; (800f608 <SYSVIEW_AddTask+0xc0>)
 800f55a:	68b8      	ldr	r0, [r7, #8]
 800f55c:	f001 fa9f 	bl	8010a9e <memcmp>
 800f560:	4603      	mov	r3, r0
 800f562:	2b00      	cmp	r3, #0
 800f564:	d04b      	beq.n	800f5fe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800f566:	4b29      	ldr	r3, [pc, #164]	; (800f60c <SYSVIEW_AddTask+0xc4>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2b07      	cmp	r3, #7
 800f56c:	d903      	bls.n	800f576 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800f56e:	4828      	ldr	r0, [pc, #160]	; (800f610 <SYSVIEW_AddTask+0xc8>)
 800f570:	f7ff fede 	bl	800f330 <SEGGER_SYSVIEW_Warn>
    return;
 800f574:	e044      	b.n	800f600 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800f576:	4b25      	ldr	r3, [pc, #148]	; (800f60c <SYSVIEW_AddTask+0xc4>)
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	4926      	ldr	r1, [pc, #152]	; (800f614 <SYSVIEW_AddTask+0xcc>)
 800f57c:	4613      	mov	r3, r2
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	4413      	add	r3, r2
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	440b      	add	r3, r1
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800f58a:	4b20      	ldr	r3, [pc, #128]	; (800f60c <SYSVIEW_AddTask+0xc4>)
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	4921      	ldr	r1, [pc, #132]	; (800f614 <SYSVIEW_AddTask+0xcc>)
 800f590:	4613      	mov	r3, r2
 800f592:	009b      	lsls	r3, r3, #2
 800f594:	4413      	add	r3, r2
 800f596:	009b      	lsls	r3, r3, #2
 800f598:	440b      	add	r3, r1
 800f59a:	3304      	adds	r3, #4
 800f59c:	68ba      	ldr	r2, [r7, #8]
 800f59e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800f5a0:	4b1a      	ldr	r3, [pc, #104]	; (800f60c <SYSVIEW_AddTask+0xc4>)
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	491b      	ldr	r1, [pc, #108]	; (800f614 <SYSVIEW_AddTask+0xcc>)
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	4413      	add	r3, r2
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	440b      	add	r3, r1
 800f5b0:	3308      	adds	r3, #8
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800f5b6:	4b15      	ldr	r3, [pc, #84]	; (800f60c <SYSVIEW_AddTask+0xc4>)
 800f5b8:	681a      	ldr	r2, [r3, #0]
 800f5ba:	4916      	ldr	r1, [pc, #88]	; (800f614 <SYSVIEW_AddTask+0xcc>)
 800f5bc:	4613      	mov	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	4413      	add	r3, r2
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	440b      	add	r3, r1
 800f5c6:	330c      	adds	r3, #12
 800f5c8:	683a      	ldr	r2, [r7, #0]
 800f5ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800f5cc:	4b0f      	ldr	r3, [pc, #60]	; (800f60c <SYSVIEW_AddTask+0xc4>)
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	4910      	ldr	r1, [pc, #64]	; (800f614 <SYSVIEW_AddTask+0xcc>)
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	4413      	add	r3, r2
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	440b      	add	r3, r1
 800f5dc:	3310      	adds	r3, #16
 800f5de:	69ba      	ldr	r2, [r7, #24]
 800f5e0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800f5e2:	4b0a      	ldr	r3, [pc, #40]	; (800f60c <SYSVIEW_AddTask+0xc4>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	4a08      	ldr	r2, [pc, #32]	; (800f60c <SYSVIEW_AddTask+0xc4>)
 800f5ea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	9300      	str	r3, [sp, #0]
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	68b9      	ldr	r1, [r7, #8]
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	f000 f80e 	bl	800f618 <SYSVIEW_SendTaskInfo>
 800f5fc:	e000      	b.n	800f600 <SYSVIEW_AddTask+0xb8>
    return;
 800f5fe:	bf00      	nop

}
 800f600:	3710      	adds	r7, #16
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	0801212c 	.word	0x0801212c
 800f60c:	200024dc 	.word	0x200024dc
 800f610:	08012134 	.word	0x08012134
 800f614:	2000243c 	.word	0x2000243c

0800f618 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800f618:	b580      	push	{r7, lr}
 800f61a:	b08a      	sub	sp, #40	; 0x28
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
 800f624:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800f626:	f107 0314 	add.w	r3, r7, #20
 800f62a:	2214      	movs	r2, #20
 800f62c:	2100      	movs	r1, #0
 800f62e:	4618      	mov	r0, r3
 800f630:	f001 fa53 	bl	8010ada <memset>
  TaskInfo.TaskID     = TaskID;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f646:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800f648:	f107 0314 	add.w	r3, r7, #20
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7ff fb35 	bl	800ecbc <SEGGER_SYSVIEW_SendTaskInfo>
}
 800f652:	bf00      	nop
 800f654:	3728      	adds	r7, #40	; 0x28
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}

0800f65a <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 800f65a:	b480      	push	{r7}
 800f65c:	b085      	sub	sp, #20
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
 800f662:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800f664:	2300      	movs	r3, #0
 800f666:	73fb      	strb	r3, [r7, #15]
 800f668:	2300      	movs	r3, #0
 800f66a:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800f66c:	2300      	movs	r3, #0
 800f66e:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b2d      	cmp	r3, #45	; 0x2d
 800f676:	d119      	bne.n	800f6ac <ParseNumber+0x52>
        minus = 1;
 800f678:	2301      	movs	r3, #1
 800f67a:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	3301      	adds	r3, #1
 800f680:	607b      	str	r3, [r7, #4]
        i++;
 800f682:	7bbb      	ldrb	r3, [r7, #14]
 800f684:	3301      	adds	r3, #1
 800f686:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800f688:	e010      	b.n	800f6ac <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800f68a:	68ba      	ldr	r2, [r7, #8]
 800f68c:	4613      	mov	r3, r2
 800f68e:	009b      	lsls	r3, r3, #2
 800f690:	4413      	add	r3, r2
 800f692:	005b      	lsls	r3, r3, #1
 800f694:	461a      	mov	r2, r3
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	3b30      	subs	r3, #48	; 0x30
 800f69c:	4413      	add	r3, r2
 800f69e:	60bb      	str	r3, [r7, #8]
        ptr++;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	607b      	str	r3, [r7, #4]
        i++;
 800f6a6:	7bbb      	ldrb	r3, [r7, #14]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	2b2f      	cmp	r3, #47	; 0x2f
 800f6b2:	d903      	bls.n	800f6bc <ParseNumber+0x62>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	2b39      	cmp	r3, #57	; 0x39
 800f6ba:	d9e6      	bls.n	800f68a <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d002      	beq.n	800f6c8 <ParseNumber+0x6e>
        *cnt = i;
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	7bba      	ldrb	r2, [r7, #14]
 800f6c6:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 800f6c8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d002      	beq.n	800f6d4 <ParseNumber+0x7a>
        return 0 - sum;
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	425b      	negs	r3, r3
 800f6d2:	e000      	b.n	800f6d6 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 800f6d4:	68bb      	ldr	r3, [r7, #8]
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3714      	adds	r7, #20
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr

0800f6e2 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800f6e2:	b580      	push	{r7, lr}
 800f6e4:	b084      	sub	sp, #16
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
 800f6ea:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800f6f0:	e019      	b.n	800f726 <ParseIP+0x44>
    hexcnt = 1;
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	2b2e      	cmp	r3, #46	; 0x2e
 800f6fc:	d00e      	beq.n	800f71c <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800f6fe:	f107 030e 	add.w	r3, r7, #14
 800f702:	4619      	mov	r1, r3
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f7ff ffa8 	bl	800f65a <ParseNumber>
 800f70a:	4601      	mov	r1, r0
 800f70c:	7bfb      	ldrb	r3, [r7, #15]
 800f70e:	1c5a      	adds	r2, r3, #1
 800f710:	73fa      	strb	r2, [r7, #15]
 800f712:	461a      	mov	r2, r3
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	4413      	add	r3, r2
 800f718:	b2ca      	uxtb	r2, r1
 800f71a:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800f71c:	7bbb      	ldrb	r3, [r7, #14]
 800f71e:	461a      	mov	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4413      	add	r3, r2
 800f724:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d1e1      	bne.n	800f6f2 <ParseIP+0x10>
  }
}
 800f72e:	bf00      	nop
 800f730:	bf00      	nop
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800f742:	2300      	movs	r3, #0
 800f744:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	3302      	adds	r3, #2
 800f74a:	4934      	ldr	r1, [pc, #208]	; (800f81c <AT_ParseInfo+0xe4>)
 800f74c:	4618      	mov	r0, r3
 800f74e:	f001 fbf5 	bl	8010f3c <strtok>
 800f752:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 800f754:	e05a      	b.n	800f80c <AT_ParseInfo+0xd4>
    switch (num++) {
 800f756:	7afb      	ldrb	r3, [r7, #11]
 800f758:	1c5a      	adds	r2, r3, #1
 800f75a:	72fa      	strb	r2, [r7, #11]
 800f75c:	2b06      	cmp	r3, #6
 800f75e:	d84f      	bhi.n	800f800 <AT_ParseInfo+0xc8>
 800f760:	a201      	add	r2, pc, #4	; (adr r2, 800f768 <AT_ParseInfo+0x30>)
 800f762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f766:	bf00      	nop
 800f768:	0800f785 	.word	0x0800f785
 800f76c:	0800f793 	.word	0x0800f793
 800f770:	0800f7a3 	.word	0x0800f7a3
 800f774:	0800f7b3 	.word	0x0800f7b3
 800f778:	0800f7c3 	.word	0x0800f7c3
 800f77c:	0800f7d3 	.word	0x0800f7d3
 800f780:	0800f7e7 	.word	0x0800f7e7
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2220      	movs	r2, #32
 800f788:	68f9      	ldr	r1, [r7, #12]
 800f78a:	4618      	mov	r0, r3
 800f78c:	f001 fbad 	bl	8010eea <strncpy>
      break;
 800f790:	e037      	b.n	800f802 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	3320      	adds	r3, #32
 800f796:	2218      	movs	r2, #24
 800f798:	68f9      	ldr	r1, [r7, #12]
 800f79a:	4618      	mov	r0, r3
 800f79c:	f001 fba5 	bl	8010eea <strncpy>
      break;
 800f7a0:	e02f      	b.n	800f802 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	3338      	adds	r3, #56	; 0x38
 800f7a6:	2210      	movs	r2, #16
 800f7a8:	68f9      	ldr	r1, [r7, #12]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f001 fb9d 	bl	8010eea <strncpy>
      break;
 800f7b0:	e027      	b.n	800f802 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	3348      	adds	r3, #72	; 0x48
 800f7b6:	2210      	movs	r2, #16
 800f7b8:	68f9      	ldr	r1, [r7, #12]
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f001 fb95 	bl	8010eea <strncpy>
      break;
 800f7c0:	e01f      	b.n	800f802 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	3358      	adds	r3, #88	; 0x58
 800f7c6:	2210      	movs	r2, #16
 800f7c8:	68f9      	ldr	r1, [r7, #12]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f001 fb8d 	bl	8010eea <strncpy>
      break;
 800f7d0:	e017      	b.n	800f802 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 800f7d2:	2100      	movs	r1, #0
 800f7d4:	68f8      	ldr	r0, [r7, #12]
 800f7d6:	f7ff ff40 	bl	800f65a <ParseNumber>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	461a      	mov	r2, r3
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 800f7e4:	e00d      	b.n	800f802 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800f7e6:	490e      	ldr	r1, [pc, #56]	; (800f820 <AT_ParseInfo+0xe8>)
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f001 fba7 	bl	8010f3c <strtok>
 800f7ee:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	3368      	adds	r3, #104	; 0x68
 800f7f4:	2220      	movs	r2, #32
 800f7f6:	68f9      	ldr	r1, [r7, #12]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f001 fb76 	bl	8010eea <strncpy>
      break;
 800f7fe:	e000      	b.n	800f802 <AT_ParseInfo+0xca>

    default: break;
 800f800:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800f802:	4906      	ldr	r1, [pc, #24]	; (800f81c <AT_ParseInfo+0xe4>)
 800f804:	2000      	movs	r0, #0
 800f806:	f001 fb99 	bl	8010f3c <strtok>
 800f80a:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1a1      	bne.n	800f756 <AT_ParseInfo+0x1e>
  }
}
 800f812:	bf00      	nop
 800f814:	bf00      	nop
 800f816:	3710      	adds	r7, #16
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	080121b4 	.word	0x080121b4
 800f820:	080121b8 	.word	0x080121b8

0800f824 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800f82e:	2300      	movs	r3, #0
 800f830:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	3302      	adds	r3, #2
 800f836:	4952      	ldr	r1, [pc, #328]	; (800f980 <AT_ParseConnSettings+0x15c>)
 800f838:	4618      	mov	r0, r3
 800f83a:	f001 fb7f 	bl	8010f3c <strtok>
 800f83e:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800f840:	e095      	b.n	800f96e <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800f842:	7bfb      	ldrb	r3, [r7, #15]
 800f844:	1c5a      	adds	r2, r3, #1
 800f846:	73fa      	strb	r2, [r7, #15]
 800f848:	2b0b      	cmp	r3, #11
 800f84a:	d87f      	bhi.n	800f94c <AT_ParseConnSettings+0x128>
 800f84c:	a201      	add	r2, pc, #4	; (adr r2, 800f854 <AT_ParseConnSettings+0x30>)
 800f84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f852:	bf00      	nop
 800f854:	0800f885 	.word	0x0800f885
 800f858:	0800f893 	.word	0x0800f893
 800f85c:	0800f8a3 	.word	0x0800f8a3
 800f860:	0800f8b7 	.word	0x0800f8b7
 800f864:	0800f8cb 	.word	0x0800f8cb
 800f868:	0800f8df 	.word	0x0800f8df
 800f86c:	0800f8ed 	.word	0x0800f8ed
 800f870:	0800f8fb 	.word	0x0800f8fb
 800f874:	0800f909 	.word	0x0800f909
 800f878:	0800f917 	.word	0x0800f917
 800f87c:	0800f925 	.word	0x0800f925
 800f880:	0800f939 	.word	0x0800f939
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	2221      	movs	r2, #33	; 0x21
 800f888:	68b9      	ldr	r1, [r7, #8]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f001 fb2d 	bl	8010eea <strncpy>
      break;
 800f890:	e05d      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	3321      	adds	r3, #33	; 0x21
 800f896:	2221      	movs	r2, #33	; 0x21
 800f898:	68b9      	ldr	r1, [r7, #8]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f001 fb25 	bl	8010eea <strncpy>
      break;
 800f8a0:	e055      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	68b8      	ldr	r0, [r7, #8]
 800f8a6:	f7ff fed8 	bl	800f65a <ParseNumber>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	b2da      	uxtb	r2, r3
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 800f8b4:	e04b      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	68b8      	ldr	r0, [r7, #8]
 800f8ba:	f7ff fece 	bl	800f65a <ParseNumber>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	b2da      	uxtb	r2, r3
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800f8c8:	e041      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	68b8      	ldr	r0, [r7, #8]
 800f8ce:	f7ff fec4 	bl	800f65a <ParseNumber>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 800f8dc:	e037      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	3348      	adds	r3, #72	; 0x48
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	68b8      	ldr	r0, [r7, #8]
 800f8e6:	f7ff fefc 	bl	800f6e2 <ParseIP>
      break;
 800f8ea:	e030      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	334c      	adds	r3, #76	; 0x4c
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	68b8      	ldr	r0, [r7, #8]
 800f8f4:	f7ff fef5 	bl	800f6e2 <ParseIP>
      break;
 800f8f8:	e029      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	3350      	adds	r3, #80	; 0x50
 800f8fe:	4619      	mov	r1, r3
 800f900:	68b8      	ldr	r0, [r7, #8]
 800f902:	f7ff feee 	bl	800f6e2 <ParseIP>
      break;
 800f906:	e022      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	3354      	adds	r3, #84	; 0x54
 800f90c:	4619      	mov	r1, r3
 800f90e:	68b8      	ldr	r0, [r7, #8]
 800f910:	f7ff fee7 	bl	800f6e2 <ParseIP>
      break;
 800f914:	e01b      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	3358      	adds	r3, #88	; 0x58
 800f91a:	4619      	mov	r1, r3
 800f91c:	68b8      	ldr	r0, [r7, #8]
 800f91e:	f7ff fee0 	bl	800f6e2 <ParseIP>
      break;
 800f922:	e014      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800f924:	2100      	movs	r1, #0
 800f926:	68b8      	ldr	r0, [r7, #8]
 800f928:	f7ff fe97 	bl	800f65a <ParseNumber>
 800f92c:	4603      	mov	r3, r0
 800f92e:	b2da      	uxtb	r2, r3
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800f936:	e00a      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800f938:	2100      	movs	r1, #0
 800f93a:	68b8      	ldr	r0, [r7, #8]
 800f93c:	f7ff fe8d 	bl	800f65a <ParseNumber>
 800f940:	4603      	mov	r3, r0
 800f942:	b2da      	uxtb	r2, r3
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800f94a:	e000      	b.n	800f94e <AT_ParseConnSettings+0x12a>

    default:
      break;
 800f94c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800f94e:	490c      	ldr	r1, [pc, #48]	; (800f980 <AT_ParseConnSettings+0x15c>)
 800f950:	2000      	movs	r0, #0
 800f952:	f001 faf3 	bl	8010f3c <strtok>
 800f956:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d007      	beq.n	800f96e <AT_ParseConnSettings+0x14a>
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	3b01      	subs	r3, #1
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b2c      	cmp	r3, #44	; 0x2c
 800f966:	d102      	bne.n	800f96e <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 800f968:	7bfb      	ldrb	r3, [r7, #15]
 800f96a:	3301      	adds	r3, #1
 800f96c:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	2b00      	cmp	r3, #0
 800f972:	f47f af66 	bne.w	800f842 <AT_ParseConnSettings+0x1e>
    }
  }
}
 800f976:	bf00      	nop
 800f978:	bf00      	nop
 800f97a:	3710      	adds	r7, #16
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	080121b4 	.word	0x080121b4

0800f984 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800f984:	b590      	push	{r4, r7, lr}
 800f986:	b087      	sub	sp, #28
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800f990:	2300      	movs	r3, #0
 800f992:	617b      	str	r3, [r7, #20]
  int16_t recv_len = 0;
 800f994:	2300      	movs	r3, #0
 800f996:	827b      	strh	r3, [r7, #18]
  LOCK_WIFI();  
 800f998:	4b32      	ldr	r3, [pc, #200]	; (800fa64 <AT_ExecuteCommand+0xe0>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2100      	movs	r1, #0
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fb face 	bl	800af40 <osMutexWait>

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800f9aa:	68b8      	ldr	r0, [r7, #8]
 800f9ac:	f7f0 fc56 	bl	800025c <strlen>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	b299      	uxth	r1, r3
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	68b8      	ldr	r0, [r7, #8]
 800f9be:	47a0      	blx	r4
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	617b      	str	r3, [r7, #20]

  if( ret > 0)
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	dd42      	ble.n	800fa50 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800f9d0:	68fa      	ldr	r2, [r7, #12]
 800f9d2:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800f9d6:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	4798      	blx	r3
 800f9de:	4603      	mov	r3, r0
 800f9e0:	827b      	strh	r3, [r7, #18]
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 800f9e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	dd26      	ble.n	800fa38 <AT_ExecuteCommand+0xb4>
 800f9ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f9ee:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800f9f2:	da21      	bge.n	800fa38 <AT_ExecuteCommand+0xb4>
    {
      *(pdata + recv_len) = 0;
 800f9f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	4413      	add	r3, r2
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800fa00:	4919      	ldr	r1, [pc, #100]	; (800fa68 <AT_ExecuteCommand+0xe4>)
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f001 fa84 	bl	8010f10 <strstr>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d006      	beq.n	800fa1c <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
 800fa0e:	4b15      	ldr	r3, [pc, #84]	; (800fa64 <AT_ExecuteCommand+0xe0>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fb fae2 	bl	800afdc <osMutexRelease>
        return ES_WIFI_STATUS_OK;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	e01f      	b.n	800fa5c <AT_ExecuteCommand+0xd8>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800fa1c:	4913      	ldr	r1, [pc, #76]	; (800fa6c <AT_ExecuteCommand+0xe8>)
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f001 fa76 	bl	8010f10 <strstr>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d006      	beq.n	800fa38 <AT_ExecuteCommand+0xb4>
      {
        UNLOCK_WIFI();
 800fa2a:	4b0e      	ldr	r3, [pc, #56]	; (800fa64 <AT_ExecuteCommand+0xe0>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fb fad4 	bl	800afdc <osMutexRelease>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800fa34:	2305      	movs	r3, #5
 800fa36:	e011      	b.n	800fa5c <AT_ExecuteCommand+0xd8>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 800fa38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa3c:	f113 0f04 	cmn.w	r3, #4
 800fa40:	d106      	bne.n	800fa50 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
 800fa42:	4b08      	ldr	r3, [pc, #32]	; (800fa64 <AT_ExecuteCommand+0xe0>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fb fac8 	bl	800afdc <osMutexRelease>
      return ES_WIFI_STATUS_MODULE_CRASH;
 800fa4c:	2306      	movs	r3, #6
 800fa4e:	e005      	b.n	800fa5c <AT_ExecuteCommand+0xd8>
    }
  }
  UNLOCK_WIFI();  
 800fa50:	4b04      	ldr	r3, [pc, #16]	; (800fa64 <AT_ExecuteCommand+0xe0>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7fb fac1 	bl	800afdc <osMutexRelease>
  return ES_WIFI_STATUS_IO_ERROR;
 800fa5a:	2304      	movs	r3, #4
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	371c      	adds	r7, #28
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd90      	pop	{r4, r7, pc}
 800fa64:	200024ec 	.word	0x200024ec
 800fa68:	080121bc 	.word	0x080121bc
 800fa6c:	080121c8 	.word	0x080121c8

0800fa70 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b086      	sub	sp, #24
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	60b9      	str	r1, [r7, #8]
 800fa7a:	607a      	str	r2, [r7, #4]
 800fa7c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800fa82:	2300      	movs	r3, #0
 800fa84:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800fa86:	2300      	movs	r3, #0
 800fa88:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();  
 800fa8a:	4b3f      	ldr	r3, [pc, #252]	; (800fb88 <AT_RequestSendData+0x118>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	2100      	movs	r1, #0
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fb fa55 	bl	800af40 <osMutexWait>
  cmd_len = strlen((char*)cmd);
 800fa96:	68b8      	ldr	r0, [r7, #8]
 800fa98:	f7f0 fbe0 	bl	800025c <strlen>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800faa0:	8a7b      	ldrh	r3, [r7, #18]
 800faa2:	f003 0301 	and.w	r3, r3, #1
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d001      	beq.n	800faae <AT_RequestSendData+0x3e>
 800faaa:	2302      	movs	r3, #2
 800faac:	e067      	b.n	800fb7e <AT_RequestSendData+0x10e>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fab4:	68fa      	ldr	r2, [r7, #12]
 800fab6:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800faba:	8a79      	ldrh	r1, [r7, #18]
 800fabc:	68b8      	ldr	r0, [r7, #8]
 800fabe:	4798      	blx	r3
 800fac0:	4603      	mov	r3, r0
 800fac2:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 800fac4:	8a3a      	ldrh	r2, [r7, #16]
 800fac6:	8a7b      	ldrh	r3, [r7, #18]
 800fac8:	429a      	cmp	r2, r3
 800faca:	d157      	bne.n	800fb7c <AT_RequestSendData+0x10c>
  {    
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800fad8:	8879      	ldrh	r1, [r7, #2]
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	4798      	blx	r3
 800fade:	4603      	mov	r3, r0
 800fae0:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800fae2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fae6:	887b      	ldrh	r3, [r7, #2]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d145      	bne.n	800fb78 <AT_RequestSendData+0x108>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800faf8:	2100      	movs	r1, #0
 800fafa:	6a38      	ldr	r0, [r7, #32]
 800fafc:	4798      	blx	r3
 800fafe:	4603      	mov	r3, r0
 800fb00:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800fb02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	dd28      	ble.n	800fb5c <AT_RequestSendData+0xec>
      {
        *(pdata+recv_len) = 0;
 800fb0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fb0e:	6a3a      	ldr	r2, [r7, #32]
 800fb10:	4413      	add	r3, r2
 800fb12:	2200      	movs	r2, #0
 800fb14:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800fb16:	491d      	ldr	r1, [pc, #116]	; (800fb8c <AT_RequestSendData+0x11c>)
 800fb18:	6a38      	ldr	r0, [r7, #32]
 800fb1a:	f001 f9f9 	bl	8010f10 <strstr>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d006      	beq.n	800fb32 <AT_RequestSendData+0xc2>
        {
          UNLOCK_WIFI();
 800fb24:	4b18      	ldr	r3, [pc, #96]	; (800fb88 <AT_RequestSendData+0x118>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fb fa57 	bl	800afdc <osMutexRelease>
          return ES_WIFI_STATUS_OK;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	e025      	b.n	800fb7e <AT_RequestSendData+0x10e>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800fb32:	4917      	ldr	r1, [pc, #92]	; (800fb90 <AT_RequestSendData+0x120>)
 800fb34:	6a38      	ldr	r0, [r7, #32]
 800fb36:	f001 f9eb 	bl	8010f10 <strstr>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d006      	beq.n	800fb4e <AT_RequestSendData+0xde>
        {
          UNLOCK_WIFI();
 800fb40:	4b11      	ldr	r3, [pc, #68]	; (800fb88 <AT_RequestSendData+0x118>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7fb fa49 	bl	800afdc <osMutexRelease>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800fb4a:	2305      	movs	r3, #5
 800fb4c:	e017      	b.n	800fb7e <AT_RequestSendData+0x10e>
        }
        else
        {
          UNLOCK_WIFI();
 800fb4e:	4b0e      	ldr	r3, [pc, #56]	; (800fb88 <AT_RequestSendData+0x118>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7fb fa42 	bl	800afdc <osMutexRelease>
          return ES_WIFI_STATUS_ERROR;
 800fb58:	2302      	movs	r3, #2
 800fb5a:	e010      	b.n	800fb7e <AT_RequestSendData+0x10e>
        }
      }
      UNLOCK_WIFI();
 800fb5c:	4b0a      	ldr	r3, [pc, #40]	; (800fb88 <AT_RequestSendData+0x118>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7fb fa3b 	bl	800afdc <osMutexRelease>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 800fb66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fb6a:	f113 0f04 	cmn.w	r3, #4
 800fb6e:	d101      	bne.n	800fb74 <AT_RequestSendData+0x104>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800fb70:	2306      	movs	r3, #6
 800fb72:	e004      	b.n	800fb7e <AT_RequestSendData+0x10e>
      }
      return ES_WIFI_STATUS_ERROR;
 800fb74:	2302      	movs	r3, #2
 800fb76:	e002      	b.n	800fb7e <AT_RequestSendData+0x10e>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800fb78:	2302      	movs	r3, #2
 800fb7a:	e000      	b.n	800fb7e <AT_RequestSendData+0x10e>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800fb7c:	2304      	movs	r3, #4
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3718      	adds	r7, #24
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	200024ec 	.word	0x200024ec
 800fb8c:	080121bc 	.word	0x080121bc
 800fb90:	080121c8 	.word	0x080121c8

0800fb94 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b084      	sub	sp, #16
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800fb9c:	2302      	movs	r3, #2
 800fb9e:	73fb      	strb	r3, [r7, #15]
  
  LOCK_WIFI();  
 800fba0:	4b18      	ldr	r3, [pc, #96]	; (800fc04 <ES_WIFI_Init+0x70>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2100      	movs	r1, #0
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fb f9ca 	bl	800af40 <osMutexWait>

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f247 5230 	movw	r2, #30000	; 0x7530
 800fbb2:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	4798      	blx	r3
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d113      	bne.n	800fbee <ES_WIFI_Init+0x5a>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fbcc:	461a      	mov	r2, r3
 800fbce:	490e      	ldr	r1, [pc, #56]	; (800fc08 <ES_WIFI_Init+0x74>)
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f7ff fed7 	bl	800f984 <AT_ExecuteCommand>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800fbda:	7bfb      	ldrb	r3, [r7, #15]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d106      	bne.n	800fbee <ES_WIFI_Init+0x5a>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7ff fda5 	bl	800f738 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
 800fbee:	4b05      	ldr	r3, [pc, #20]	; (800fc04 <ES_WIFI_Init+0x70>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fb f9f2 	bl	800afdc <osMutexRelease>
  return ret;
 800fbf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3710      	adds	r7, #16
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	200024ec 	.word	0x200024ec
 800fc08:	080121d8 	.word	0x080121d8

0800fc0c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b085      	sub	sp, #20
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
 800fc18:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00b      	beq.n	800fc38 <ES_WIFI_RegisterBusIO+0x2c>
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d008      	beq.n	800fc38 <ES_WIFI_RegisterBusIO+0x2c>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d005      	beq.n	800fc38 <ES_WIFI_RegisterBusIO+0x2c>
 800fc2c:	69bb      	ldr	r3, [r7, #24]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d002      	beq.n	800fc38 <ES_WIFI_RegisterBusIO+0x2c>
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d101      	bne.n	800fc3c <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800fc38:	2302      	movs	r3, #2
 800fc3a:	e014      	b.n	800fc66 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	68ba      	ldr	r2, [r7, #8]
 800fc40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	687a      	ldr	r2, [r7, #4]
 800fc48:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	69ba      	ldr	r2, [r7, #24]
 800fc50:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	69fa      	ldr	r2, [r7, #28]
 800fc58:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	683a      	ldr	r2, [r7, #0]
 800fc60:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3714      	adds	r7, #20
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr
	...

0800fc74 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	607a      	str	r2, [r7, #4]
 800fc80:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  
 800fc82:	4b39      	ldr	r3, [pc, #228]	; (800fd68 <ES_WIFI_Connect+0xf4>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	2100      	movs	r1, #0
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fb f959 	bl	800af40 <osMutexWait>

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fc94:	68ba      	ldr	r2, [r7, #8]
 800fc96:	4935      	ldr	r1, [pc, #212]	; (800fd6c <ES_WIFI_Connect+0xf8>)
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f001 f8c3 	bl	8010e24 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fcaa:	461a      	mov	r2, r3
 800fcac:	68f8      	ldr	r0, [r7, #12]
 800fcae:	f7ff fe69 	bl	800f984 <AT_ExecuteCommand>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800fcb6:	7dfb      	ldrb	r3, [r7, #23]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d14b      	bne.n	800fd54 <ES_WIFI_Connect+0xe0>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fcc2:	687a      	ldr	r2, [r7, #4]
 800fcc4:	492a      	ldr	r1, [pc, #168]	; (800fd70 <ES_WIFI_Connect+0xfc>)
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f001 f8ac 	bl	8010e24 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fcd8:	461a      	mov	r2, r3
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f7ff fe52 	bl	800f984 <AT_ExecuteCommand>
 800fce0:	4603      	mov	r3, r0
 800fce2:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800fce4:	7dfb      	ldrb	r3, [r7, #23]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d134      	bne.n	800fd54 <ES_WIFI_Connect+0xe0>
    {
      Obj->Security = SecType;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	78fa      	ldrb	r2, [r7, #3]
 800fcee:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fcf8:	78fa      	ldrb	r2, [r7, #3]
 800fcfa:	491e      	ldr	r1, [pc, #120]	; (800fd74 <ES_WIFI_Connect+0x100>)
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f001 f891 	bl	8010e24 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fd0e:	461a      	mov	r2, r3
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f7ff fe37 	bl	800f984 <AT_ExecuteCommand>
 800fd16:	4603      	mov	r3, r0
 800fd18:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d119      	bne.n	800fd54 <ES_WIFI_Connect+0xe0>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fd26:	4914      	ldr	r1, [pc, #80]	; (800fd78 <ES_WIFI_Connect+0x104>)
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f001 f87b 	bl	8010e24 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f7ff fe21 	bl	800f984 <AT_ExecuteCommand>
 800fd42:	4603      	mov	r3, r0
 800fd44:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800fd46:	7dfb      	ldrb	r3, [r7, #23]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d103      	bne.n	800fd54 <ES_WIFI_Connect+0xe0>
        {
           Obj->NetSettings.IsConnected = 1;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	2201      	movs	r2, #1
 800fd50:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
 800fd54:	4b04      	ldr	r3, [pc, #16]	; (800fd68 <ES_WIFI_Connect+0xf4>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7fb f93f 	bl	800afdc <osMutexRelease>
  return ret;
 800fd5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3718      	adds	r7, #24
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	200024ec 	.word	0x200024ec
 800fd6c:	080121e4 	.word	0x080121e4
 800fd70:	080121ec 	.word	0x080121ec
 800fd74:	080121f4 	.word	0x080121f4
 800fd78:	080121fc 	.word	0x080121fc

0800fd7c <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  
 800fd84:	4b17      	ldr	r3, [pc, #92]	; (800fde4 <ES_WIFI_GetNetworkSettings+0x68>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	2100      	movs	r1, #0
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7fb f8d8 	bl	800af40 <osMutexWait>

  sprintf((char*)Obj->CmdData,"C?\r");
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fd96:	4914      	ldr	r1, [pc, #80]	; (800fde8 <ES_WIFI_GetNetworkSettings+0x6c>)
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f001 f843 	bl	8010e24 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fdaa:	461a      	mov	r2, r3
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f7ff fde9 	bl	800f984 <AT_ExecuteCommand>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800fdb6:	7bfb      	ldrb	r3, [r7, #15]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d108      	bne.n	800fdce <ES_WIFI_GetNetworkSettings+0x52>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	338d      	adds	r3, #141	; 0x8d
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	4610      	mov	r0, r2
 800fdca:	f7ff fd2b 	bl	800f824 <AT_ParseConnSettings>
  }
  
  UNLOCK_WIFI();
 800fdce:	4b05      	ldr	r3, [pc, #20]	; (800fde4 <ES_WIFI_GetNetworkSettings+0x68>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fb f902 	bl	800afdc <osMutexRelease>
  return ret;
 800fdd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3710      	adds	r7, #16
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	200024ec 	.word	0x200024ec
 800fde8:	08012208 	.word	0x08012208

0800fdec <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800fdec:	b590      	push	{r4, r7, lr}
 800fdee:	b087      	sub	sp, #28
 800fdf0:	af02      	add	r7, sp, #8
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();  
 800fdfa:	4b57      	ldr	r3, [pc, #348]	; (800ff58 <ES_WIFI_StartClientConnection+0x16c>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	2100      	movs	r1, #0
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fb f89d 	bl	800af40 <osMutexWait>

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	785b      	ldrb	r3, [r3, #1]
 800fe10:	461a      	mov	r2, r3
 800fe12:	4952      	ldr	r1, [pc, #328]	; (800ff5c <ES_WIFI_StartClientConnection+0x170>)
 800fe14:	f001 f806 	bl	8010e24 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fe24:	461a      	mov	r2, r3
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7ff fdac 	bl	800f984 <AT_ExecuteCommand>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800fe30:	7bfb      	ldrb	r3, [r7, #15]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d114      	bne.n	800fe60 <ES_WIFI_StartClientConnection+0x74>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	461a      	mov	r2, r3
 800fe42:	4947      	ldr	r1, [pc, #284]	; (800ff60 <ES_WIFI_StartClientConnection+0x174>)
 800fe44:	f000 ffee 	bl	8010e24 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fe54:	461a      	mov	r2, r3
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f7ff fd94 	bl	800f984 <AT_ExecuteCommand>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->LocalPort > 0))
 800fe60:	7bfb      	ldrb	r3, [r7, #15]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d118      	bne.n	800fe98 <ES_WIFI_StartClientConnection+0xac>
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	889b      	ldrh	r3, [r3, #4]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d014      	beq.n	800fe98 <ES_WIFI_StartClientConnection+0xac>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	889b      	ldrh	r3, [r3, #4]
 800fe78:	461a      	mov	r2, r3
 800fe7a:	493a      	ldr	r1, [pc, #232]	; (800ff64 <ES_WIFI_StartClientConnection+0x178>)
 800fe7c:	f000 ffd2 	bl	8010e24 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7ff fd78 	bl	800f984 <AT_ExecuteCommand>
 800fe94:	4603      	mov	r3, r0
 800fe96:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 800fe98:	7bfb      	ldrb	r3, [r7, #15]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d118      	bne.n	800fed0 <ES_WIFI_StartClientConnection+0xe4>
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	885b      	ldrh	r3, [r3, #2]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d014      	beq.n	800fed0 <ES_WIFI_StartClientConnection+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	885b      	ldrh	r3, [r3, #2]
 800feb0:	461a      	mov	r2, r3
 800feb2:	492d      	ldr	r1, [pc, #180]	; (800ff68 <ES_WIFI_StartClientConnection+0x17c>)
 800feb4:	f000 ffb6 	bl	8010e24 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fec4:	461a      	mov	r2, r3
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7ff fd5c 	bl	800f984 <AT_ExecuteCommand>
 800fecc:	4603      	mov	r3, r0
 800fece:	73fb      	strb	r3, [r7, #15]
  }

//  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_CONNECTION))
  if ((ret == ES_WIFI_STATUS_OK))
 800fed0:	7bfb      	ldrb	r3, [r7, #15]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d120      	bne.n	800ff18 <ES_WIFI_StartClientConnection+0x12c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	799b      	ldrb	r3, [r3, #6]
 800fee0:	4619      	mov	r1, r3
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	79db      	ldrb	r3, [r3, #7]
 800fee6:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800feec:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800fef2:	9301      	str	r3, [sp, #4]
 800fef4:	9200      	str	r2, [sp, #0]
 800fef6:	4623      	mov	r3, r4
 800fef8:	460a      	mov	r2, r1
 800fefa:	491c      	ldr	r1, [pc, #112]	; (800ff6c <ES_WIFI_StartClientConnection+0x180>)
 800fefc:	f000 ff92 	bl	8010e24 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7ff fd38 	bl	800f984 <AT_ExecuteCommand>
 800ff14:	4603      	mov	r3, r0
 800ff16:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800ff18:	7bfb      	ldrb	r3, [r7, #15]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d112      	bne.n	800ff44 <ES_WIFI_StartClientConnection+0x158>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ff24:	4912      	ldr	r1, [pc, #72]	; (800ff70 <ES_WIFI_StartClientConnection+0x184>)
 800ff26:	4618      	mov	r0, r3
 800ff28:	f000 ff7c 	bl	8010e24 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ff38:	461a      	mov	r2, r3
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f7ff fd22 	bl	800f984 <AT_ExecuteCommand>
 800ff40:	4603      	mov	r3, r0
 800ff42:	73fb      	strb	r3, [r7, #15]
  }
  
  UNLOCK_WIFI();
 800ff44:	4b04      	ldr	r3, [pc, #16]	; (800ff58 <ES_WIFI_StartClientConnection+0x16c>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7fb f847 	bl	800afdc <osMutexRelease>
  return ret;
 800ff4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3714      	adds	r7, #20
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd90      	pop	{r4, r7, pc}
 800ff58:	200024ec 	.word	0x200024ec
 800ff5c:	080122d0 	.word	0x080122d0
 800ff60:	080122d8 	.word	0x080122d8
 800ff64:	080122e0 	.word	0x080122e0
 800ff68:	080122e8 	.word	0x080122e8
 800ff6c:	080122f0 	.word	0x080122f0
 800ff70:	08012300 	.word	0x08012300

0800ff74 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b088      	sub	sp, #32
 800ff78:	af02      	add	r7, sp, #8
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	607a      	str	r2, [r7, #4]
 800ff7e:	461a      	mov	r2, r3
 800ff80:	460b      	mov	r3, r1
 800ff82:	72fb      	strb	r3, [r7, #11]
 800ff84:	4613      	mov	r3, r2
 800ff86:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800ff88:	2302      	movs	r3, #2
 800ff8a:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();
 800ff8c:	4b4f      	ldr	r3, [pc, #316]	; (80100cc <ES_WIFI_SendData+0x158>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2100      	movs	r1, #0
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fa ffd4 	bl	800af40 <osMutexWait>
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800ff98:	893b      	ldrh	r3, [r7, #8]
 800ff9a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800ff9e:	d302      	bcc.n	800ffa6 <ES_WIFI_SendData+0x32>
 800ffa0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800ffa4:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800ffa6:	6a3b      	ldr	r3, [r7, #32]
 800ffa8:	893a      	ldrh	r2, [r7, #8]
 800ffaa:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ffb2:	7afa      	ldrb	r2, [r7, #11]
 800ffb4:	4946      	ldr	r1, [pc, #280]	; (80100d0 <ES_WIFI_SendData+0x15c>)
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f000 ff34 	bl	8010e24 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ffc8:	461a      	mov	r2, r3
 800ffca:	68f8      	ldr	r0, [r7, #12]
 800ffcc:	f7ff fcda 	bl	800f984 <AT_ExecuteCommand>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800ffd4:	7dfb      	ldrb	r3, [r7, #23]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d15e      	bne.n	8010098 <ES_WIFI_SendData+0x124>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ffe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffe2:	493c      	ldr	r1, [pc, #240]	; (80100d4 <ES_WIFI_SendData+0x160>)
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f000 ff1d 	bl	8010e24 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fff6:	461a      	mov	r2, r3
 800fff8:	68f8      	ldr	r0, [r7, #12]
 800fffa:	f7ff fcc3 	bl	800f984 <AT_ExecuteCommand>
 800fffe:	4603      	mov	r3, r0
 8010000:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8010002:	7dfb      	ldrb	r3, [r7, #23]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d13d      	bne.n	8010084 <ES_WIFI_SendData+0x110>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 801000e:	893a      	ldrh	r2, [r7, #8]
 8010010:	4931      	ldr	r1, [pc, #196]	; (80100d8 <ES_WIFI_SendData+0x164>)
 8010012:	4618      	mov	r0, r3
 8010014:	f000 ff06 	bl	8010e24 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010024:	893a      	ldrh	r2, [r7, #8]
 8010026:	9300      	str	r3, [sp, #0]
 8010028:	4613      	mov	r3, r2
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f7ff fd1f 	bl	800fa70 <AT_RequestSendData>
 8010032:	4603      	mov	r3, r0
 8010034:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8010036:	7dfb      	ldrb	r3, [r7, #23]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d119      	bne.n	8010070 <ES_WIFI_SendData+0xfc>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010042:	4926      	ldr	r1, [pc, #152]	; (80100dc <ES_WIFI_SendData+0x168>)
 8010044:	4618      	mov	r0, r3
 8010046:	f000 ff63 	bl	8010f10 <strstr>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d02c      	beq.n	80100aa <ES_WIFI_SendData+0x136>
        {
          WIFI_DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8010050:	f240 727f 	movw	r2, #1919	; 0x77f
 8010054:	4922      	ldr	r1, [pc, #136]	; (80100e0 <ES_WIFI_SendData+0x16c>)
 8010056:	4823      	ldr	r0, [pc, #140]	; (80100e4 <ES_WIFI_SendData+0x170>)
 8010058:	f000 fddc 	bl	8010c14 <iprintf>
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010062:	4619      	mov	r1, r3
 8010064:	4820      	ldr	r0, [pc, #128]	; (80100e8 <ES_WIFI_SendData+0x174>)
 8010066:	f000 fdd5 	bl	8010c14 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 801006a:	2302      	movs	r3, #2
 801006c:	75fb      	strb	r3, [r7, #23]
 801006e:	e01c      	b.n	80100aa <ES_WIFI_SendData+0x136>
        }
      }
      else
      {
        WIFI_DEBUG("Send Data command failed\n");
 8010070:	f240 7285 	movw	r2, #1925	; 0x785
 8010074:	491a      	ldr	r1, [pc, #104]	; (80100e0 <ES_WIFI_SendData+0x16c>)
 8010076:	481b      	ldr	r0, [pc, #108]	; (80100e4 <ES_WIFI_SendData+0x170>)
 8010078:	f000 fdcc 	bl	8010c14 <iprintf>
 801007c:	481b      	ldr	r0, [pc, #108]	; (80100ec <ES_WIFI_SendData+0x178>)
 801007e:	f000 fe4f 	bl	8010d20 <puts>
 8010082:	e012      	b.n	80100aa <ES_WIFI_SendData+0x136>
      }
    }
    else
    {
      WIFI_DEBUG("S2 command failed\n");
 8010084:	f240 728a 	movw	r2, #1930	; 0x78a
 8010088:	4915      	ldr	r1, [pc, #84]	; (80100e0 <ES_WIFI_SendData+0x16c>)
 801008a:	4816      	ldr	r0, [pc, #88]	; (80100e4 <ES_WIFI_SendData+0x170>)
 801008c:	f000 fdc2 	bl	8010c14 <iprintf>
 8010090:	4817      	ldr	r0, [pc, #92]	; (80100f0 <ES_WIFI_SendData+0x17c>)
 8010092:	f000 fe45 	bl	8010d20 <puts>
 8010096:	e008      	b.n	80100aa <ES_WIFI_SendData+0x136>
    }
  }
  else
  {
   WIFI_DEBUG("P0 command failed\n");
 8010098:	f240 728f 	movw	r2, #1935	; 0x78f
 801009c:	4910      	ldr	r1, [pc, #64]	; (80100e0 <ES_WIFI_SendData+0x16c>)
 801009e:	4811      	ldr	r0, [pc, #68]	; (80100e4 <ES_WIFI_SendData+0x170>)
 80100a0:	f000 fdb8 	bl	8010c14 <iprintf>
 80100a4:	4813      	ldr	r0, [pc, #76]	; (80100f4 <ES_WIFI_SendData+0x180>)
 80100a6:	f000 fe3b 	bl	8010d20 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80100aa:	7dfb      	ldrb	r3, [r7, #23]
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	d102      	bne.n	80100b6 <ES_WIFI_SendData+0x142>
  {
    *SentLen = 0;
 80100b0:	6a3b      	ldr	r3, [r7, #32]
 80100b2:	2200      	movs	r2, #0
 80100b4:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
 80100b6:	4b05      	ldr	r3, [pc, #20]	; (80100cc <ES_WIFI_SendData+0x158>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7fa ff8e 	bl	800afdc <osMutexRelease>
  return ret;
 80100c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3718      	adds	r7, #24
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	200024ec 	.word	0x200024ec
 80100d0:	080122d0 	.word	0x080122d0
 80100d4:	08012474 	.word	0x08012474
 80100d8:	0801247c 	.word	0x0801247c
 80100dc:	08012488 	.word	0x08012488
 80100e0:	08012358 	.word	0x08012358
 80100e4:	08012370 	.word	0x08012370
 80100e8:	08012490 	.word	0x08012490
 80100ec:	080124ac 	.word	0x080124ac
 80100f0:	080124c8 	.word	0x080124c8
 80100f4:	080124dc 	.word	0x080124dc

080100f8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b084      	sub	sp, #16
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	4603      	mov	r3, r0
 8010100:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8010102:	2300      	movs	r3, #0
 8010104:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8010106:	88fb      	ldrh	r3, [r7, #6]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d135      	bne.n	8010178 <SPI_WIFI_Init+0x80>
  {

#ifdef WIFI_USE_CMSIS_OS  
    es_wifi_mutex = osMutexCreate(osMutex(es_wifi_mutex));
 801010c:	481f      	ldr	r0, [pc, #124]	; (801018c <SPI_WIFI_Init+0x94>)
 801010e:	f7fa fefe 	bl	800af0e <osMutexCreate>
 8010112:	4603      	mov	r3, r0
 8010114:	4a1e      	ldr	r2, [pc, #120]	; (8010190 <SPI_WIFI_Init+0x98>)
 8010116:	6013      	str	r3, [r2, #0]
    spi_mutex = osMutexCreate(osMutex(spi_mutex));
 8010118:	481e      	ldr	r0, [pc, #120]	; (8010194 <SPI_WIFI_Init+0x9c>)
 801011a:	f7fa fef8 	bl	800af0e <osMutexCreate>
 801011e:	4603      	mov	r3, r0
 8010120:	4a1d      	ldr	r2, [pc, #116]	; (8010198 <SPI_WIFI_Init+0xa0>)
 8010122:	6013      	str	r3, [r2, #0]
    spi_rx_sem = osSemaphoreCreate(osSemaphore(spi_rx_sem) , 1 );
 8010124:	2101      	movs	r1, #1
 8010126:	481d      	ldr	r0, [pc, #116]	; (801019c <SPI_WIFI_Init+0xa4>)
 8010128:	f7fa ffa1 	bl	800b06e <osSemaphoreCreate>
 801012c:	4603      	mov	r3, r0
 801012e:	4a1c      	ldr	r2, [pc, #112]	; (80101a0 <SPI_WIFI_Init+0xa8>)
 8010130:	6013      	str	r3, [r2, #0]
    spi_tx_sem = osSemaphoreCreate(osSemaphore(spi_tx_sem) , 1 );
 8010132:	2101      	movs	r1, #1
 8010134:	481b      	ldr	r0, [pc, #108]	; (80101a4 <SPI_WIFI_Init+0xac>)
 8010136:	f7fa ff9a 	bl	800b06e <osSemaphoreCreate>
 801013a:	4603      	mov	r3, r0
 801013c:	4a1a      	ldr	r2, [pc, #104]	; (80101a8 <SPI_WIFI_Init+0xb0>)
 801013e:	6013      	str	r3, [r2, #0]
    cmddata_rdy_rising_sem = osSemaphoreCreate(osSemaphore(cmddata_rdy_rising_sem) , 1 );
 8010140:	2101      	movs	r1, #1
 8010142:	481a      	ldr	r0, [pc, #104]	; (80101ac <SPI_WIFI_Init+0xb4>)
 8010144:	f7fa ff93 	bl	800b06e <osSemaphoreCreate>
 8010148:	4603      	mov	r3, r0
 801014a:	4a19      	ldr	r2, [pc, #100]	; (80101b0 <SPI_WIFI_Init+0xb8>)
 801014c:	6013      	str	r3, [r2, #0]
    SEM_WAIT(cmddata_rdy_rising_sem, 1); 
 801014e:	4b18      	ldr	r3, [pc, #96]	; (80101b0 <SPI_WIFI_Init+0xb8>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	2101      	movs	r1, #1
 8010154:	4618      	mov	r0, r3
 8010156:	f7fa ffbd 	bl	800b0d4 <osSemaphoreWait>
    SEM_WAIT(spi_rx_sem, 1); 
 801015a:	4b11      	ldr	r3, [pc, #68]	; (80101a0 <SPI_WIFI_Init+0xa8>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2101      	movs	r1, #1
 8010160:	4618      	mov	r0, r3
 8010162:	f7fa ffb7 	bl	800b0d4 <osSemaphoreWait>
    SEM_WAIT(spi_tx_sem, 1); 
 8010166:	4b10      	ldr	r3, [pc, #64]	; (80101a8 <SPI_WIFI_Init+0xb0>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2101      	movs	r1, #1
 801016c:	4618      	mov	r0, r3
 801016e:	f7fa ffb1 	bl	800b0d4 <osSemaphoreWait>
#endif
    // first call used for calibration
    SPI_WIFI_DelayUs(10);
 8010172:	200a      	movs	r0, #10
 8010174:	f000 fa36 	bl	80105e4 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8010178:	f000 f81c 	bl	80101b4 <SPI_WIFI_ResetModule>
 801017c:	4603      	mov	r3, r0
 801017e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8010180:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010184:	4618      	mov	r0, r3
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	08012640 	.word	0x08012640
 8010190:	200024ec 	.word	0x200024ec
 8010194:	08012648 	.word	0x08012648
 8010198:	200024f0 	.word	0x200024f0
 801019c:	08012650 	.word	0x08012650
 80101a0:	200024f4 	.word	0x200024f4
 80101a4:	08012658 	.word	0x08012658
 80101a8:	200024f8 	.word	0x200024f8
 80101ac:	08012660 	.word	0x08012660
 80101b0:	200024fc 	.word	0x200024fc

080101b4 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 80101ba:	f7f3 f97b 	bl	80034b4 <HAL_GetTick>
 80101be:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 80101c0:	2300      	movs	r3, #0
 80101c2:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 80101c4:	2200      	movs	r2, #0
 80101c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80101ca:	4830      	ldr	r0, [pc, #192]	; (801028c <SPI_WIFI_ResetModule+0xd8>)
 80101cc:	f7f4 f950 	bl	8004470 <HAL_GPIO_WritePin>
 80101d0:	200a      	movs	r0, #10
 80101d2:	f7f3 f97b 	bl	80034cc <HAL_Delay>
 80101d6:	2201      	movs	r2, #1
 80101d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80101dc:	482b      	ldr	r0, [pc, #172]	; (801028c <SPI_WIFI_ResetModule+0xd8>)
 80101de:	f7f4 f947 	bl	8004470 <HAL_GPIO_WritePin>
 80101e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80101e6:	f7f3 f971 	bl	80034cc <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 80101ea:	2200      	movs	r2, #0
 80101ec:	2101      	movs	r1, #1
 80101ee:	4827      	ldr	r0, [pc, #156]	; (801028c <SPI_WIFI_ResetModule+0xd8>)
 80101f0:	f7f4 f93e 	bl	8004470 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80101f4:	200f      	movs	r0, #15
 80101f6:	f000 f9f5 	bl	80105e4 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 80101fa:	e020      	b.n	801023e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi3 , &Prompt[count], 1, 0xFFFF);
 80101fc:	7bfb      	ldrb	r3, [r7, #15]
 80101fe:	463a      	mov	r2, r7
 8010200:	18d1      	adds	r1, r2, r3
 8010202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010206:	2201      	movs	r2, #1
 8010208:	4821      	ldr	r0, [pc, #132]	; (8010290 <SPI_WIFI_ResetModule+0xdc>)
 801020a:	f7f8 f94e 	bl	80084aa <HAL_SPI_Receive>
 801020e:	4603      	mov	r3, r0
 8010210:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8010212:	7bfb      	ldrb	r3, [r7, #15]
 8010214:	3302      	adds	r3, #2
 8010216:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8010218:	f7f3 f94c 	bl	80034b4 <HAL_GetTick>
 801021c:	4602      	mov	r2, r0
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010226:	d202      	bcs.n	801022e <SPI_WIFI_ResetModule+0x7a>
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d007      	beq.n	801023e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS(); 
 801022e:	2201      	movs	r2, #1
 8010230:	2101      	movs	r1, #1
 8010232:	4816      	ldr	r0, [pc, #88]	; (801028c <SPI_WIFI_ResetModule+0xd8>)
 8010234:	f7f4 f91c 	bl	8004470 <HAL_GPIO_WritePin>
      return -1;
 8010238:	f04f 33ff 	mov.w	r3, #4294967295
 801023c:	e021      	b.n	8010282 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 801023e:	2102      	movs	r1, #2
 8010240:	4812      	ldr	r0, [pc, #72]	; (801028c <SPI_WIFI_ResetModule+0xd8>)
 8010242:	f7f4 f8fd 	bl	8004440 <HAL_GPIO_ReadPin>
 8010246:	4603      	mov	r3, r0
 8010248:	2b01      	cmp	r3, #1
 801024a:	d0d7      	beq.n	80101fc <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS(); 
 801024c:	2201      	movs	r2, #1
 801024e:	2101      	movs	r1, #1
 8010250:	480e      	ldr	r0, [pc, #56]	; (801028c <SPI_WIFI_ResetModule+0xd8>)
 8010252:	f7f4 f90d 	bl	8004470 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8010256:	783b      	ldrb	r3, [r7, #0]
 8010258:	2b15      	cmp	r3, #21
 801025a:	d10e      	bne.n	801027a <SPI_WIFI_ResetModule+0xc6>
 801025c:	787b      	ldrb	r3, [r7, #1]
 801025e:	2b15      	cmp	r3, #21
 8010260:	d10b      	bne.n	801027a <SPI_WIFI_ResetModule+0xc6>
 8010262:	78bb      	ldrb	r3, [r7, #2]
 8010264:	2b0d      	cmp	r3, #13
 8010266:	d108      	bne.n	801027a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8010268:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 801026a:	2b0a      	cmp	r3, #10
 801026c:	d105      	bne.n	801027a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 801026e:	793b      	ldrb	r3, [r7, #4]
 8010270:	2b3e      	cmp	r3, #62	; 0x3e
 8010272:	d102      	bne.n	801027a <SPI_WIFI_ResetModule+0xc6>
 8010274:	797b      	ldrb	r3, [r7, #5]
 8010276:	2b20      	cmp	r3, #32
 8010278:	d002      	beq.n	8010280 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 801027a:	f04f 33ff 	mov.w	r3, #4294967295
 801027e:	e000      	b.n	8010282 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8010280:	2300      	movs	r3, #0
}
 8010282:	4618      	mov	r0, r3
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	48001000 	.word	0x48001000
 8010290:	20000424 	.word	0x20000424

08010294 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi3 );
 8010298:	480f      	ldr	r0, [pc, #60]	; (80102d8 <SPI_WIFI_DeInit+0x44>)
 801029a:	f7f8 f8de 	bl	800845a <HAL_SPI_DeInit>
#ifdef  WIFI_USE_CMSIS_OS
  osMutexDelete(spi_mutex);
 801029e:	4b0f      	ldr	r3, [pc, #60]	; (80102dc <SPI_WIFI_DeInit+0x48>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fa fed0 	bl	800b048 <osMutexDelete>
  osMutexDelete(es_wifi_mutex);
 80102a8:	4b0d      	ldr	r3, [pc, #52]	; (80102e0 <SPI_WIFI_DeInit+0x4c>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fa fecb 	bl	800b048 <osMutexDelete>
  osSemaphoreDelete(spi_tx_sem);
 80102b2:	4b0c      	ldr	r3, [pc, #48]	; (80102e4 <SPI_WIFI_DeInit+0x50>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7fa ff90 	bl	800b1dc <osSemaphoreDelete>
  osSemaphoreDelete(spi_rx_sem);
 80102bc:	4b0a      	ldr	r3, [pc, #40]	; (80102e8 <SPI_WIFI_DeInit+0x54>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fa ff8b 	bl	800b1dc <osSemaphoreDelete>
  osSemaphoreDelete(cmddata_rdy_rising_sem);
 80102c6:	4b09      	ldr	r3, [pc, #36]	; (80102ec <SPI_WIFI_DeInit+0x58>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fa ff86 	bl	800b1dc <osSemaphoreDelete>
#endif
  return 0;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	20000424 	.word	0x20000424
 80102dc:	200024f0 	.word	0x200024f0
 80102e0:	200024ec 	.word	0x200024ec
 80102e4:	200024f8 	.word	0x200024f8
 80102e8:	200024f4 	.word	0x200024f4
 80102ec:	200024fc 	.word	0x200024fc

080102f0 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80102f8:	f7f3 f8dc 	bl	80034b4 <HAL_GetTick>
 80102fc:	4603      	mov	r3, r0
 80102fe:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8010300:	e00a      	b.n	8010318 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8010302:	f7f3 f8d7 	bl	80034b4 <HAL_GetTick>
 8010306:	4602      	mov	r2, r0
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	1ad2      	subs	r2, r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	429a      	cmp	r2, r3
 8010310:	d902      	bls.n	8010318 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8010312:	f04f 33ff 	mov.w	r3, #4294967295
 8010316:	e007      	b.n	8010328 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8010318:	2102      	movs	r1, #2
 801031a:	4805      	ldr	r0, [pc, #20]	; (8010330 <wait_cmddata_rdy_high+0x40>)
 801031c:	f7f4 f890 	bl	8004440 <HAL_GPIO_ReadPin>
 8010320:	4603      	mov	r3, r0
 8010322:	2b01      	cmp	r3, #1
 8010324:	d1ed      	bne.n	8010302 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8010326:	2300      	movs	r3, #0
}
 8010328:	4618      	mov	r0, r3
 801032a:	3710      	adds	r7, #16
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	48001000 	.word	0x48001000

08010334 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout); 
 801033c:	4b05      	ldr	r3, [pc, #20]	; (8010354 <wait_cmddata_rdy_rising_event+0x20>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	4611      	mov	r1, r2
 8010344:	4618      	mov	r0, r3
 8010346:	f7fa fec5 	bl	800b0d4 <osSemaphoreWait>
 801034a:	4603      	mov	r3, r0
      return -1;
    }
  }
  return 0; 
#endif
}
 801034c:	4618      	mov	r0, r3
 801034e:	3708      	adds	r7, #8
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}
 8010354:	200024fc 	.word	0x200024fc

08010358 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout); 
 8010360:	4b05      	ldr	r3, [pc, #20]	; (8010378 <wait_spi_rx_event+0x20>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	4611      	mov	r1, r2
 8010368:	4618      	mov	r0, r3
 801036a:	f7fa feb3 	bl	800b0d4 <osSemaphoreWait>
 801036e:	4603      	mov	r3, r0
      return -1;
    }
  }
  return 0; 
#endif
}
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	200024f4 	.word	0x200024f4

0801037c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout); 
 8010384:	4b05      	ldr	r3, [pc, #20]	; (801039c <wait_spi_tx_event+0x20>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	687a      	ldr	r2, [r7, #4]
 801038a:	4611      	mov	r1, r2
 801038c:	4618      	mov	r0, r3
 801038e:	f7fa fea1 	bl	800b0d4 <osSemaphoreWait>
 8010392:	4603      	mov	r3, r0
      return -1;
    }
  }
  return 0; 
#endif
}
 8010394:	4618      	mov	r0, r3
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	200024f8 	.word	0x200024f8

080103a0 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b086      	sub	sp, #24
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	460b      	mov	r3, r1
 80103aa:	607a      	str	r2, [r7, #4]
 80103ac:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80103ae:	2300      	movs	r3, #0
 80103b0:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS(); 
 80103b2:	2201      	movs	r2, #1
 80103b4:	2101      	movs	r1, #1
 80103b6:	4841      	ldr	r0, [pc, #260]	; (80104bc <SPI_WIFI_ReceiveData+0x11c>)
 80103b8:	f7f4 f85a 	bl	8004470 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
 80103bc:	4b40      	ldr	r3, [pc, #256]	; (80104c0 <SPI_WIFI_ReceiveData+0x120>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7fa fe0b 	bl	800afdc <osMutexRelease>
  SPI_WIFI_DelayUs(3);
 80103c6:	2003      	movs	r0, #3
 80103c8:	f000 f90c 	bl	80105e4 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7ff ffb0 	bl	8010334 <wait_cmddata_rdy_rising_event>
 80103d4:	4603      	mov	r3, r0
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	da02      	bge.n	80103e0 <SPI_WIFI_ReceiveData+0x40>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80103da:	f06f 0302 	mvn.w	r3, #2
 80103de:	e069      	b.n	80104b4 <SPI_WIFI_ReceiveData+0x114>
  }

  LOCK_SPI();  
 80103e0:	4b37      	ldr	r3, [pc, #220]	; (80104c0 <SPI_WIFI_ReceiveData+0x120>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2100      	movs	r1, #0
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7fa fdaa 	bl	800af40 <osMutexWait>
  WIFI_ENABLE_NSS(); 
 80103ec:	2200      	movs	r2, #0
 80103ee:	2101      	movs	r1, #1
 80103f0:	4832      	ldr	r0, [pc, #200]	; (80104bc <SPI_WIFI_ReceiveData+0x11c>)
 80103f2:	f7f4 f83d 	bl	8004470 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80103f6:	200f      	movs	r0, #15
 80103f8:	f000 f8f4 	bl	80105e4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80103fc:	e047      	b.n	801048e <SPI_WIFI_ReceiveData+0xee>
  {
    if((length < len) || (!len))
 80103fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010402:	897b      	ldrh	r3, [r7, #10]
 8010404:	429a      	cmp	r2, r3
 8010406:	db02      	blt.n	801040e <SPI_WIFI_ReceiveData+0x6e>
 8010408:	897b      	ldrh	r3, [r7, #10]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d146      	bne.n	801049c <SPI_WIFI_ReceiveData+0xfc>
    {
      spi_rx_event=1;
 801040e:	4b2d      	ldr	r3, [pc, #180]	; (80104c4 <SPI_WIFI_ReceiveData+0x124>)
 8010410:	2201      	movs	r2, #1
 8010412:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi3, tmp, 1) != HAL_OK) {
 8010414:	f107 0314 	add.w	r3, r7, #20
 8010418:	2201      	movs	r2, #1
 801041a:	4619      	mov	r1, r3
 801041c:	482a      	ldr	r0, [pc, #168]	; (80104c8 <SPI_WIFI_ReceiveData+0x128>)
 801041e:	f7f8 fc15 	bl	8008c4c <HAL_SPI_Receive_IT>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d00c      	beq.n	8010442 <SPI_WIFI_ReceiveData+0xa2>
        WIFI_DISABLE_NSS();
 8010428:	2201      	movs	r2, #1
 801042a:	2101      	movs	r1, #1
 801042c:	4823      	ldr	r0, [pc, #140]	; (80104bc <SPI_WIFI_ReceiveData+0x11c>)
 801042e:	f7f4 f81f 	bl	8004470 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
 8010432:	4b23      	ldr	r3, [pc, #140]	; (80104c0 <SPI_WIFI_ReceiveData+0x120>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4618      	mov	r0, r3
 8010438:	f7fa fdd0 	bl	800afdc <osMutexRelease>
        return ES_WIFI_ERROR_SPI_FAILED;
 801043c:	f04f 33ff 	mov.w	r3, #4294967295
 8010440:	e038      	b.n	80104b4 <SPI_WIFI_ReceiveData+0x114>
      }
  
      wait_spi_rx_event(timeout);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	4618      	mov	r0, r3
 8010446:	f7ff ff87 	bl	8010358 <wait_spi_rx_event>

      pData[0] = tmp[0];
 801044a:	7d3a      	ldrb	r2, [r7, #20]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	3301      	adds	r3, #1
 8010454:	7d7a      	ldrb	r2, [r7, #21]
 8010456:	701a      	strb	r2, [r3, #0]
      length += 2;
 8010458:	8afb      	ldrh	r3, [r7, #22]
 801045a:	3302      	adds	r3, #2
 801045c:	b29b      	uxth	r3, r3
 801045e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	3302      	adds	r3, #2
 8010464:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8010466:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801046a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 801046e:	db0e      	blt.n	801048e <SPI_WIFI_ReceiveData+0xee>
        WIFI_DISABLE_NSS();
 8010470:	2201      	movs	r2, #1
 8010472:	2101      	movs	r1, #1
 8010474:	4811      	ldr	r0, [pc, #68]	; (80104bc <SPI_WIFI_ReceiveData+0x11c>)
 8010476:	f7f3 fffb 	bl	8004470 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();    
 801047a:	f7ff fe9b 	bl	80101b4 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
 801047e:	4b10      	ldr	r3, [pc, #64]	; (80104c0 <SPI_WIFI_ReceiveData+0x120>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4618      	mov	r0, r3
 8010484:	f7fa fdaa 	bl	800afdc <osMutexRelease>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8010488:	f06f 0303 	mvn.w	r3, #3
 801048c:	e012      	b.n	80104b4 <SPI_WIFI_ReceiveData+0x114>
  while (WIFI_IS_CMDDATA_READY())
 801048e:	2102      	movs	r1, #2
 8010490:	480a      	ldr	r0, [pc, #40]	; (80104bc <SPI_WIFI_ReceiveData+0x11c>)
 8010492:	f7f3 ffd5 	bl	8004440 <HAL_GPIO_ReadPin>
 8010496:	4603      	mov	r3, r0
 8010498:	2b01      	cmp	r3, #1
 801049a:	d0b0      	beq.n	80103fe <SPI_WIFI_ReceiveData+0x5e>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS(); 
 801049c:	2201      	movs	r2, #1
 801049e:	2101      	movs	r1, #1
 80104a0:	4806      	ldr	r0, [pc, #24]	; (80104bc <SPI_WIFI_ReceiveData+0x11c>)
 80104a2:	f7f3 ffe5 	bl	8004470 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
 80104a6:	4b06      	ldr	r3, [pc, #24]	; (80104c0 <SPI_WIFI_ReceiveData+0x120>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7fa fd96 	bl	800afdc <osMutexRelease>
  return length;
 80104b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3718      	adds	r7, #24
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	48001000 	.word	0x48001000
 80104c0:	200024f0 	.word	0x200024f0
 80104c4:	200024e0 	.word	0x200024e0
 80104c8:	20000424 	.word	0x20000424

080104cc <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b086      	sub	sp, #24
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	60f8      	str	r0, [r7, #12]
 80104d4:	460b      	mov	r3, r1
 80104d6:	607a      	str	r2, [r7, #4]
 80104d8:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4618      	mov	r0, r3
 80104de:	f7ff ff07 	bl	80102f0 <wait_cmddata_rdy_high>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	da02      	bge.n	80104ee <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80104e8:	f04f 33ff 	mov.w	r3, #4294967295
 80104ec:	e05f      	b.n	80105ae <SPI_WIFI_SendData+0xe2>
  }
    
  // arm to detect rising event
  cmddata_rdy_rising_event=1;
 80104ee:	4b32      	ldr	r3, [pc, #200]	; (80105b8 <SPI_WIFI_SendData+0xec>)
 80104f0:	2201      	movs	r2, #1
 80104f2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
 80104f4:	4b31      	ldr	r3, [pc, #196]	; (80105bc <SPI_WIFI_SendData+0xf0>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2100      	movs	r1, #0
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fa fd20 	bl	800af40 <osMutexWait>
  WIFI_ENABLE_NSS();
 8010500:	2200      	movs	r2, #0
 8010502:	2101      	movs	r1, #1
 8010504:	482e      	ldr	r0, [pc, #184]	; (80105c0 <SPI_WIFI_SendData+0xf4>)
 8010506:	f7f3 ffb3 	bl	8004470 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 801050a:	200f      	movs	r0, #15
 801050c:	f000 f86a 	bl	80105e4 <SPI_WIFI_DelayUs>
  if (len > 1)
 8010510:	897b      	ldrh	r3, [r7, #10]
 8010512:	2b01      	cmp	r3, #1
 8010514:	d91e      	bls.n	8010554 <SPI_WIFI_SendData+0x88>
  {
    spi_tx_event=1;
 8010516:	4b2b      	ldr	r3, [pc, #172]	; (80105c4 <SPI_WIFI_SendData+0xf8>)
 8010518:	2201      	movs	r2, #1
 801051a:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, (uint8_t *)pdata , len/2) != HAL_OK)
 801051c:	897b      	ldrh	r3, [r7, #10]
 801051e:	085b      	lsrs	r3, r3, #1
 8010520:	b29b      	uxth	r3, r3
 8010522:	461a      	mov	r2, r3
 8010524:	68f9      	ldr	r1, [r7, #12]
 8010526:	4828      	ldr	r0, [pc, #160]	; (80105c8 <SPI_WIFI_SendData+0xfc>)
 8010528:	f7f8 fb02 	bl	8008b30 <HAL_SPI_Transmit_IT>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	d00c      	beq.n	801054c <SPI_WIFI_SendData+0x80>
    {
      WIFI_DISABLE_NSS();
 8010532:	2201      	movs	r2, #1
 8010534:	2101      	movs	r1, #1
 8010536:	4822      	ldr	r0, [pc, #136]	; (80105c0 <SPI_WIFI_SendData+0xf4>)
 8010538:	f7f3 ff9a 	bl	8004470 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
 801053c:	4b1f      	ldr	r3, [pc, #124]	; (80105bc <SPI_WIFI_SendData+0xf0>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4618      	mov	r0, r3
 8010542:	f7fa fd4b 	bl	800afdc <osMutexRelease>
      return ES_WIFI_ERROR_SPI_FAILED;
 8010546:	f04f 33ff 	mov.w	r3, #4294967295
 801054a:	e030      	b.n	80105ae <SPI_WIFI_SendData+0xe2>
    }
    wait_spi_tx_event(timeout);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4618      	mov	r0, r3
 8010550:	f7ff ff14 	bl	801037c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8010554:	897b      	ldrh	r3, [r7, #10]
 8010556:	f003 0301 	and.w	r3, r3, #1
 801055a:	2b00      	cmp	r3, #0
 801055c:	d025      	beq.n	80105aa <SPI_WIFI_SendData+0xde>
  {
    Padding[0] = pdata[len-1];
 801055e:	897b      	ldrh	r3, [r7, #10]
 8010560:	3b01      	subs	r3, #1
 8010562:	68fa      	ldr	r2, [r7, #12]
 8010564:	4413      	add	r3, r2
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 801056a:	230a      	movs	r3, #10
 801056c:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 801056e:	4b15      	ldr	r3, [pc, #84]	; (80105c4 <SPI_WIFI_SendData+0xf8>)
 8010570:	2201      	movs	r2, #1
 8010572:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, Padding, 1) != HAL_OK)
 8010574:	f107 0314 	add.w	r3, r7, #20
 8010578:	2201      	movs	r2, #1
 801057a:	4619      	mov	r1, r3
 801057c:	4812      	ldr	r0, [pc, #72]	; (80105c8 <SPI_WIFI_SendData+0xfc>)
 801057e:	f7f8 fad7 	bl	8008b30 <HAL_SPI_Transmit_IT>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d00c      	beq.n	80105a2 <SPI_WIFI_SendData+0xd6>
    {
      WIFI_DISABLE_NSS();
 8010588:	2201      	movs	r2, #1
 801058a:	2101      	movs	r1, #1
 801058c:	480c      	ldr	r0, [pc, #48]	; (80105c0 <SPI_WIFI_SendData+0xf4>)
 801058e:	f7f3 ff6f 	bl	8004470 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
 8010592:	4b0a      	ldr	r3, [pc, #40]	; (80105bc <SPI_WIFI_SendData+0xf0>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4618      	mov	r0, r3
 8010598:	f7fa fd20 	bl	800afdc <osMutexRelease>
      return ES_WIFI_ERROR_SPI_FAILED;
 801059c:	f04f 33ff 	mov.w	r3, #4294967295
 80105a0:	e005      	b.n	80105ae <SPI_WIFI_SendData+0xe2>
    }  
    wait_spi_tx_event(timeout);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7ff fee9 	bl	801037c <wait_spi_tx_event>
    
  }
  return len;
 80105aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3718      	adds	r7, #24
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	200024e8 	.word	0x200024e8
 80105bc:	200024f0 	.word	0x200024f0
 80105c0:	48001000 	.word	0x48001000
 80105c4:	200024e4 	.word	0x200024e4
 80105c8:	20000424 	.word	0x20000424

080105cc <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f7f2 ff79 	bl	80034cc <HAL_Delay>
}
 80105da:	bf00      	nop
 80105dc:	3708      	adds	r7, #8
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
	...

080105e4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b086      	sub	sp, #24
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
  uint32_t       loop_per_us;
  static  uint32_t cycle_per_loop=0;

  // calibration happen on first call for a duration of 1 ms * nbcycle per loop 
  // 10 cycle for STM32L4
  if (cycle_per_loop == 0 ) 
 80105ec:	4b1f      	ldr	r3, [pc, #124]	; (801066c <SPI_WIFI_DelayUs+0x88>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d120      	bne.n	8010636 <SPI_WIFI_DelayUs+0x52>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000L);
 80105f4:	4b1e      	ldr	r3, [pc, #120]	; (8010670 <SPI_WIFI_DelayUs+0x8c>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	4a1e      	ldr	r2, [pc, #120]	; (8010674 <SPI_WIFI_DelayUs+0x90>)
 80105fa:	fba2 2303 	umull	r2, r3, r2, r3
 80105fe:	099b      	lsrs	r3, r3, #6
 8010600:	617b      	str	r3, [r7, #20]
     uint32_t   t; 
     ct=cycle_per_ms;
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	60bb      	str	r3, [r7, #8]
     t=HAL_GetTick();
 8010606:	f7f2 ff55 	bl	80034b4 <HAL_GetTick>
 801060a:	6138      	str	r0, [r7, #16]
     while(ct) ct--;
 801060c:	e002      	b.n	8010614 <SPI_WIFI_DelayUs+0x30>
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	3b01      	subs	r3, #1
 8010612:	60bb      	str	r3, [r7, #8]
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1f9      	bne.n	801060e <SPI_WIFI_DelayUs+0x2a>
     cycle_per_loop=HAL_GetTick()-t;  
 801061a:	f7f2 ff4b 	bl	80034b4 <HAL_GetTick>
 801061e:	4602      	mov	r2, r0
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	1ad3      	subs	r3, r2, r3
 8010624:	4a11      	ldr	r2, [pc, #68]	; (801066c <SPI_WIFI_DelayUs+0x88>)
 8010626:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop==0) cycle_per_loop=1;
 8010628:	4b10      	ldr	r3, [pc, #64]	; (801066c <SPI_WIFI_DelayUs+0x88>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d102      	bne.n	8010636 <SPI_WIFI_DelayUs+0x52>
 8010630:	4b0e      	ldr	r3, [pc, #56]	; (801066c <SPI_WIFI_DelayUs+0x88>)
 8010632:	2201      	movs	r2, #1
 8010634:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000/cycle_per_loop;
 8010636:	4b0e      	ldr	r3, [pc, #56]	; (8010670 <SPI_WIFI_DelayUs+0x8c>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	4a0f      	ldr	r2, [pc, #60]	; (8010678 <SPI_WIFI_DelayUs+0x94>)
 801063c:	fba2 2303 	umull	r2, r3, r2, r3
 8010640:	0c9a      	lsrs	r2, r3, #18
 8010642:	4b0a      	ldr	r3, [pc, #40]	; (801066c <SPI_WIFI_DelayUs+0x88>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	fbb2 f3f3 	udiv	r3, r2, r3
 801064a:	60fb      	str	r3, [r7, #12]
  ct = n * loop_per_us;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	68fa      	ldr	r2, [r7, #12]
 8010650:	fb02 f303 	mul.w	r3, r2, r3
 8010654:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8010656:	e002      	b.n	801065e <SPI_WIFI_DelayUs+0x7a>
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	3b01      	subs	r3, #1
 801065c:	60bb      	str	r3, [r7, #8]
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d1f9      	bne.n	8010658 <SPI_WIFI_DelayUs+0x74>
  return;
 8010664:	bf00      	nop
}
 8010666:	3718      	adds	r7, #24
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	20002500 	.word	0x20002500
 8010670:	20000008 	.word	0x20000008
 8010674:	10624dd3 	.word	0x10624dd3
 8010678:	431bde83 	.word	0x431bde83

0801067c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8010684:	4b07      	ldr	r3, [pc, #28]	; (80106a4 <HAL_SPI_RxCpltCallback+0x28>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d007      	beq.n	801069c <HAL_SPI_RxCpltCallback+0x20>
  {
    SEM_SIGNAL(spi_rx_sem);
 801068c:	4b06      	ldr	r3, [pc, #24]	; (80106a8 <HAL_SPI_RxCpltCallback+0x2c>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4618      	mov	r0, r3
 8010692:	f7fa fd6d 	bl	800b170 <osSemaphoreRelease>
    spi_rx_event=0;
 8010696:	4b03      	ldr	r3, [pc, #12]	; (80106a4 <HAL_SPI_RxCpltCallback+0x28>)
 8010698:	2200      	movs	r2, #0
 801069a:	601a      	str	r2, [r3, #0]
  }
}
 801069c:	bf00      	nop
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	200024e0 	.word	0x200024e0
 80106a8:	200024f4 	.word	0x200024f4

080106ac <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80106b4:	4b07      	ldr	r3, [pc, #28]	; (80106d4 <HAL_SPI_TxCpltCallback+0x28>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d007      	beq.n	80106cc <HAL_SPI_TxCpltCallback+0x20>
  {
    SEM_SIGNAL(spi_tx_sem);
 80106bc:	4b06      	ldr	r3, [pc, #24]	; (80106d8 <HAL_SPI_TxCpltCallback+0x2c>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7fa fd55 	bl	800b170 <osSemaphoreRelease>
    spi_tx_event=0;
 80106c6:	4b03      	ldr	r3, [pc, #12]	; (80106d4 <HAL_SPI_TxCpltCallback+0x28>)
 80106c8:	2200      	movs	r2, #0
 80106ca:	601a      	str	r2, [r3, #0]
  }
}
 80106cc:	bf00      	nop
 80106ce:	3708      	adds	r7, #8
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	200024e4 	.word	0x200024e4
 80106d8:	200024f8 	.word	0x200024f8

080106dc <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 80106e0:	4b06      	ldr	r3, [pc, #24]	; (80106fc <SPI_WIFI_ISR+0x20>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d107      	bne.n	80106f8 <SPI_WIFI_ISR+0x1c>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
 80106e8:	4b05      	ldr	r3, [pc, #20]	; (8010700 <SPI_WIFI_ISR+0x24>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7fa fd3f 	bl	800b170 <osSemaphoreRelease>
     cmddata_rdy_rising_event=0;
 80106f2:	4b02      	ldr	r3, [pc, #8]	; (80106fc <SPI_WIFI_ISR+0x20>)
 80106f4:	2200      	movs	r2, #0
 80106f6:	601a      	str	r2, [r3, #0]
   }
}
 80106f8:	bf00      	nop
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	200024e8 	.word	0x200024e8
 8010700:	200024fc 	.word	0x200024fc

08010704 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 801070a:	2301      	movs	r3, #1
 801070c:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 801070e:	4b0d      	ldr	r3, [pc, #52]	; (8010744 <WIFI_Init+0x40>)
 8010710:	9301      	str	r3, [sp, #4]
 8010712:	4b0d      	ldr	r3, [pc, #52]	; (8010748 <WIFI_Init+0x44>)
 8010714:	9300      	str	r3, [sp, #0]
 8010716:	4b0d      	ldr	r3, [pc, #52]	; (801074c <WIFI_Init+0x48>)
 8010718:	4a0d      	ldr	r2, [pc, #52]	; (8010750 <WIFI_Init+0x4c>)
 801071a:	490e      	ldr	r1, [pc, #56]	; (8010754 <WIFI_Init+0x50>)
 801071c:	480e      	ldr	r0, [pc, #56]	; (8010758 <WIFI_Init+0x54>)
 801071e:	f7ff fa75 	bl	800fc0c <ES_WIFI_RegisterBusIO>
 8010722:	4603      	mov	r3, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	d107      	bne.n	8010738 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8010728:	480b      	ldr	r0, [pc, #44]	; (8010758 <WIFI_Init+0x54>)
 801072a:	f7ff fa33 	bl	800fb94 <ES_WIFI_Init>
 801072e:	4603      	mov	r3, r0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d101      	bne.n	8010738 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8010734:	2300      	movs	r3, #0
 8010736:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8010738:	79fb      	ldrb	r3, [r7, #7]
}
 801073a:	4618      	mov	r0, r3
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	080103a1 	.word	0x080103a1
 8010748:	080104cd 	.word	0x080104cd
 801074c:	080105cd 	.word	0x080105cd
 8010750:	08010295 	.word	0x08010295
 8010754:	080100f9 	.word	0x080100f9
 8010758:	20002504 	.word	0x20002504

0801075c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b086      	sub	sp, #24
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	4613      	mov	r3, r2
 8010768:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 801076a:	2301      	movs	r3, #1
 801076c:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 801076e:	79fb      	ldrb	r3, [r7, #7]
 8010770:	68ba      	ldr	r2, [r7, #8]
 8010772:	68f9      	ldr	r1, [r7, #12]
 8010774:	4809      	ldr	r0, [pc, #36]	; (801079c <WIFI_Connect+0x40>)
 8010776:	f7ff fa7d 	bl	800fc74 <ES_WIFI_Connect>
 801077a:	4603      	mov	r3, r0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d107      	bne.n	8010790 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8010780:	4806      	ldr	r0, [pc, #24]	; (801079c <WIFI_Connect+0x40>)
 8010782:	f7ff fafb 	bl	800fd7c <ES_WIFI_GetNetworkSettings>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d101      	bne.n	8010790 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 801078c:	2300      	movs	r3, #0
 801078e:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 8010790:	7dfb      	ldrb	r3, [r7, #23]
}
 8010792:	4618      	mov	r0, r3
 8010794:	3718      	adds	r7, #24
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	20002504 	.word	0x20002504

080107a0 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b08a      	sub	sp, #40	; 0x28
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	607a      	str	r2, [r7, #4]
 80107aa:	603b      	str	r3, [r7, #0]
 80107ac:	460b      	mov	r3, r1
 80107ae:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80107b0:	2301      	movs	r3, #1
 80107b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 80107bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80107be:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 80107c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80107c2:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 80107c4:	7afb      	ldrb	r3, [r7, #11]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	bf14      	ite	ne
 80107ca:	2301      	movne	r3, #1
 80107cc:	2300      	moveq	r3, #0
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	785b      	ldrb	r3, [r3, #1]
 80107dc:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	789b      	ldrb	r3, [r3, #2]
 80107e2:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	78db      	ldrb	r3, [r3, #3]
 80107e8:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 80107ea:	f107 0310 	add.w	r3, r7, #16
 80107ee:	4619      	mov	r1, r3
 80107f0:	4807      	ldr	r0, [pc, #28]	; (8010810 <WIFI_OpenClientConnection+0x70>)
 80107f2:	f7ff fafb 	bl	800fdec <ES_WIFI_StartClientConnection>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d102      	bne.n	8010802 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 80107fc:	2300      	movs	r3, #0
 80107fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8010802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010806:	4618      	mov	r0, r3
 8010808:	3728      	adds	r7, #40	; 0x28
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	20002504 	.word	0x20002504

08010814 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b088      	sub	sp, #32
 8010818:	af02      	add	r7, sp, #8
 801081a:	60b9      	str	r1, [r7, #8]
 801081c:	607b      	str	r3, [r7, #4]
 801081e:	4603      	mov	r3, r0
 8010820:	73fb      	strb	r3, [r7, #15]
 8010822:	4613      	mov	r3, r2
 8010824:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8010826:	2301      	movs	r3, #1
 8010828:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 801082a:	89ba      	ldrh	r2, [r7, #12]
 801082c:	7bf9      	ldrb	r1, [r7, #15]
 801082e:	6a3b      	ldr	r3, [r7, #32]
 8010830:	9301      	str	r3, [sp, #4]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	9300      	str	r3, [sp, #0]
 8010836:	4613      	mov	r3, r2
 8010838:	68ba      	ldr	r2, [r7, #8]
 801083a:	4806      	ldr	r0, [pc, #24]	; (8010854 <WIFI_SendData+0x40>)
 801083c:	f7ff fb9a 	bl	800ff74 <ES_WIFI_SendData>
 8010840:	4603      	mov	r3, r0
 8010842:	2b00      	cmp	r3, #0
 8010844:	d101      	bne.n	801084a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 801084a:	7dfb      	ldrb	r3, [r7, #23]
}
 801084c:	4618      	mov	r0, r3
 801084e:	3718      	adds	r7, #24
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	20002504 	.word	0x20002504

08010858 <__errno>:
 8010858:	4b01      	ldr	r3, [pc, #4]	; (8010860 <__errno+0x8>)
 801085a:	6818      	ldr	r0, [r3, #0]
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	20000018 	.word	0x20000018

08010864 <std>:
 8010864:	2300      	movs	r3, #0
 8010866:	b510      	push	{r4, lr}
 8010868:	4604      	mov	r4, r0
 801086a:	e9c0 3300 	strd	r3, r3, [r0]
 801086e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010872:	6083      	str	r3, [r0, #8]
 8010874:	8181      	strh	r1, [r0, #12]
 8010876:	6643      	str	r3, [r0, #100]	; 0x64
 8010878:	81c2      	strh	r2, [r0, #14]
 801087a:	6183      	str	r3, [r0, #24]
 801087c:	4619      	mov	r1, r3
 801087e:	2208      	movs	r2, #8
 8010880:	305c      	adds	r0, #92	; 0x5c
 8010882:	f000 f92a 	bl	8010ada <memset>
 8010886:	4b05      	ldr	r3, [pc, #20]	; (801089c <std+0x38>)
 8010888:	6263      	str	r3, [r4, #36]	; 0x24
 801088a:	4b05      	ldr	r3, [pc, #20]	; (80108a0 <std+0x3c>)
 801088c:	62a3      	str	r3, [r4, #40]	; 0x28
 801088e:	4b05      	ldr	r3, [pc, #20]	; (80108a4 <std+0x40>)
 8010890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010892:	4b05      	ldr	r3, [pc, #20]	; (80108a8 <std+0x44>)
 8010894:	6224      	str	r4, [r4, #32]
 8010896:	6323      	str	r3, [r4, #48]	; 0x30
 8010898:	bd10      	pop	{r4, pc}
 801089a:	bf00      	nop
 801089c:	08010e65 	.word	0x08010e65
 80108a0:	08010e87 	.word	0x08010e87
 80108a4:	08010ebf 	.word	0x08010ebf
 80108a8:	08010ee3 	.word	0x08010ee3

080108ac <_cleanup_r>:
 80108ac:	4901      	ldr	r1, [pc, #4]	; (80108b4 <_cleanup_r+0x8>)
 80108ae:	f000 b8af 	b.w	8010a10 <_fwalk_reent>
 80108b2:	bf00      	nop
 80108b4:	080112dd 	.word	0x080112dd

080108b8 <__sfmoreglue>:
 80108b8:	b570      	push	{r4, r5, r6, lr}
 80108ba:	2268      	movs	r2, #104	; 0x68
 80108bc:	1e4d      	subs	r5, r1, #1
 80108be:	4355      	muls	r5, r2
 80108c0:	460e      	mov	r6, r1
 80108c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80108c6:	f000 f931 	bl	8010b2c <_malloc_r>
 80108ca:	4604      	mov	r4, r0
 80108cc:	b140      	cbz	r0, 80108e0 <__sfmoreglue+0x28>
 80108ce:	2100      	movs	r1, #0
 80108d0:	e9c0 1600 	strd	r1, r6, [r0]
 80108d4:	300c      	adds	r0, #12
 80108d6:	60a0      	str	r0, [r4, #8]
 80108d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80108dc:	f000 f8fd 	bl	8010ada <memset>
 80108e0:	4620      	mov	r0, r4
 80108e2:	bd70      	pop	{r4, r5, r6, pc}

080108e4 <__sfp_lock_acquire>:
 80108e4:	4801      	ldr	r0, [pc, #4]	; (80108ec <__sfp_lock_acquire+0x8>)
 80108e6:	f000 b8d8 	b.w	8010a9a <__retarget_lock_acquire_recursive>
 80108ea:	bf00      	nop
 80108ec:	20002bad 	.word	0x20002bad

080108f0 <__sfp_lock_release>:
 80108f0:	4801      	ldr	r0, [pc, #4]	; (80108f8 <__sfp_lock_release+0x8>)
 80108f2:	f000 b8d3 	b.w	8010a9c <__retarget_lock_release_recursive>
 80108f6:	bf00      	nop
 80108f8:	20002bad 	.word	0x20002bad

080108fc <__sinit_lock_acquire>:
 80108fc:	4801      	ldr	r0, [pc, #4]	; (8010904 <__sinit_lock_acquire+0x8>)
 80108fe:	f000 b8cc 	b.w	8010a9a <__retarget_lock_acquire_recursive>
 8010902:	bf00      	nop
 8010904:	20002bae 	.word	0x20002bae

08010908 <__sinit_lock_release>:
 8010908:	4801      	ldr	r0, [pc, #4]	; (8010910 <__sinit_lock_release+0x8>)
 801090a:	f000 b8c7 	b.w	8010a9c <__retarget_lock_release_recursive>
 801090e:	bf00      	nop
 8010910:	20002bae 	.word	0x20002bae

08010914 <__sinit>:
 8010914:	b510      	push	{r4, lr}
 8010916:	4604      	mov	r4, r0
 8010918:	f7ff fff0 	bl	80108fc <__sinit_lock_acquire>
 801091c:	69a3      	ldr	r3, [r4, #24]
 801091e:	b11b      	cbz	r3, 8010928 <__sinit+0x14>
 8010920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010924:	f7ff bff0 	b.w	8010908 <__sinit_lock_release>
 8010928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801092c:	6523      	str	r3, [r4, #80]	; 0x50
 801092e:	4b13      	ldr	r3, [pc, #76]	; (801097c <__sinit+0x68>)
 8010930:	4a13      	ldr	r2, [pc, #76]	; (8010980 <__sinit+0x6c>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	62a2      	str	r2, [r4, #40]	; 0x28
 8010936:	42a3      	cmp	r3, r4
 8010938:	bf04      	itt	eq
 801093a:	2301      	moveq	r3, #1
 801093c:	61a3      	streq	r3, [r4, #24]
 801093e:	4620      	mov	r0, r4
 8010940:	f000 f820 	bl	8010984 <__sfp>
 8010944:	6060      	str	r0, [r4, #4]
 8010946:	4620      	mov	r0, r4
 8010948:	f000 f81c 	bl	8010984 <__sfp>
 801094c:	60a0      	str	r0, [r4, #8]
 801094e:	4620      	mov	r0, r4
 8010950:	f000 f818 	bl	8010984 <__sfp>
 8010954:	2200      	movs	r2, #0
 8010956:	60e0      	str	r0, [r4, #12]
 8010958:	2104      	movs	r1, #4
 801095a:	6860      	ldr	r0, [r4, #4]
 801095c:	f7ff ff82 	bl	8010864 <std>
 8010960:	68a0      	ldr	r0, [r4, #8]
 8010962:	2201      	movs	r2, #1
 8010964:	2109      	movs	r1, #9
 8010966:	f7ff ff7d 	bl	8010864 <std>
 801096a:	68e0      	ldr	r0, [r4, #12]
 801096c:	2202      	movs	r2, #2
 801096e:	2112      	movs	r1, #18
 8010970:	f7ff ff78 	bl	8010864 <std>
 8010974:	2301      	movs	r3, #1
 8010976:	61a3      	str	r3, [r4, #24]
 8010978:	e7d2      	b.n	8010920 <__sinit+0xc>
 801097a:	bf00      	nop
 801097c:	080126c8 	.word	0x080126c8
 8010980:	080108ad 	.word	0x080108ad

08010984 <__sfp>:
 8010984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010986:	4607      	mov	r7, r0
 8010988:	f7ff ffac 	bl	80108e4 <__sfp_lock_acquire>
 801098c:	4b1e      	ldr	r3, [pc, #120]	; (8010a08 <__sfp+0x84>)
 801098e:	681e      	ldr	r6, [r3, #0]
 8010990:	69b3      	ldr	r3, [r6, #24]
 8010992:	b913      	cbnz	r3, 801099a <__sfp+0x16>
 8010994:	4630      	mov	r0, r6
 8010996:	f7ff ffbd 	bl	8010914 <__sinit>
 801099a:	3648      	adds	r6, #72	; 0x48
 801099c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80109a0:	3b01      	subs	r3, #1
 80109a2:	d503      	bpl.n	80109ac <__sfp+0x28>
 80109a4:	6833      	ldr	r3, [r6, #0]
 80109a6:	b30b      	cbz	r3, 80109ec <__sfp+0x68>
 80109a8:	6836      	ldr	r6, [r6, #0]
 80109aa:	e7f7      	b.n	801099c <__sfp+0x18>
 80109ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80109b0:	b9d5      	cbnz	r5, 80109e8 <__sfp+0x64>
 80109b2:	4b16      	ldr	r3, [pc, #88]	; (8010a0c <__sfp+0x88>)
 80109b4:	60e3      	str	r3, [r4, #12]
 80109b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80109ba:	6665      	str	r5, [r4, #100]	; 0x64
 80109bc:	f000 f86c 	bl	8010a98 <__retarget_lock_init_recursive>
 80109c0:	f7ff ff96 	bl	80108f0 <__sfp_lock_release>
 80109c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80109c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80109cc:	6025      	str	r5, [r4, #0]
 80109ce:	61a5      	str	r5, [r4, #24]
 80109d0:	2208      	movs	r2, #8
 80109d2:	4629      	mov	r1, r5
 80109d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80109d8:	f000 f87f 	bl	8010ada <memset>
 80109dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80109e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80109e4:	4620      	mov	r0, r4
 80109e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e8:	3468      	adds	r4, #104	; 0x68
 80109ea:	e7d9      	b.n	80109a0 <__sfp+0x1c>
 80109ec:	2104      	movs	r1, #4
 80109ee:	4638      	mov	r0, r7
 80109f0:	f7ff ff62 	bl	80108b8 <__sfmoreglue>
 80109f4:	4604      	mov	r4, r0
 80109f6:	6030      	str	r0, [r6, #0]
 80109f8:	2800      	cmp	r0, #0
 80109fa:	d1d5      	bne.n	80109a8 <__sfp+0x24>
 80109fc:	f7ff ff78 	bl	80108f0 <__sfp_lock_release>
 8010a00:	230c      	movs	r3, #12
 8010a02:	603b      	str	r3, [r7, #0]
 8010a04:	e7ee      	b.n	80109e4 <__sfp+0x60>
 8010a06:	bf00      	nop
 8010a08:	080126c8 	.word	0x080126c8
 8010a0c:	ffff0001 	.word	0xffff0001

08010a10 <_fwalk_reent>:
 8010a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a14:	4606      	mov	r6, r0
 8010a16:	4688      	mov	r8, r1
 8010a18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010a1c:	2700      	movs	r7, #0
 8010a1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010a22:	f1b9 0901 	subs.w	r9, r9, #1
 8010a26:	d505      	bpl.n	8010a34 <_fwalk_reent+0x24>
 8010a28:	6824      	ldr	r4, [r4, #0]
 8010a2a:	2c00      	cmp	r4, #0
 8010a2c:	d1f7      	bne.n	8010a1e <_fwalk_reent+0xe>
 8010a2e:	4638      	mov	r0, r7
 8010a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a34:	89ab      	ldrh	r3, [r5, #12]
 8010a36:	2b01      	cmp	r3, #1
 8010a38:	d907      	bls.n	8010a4a <_fwalk_reent+0x3a>
 8010a3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a3e:	3301      	adds	r3, #1
 8010a40:	d003      	beq.n	8010a4a <_fwalk_reent+0x3a>
 8010a42:	4629      	mov	r1, r5
 8010a44:	4630      	mov	r0, r6
 8010a46:	47c0      	blx	r8
 8010a48:	4307      	orrs	r7, r0
 8010a4a:	3568      	adds	r5, #104	; 0x68
 8010a4c:	e7e9      	b.n	8010a22 <_fwalk_reent+0x12>
	...

08010a50 <__libc_init_array>:
 8010a50:	b570      	push	{r4, r5, r6, lr}
 8010a52:	4d0d      	ldr	r5, [pc, #52]	; (8010a88 <__libc_init_array+0x38>)
 8010a54:	4c0d      	ldr	r4, [pc, #52]	; (8010a8c <__libc_init_array+0x3c>)
 8010a56:	1b64      	subs	r4, r4, r5
 8010a58:	10a4      	asrs	r4, r4, #2
 8010a5a:	2600      	movs	r6, #0
 8010a5c:	42a6      	cmp	r6, r4
 8010a5e:	d109      	bne.n	8010a74 <__libc_init_array+0x24>
 8010a60:	4d0b      	ldr	r5, [pc, #44]	; (8010a90 <__libc_init_array+0x40>)
 8010a62:	4c0c      	ldr	r4, [pc, #48]	; (8010a94 <__libc_init_array+0x44>)
 8010a64:	f001 fa7c 	bl	8011f60 <_init>
 8010a68:	1b64      	subs	r4, r4, r5
 8010a6a:	10a4      	asrs	r4, r4, #2
 8010a6c:	2600      	movs	r6, #0
 8010a6e:	42a6      	cmp	r6, r4
 8010a70:	d105      	bne.n	8010a7e <__libc_init_array+0x2e>
 8010a72:	bd70      	pop	{r4, r5, r6, pc}
 8010a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a78:	4798      	blx	r3
 8010a7a:	3601      	adds	r6, #1
 8010a7c:	e7ee      	b.n	8010a5c <__libc_init_array+0xc>
 8010a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a82:	4798      	blx	r3
 8010a84:	3601      	adds	r6, #1
 8010a86:	e7f2      	b.n	8010a6e <__libc_init_array+0x1e>
 8010a88:	080127b8 	.word	0x080127b8
 8010a8c:	080127b8 	.word	0x080127b8
 8010a90:	080127b8 	.word	0x080127b8
 8010a94:	080127bc 	.word	0x080127bc

08010a98 <__retarget_lock_init_recursive>:
 8010a98:	4770      	bx	lr

08010a9a <__retarget_lock_acquire_recursive>:
 8010a9a:	4770      	bx	lr

08010a9c <__retarget_lock_release_recursive>:
 8010a9c:	4770      	bx	lr

08010a9e <memcmp>:
 8010a9e:	b510      	push	{r4, lr}
 8010aa0:	3901      	subs	r1, #1
 8010aa2:	4402      	add	r2, r0
 8010aa4:	4290      	cmp	r0, r2
 8010aa6:	d101      	bne.n	8010aac <memcmp+0xe>
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	e005      	b.n	8010ab8 <memcmp+0x1a>
 8010aac:	7803      	ldrb	r3, [r0, #0]
 8010aae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ab2:	42a3      	cmp	r3, r4
 8010ab4:	d001      	beq.n	8010aba <memcmp+0x1c>
 8010ab6:	1b18      	subs	r0, r3, r4
 8010ab8:	bd10      	pop	{r4, pc}
 8010aba:	3001      	adds	r0, #1
 8010abc:	e7f2      	b.n	8010aa4 <memcmp+0x6>

08010abe <memcpy>:
 8010abe:	440a      	add	r2, r1
 8010ac0:	4291      	cmp	r1, r2
 8010ac2:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ac6:	d100      	bne.n	8010aca <memcpy+0xc>
 8010ac8:	4770      	bx	lr
 8010aca:	b510      	push	{r4, lr}
 8010acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ad4:	4291      	cmp	r1, r2
 8010ad6:	d1f9      	bne.n	8010acc <memcpy+0xe>
 8010ad8:	bd10      	pop	{r4, pc}

08010ada <memset>:
 8010ada:	4402      	add	r2, r0
 8010adc:	4603      	mov	r3, r0
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d100      	bne.n	8010ae4 <memset+0xa>
 8010ae2:	4770      	bx	lr
 8010ae4:	f803 1b01 	strb.w	r1, [r3], #1
 8010ae8:	e7f9      	b.n	8010ade <memset+0x4>
	...

08010aec <sbrk_aligned>:
 8010aec:	b570      	push	{r4, r5, r6, lr}
 8010aee:	4e0e      	ldr	r6, [pc, #56]	; (8010b28 <sbrk_aligned+0x3c>)
 8010af0:	460c      	mov	r4, r1
 8010af2:	6831      	ldr	r1, [r6, #0]
 8010af4:	4605      	mov	r5, r0
 8010af6:	b911      	cbnz	r1, 8010afe <sbrk_aligned+0x12>
 8010af8:	f000 f984 	bl	8010e04 <_sbrk_r>
 8010afc:	6030      	str	r0, [r6, #0]
 8010afe:	4621      	mov	r1, r4
 8010b00:	4628      	mov	r0, r5
 8010b02:	f000 f97f 	bl	8010e04 <_sbrk_r>
 8010b06:	1c43      	adds	r3, r0, #1
 8010b08:	d00a      	beq.n	8010b20 <sbrk_aligned+0x34>
 8010b0a:	1cc4      	adds	r4, r0, #3
 8010b0c:	f024 0403 	bic.w	r4, r4, #3
 8010b10:	42a0      	cmp	r0, r4
 8010b12:	d007      	beq.n	8010b24 <sbrk_aligned+0x38>
 8010b14:	1a21      	subs	r1, r4, r0
 8010b16:	4628      	mov	r0, r5
 8010b18:	f000 f974 	bl	8010e04 <_sbrk_r>
 8010b1c:	3001      	adds	r0, #1
 8010b1e:	d101      	bne.n	8010b24 <sbrk_aligned+0x38>
 8010b20:	f04f 34ff 	mov.w	r4, #4294967295
 8010b24:	4620      	mov	r0, r4
 8010b26:	bd70      	pop	{r4, r5, r6, pc}
 8010b28:	20002bb4 	.word	0x20002bb4

08010b2c <_malloc_r>:
 8010b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b30:	1ccd      	adds	r5, r1, #3
 8010b32:	f025 0503 	bic.w	r5, r5, #3
 8010b36:	3508      	adds	r5, #8
 8010b38:	2d0c      	cmp	r5, #12
 8010b3a:	bf38      	it	cc
 8010b3c:	250c      	movcc	r5, #12
 8010b3e:	2d00      	cmp	r5, #0
 8010b40:	4607      	mov	r7, r0
 8010b42:	db01      	blt.n	8010b48 <_malloc_r+0x1c>
 8010b44:	42a9      	cmp	r1, r5
 8010b46:	d905      	bls.n	8010b54 <_malloc_r+0x28>
 8010b48:	230c      	movs	r3, #12
 8010b4a:	603b      	str	r3, [r7, #0]
 8010b4c:	2600      	movs	r6, #0
 8010b4e:	4630      	mov	r0, r6
 8010b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b54:	4e2e      	ldr	r6, [pc, #184]	; (8010c10 <_malloc_r+0xe4>)
 8010b56:	f000 fc8f 	bl	8011478 <__malloc_lock>
 8010b5a:	6833      	ldr	r3, [r6, #0]
 8010b5c:	461c      	mov	r4, r3
 8010b5e:	bb34      	cbnz	r4, 8010bae <_malloc_r+0x82>
 8010b60:	4629      	mov	r1, r5
 8010b62:	4638      	mov	r0, r7
 8010b64:	f7ff ffc2 	bl	8010aec <sbrk_aligned>
 8010b68:	1c43      	adds	r3, r0, #1
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	d14d      	bne.n	8010c0a <_malloc_r+0xde>
 8010b6e:	6834      	ldr	r4, [r6, #0]
 8010b70:	4626      	mov	r6, r4
 8010b72:	2e00      	cmp	r6, #0
 8010b74:	d140      	bne.n	8010bf8 <_malloc_r+0xcc>
 8010b76:	6823      	ldr	r3, [r4, #0]
 8010b78:	4631      	mov	r1, r6
 8010b7a:	4638      	mov	r0, r7
 8010b7c:	eb04 0803 	add.w	r8, r4, r3
 8010b80:	f000 f940 	bl	8010e04 <_sbrk_r>
 8010b84:	4580      	cmp	r8, r0
 8010b86:	d13a      	bne.n	8010bfe <_malloc_r+0xd2>
 8010b88:	6821      	ldr	r1, [r4, #0]
 8010b8a:	3503      	adds	r5, #3
 8010b8c:	1a6d      	subs	r5, r5, r1
 8010b8e:	f025 0503 	bic.w	r5, r5, #3
 8010b92:	3508      	adds	r5, #8
 8010b94:	2d0c      	cmp	r5, #12
 8010b96:	bf38      	it	cc
 8010b98:	250c      	movcc	r5, #12
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	4638      	mov	r0, r7
 8010b9e:	f7ff ffa5 	bl	8010aec <sbrk_aligned>
 8010ba2:	3001      	adds	r0, #1
 8010ba4:	d02b      	beq.n	8010bfe <_malloc_r+0xd2>
 8010ba6:	6823      	ldr	r3, [r4, #0]
 8010ba8:	442b      	add	r3, r5
 8010baa:	6023      	str	r3, [r4, #0]
 8010bac:	e00e      	b.n	8010bcc <_malloc_r+0xa0>
 8010bae:	6822      	ldr	r2, [r4, #0]
 8010bb0:	1b52      	subs	r2, r2, r5
 8010bb2:	d41e      	bmi.n	8010bf2 <_malloc_r+0xc6>
 8010bb4:	2a0b      	cmp	r2, #11
 8010bb6:	d916      	bls.n	8010be6 <_malloc_r+0xba>
 8010bb8:	1961      	adds	r1, r4, r5
 8010bba:	42a3      	cmp	r3, r4
 8010bbc:	6025      	str	r5, [r4, #0]
 8010bbe:	bf18      	it	ne
 8010bc0:	6059      	strne	r1, [r3, #4]
 8010bc2:	6863      	ldr	r3, [r4, #4]
 8010bc4:	bf08      	it	eq
 8010bc6:	6031      	streq	r1, [r6, #0]
 8010bc8:	5162      	str	r2, [r4, r5]
 8010bca:	604b      	str	r3, [r1, #4]
 8010bcc:	4638      	mov	r0, r7
 8010bce:	f104 060b 	add.w	r6, r4, #11
 8010bd2:	f000 fc57 	bl	8011484 <__malloc_unlock>
 8010bd6:	f026 0607 	bic.w	r6, r6, #7
 8010bda:	1d23      	adds	r3, r4, #4
 8010bdc:	1af2      	subs	r2, r6, r3
 8010bde:	d0b6      	beq.n	8010b4e <_malloc_r+0x22>
 8010be0:	1b9b      	subs	r3, r3, r6
 8010be2:	50a3      	str	r3, [r4, r2]
 8010be4:	e7b3      	b.n	8010b4e <_malloc_r+0x22>
 8010be6:	6862      	ldr	r2, [r4, #4]
 8010be8:	42a3      	cmp	r3, r4
 8010bea:	bf0c      	ite	eq
 8010bec:	6032      	streq	r2, [r6, #0]
 8010bee:	605a      	strne	r2, [r3, #4]
 8010bf0:	e7ec      	b.n	8010bcc <_malloc_r+0xa0>
 8010bf2:	4623      	mov	r3, r4
 8010bf4:	6864      	ldr	r4, [r4, #4]
 8010bf6:	e7b2      	b.n	8010b5e <_malloc_r+0x32>
 8010bf8:	4634      	mov	r4, r6
 8010bfa:	6876      	ldr	r6, [r6, #4]
 8010bfc:	e7b9      	b.n	8010b72 <_malloc_r+0x46>
 8010bfe:	230c      	movs	r3, #12
 8010c00:	603b      	str	r3, [r7, #0]
 8010c02:	4638      	mov	r0, r7
 8010c04:	f000 fc3e 	bl	8011484 <__malloc_unlock>
 8010c08:	e7a1      	b.n	8010b4e <_malloc_r+0x22>
 8010c0a:	6025      	str	r5, [r4, #0]
 8010c0c:	e7de      	b.n	8010bcc <_malloc_r+0xa0>
 8010c0e:	bf00      	nop
 8010c10:	20002bb0 	.word	0x20002bb0

08010c14 <iprintf>:
 8010c14:	b40f      	push	{r0, r1, r2, r3}
 8010c16:	4b0a      	ldr	r3, [pc, #40]	; (8010c40 <iprintf+0x2c>)
 8010c18:	b513      	push	{r0, r1, r4, lr}
 8010c1a:	681c      	ldr	r4, [r3, #0]
 8010c1c:	b124      	cbz	r4, 8010c28 <iprintf+0x14>
 8010c1e:	69a3      	ldr	r3, [r4, #24]
 8010c20:	b913      	cbnz	r3, 8010c28 <iprintf+0x14>
 8010c22:	4620      	mov	r0, r4
 8010c24:	f7ff fe76 	bl	8010914 <__sinit>
 8010c28:	ab05      	add	r3, sp, #20
 8010c2a:	9a04      	ldr	r2, [sp, #16]
 8010c2c:	68a1      	ldr	r1, [r4, #8]
 8010c2e:	9301      	str	r3, [sp, #4]
 8010c30:	4620      	mov	r0, r4
 8010c32:	f000 fdff 	bl	8011834 <_vfiprintf_r>
 8010c36:	b002      	add	sp, #8
 8010c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c3c:	b004      	add	sp, #16
 8010c3e:	4770      	bx	lr
 8010c40:	20000018 	.word	0x20000018

08010c44 <_puts_r>:
 8010c44:	b570      	push	{r4, r5, r6, lr}
 8010c46:	460e      	mov	r6, r1
 8010c48:	4605      	mov	r5, r0
 8010c4a:	b118      	cbz	r0, 8010c54 <_puts_r+0x10>
 8010c4c:	6983      	ldr	r3, [r0, #24]
 8010c4e:	b90b      	cbnz	r3, 8010c54 <_puts_r+0x10>
 8010c50:	f7ff fe60 	bl	8010914 <__sinit>
 8010c54:	69ab      	ldr	r3, [r5, #24]
 8010c56:	68ac      	ldr	r4, [r5, #8]
 8010c58:	b913      	cbnz	r3, 8010c60 <_puts_r+0x1c>
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	f7ff fe5a 	bl	8010914 <__sinit>
 8010c60:	4b2c      	ldr	r3, [pc, #176]	; (8010d14 <_puts_r+0xd0>)
 8010c62:	429c      	cmp	r4, r3
 8010c64:	d120      	bne.n	8010ca8 <_puts_r+0x64>
 8010c66:	686c      	ldr	r4, [r5, #4]
 8010c68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c6a:	07db      	lsls	r3, r3, #31
 8010c6c:	d405      	bmi.n	8010c7a <_puts_r+0x36>
 8010c6e:	89a3      	ldrh	r3, [r4, #12]
 8010c70:	0598      	lsls	r0, r3, #22
 8010c72:	d402      	bmi.n	8010c7a <_puts_r+0x36>
 8010c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c76:	f7ff ff10 	bl	8010a9a <__retarget_lock_acquire_recursive>
 8010c7a:	89a3      	ldrh	r3, [r4, #12]
 8010c7c:	0719      	lsls	r1, r3, #28
 8010c7e:	d51d      	bpl.n	8010cbc <_puts_r+0x78>
 8010c80:	6923      	ldr	r3, [r4, #16]
 8010c82:	b1db      	cbz	r3, 8010cbc <_puts_r+0x78>
 8010c84:	3e01      	subs	r6, #1
 8010c86:	68a3      	ldr	r3, [r4, #8]
 8010c88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010c8c:	3b01      	subs	r3, #1
 8010c8e:	60a3      	str	r3, [r4, #8]
 8010c90:	bb39      	cbnz	r1, 8010ce2 <_puts_r+0x9e>
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	da38      	bge.n	8010d08 <_puts_r+0xc4>
 8010c96:	4622      	mov	r2, r4
 8010c98:	210a      	movs	r1, #10
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	f000 f9aa 	bl	8010ff4 <__swbuf_r>
 8010ca0:	3001      	adds	r0, #1
 8010ca2:	d011      	beq.n	8010cc8 <_puts_r+0x84>
 8010ca4:	250a      	movs	r5, #10
 8010ca6:	e011      	b.n	8010ccc <_puts_r+0x88>
 8010ca8:	4b1b      	ldr	r3, [pc, #108]	; (8010d18 <_puts_r+0xd4>)
 8010caa:	429c      	cmp	r4, r3
 8010cac:	d101      	bne.n	8010cb2 <_puts_r+0x6e>
 8010cae:	68ac      	ldr	r4, [r5, #8]
 8010cb0:	e7da      	b.n	8010c68 <_puts_r+0x24>
 8010cb2:	4b1a      	ldr	r3, [pc, #104]	; (8010d1c <_puts_r+0xd8>)
 8010cb4:	429c      	cmp	r4, r3
 8010cb6:	bf08      	it	eq
 8010cb8:	68ec      	ldreq	r4, [r5, #12]
 8010cba:	e7d5      	b.n	8010c68 <_puts_r+0x24>
 8010cbc:	4621      	mov	r1, r4
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	f000 f9ea 	bl	8011098 <__swsetup_r>
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	d0dd      	beq.n	8010c84 <_puts_r+0x40>
 8010cc8:	f04f 35ff 	mov.w	r5, #4294967295
 8010ccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010cce:	07da      	lsls	r2, r3, #31
 8010cd0:	d405      	bmi.n	8010cde <_puts_r+0x9a>
 8010cd2:	89a3      	ldrh	r3, [r4, #12]
 8010cd4:	059b      	lsls	r3, r3, #22
 8010cd6:	d402      	bmi.n	8010cde <_puts_r+0x9a>
 8010cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cda:	f7ff fedf 	bl	8010a9c <__retarget_lock_release_recursive>
 8010cde:	4628      	mov	r0, r5
 8010ce0:	bd70      	pop	{r4, r5, r6, pc}
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	da04      	bge.n	8010cf0 <_puts_r+0xac>
 8010ce6:	69a2      	ldr	r2, [r4, #24]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	dc06      	bgt.n	8010cfa <_puts_r+0xb6>
 8010cec:	290a      	cmp	r1, #10
 8010cee:	d004      	beq.n	8010cfa <_puts_r+0xb6>
 8010cf0:	6823      	ldr	r3, [r4, #0]
 8010cf2:	1c5a      	adds	r2, r3, #1
 8010cf4:	6022      	str	r2, [r4, #0]
 8010cf6:	7019      	strb	r1, [r3, #0]
 8010cf8:	e7c5      	b.n	8010c86 <_puts_r+0x42>
 8010cfa:	4622      	mov	r2, r4
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	f000 f979 	bl	8010ff4 <__swbuf_r>
 8010d02:	3001      	adds	r0, #1
 8010d04:	d1bf      	bne.n	8010c86 <_puts_r+0x42>
 8010d06:	e7df      	b.n	8010cc8 <_puts_r+0x84>
 8010d08:	6823      	ldr	r3, [r4, #0]
 8010d0a:	250a      	movs	r5, #10
 8010d0c:	1c5a      	adds	r2, r3, #1
 8010d0e:	6022      	str	r2, [r4, #0]
 8010d10:	701d      	strb	r5, [r3, #0]
 8010d12:	e7db      	b.n	8010ccc <_puts_r+0x88>
 8010d14:	08012688 	.word	0x08012688
 8010d18:	080126a8 	.word	0x080126a8
 8010d1c:	08012668 	.word	0x08012668

08010d20 <puts>:
 8010d20:	4b02      	ldr	r3, [pc, #8]	; (8010d2c <puts+0xc>)
 8010d22:	4601      	mov	r1, r0
 8010d24:	6818      	ldr	r0, [r3, #0]
 8010d26:	f7ff bf8d 	b.w	8010c44 <_puts_r>
 8010d2a:	bf00      	nop
 8010d2c:	20000018 	.word	0x20000018

08010d30 <cleanup_glue>:
 8010d30:	b538      	push	{r3, r4, r5, lr}
 8010d32:	460c      	mov	r4, r1
 8010d34:	6809      	ldr	r1, [r1, #0]
 8010d36:	4605      	mov	r5, r0
 8010d38:	b109      	cbz	r1, 8010d3e <cleanup_glue+0xe>
 8010d3a:	f7ff fff9 	bl	8010d30 <cleanup_glue>
 8010d3e:	4621      	mov	r1, r4
 8010d40:	4628      	mov	r0, r5
 8010d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d46:	f000 bba3 	b.w	8011490 <_free_r>
	...

08010d4c <_reclaim_reent>:
 8010d4c:	4b2c      	ldr	r3, [pc, #176]	; (8010e00 <_reclaim_reent+0xb4>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4283      	cmp	r3, r0
 8010d52:	b570      	push	{r4, r5, r6, lr}
 8010d54:	4604      	mov	r4, r0
 8010d56:	d051      	beq.n	8010dfc <_reclaim_reent+0xb0>
 8010d58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010d5a:	b143      	cbz	r3, 8010d6e <_reclaim_reent+0x22>
 8010d5c:	68db      	ldr	r3, [r3, #12]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d14a      	bne.n	8010df8 <_reclaim_reent+0xac>
 8010d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d64:	6819      	ldr	r1, [r3, #0]
 8010d66:	b111      	cbz	r1, 8010d6e <_reclaim_reent+0x22>
 8010d68:	4620      	mov	r0, r4
 8010d6a:	f000 fb91 	bl	8011490 <_free_r>
 8010d6e:	6961      	ldr	r1, [r4, #20]
 8010d70:	b111      	cbz	r1, 8010d78 <_reclaim_reent+0x2c>
 8010d72:	4620      	mov	r0, r4
 8010d74:	f000 fb8c 	bl	8011490 <_free_r>
 8010d78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010d7a:	b111      	cbz	r1, 8010d82 <_reclaim_reent+0x36>
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	f000 fb87 	bl	8011490 <_free_r>
 8010d82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010d84:	b111      	cbz	r1, 8010d8c <_reclaim_reent+0x40>
 8010d86:	4620      	mov	r0, r4
 8010d88:	f000 fb82 	bl	8011490 <_free_r>
 8010d8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010d8e:	b111      	cbz	r1, 8010d96 <_reclaim_reent+0x4a>
 8010d90:	4620      	mov	r0, r4
 8010d92:	f000 fb7d 	bl	8011490 <_free_r>
 8010d96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010d98:	b111      	cbz	r1, 8010da0 <_reclaim_reent+0x54>
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	f000 fb78 	bl	8011490 <_free_r>
 8010da0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010da2:	b111      	cbz	r1, 8010daa <_reclaim_reent+0x5e>
 8010da4:	4620      	mov	r0, r4
 8010da6:	f000 fb73 	bl	8011490 <_free_r>
 8010daa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010dac:	b111      	cbz	r1, 8010db4 <_reclaim_reent+0x68>
 8010dae:	4620      	mov	r0, r4
 8010db0:	f000 fb6e 	bl	8011490 <_free_r>
 8010db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010db6:	b111      	cbz	r1, 8010dbe <_reclaim_reent+0x72>
 8010db8:	4620      	mov	r0, r4
 8010dba:	f000 fb69 	bl	8011490 <_free_r>
 8010dbe:	69a3      	ldr	r3, [r4, #24]
 8010dc0:	b1e3      	cbz	r3, 8010dfc <_reclaim_reent+0xb0>
 8010dc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	4798      	blx	r3
 8010dc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010dca:	b1b9      	cbz	r1, 8010dfc <_reclaim_reent+0xb0>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010dd2:	f7ff bfad 	b.w	8010d30 <cleanup_glue>
 8010dd6:	5949      	ldr	r1, [r1, r5]
 8010dd8:	b941      	cbnz	r1, 8010dec <_reclaim_reent+0xa0>
 8010dda:	3504      	adds	r5, #4
 8010ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dde:	2d80      	cmp	r5, #128	; 0x80
 8010de0:	68d9      	ldr	r1, [r3, #12]
 8010de2:	d1f8      	bne.n	8010dd6 <_reclaim_reent+0x8a>
 8010de4:	4620      	mov	r0, r4
 8010de6:	f000 fb53 	bl	8011490 <_free_r>
 8010dea:	e7ba      	b.n	8010d62 <_reclaim_reent+0x16>
 8010dec:	680e      	ldr	r6, [r1, #0]
 8010dee:	4620      	mov	r0, r4
 8010df0:	f000 fb4e 	bl	8011490 <_free_r>
 8010df4:	4631      	mov	r1, r6
 8010df6:	e7ef      	b.n	8010dd8 <_reclaim_reent+0x8c>
 8010df8:	2500      	movs	r5, #0
 8010dfa:	e7ef      	b.n	8010ddc <_reclaim_reent+0x90>
 8010dfc:	bd70      	pop	{r4, r5, r6, pc}
 8010dfe:	bf00      	nop
 8010e00:	20000018 	.word	0x20000018

08010e04 <_sbrk_r>:
 8010e04:	b538      	push	{r3, r4, r5, lr}
 8010e06:	4d06      	ldr	r5, [pc, #24]	; (8010e20 <_sbrk_r+0x1c>)
 8010e08:	2300      	movs	r3, #0
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	4608      	mov	r0, r1
 8010e0e:	602b      	str	r3, [r5, #0]
 8010e10:	f7f0 ffd8 	bl	8001dc4 <_sbrk>
 8010e14:	1c43      	adds	r3, r0, #1
 8010e16:	d102      	bne.n	8010e1e <_sbrk_r+0x1a>
 8010e18:	682b      	ldr	r3, [r5, #0]
 8010e1a:	b103      	cbz	r3, 8010e1e <_sbrk_r+0x1a>
 8010e1c:	6023      	str	r3, [r4, #0]
 8010e1e:	bd38      	pop	{r3, r4, r5, pc}
 8010e20:	20002bb8 	.word	0x20002bb8

08010e24 <siprintf>:
 8010e24:	b40e      	push	{r1, r2, r3}
 8010e26:	b500      	push	{lr}
 8010e28:	b09c      	sub	sp, #112	; 0x70
 8010e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8010e2c:	9002      	str	r0, [sp, #8]
 8010e2e:	9006      	str	r0, [sp, #24]
 8010e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e34:	4809      	ldr	r0, [pc, #36]	; (8010e5c <siprintf+0x38>)
 8010e36:	9107      	str	r1, [sp, #28]
 8010e38:	9104      	str	r1, [sp, #16]
 8010e3a:	4909      	ldr	r1, [pc, #36]	; (8010e60 <siprintf+0x3c>)
 8010e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e40:	9105      	str	r1, [sp, #20]
 8010e42:	6800      	ldr	r0, [r0, #0]
 8010e44:	9301      	str	r3, [sp, #4]
 8010e46:	a902      	add	r1, sp, #8
 8010e48:	f000 fbca 	bl	80115e0 <_svfiprintf_r>
 8010e4c:	9b02      	ldr	r3, [sp, #8]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	701a      	strb	r2, [r3, #0]
 8010e52:	b01c      	add	sp, #112	; 0x70
 8010e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e58:	b003      	add	sp, #12
 8010e5a:	4770      	bx	lr
 8010e5c:	20000018 	.word	0x20000018
 8010e60:	ffff0208 	.word	0xffff0208

08010e64 <__sread>:
 8010e64:	b510      	push	{r4, lr}
 8010e66:	460c      	mov	r4, r1
 8010e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e6c:	f000 ffa6 	bl	8011dbc <_read_r>
 8010e70:	2800      	cmp	r0, #0
 8010e72:	bfab      	itete	ge
 8010e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e76:	89a3      	ldrhlt	r3, [r4, #12]
 8010e78:	181b      	addge	r3, r3, r0
 8010e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e7e:	bfac      	ite	ge
 8010e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e82:	81a3      	strhlt	r3, [r4, #12]
 8010e84:	bd10      	pop	{r4, pc}

08010e86 <__swrite>:
 8010e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e8a:	461f      	mov	r7, r3
 8010e8c:	898b      	ldrh	r3, [r1, #12]
 8010e8e:	05db      	lsls	r3, r3, #23
 8010e90:	4605      	mov	r5, r0
 8010e92:	460c      	mov	r4, r1
 8010e94:	4616      	mov	r6, r2
 8010e96:	d505      	bpl.n	8010ea4 <__swrite+0x1e>
 8010e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e9c:	2302      	movs	r3, #2
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	f000 fa6a 	bl	8011378 <_lseek_r>
 8010ea4:	89a3      	ldrh	r3, [r4, #12]
 8010ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010eae:	81a3      	strh	r3, [r4, #12]
 8010eb0:	4632      	mov	r2, r6
 8010eb2:	463b      	mov	r3, r7
 8010eb4:	4628      	mov	r0, r5
 8010eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eba:	f7fd b8a9 	b.w	800e010 <_write_r>

08010ebe <__sseek>:
 8010ebe:	b510      	push	{r4, lr}
 8010ec0:	460c      	mov	r4, r1
 8010ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ec6:	f000 fa57 	bl	8011378 <_lseek_r>
 8010eca:	1c43      	adds	r3, r0, #1
 8010ecc:	89a3      	ldrh	r3, [r4, #12]
 8010ece:	bf15      	itete	ne
 8010ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010eda:	81a3      	strheq	r3, [r4, #12]
 8010edc:	bf18      	it	ne
 8010ede:	81a3      	strhne	r3, [r4, #12]
 8010ee0:	bd10      	pop	{r4, pc}

08010ee2 <__sclose>:
 8010ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ee6:	f000 b963 	b.w	80111b0 <_close_r>

08010eea <strncpy>:
 8010eea:	b510      	push	{r4, lr}
 8010eec:	3901      	subs	r1, #1
 8010eee:	4603      	mov	r3, r0
 8010ef0:	b132      	cbz	r2, 8010f00 <strncpy+0x16>
 8010ef2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ef6:	f803 4b01 	strb.w	r4, [r3], #1
 8010efa:	3a01      	subs	r2, #1
 8010efc:	2c00      	cmp	r4, #0
 8010efe:	d1f7      	bne.n	8010ef0 <strncpy+0x6>
 8010f00:	441a      	add	r2, r3
 8010f02:	2100      	movs	r1, #0
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d100      	bne.n	8010f0a <strncpy+0x20>
 8010f08:	bd10      	pop	{r4, pc}
 8010f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8010f0e:	e7f9      	b.n	8010f04 <strncpy+0x1a>

08010f10 <strstr>:
 8010f10:	780a      	ldrb	r2, [r1, #0]
 8010f12:	b570      	push	{r4, r5, r6, lr}
 8010f14:	b96a      	cbnz	r2, 8010f32 <strstr+0x22>
 8010f16:	bd70      	pop	{r4, r5, r6, pc}
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d109      	bne.n	8010f30 <strstr+0x20>
 8010f1c:	460c      	mov	r4, r1
 8010f1e:	4605      	mov	r5, r0
 8010f20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d0f6      	beq.n	8010f16 <strstr+0x6>
 8010f28:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010f2c:	429e      	cmp	r6, r3
 8010f2e:	d0f7      	beq.n	8010f20 <strstr+0x10>
 8010f30:	3001      	adds	r0, #1
 8010f32:	7803      	ldrb	r3, [r0, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1ef      	bne.n	8010f18 <strstr+0x8>
 8010f38:	4618      	mov	r0, r3
 8010f3a:	e7ec      	b.n	8010f16 <strstr+0x6>

08010f3c <strtok>:
 8010f3c:	4b16      	ldr	r3, [pc, #88]	; (8010f98 <strtok+0x5c>)
 8010f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f40:	681e      	ldr	r6, [r3, #0]
 8010f42:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8010f44:	4605      	mov	r5, r0
 8010f46:	b9fc      	cbnz	r4, 8010f88 <strtok+0x4c>
 8010f48:	2050      	movs	r0, #80	; 0x50
 8010f4a:	9101      	str	r1, [sp, #4]
 8010f4c:	f000 fa8c 	bl	8011468 <malloc>
 8010f50:	9901      	ldr	r1, [sp, #4]
 8010f52:	65b0      	str	r0, [r6, #88]	; 0x58
 8010f54:	4602      	mov	r2, r0
 8010f56:	b920      	cbnz	r0, 8010f62 <strtok+0x26>
 8010f58:	4b10      	ldr	r3, [pc, #64]	; (8010f9c <strtok+0x60>)
 8010f5a:	4811      	ldr	r0, [pc, #68]	; (8010fa0 <strtok+0x64>)
 8010f5c:	2157      	movs	r1, #87	; 0x57
 8010f5e:	f000 f909 	bl	8011174 <__assert_func>
 8010f62:	e9c0 4400 	strd	r4, r4, [r0]
 8010f66:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010f6a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010f6e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010f72:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010f76:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010f7a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010f7e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010f82:	6184      	str	r4, [r0, #24]
 8010f84:	7704      	strb	r4, [r0, #28]
 8010f86:	6244      	str	r4, [r0, #36]	; 0x24
 8010f88:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	b002      	add	sp, #8
 8010f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f94:	f000 b806 	b.w	8010fa4 <__strtok_r>
 8010f98:	20000018 	.word	0x20000018
 8010f9c:	080126cc 	.word	0x080126cc
 8010fa0:	080126e3 	.word	0x080126e3

08010fa4 <__strtok_r>:
 8010fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fa6:	b908      	cbnz	r0, 8010fac <__strtok_r+0x8>
 8010fa8:	6810      	ldr	r0, [r2, #0]
 8010faa:	b188      	cbz	r0, 8010fd0 <__strtok_r+0x2c>
 8010fac:	4604      	mov	r4, r0
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010fb4:	460f      	mov	r7, r1
 8010fb6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010fba:	b91e      	cbnz	r6, 8010fc4 <__strtok_r+0x20>
 8010fbc:	b965      	cbnz	r5, 8010fd8 <__strtok_r+0x34>
 8010fbe:	6015      	str	r5, [r2, #0]
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	e005      	b.n	8010fd0 <__strtok_r+0x2c>
 8010fc4:	42b5      	cmp	r5, r6
 8010fc6:	d1f6      	bne.n	8010fb6 <__strtok_r+0x12>
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d1f0      	bne.n	8010fae <__strtok_r+0xa>
 8010fcc:	6014      	str	r4, [r2, #0]
 8010fce:	7003      	strb	r3, [r0, #0]
 8010fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fd2:	461c      	mov	r4, r3
 8010fd4:	e00c      	b.n	8010ff0 <__strtok_r+0x4c>
 8010fd6:	b915      	cbnz	r5, 8010fde <__strtok_r+0x3a>
 8010fd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010fdc:	460e      	mov	r6, r1
 8010fde:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010fe2:	42ab      	cmp	r3, r5
 8010fe4:	d1f7      	bne.n	8010fd6 <__strtok_r+0x32>
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d0f3      	beq.n	8010fd2 <__strtok_r+0x2e>
 8010fea:	2300      	movs	r3, #0
 8010fec:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010ff0:	6014      	str	r4, [r2, #0]
 8010ff2:	e7ed      	b.n	8010fd0 <__strtok_r+0x2c>

08010ff4 <__swbuf_r>:
 8010ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ff6:	460e      	mov	r6, r1
 8010ff8:	4614      	mov	r4, r2
 8010ffa:	4605      	mov	r5, r0
 8010ffc:	b118      	cbz	r0, 8011006 <__swbuf_r+0x12>
 8010ffe:	6983      	ldr	r3, [r0, #24]
 8011000:	b90b      	cbnz	r3, 8011006 <__swbuf_r+0x12>
 8011002:	f7ff fc87 	bl	8010914 <__sinit>
 8011006:	4b21      	ldr	r3, [pc, #132]	; (801108c <__swbuf_r+0x98>)
 8011008:	429c      	cmp	r4, r3
 801100a:	d12b      	bne.n	8011064 <__swbuf_r+0x70>
 801100c:	686c      	ldr	r4, [r5, #4]
 801100e:	69a3      	ldr	r3, [r4, #24]
 8011010:	60a3      	str	r3, [r4, #8]
 8011012:	89a3      	ldrh	r3, [r4, #12]
 8011014:	071a      	lsls	r2, r3, #28
 8011016:	d52f      	bpl.n	8011078 <__swbuf_r+0x84>
 8011018:	6923      	ldr	r3, [r4, #16]
 801101a:	b36b      	cbz	r3, 8011078 <__swbuf_r+0x84>
 801101c:	6923      	ldr	r3, [r4, #16]
 801101e:	6820      	ldr	r0, [r4, #0]
 8011020:	1ac0      	subs	r0, r0, r3
 8011022:	6963      	ldr	r3, [r4, #20]
 8011024:	b2f6      	uxtb	r6, r6
 8011026:	4283      	cmp	r3, r0
 8011028:	4637      	mov	r7, r6
 801102a:	dc04      	bgt.n	8011036 <__swbuf_r+0x42>
 801102c:	4621      	mov	r1, r4
 801102e:	4628      	mov	r0, r5
 8011030:	f000 f954 	bl	80112dc <_fflush_r>
 8011034:	bb30      	cbnz	r0, 8011084 <__swbuf_r+0x90>
 8011036:	68a3      	ldr	r3, [r4, #8]
 8011038:	3b01      	subs	r3, #1
 801103a:	60a3      	str	r3, [r4, #8]
 801103c:	6823      	ldr	r3, [r4, #0]
 801103e:	1c5a      	adds	r2, r3, #1
 8011040:	6022      	str	r2, [r4, #0]
 8011042:	701e      	strb	r6, [r3, #0]
 8011044:	6963      	ldr	r3, [r4, #20]
 8011046:	3001      	adds	r0, #1
 8011048:	4283      	cmp	r3, r0
 801104a:	d004      	beq.n	8011056 <__swbuf_r+0x62>
 801104c:	89a3      	ldrh	r3, [r4, #12]
 801104e:	07db      	lsls	r3, r3, #31
 8011050:	d506      	bpl.n	8011060 <__swbuf_r+0x6c>
 8011052:	2e0a      	cmp	r6, #10
 8011054:	d104      	bne.n	8011060 <__swbuf_r+0x6c>
 8011056:	4621      	mov	r1, r4
 8011058:	4628      	mov	r0, r5
 801105a:	f000 f93f 	bl	80112dc <_fflush_r>
 801105e:	b988      	cbnz	r0, 8011084 <__swbuf_r+0x90>
 8011060:	4638      	mov	r0, r7
 8011062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011064:	4b0a      	ldr	r3, [pc, #40]	; (8011090 <__swbuf_r+0x9c>)
 8011066:	429c      	cmp	r4, r3
 8011068:	d101      	bne.n	801106e <__swbuf_r+0x7a>
 801106a:	68ac      	ldr	r4, [r5, #8]
 801106c:	e7cf      	b.n	801100e <__swbuf_r+0x1a>
 801106e:	4b09      	ldr	r3, [pc, #36]	; (8011094 <__swbuf_r+0xa0>)
 8011070:	429c      	cmp	r4, r3
 8011072:	bf08      	it	eq
 8011074:	68ec      	ldreq	r4, [r5, #12]
 8011076:	e7ca      	b.n	801100e <__swbuf_r+0x1a>
 8011078:	4621      	mov	r1, r4
 801107a:	4628      	mov	r0, r5
 801107c:	f000 f80c 	bl	8011098 <__swsetup_r>
 8011080:	2800      	cmp	r0, #0
 8011082:	d0cb      	beq.n	801101c <__swbuf_r+0x28>
 8011084:	f04f 37ff 	mov.w	r7, #4294967295
 8011088:	e7ea      	b.n	8011060 <__swbuf_r+0x6c>
 801108a:	bf00      	nop
 801108c:	08012688 	.word	0x08012688
 8011090:	080126a8 	.word	0x080126a8
 8011094:	08012668 	.word	0x08012668

08011098 <__swsetup_r>:
 8011098:	4b32      	ldr	r3, [pc, #200]	; (8011164 <__swsetup_r+0xcc>)
 801109a:	b570      	push	{r4, r5, r6, lr}
 801109c:	681d      	ldr	r5, [r3, #0]
 801109e:	4606      	mov	r6, r0
 80110a0:	460c      	mov	r4, r1
 80110a2:	b125      	cbz	r5, 80110ae <__swsetup_r+0x16>
 80110a4:	69ab      	ldr	r3, [r5, #24]
 80110a6:	b913      	cbnz	r3, 80110ae <__swsetup_r+0x16>
 80110a8:	4628      	mov	r0, r5
 80110aa:	f7ff fc33 	bl	8010914 <__sinit>
 80110ae:	4b2e      	ldr	r3, [pc, #184]	; (8011168 <__swsetup_r+0xd0>)
 80110b0:	429c      	cmp	r4, r3
 80110b2:	d10f      	bne.n	80110d4 <__swsetup_r+0x3c>
 80110b4:	686c      	ldr	r4, [r5, #4]
 80110b6:	89a3      	ldrh	r3, [r4, #12]
 80110b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110bc:	0719      	lsls	r1, r3, #28
 80110be:	d42c      	bmi.n	801111a <__swsetup_r+0x82>
 80110c0:	06dd      	lsls	r5, r3, #27
 80110c2:	d411      	bmi.n	80110e8 <__swsetup_r+0x50>
 80110c4:	2309      	movs	r3, #9
 80110c6:	6033      	str	r3, [r6, #0]
 80110c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110cc:	81a3      	strh	r3, [r4, #12]
 80110ce:	f04f 30ff 	mov.w	r0, #4294967295
 80110d2:	e03e      	b.n	8011152 <__swsetup_r+0xba>
 80110d4:	4b25      	ldr	r3, [pc, #148]	; (801116c <__swsetup_r+0xd4>)
 80110d6:	429c      	cmp	r4, r3
 80110d8:	d101      	bne.n	80110de <__swsetup_r+0x46>
 80110da:	68ac      	ldr	r4, [r5, #8]
 80110dc:	e7eb      	b.n	80110b6 <__swsetup_r+0x1e>
 80110de:	4b24      	ldr	r3, [pc, #144]	; (8011170 <__swsetup_r+0xd8>)
 80110e0:	429c      	cmp	r4, r3
 80110e2:	bf08      	it	eq
 80110e4:	68ec      	ldreq	r4, [r5, #12]
 80110e6:	e7e6      	b.n	80110b6 <__swsetup_r+0x1e>
 80110e8:	0758      	lsls	r0, r3, #29
 80110ea:	d512      	bpl.n	8011112 <__swsetup_r+0x7a>
 80110ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110ee:	b141      	cbz	r1, 8011102 <__swsetup_r+0x6a>
 80110f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110f4:	4299      	cmp	r1, r3
 80110f6:	d002      	beq.n	80110fe <__swsetup_r+0x66>
 80110f8:	4630      	mov	r0, r6
 80110fa:	f000 f9c9 	bl	8011490 <_free_r>
 80110fe:	2300      	movs	r3, #0
 8011100:	6363      	str	r3, [r4, #52]	; 0x34
 8011102:	89a3      	ldrh	r3, [r4, #12]
 8011104:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011108:	81a3      	strh	r3, [r4, #12]
 801110a:	2300      	movs	r3, #0
 801110c:	6063      	str	r3, [r4, #4]
 801110e:	6923      	ldr	r3, [r4, #16]
 8011110:	6023      	str	r3, [r4, #0]
 8011112:	89a3      	ldrh	r3, [r4, #12]
 8011114:	f043 0308 	orr.w	r3, r3, #8
 8011118:	81a3      	strh	r3, [r4, #12]
 801111a:	6923      	ldr	r3, [r4, #16]
 801111c:	b94b      	cbnz	r3, 8011132 <__swsetup_r+0x9a>
 801111e:	89a3      	ldrh	r3, [r4, #12]
 8011120:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011128:	d003      	beq.n	8011132 <__swsetup_r+0x9a>
 801112a:	4621      	mov	r1, r4
 801112c:	4630      	mov	r0, r6
 801112e:	f000 f95b 	bl	80113e8 <__smakebuf_r>
 8011132:	89a0      	ldrh	r0, [r4, #12]
 8011134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011138:	f010 0301 	ands.w	r3, r0, #1
 801113c:	d00a      	beq.n	8011154 <__swsetup_r+0xbc>
 801113e:	2300      	movs	r3, #0
 8011140:	60a3      	str	r3, [r4, #8]
 8011142:	6963      	ldr	r3, [r4, #20]
 8011144:	425b      	negs	r3, r3
 8011146:	61a3      	str	r3, [r4, #24]
 8011148:	6923      	ldr	r3, [r4, #16]
 801114a:	b943      	cbnz	r3, 801115e <__swsetup_r+0xc6>
 801114c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011150:	d1ba      	bne.n	80110c8 <__swsetup_r+0x30>
 8011152:	bd70      	pop	{r4, r5, r6, pc}
 8011154:	0781      	lsls	r1, r0, #30
 8011156:	bf58      	it	pl
 8011158:	6963      	ldrpl	r3, [r4, #20]
 801115a:	60a3      	str	r3, [r4, #8]
 801115c:	e7f4      	b.n	8011148 <__swsetup_r+0xb0>
 801115e:	2000      	movs	r0, #0
 8011160:	e7f7      	b.n	8011152 <__swsetup_r+0xba>
 8011162:	bf00      	nop
 8011164:	20000018 	.word	0x20000018
 8011168:	08012688 	.word	0x08012688
 801116c:	080126a8 	.word	0x080126a8
 8011170:	08012668 	.word	0x08012668

08011174 <__assert_func>:
 8011174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011176:	4614      	mov	r4, r2
 8011178:	461a      	mov	r2, r3
 801117a:	4b09      	ldr	r3, [pc, #36]	; (80111a0 <__assert_func+0x2c>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	4605      	mov	r5, r0
 8011180:	68d8      	ldr	r0, [r3, #12]
 8011182:	b14c      	cbz	r4, 8011198 <__assert_func+0x24>
 8011184:	4b07      	ldr	r3, [pc, #28]	; (80111a4 <__assert_func+0x30>)
 8011186:	9100      	str	r1, [sp, #0]
 8011188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801118c:	4906      	ldr	r1, [pc, #24]	; (80111a8 <__assert_func+0x34>)
 801118e:	462b      	mov	r3, r5
 8011190:	f000 f8e0 	bl	8011354 <fiprintf>
 8011194:	f000 fe24 	bl	8011de0 <abort>
 8011198:	4b04      	ldr	r3, [pc, #16]	; (80111ac <__assert_func+0x38>)
 801119a:	461c      	mov	r4, r3
 801119c:	e7f3      	b.n	8011186 <__assert_func+0x12>
 801119e:	bf00      	nop
 80111a0:	20000018 	.word	0x20000018
 80111a4:	08012740 	.word	0x08012740
 80111a8:	0801274d 	.word	0x0801274d
 80111ac:	0801277b 	.word	0x0801277b

080111b0 <_close_r>:
 80111b0:	b538      	push	{r3, r4, r5, lr}
 80111b2:	4d06      	ldr	r5, [pc, #24]	; (80111cc <_close_r+0x1c>)
 80111b4:	2300      	movs	r3, #0
 80111b6:	4604      	mov	r4, r0
 80111b8:	4608      	mov	r0, r1
 80111ba:	602b      	str	r3, [r5, #0]
 80111bc:	f7f0 fdcd 	bl	8001d5a <_close>
 80111c0:	1c43      	adds	r3, r0, #1
 80111c2:	d102      	bne.n	80111ca <_close_r+0x1a>
 80111c4:	682b      	ldr	r3, [r5, #0]
 80111c6:	b103      	cbz	r3, 80111ca <_close_r+0x1a>
 80111c8:	6023      	str	r3, [r4, #0]
 80111ca:	bd38      	pop	{r3, r4, r5, pc}
 80111cc:	20002bb8 	.word	0x20002bb8

080111d0 <__sflush_r>:
 80111d0:	898a      	ldrh	r2, [r1, #12]
 80111d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111d6:	4605      	mov	r5, r0
 80111d8:	0710      	lsls	r0, r2, #28
 80111da:	460c      	mov	r4, r1
 80111dc:	d458      	bmi.n	8011290 <__sflush_r+0xc0>
 80111de:	684b      	ldr	r3, [r1, #4]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	dc05      	bgt.n	80111f0 <__sflush_r+0x20>
 80111e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	dc02      	bgt.n	80111f0 <__sflush_r+0x20>
 80111ea:	2000      	movs	r0, #0
 80111ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111f2:	2e00      	cmp	r6, #0
 80111f4:	d0f9      	beq.n	80111ea <__sflush_r+0x1a>
 80111f6:	2300      	movs	r3, #0
 80111f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80111fc:	682f      	ldr	r7, [r5, #0]
 80111fe:	602b      	str	r3, [r5, #0]
 8011200:	d032      	beq.n	8011268 <__sflush_r+0x98>
 8011202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011204:	89a3      	ldrh	r3, [r4, #12]
 8011206:	075a      	lsls	r2, r3, #29
 8011208:	d505      	bpl.n	8011216 <__sflush_r+0x46>
 801120a:	6863      	ldr	r3, [r4, #4]
 801120c:	1ac0      	subs	r0, r0, r3
 801120e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011210:	b10b      	cbz	r3, 8011216 <__sflush_r+0x46>
 8011212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011214:	1ac0      	subs	r0, r0, r3
 8011216:	2300      	movs	r3, #0
 8011218:	4602      	mov	r2, r0
 801121a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801121c:	6a21      	ldr	r1, [r4, #32]
 801121e:	4628      	mov	r0, r5
 8011220:	47b0      	blx	r6
 8011222:	1c43      	adds	r3, r0, #1
 8011224:	89a3      	ldrh	r3, [r4, #12]
 8011226:	d106      	bne.n	8011236 <__sflush_r+0x66>
 8011228:	6829      	ldr	r1, [r5, #0]
 801122a:	291d      	cmp	r1, #29
 801122c:	d82c      	bhi.n	8011288 <__sflush_r+0xb8>
 801122e:	4a2a      	ldr	r2, [pc, #168]	; (80112d8 <__sflush_r+0x108>)
 8011230:	40ca      	lsrs	r2, r1
 8011232:	07d6      	lsls	r6, r2, #31
 8011234:	d528      	bpl.n	8011288 <__sflush_r+0xb8>
 8011236:	2200      	movs	r2, #0
 8011238:	6062      	str	r2, [r4, #4]
 801123a:	04d9      	lsls	r1, r3, #19
 801123c:	6922      	ldr	r2, [r4, #16]
 801123e:	6022      	str	r2, [r4, #0]
 8011240:	d504      	bpl.n	801124c <__sflush_r+0x7c>
 8011242:	1c42      	adds	r2, r0, #1
 8011244:	d101      	bne.n	801124a <__sflush_r+0x7a>
 8011246:	682b      	ldr	r3, [r5, #0]
 8011248:	b903      	cbnz	r3, 801124c <__sflush_r+0x7c>
 801124a:	6560      	str	r0, [r4, #84]	; 0x54
 801124c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801124e:	602f      	str	r7, [r5, #0]
 8011250:	2900      	cmp	r1, #0
 8011252:	d0ca      	beq.n	80111ea <__sflush_r+0x1a>
 8011254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011258:	4299      	cmp	r1, r3
 801125a:	d002      	beq.n	8011262 <__sflush_r+0x92>
 801125c:	4628      	mov	r0, r5
 801125e:	f000 f917 	bl	8011490 <_free_r>
 8011262:	2000      	movs	r0, #0
 8011264:	6360      	str	r0, [r4, #52]	; 0x34
 8011266:	e7c1      	b.n	80111ec <__sflush_r+0x1c>
 8011268:	6a21      	ldr	r1, [r4, #32]
 801126a:	2301      	movs	r3, #1
 801126c:	4628      	mov	r0, r5
 801126e:	47b0      	blx	r6
 8011270:	1c41      	adds	r1, r0, #1
 8011272:	d1c7      	bne.n	8011204 <__sflush_r+0x34>
 8011274:	682b      	ldr	r3, [r5, #0]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d0c4      	beq.n	8011204 <__sflush_r+0x34>
 801127a:	2b1d      	cmp	r3, #29
 801127c:	d001      	beq.n	8011282 <__sflush_r+0xb2>
 801127e:	2b16      	cmp	r3, #22
 8011280:	d101      	bne.n	8011286 <__sflush_r+0xb6>
 8011282:	602f      	str	r7, [r5, #0]
 8011284:	e7b1      	b.n	80111ea <__sflush_r+0x1a>
 8011286:	89a3      	ldrh	r3, [r4, #12]
 8011288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801128c:	81a3      	strh	r3, [r4, #12]
 801128e:	e7ad      	b.n	80111ec <__sflush_r+0x1c>
 8011290:	690f      	ldr	r7, [r1, #16]
 8011292:	2f00      	cmp	r7, #0
 8011294:	d0a9      	beq.n	80111ea <__sflush_r+0x1a>
 8011296:	0793      	lsls	r3, r2, #30
 8011298:	680e      	ldr	r6, [r1, #0]
 801129a:	bf08      	it	eq
 801129c:	694b      	ldreq	r3, [r1, #20]
 801129e:	600f      	str	r7, [r1, #0]
 80112a0:	bf18      	it	ne
 80112a2:	2300      	movne	r3, #0
 80112a4:	eba6 0807 	sub.w	r8, r6, r7
 80112a8:	608b      	str	r3, [r1, #8]
 80112aa:	f1b8 0f00 	cmp.w	r8, #0
 80112ae:	dd9c      	ble.n	80111ea <__sflush_r+0x1a>
 80112b0:	6a21      	ldr	r1, [r4, #32]
 80112b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80112b4:	4643      	mov	r3, r8
 80112b6:	463a      	mov	r2, r7
 80112b8:	4628      	mov	r0, r5
 80112ba:	47b0      	blx	r6
 80112bc:	2800      	cmp	r0, #0
 80112be:	dc06      	bgt.n	80112ce <__sflush_r+0xfe>
 80112c0:	89a3      	ldrh	r3, [r4, #12]
 80112c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112c6:	81a3      	strh	r3, [r4, #12]
 80112c8:	f04f 30ff 	mov.w	r0, #4294967295
 80112cc:	e78e      	b.n	80111ec <__sflush_r+0x1c>
 80112ce:	4407      	add	r7, r0
 80112d0:	eba8 0800 	sub.w	r8, r8, r0
 80112d4:	e7e9      	b.n	80112aa <__sflush_r+0xda>
 80112d6:	bf00      	nop
 80112d8:	20400001 	.word	0x20400001

080112dc <_fflush_r>:
 80112dc:	b538      	push	{r3, r4, r5, lr}
 80112de:	690b      	ldr	r3, [r1, #16]
 80112e0:	4605      	mov	r5, r0
 80112e2:	460c      	mov	r4, r1
 80112e4:	b913      	cbnz	r3, 80112ec <_fflush_r+0x10>
 80112e6:	2500      	movs	r5, #0
 80112e8:	4628      	mov	r0, r5
 80112ea:	bd38      	pop	{r3, r4, r5, pc}
 80112ec:	b118      	cbz	r0, 80112f6 <_fflush_r+0x1a>
 80112ee:	6983      	ldr	r3, [r0, #24]
 80112f0:	b90b      	cbnz	r3, 80112f6 <_fflush_r+0x1a>
 80112f2:	f7ff fb0f 	bl	8010914 <__sinit>
 80112f6:	4b14      	ldr	r3, [pc, #80]	; (8011348 <_fflush_r+0x6c>)
 80112f8:	429c      	cmp	r4, r3
 80112fa:	d11b      	bne.n	8011334 <_fflush_r+0x58>
 80112fc:	686c      	ldr	r4, [r5, #4]
 80112fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d0ef      	beq.n	80112e6 <_fflush_r+0xa>
 8011306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011308:	07d0      	lsls	r0, r2, #31
 801130a:	d404      	bmi.n	8011316 <_fflush_r+0x3a>
 801130c:	0599      	lsls	r1, r3, #22
 801130e:	d402      	bmi.n	8011316 <_fflush_r+0x3a>
 8011310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011312:	f7ff fbc2 	bl	8010a9a <__retarget_lock_acquire_recursive>
 8011316:	4628      	mov	r0, r5
 8011318:	4621      	mov	r1, r4
 801131a:	f7ff ff59 	bl	80111d0 <__sflush_r>
 801131e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011320:	07da      	lsls	r2, r3, #31
 8011322:	4605      	mov	r5, r0
 8011324:	d4e0      	bmi.n	80112e8 <_fflush_r+0xc>
 8011326:	89a3      	ldrh	r3, [r4, #12]
 8011328:	059b      	lsls	r3, r3, #22
 801132a:	d4dd      	bmi.n	80112e8 <_fflush_r+0xc>
 801132c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801132e:	f7ff fbb5 	bl	8010a9c <__retarget_lock_release_recursive>
 8011332:	e7d9      	b.n	80112e8 <_fflush_r+0xc>
 8011334:	4b05      	ldr	r3, [pc, #20]	; (801134c <_fflush_r+0x70>)
 8011336:	429c      	cmp	r4, r3
 8011338:	d101      	bne.n	801133e <_fflush_r+0x62>
 801133a:	68ac      	ldr	r4, [r5, #8]
 801133c:	e7df      	b.n	80112fe <_fflush_r+0x22>
 801133e:	4b04      	ldr	r3, [pc, #16]	; (8011350 <_fflush_r+0x74>)
 8011340:	429c      	cmp	r4, r3
 8011342:	bf08      	it	eq
 8011344:	68ec      	ldreq	r4, [r5, #12]
 8011346:	e7da      	b.n	80112fe <_fflush_r+0x22>
 8011348:	08012688 	.word	0x08012688
 801134c:	080126a8 	.word	0x080126a8
 8011350:	08012668 	.word	0x08012668

08011354 <fiprintf>:
 8011354:	b40e      	push	{r1, r2, r3}
 8011356:	b503      	push	{r0, r1, lr}
 8011358:	4601      	mov	r1, r0
 801135a:	ab03      	add	r3, sp, #12
 801135c:	4805      	ldr	r0, [pc, #20]	; (8011374 <fiprintf+0x20>)
 801135e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011362:	6800      	ldr	r0, [r0, #0]
 8011364:	9301      	str	r3, [sp, #4]
 8011366:	f000 fa65 	bl	8011834 <_vfiprintf_r>
 801136a:	b002      	add	sp, #8
 801136c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011370:	b003      	add	sp, #12
 8011372:	4770      	bx	lr
 8011374:	20000018 	.word	0x20000018

08011378 <_lseek_r>:
 8011378:	b538      	push	{r3, r4, r5, lr}
 801137a:	4d07      	ldr	r5, [pc, #28]	; (8011398 <_lseek_r+0x20>)
 801137c:	4604      	mov	r4, r0
 801137e:	4608      	mov	r0, r1
 8011380:	4611      	mov	r1, r2
 8011382:	2200      	movs	r2, #0
 8011384:	602a      	str	r2, [r5, #0]
 8011386:	461a      	mov	r2, r3
 8011388:	f7f0 fd0e 	bl	8001da8 <_lseek>
 801138c:	1c43      	adds	r3, r0, #1
 801138e:	d102      	bne.n	8011396 <_lseek_r+0x1e>
 8011390:	682b      	ldr	r3, [r5, #0]
 8011392:	b103      	cbz	r3, 8011396 <_lseek_r+0x1e>
 8011394:	6023      	str	r3, [r4, #0]
 8011396:	bd38      	pop	{r3, r4, r5, pc}
 8011398:	20002bb8 	.word	0x20002bb8

0801139c <__swhatbuf_r>:
 801139c:	b570      	push	{r4, r5, r6, lr}
 801139e:	460e      	mov	r6, r1
 80113a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113a4:	2900      	cmp	r1, #0
 80113a6:	b096      	sub	sp, #88	; 0x58
 80113a8:	4614      	mov	r4, r2
 80113aa:	461d      	mov	r5, r3
 80113ac:	da08      	bge.n	80113c0 <__swhatbuf_r+0x24>
 80113ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80113b2:	2200      	movs	r2, #0
 80113b4:	602a      	str	r2, [r5, #0]
 80113b6:	061a      	lsls	r2, r3, #24
 80113b8:	d410      	bmi.n	80113dc <__swhatbuf_r+0x40>
 80113ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113be:	e00e      	b.n	80113de <__swhatbuf_r+0x42>
 80113c0:	466a      	mov	r2, sp
 80113c2:	f000 fd15 	bl	8011df0 <_fstat_r>
 80113c6:	2800      	cmp	r0, #0
 80113c8:	dbf1      	blt.n	80113ae <__swhatbuf_r+0x12>
 80113ca:	9a01      	ldr	r2, [sp, #4]
 80113cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80113d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80113d4:	425a      	negs	r2, r3
 80113d6:	415a      	adcs	r2, r3
 80113d8:	602a      	str	r2, [r5, #0]
 80113da:	e7ee      	b.n	80113ba <__swhatbuf_r+0x1e>
 80113dc:	2340      	movs	r3, #64	; 0x40
 80113de:	2000      	movs	r0, #0
 80113e0:	6023      	str	r3, [r4, #0]
 80113e2:	b016      	add	sp, #88	; 0x58
 80113e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080113e8 <__smakebuf_r>:
 80113e8:	898b      	ldrh	r3, [r1, #12]
 80113ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113ec:	079d      	lsls	r5, r3, #30
 80113ee:	4606      	mov	r6, r0
 80113f0:	460c      	mov	r4, r1
 80113f2:	d507      	bpl.n	8011404 <__smakebuf_r+0x1c>
 80113f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113f8:	6023      	str	r3, [r4, #0]
 80113fa:	6123      	str	r3, [r4, #16]
 80113fc:	2301      	movs	r3, #1
 80113fe:	6163      	str	r3, [r4, #20]
 8011400:	b002      	add	sp, #8
 8011402:	bd70      	pop	{r4, r5, r6, pc}
 8011404:	ab01      	add	r3, sp, #4
 8011406:	466a      	mov	r2, sp
 8011408:	f7ff ffc8 	bl	801139c <__swhatbuf_r>
 801140c:	9900      	ldr	r1, [sp, #0]
 801140e:	4605      	mov	r5, r0
 8011410:	4630      	mov	r0, r6
 8011412:	f7ff fb8b 	bl	8010b2c <_malloc_r>
 8011416:	b948      	cbnz	r0, 801142c <__smakebuf_r+0x44>
 8011418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801141c:	059a      	lsls	r2, r3, #22
 801141e:	d4ef      	bmi.n	8011400 <__smakebuf_r+0x18>
 8011420:	f023 0303 	bic.w	r3, r3, #3
 8011424:	f043 0302 	orr.w	r3, r3, #2
 8011428:	81a3      	strh	r3, [r4, #12]
 801142a:	e7e3      	b.n	80113f4 <__smakebuf_r+0xc>
 801142c:	4b0d      	ldr	r3, [pc, #52]	; (8011464 <__smakebuf_r+0x7c>)
 801142e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011430:	89a3      	ldrh	r3, [r4, #12]
 8011432:	6020      	str	r0, [r4, #0]
 8011434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011438:	81a3      	strh	r3, [r4, #12]
 801143a:	9b00      	ldr	r3, [sp, #0]
 801143c:	6163      	str	r3, [r4, #20]
 801143e:	9b01      	ldr	r3, [sp, #4]
 8011440:	6120      	str	r0, [r4, #16]
 8011442:	b15b      	cbz	r3, 801145c <__smakebuf_r+0x74>
 8011444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011448:	4630      	mov	r0, r6
 801144a:	f000 fce3 	bl	8011e14 <_isatty_r>
 801144e:	b128      	cbz	r0, 801145c <__smakebuf_r+0x74>
 8011450:	89a3      	ldrh	r3, [r4, #12]
 8011452:	f023 0303 	bic.w	r3, r3, #3
 8011456:	f043 0301 	orr.w	r3, r3, #1
 801145a:	81a3      	strh	r3, [r4, #12]
 801145c:	89a0      	ldrh	r0, [r4, #12]
 801145e:	4305      	orrs	r5, r0
 8011460:	81a5      	strh	r5, [r4, #12]
 8011462:	e7cd      	b.n	8011400 <__smakebuf_r+0x18>
 8011464:	080108ad 	.word	0x080108ad

08011468 <malloc>:
 8011468:	4b02      	ldr	r3, [pc, #8]	; (8011474 <malloc+0xc>)
 801146a:	4601      	mov	r1, r0
 801146c:	6818      	ldr	r0, [r3, #0]
 801146e:	f7ff bb5d 	b.w	8010b2c <_malloc_r>
 8011472:	bf00      	nop
 8011474:	20000018 	.word	0x20000018

08011478 <__malloc_lock>:
 8011478:	4801      	ldr	r0, [pc, #4]	; (8011480 <__malloc_lock+0x8>)
 801147a:	f7ff bb0e 	b.w	8010a9a <__retarget_lock_acquire_recursive>
 801147e:	bf00      	nop
 8011480:	20002bac 	.word	0x20002bac

08011484 <__malloc_unlock>:
 8011484:	4801      	ldr	r0, [pc, #4]	; (801148c <__malloc_unlock+0x8>)
 8011486:	f7ff bb09 	b.w	8010a9c <__retarget_lock_release_recursive>
 801148a:	bf00      	nop
 801148c:	20002bac 	.word	0x20002bac

08011490 <_free_r>:
 8011490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011492:	2900      	cmp	r1, #0
 8011494:	d044      	beq.n	8011520 <_free_r+0x90>
 8011496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801149a:	9001      	str	r0, [sp, #4]
 801149c:	2b00      	cmp	r3, #0
 801149e:	f1a1 0404 	sub.w	r4, r1, #4
 80114a2:	bfb8      	it	lt
 80114a4:	18e4      	addlt	r4, r4, r3
 80114a6:	f7ff ffe7 	bl	8011478 <__malloc_lock>
 80114aa:	4a1e      	ldr	r2, [pc, #120]	; (8011524 <_free_r+0x94>)
 80114ac:	9801      	ldr	r0, [sp, #4]
 80114ae:	6813      	ldr	r3, [r2, #0]
 80114b0:	b933      	cbnz	r3, 80114c0 <_free_r+0x30>
 80114b2:	6063      	str	r3, [r4, #4]
 80114b4:	6014      	str	r4, [r2, #0]
 80114b6:	b003      	add	sp, #12
 80114b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114bc:	f7ff bfe2 	b.w	8011484 <__malloc_unlock>
 80114c0:	42a3      	cmp	r3, r4
 80114c2:	d908      	bls.n	80114d6 <_free_r+0x46>
 80114c4:	6825      	ldr	r5, [r4, #0]
 80114c6:	1961      	adds	r1, r4, r5
 80114c8:	428b      	cmp	r3, r1
 80114ca:	bf01      	itttt	eq
 80114cc:	6819      	ldreq	r1, [r3, #0]
 80114ce:	685b      	ldreq	r3, [r3, #4]
 80114d0:	1949      	addeq	r1, r1, r5
 80114d2:	6021      	streq	r1, [r4, #0]
 80114d4:	e7ed      	b.n	80114b2 <_free_r+0x22>
 80114d6:	461a      	mov	r2, r3
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	b10b      	cbz	r3, 80114e0 <_free_r+0x50>
 80114dc:	42a3      	cmp	r3, r4
 80114de:	d9fa      	bls.n	80114d6 <_free_r+0x46>
 80114e0:	6811      	ldr	r1, [r2, #0]
 80114e2:	1855      	adds	r5, r2, r1
 80114e4:	42a5      	cmp	r5, r4
 80114e6:	d10b      	bne.n	8011500 <_free_r+0x70>
 80114e8:	6824      	ldr	r4, [r4, #0]
 80114ea:	4421      	add	r1, r4
 80114ec:	1854      	adds	r4, r2, r1
 80114ee:	42a3      	cmp	r3, r4
 80114f0:	6011      	str	r1, [r2, #0]
 80114f2:	d1e0      	bne.n	80114b6 <_free_r+0x26>
 80114f4:	681c      	ldr	r4, [r3, #0]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	6053      	str	r3, [r2, #4]
 80114fa:	4421      	add	r1, r4
 80114fc:	6011      	str	r1, [r2, #0]
 80114fe:	e7da      	b.n	80114b6 <_free_r+0x26>
 8011500:	d902      	bls.n	8011508 <_free_r+0x78>
 8011502:	230c      	movs	r3, #12
 8011504:	6003      	str	r3, [r0, #0]
 8011506:	e7d6      	b.n	80114b6 <_free_r+0x26>
 8011508:	6825      	ldr	r5, [r4, #0]
 801150a:	1961      	adds	r1, r4, r5
 801150c:	428b      	cmp	r3, r1
 801150e:	bf04      	itt	eq
 8011510:	6819      	ldreq	r1, [r3, #0]
 8011512:	685b      	ldreq	r3, [r3, #4]
 8011514:	6063      	str	r3, [r4, #4]
 8011516:	bf04      	itt	eq
 8011518:	1949      	addeq	r1, r1, r5
 801151a:	6021      	streq	r1, [r4, #0]
 801151c:	6054      	str	r4, [r2, #4]
 801151e:	e7ca      	b.n	80114b6 <_free_r+0x26>
 8011520:	b003      	add	sp, #12
 8011522:	bd30      	pop	{r4, r5, pc}
 8011524:	20002bb0 	.word	0x20002bb0

08011528 <__ssputs_r>:
 8011528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801152c:	688e      	ldr	r6, [r1, #8]
 801152e:	429e      	cmp	r6, r3
 8011530:	4682      	mov	sl, r0
 8011532:	460c      	mov	r4, r1
 8011534:	4690      	mov	r8, r2
 8011536:	461f      	mov	r7, r3
 8011538:	d838      	bhi.n	80115ac <__ssputs_r+0x84>
 801153a:	898a      	ldrh	r2, [r1, #12]
 801153c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011540:	d032      	beq.n	80115a8 <__ssputs_r+0x80>
 8011542:	6825      	ldr	r5, [r4, #0]
 8011544:	6909      	ldr	r1, [r1, #16]
 8011546:	eba5 0901 	sub.w	r9, r5, r1
 801154a:	6965      	ldr	r5, [r4, #20]
 801154c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011554:	3301      	adds	r3, #1
 8011556:	444b      	add	r3, r9
 8011558:	106d      	asrs	r5, r5, #1
 801155a:	429d      	cmp	r5, r3
 801155c:	bf38      	it	cc
 801155e:	461d      	movcc	r5, r3
 8011560:	0553      	lsls	r3, r2, #21
 8011562:	d531      	bpl.n	80115c8 <__ssputs_r+0xa0>
 8011564:	4629      	mov	r1, r5
 8011566:	f7ff fae1 	bl	8010b2c <_malloc_r>
 801156a:	4606      	mov	r6, r0
 801156c:	b950      	cbnz	r0, 8011584 <__ssputs_r+0x5c>
 801156e:	230c      	movs	r3, #12
 8011570:	f8ca 3000 	str.w	r3, [sl]
 8011574:	89a3      	ldrh	r3, [r4, #12]
 8011576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801157a:	81a3      	strh	r3, [r4, #12]
 801157c:	f04f 30ff 	mov.w	r0, #4294967295
 8011580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011584:	6921      	ldr	r1, [r4, #16]
 8011586:	464a      	mov	r2, r9
 8011588:	f7ff fa99 	bl	8010abe <memcpy>
 801158c:	89a3      	ldrh	r3, [r4, #12]
 801158e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011596:	81a3      	strh	r3, [r4, #12]
 8011598:	6126      	str	r6, [r4, #16]
 801159a:	6165      	str	r5, [r4, #20]
 801159c:	444e      	add	r6, r9
 801159e:	eba5 0509 	sub.w	r5, r5, r9
 80115a2:	6026      	str	r6, [r4, #0]
 80115a4:	60a5      	str	r5, [r4, #8]
 80115a6:	463e      	mov	r6, r7
 80115a8:	42be      	cmp	r6, r7
 80115aa:	d900      	bls.n	80115ae <__ssputs_r+0x86>
 80115ac:	463e      	mov	r6, r7
 80115ae:	6820      	ldr	r0, [r4, #0]
 80115b0:	4632      	mov	r2, r6
 80115b2:	4641      	mov	r1, r8
 80115b4:	f000 fc3e 	bl	8011e34 <memmove>
 80115b8:	68a3      	ldr	r3, [r4, #8]
 80115ba:	1b9b      	subs	r3, r3, r6
 80115bc:	60a3      	str	r3, [r4, #8]
 80115be:	6823      	ldr	r3, [r4, #0]
 80115c0:	4433      	add	r3, r6
 80115c2:	6023      	str	r3, [r4, #0]
 80115c4:	2000      	movs	r0, #0
 80115c6:	e7db      	b.n	8011580 <__ssputs_r+0x58>
 80115c8:	462a      	mov	r2, r5
 80115ca:	f000 fc4d 	bl	8011e68 <_realloc_r>
 80115ce:	4606      	mov	r6, r0
 80115d0:	2800      	cmp	r0, #0
 80115d2:	d1e1      	bne.n	8011598 <__ssputs_r+0x70>
 80115d4:	6921      	ldr	r1, [r4, #16]
 80115d6:	4650      	mov	r0, sl
 80115d8:	f7ff ff5a 	bl	8011490 <_free_r>
 80115dc:	e7c7      	b.n	801156e <__ssputs_r+0x46>
	...

080115e0 <_svfiprintf_r>:
 80115e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e4:	4698      	mov	r8, r3
 80115e6:	898b      	ldrh	r3, [r1, #12]
 80115e8:	061b      	lsls	r3, r3, #24
 80115ea:	b09d      	sub	sp, #116	; 0x74
 80115ec:	4607      	mov	r7, r0
 80115ee:	460d      	mov	r5, r1
 80115f0:	4614      	mov	r4, r2
 80115f2:	d50e      	bpl.n	8011612 <_svfiprintf_r+0x32>
 80115f4:	690b      	ldr	r3, [r1, #16]
 80115f6:	b963      	cbnz	r3, 8011612 <_svfiprintf_r+0x32>
 80115f8:	2140      	movs	r1, #64	; 0x40
 80115fa:	f7ff fa97 	bl	8010b2c <_malloc_r>
 80115fe:	6028      	str	r0, [r5, #0]
 8011600:	6128      	str	r0, [r5, #16]
 8011602:	b920      	cbnz	r0, 801160e <_svfiprintf_r+0x2e>
 8011604:	230c      	movs	r3, #12
 8011606:	603b      	str	r3, [r7, #0]
 8011608:	f04f 30ff 	mov.w	r0, #4294967295
 801160c:	e0d1      	b.n	80117b2 <_svfiprintf_r+0x1d2>
 801160e:	2340      	movs	r3, #64	; 0x40
 8011610:	616b      	str	r3, [r5, #20]
 8011612:	2300      	movs	r3, #0
 8011614:	9309      	str	r3, [sp, #36]	; 0x24
 8011616:	2320      	movs	r3, #32
 8011618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801161c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011620:	2330      	movs	r3, #48	; 0x30
 8011622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80117cc <_svfiprintf_r+0x1ec>
 8011626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801162a:	f04f 0901 	mov.w	r9, #1
 801162e:	4623      	mov	r3, r4
 8011630:	469a      	mov	sl, r3
 8011632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011636:	b10a      	cbz	r2, 801163c <_svfiprintf_r+0x5c>
 8011638:	2a25      	cmp	r2, #37	; 0x25
 801163a:	d1f9      	bne.n	8011630 <_svfiprintf_r+0x50>
 801163c:	ebba 0b04 	subs.w	fp, sl, r4
 8011640:	d00b      	beq.n	801165a <_svfiprintf_r+0x7a>
 8011642:	465b      	mov	r3, fp
 8011644:	4622      	mov	r2, r4
 8011646:	4629      	mov	r1, r5
 8011648:	4638      	mov	r0, r7
 801164a:	f7ff ff6d 	bl	8011528 <__ssputs_r>
 801164e:	3001      	adds	r0, #1
 8011650:	f000 80aa 	beq.w	80117a8 <_svfiprintf_r+0x1c8>
 8011654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011656:	445a      	add	r2, fp
 8011658:	9209      	str	r2, [sp, #36]	; 0x24
 801165a:	f89a 3000 	ldrb.w	r3, [sl]
 801165e:	2b00      	cmp	r3, #0
 8011660:	f000 80a2 	beq.w	80117a8 <_svfiprintf_r+0x1c8>
 8011664:	2300      	movs	r3, #0
 8011666:	f04f 32ff 	mov.w	r2, #4294967295
 801166a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801166e:	f10a 0a01 	add.w	sl, sl, #1
 8011672:	9304      	str	r3, [sp, #16]
 8011674:	9307      	str	r3, [sp, #28]
 8011676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801167a:	931a      	str	r3, [sp, #104]	; 0x68
 801167c:	4654      	mov	r4, sl
 801167e:	2205      	movs	r2, #5
 8011680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011684:	4851      	ldr	r0, [pc, #324]	; (80117cc <_svfiprintf_r+0x1ec>)
 8011686:	f7ee fdf3 	bl	8000270 <memchr>
 801168a:	9a04      	ldr	r2, [sp, #16]
 801168c:	b9d8      	cbnz	r0, 80116c6 <_svfiprintf_r+0xe6>
 801168e:	06d0      	lsls	r0, r2, #27
 8011690:	bf44      	itt	mi
 8011692:	2320      	movmi	r3, #32
 8011694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011698:	0711      	lsls	r1, r2, #28
 801169a:	bf44      	itt	mi
 801169c:	232b      	movmi	r3, #43	; 0x2b
 801169e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116a2:	f89a 3000 	ldrb.w	r3, [sl]
 80116a6:	2b2a      	cmp	r3, #42	; 0x2a
 80116a8:	d015      	beq.n	80116d6 <_svfiprintf_r+0xf6>
 80116aa:	9a07      	ldr	r2, [sp, #28]
 80116ac:	4654      	mov	r4, sl
 80116ae:	2000      	movs	r0, #0
 80116b0:	f04f 0c0a 	mov.w	ip, #10
 80116b4:	4621      	mov	r1, r4
 80116b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116ba:	3b30      	subs	r3, #48	; 0x30
 80116bc:	2b09      	cmp	r3, #9
 80116be:	d94e      	bls.n	801175e <_svfiprintf_r+0x17e>
 80116c0:	b1b0      	cbz	r0, 80116f0 <_svfiprintf_r+0x110>
 80116c2:	9207      	str	r2, [sp, #28]
 80116c4:	e014      	b.n	80116f0 <_svfiprintf_r+0x110>
 80116c6:	eba0 0308 	sub.w	r3, r0, r8
 80116ca:	fa09 f303 	lsl.w	r3, r9, r3
 80116ce:	4313      	orrs	r3, r2
 80116d0:	9304      	str	r3, [sp, #16]
 80116d2:	46a2      	mov	sl, r4
 80116d4:	e7d2      	b.n	801167c <_svfiprintf_r+0x9c>
 80116d6:	9b03      	ldr	r3, [sp, #12]
 80116d8:	1d19      	adds	r1, r3, #4
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	9103      	str	r1, [sp, #12]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	bfbb      	ittet	lt
 80116e2:	425b      	neglt	r3, r3
 80116e4:	f042 0202 	orrlt.w	r2, r2, #2
 80116e8:	9307      	strge	r3, [sp, #28]
 80116ea:	9307      	strlt	r3, [sp, #28]
 80116ec:	bfb8      	it	lt
 80116ee:	9204      	strlt	r2, [sp, #16]
 80116f0:	7823      	ldrb	r3, [r4, #0]
 80116f2:	2b2e      	cmp	r3, #46	; 0x2e
 80116f4:	d10c      	bne.n	8011710 <_svfiprintf_r+0x130>
 80116f6:	7863      	ldrb	r3, [r4, #1]
 80116f8:	2b2a      	cmp	r3, #42	; 0x2a
 80116fa:	d135      	bne.n	8011768 <_svfiprintf_r+0x188>
 80116fc:	9b03      	ldr	r3, [sp, #12]
 80116fe:	1d1a      	adds	r2, r3, #4
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	9203      	str	r2, [sp, #12]
 8011704:	2b00      	cmp	r3, #0
 8011706:	bfb8      	it	lt
 8011708:	f04f 33ff 	movlt.w	r3, #4294967295
 801170c:	3402      	adds	r4, #2
 801170e:	9305      	str	r3, [sp, #20]
 8011710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80117dc <_svfiprintf_r+0x1fc>
 8011714:	7821      	ldrb	r1, [r4, #0]
 8011716:	2203      	movs	r2, #3
 8011718:	4650      	mov	r0, sl
 801171a:	f7ee fda9 	bl	8000270 <memchr>
 801171e:	b140      	cbz	r0, 8011732 <_svfiprintf_r+0x152>
 8011720:	2340      	movs	r3, #64	; 0x40
 8011722:	eba0 000a 	sub.w	r0, r0, sl
 8011726:	fa03 f000 	lsl.w	r0, r3, r0
 801172a:	9b04      	ldr	r3, [sp, #16]
 801172c:	4303      	orrs	r3, r0
 801172e:	3401      	adds	r4, #1
 8011730:	9304      	str	r3, [sp, #16]
 8011732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011736:	4826      	ldr	r0, [pc, #152]	; (80117d0 <_svfiprintf_r+0x1f0>)
 8011738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801173c:	2206      	movs	r2, #6
 801173e:	f7ee fd97 	bl	8000270 <memchr>
 8011742:	2800      	cmp	r0, #0
 8011744:	d038      	beq.n	80117b8 <_svfiprintf_r+0x1d8>
 8011746:	4b23      	ldr	r3, [pc, #140]	; (80117d4 <_svfiprintf_r+0x1f4>)
 8011748:	bb1b      	cbnz	r3, 8011792 <_svfiprintf_r+0x1b2>
 801174a:	9b03      	ldr	r3, [sp, #12]
 801174c:	3307      	adds	r3, #7
 801174e:	f023 0307 	bic.w	r3, r3, #7
 8011752:	3308      	adds	r3, #8
 8011754:	9303      	str	r3, [sp, #12]
 8011756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011758:	4433      	add	r3, r6
 801175a:	9309      	str	r3, [sp, #36]	; 0x24
 801175c:	e767      	b.n	801162e <_svfiprintf_r+0x4e>
 801175e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011762:	460c      	mov	r4, r1
 8011764:	2001      	movs	r0, #1
 8011766:	e7a5      	b.n	80116b4 <_svfiprintf_r+0xd4>
 8011768:	2300      	movs	r3, #0
 801176a:	3401      	adds	r4, #1
 801176c:	9305      	str	r3, [sp, #20]
 801176e:	4619      	mov	r1, r3
 8011770:	f04f 0c0a 	mov.w	ip, #10
 8011774:	4620      	mov	r0, r4
 8011776:	f810 2b01 	ldrb.w	r2, [r0], #1
 801177a:	3a30      	subs	r2, #48	; 0x30
 801177c:	2a09      	cmp	r2, #9
 801177e:	d903      	bls.n	8011788 <_svfiprintf_r+0x1a8>
 8011780:	2b00      	cmp	r3, #0
 8011782:	d0c5      	beq.n	8011710 <_svfiprintf_r+0x130>
 8011784:	9105      	str	r1, [sp, #20]
 8011786:	e7c3      	b.n	8011710 <_svfiprintf_r+0x130>
 8011788:	fb0c 2101 	mla	r1, ip, r1, r2
 801178c:	4604      	mov	r4, r0
 801178e:	2301      	movs	r3, #1
 8011790:	e7f0      	b.n	8011774 <_svfiprintf_r+0x194>
 8011792:	ab03      	add	r3, sp, #12
 8011794:	9300      	str	r3, [sp, #0]
 8011796:	462a      	mov	r2, r5
 8011798:	4b0f      	ldr	r3, [pc, #60]	; (80117d8 <_svfiprintf_r+0x1f8>)
 801179a:	a904      	add	r1, sp, #16
 801179c:	4638      	mov	r0, r7
 801179e:	f3af 8000 	nop.w
 80117a2:	1c42      	adds	r2, r0, #1
 80117a4:	4606      	mov	r6, r0
 80117a6:	d1d6      	bne.n	8011756 <_svfiprintf_r+0x176>
 80117a8:	89ab      	ldrh	r3, [r5, #12]
 80117aa:	065b      	lsls	r3, r3, #25
 80117ac:	f53f af2c 	bmi.w	8011608 <_svfiprintf_r+0x28>
 80117b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117b2:	b01d      	add	sp, #116	; 0x74
 80117b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b8:	ab03      	add	r3, sp, #12
 80117ba:	9300      	str	r3, [sp, #0]
 80117bc:	462a      	mov	r2, r5
 80117be:	4b06      	ldr	r3, [pc, #24]	; (80117d8 <_svfiprintf_r+0x1f8>)
 80117c0:	a904      	add	r1, sp, #16
 80117c2:	4638      	mov	r0, r7
 80117c4:	f000 f9d4 	bl	8011b70 <_printf_i>
 80117c8:	e7eb      	b.n	80117a2 <_svfiprintf_r+0x1c2>
 80117ca:	bf00      	nop
 80117cc:	0801277c 	.word	0x0801277c
 80117d0:	08012786 	.word	0x08012786
 80117d4:	00000000 	.word	0x00000000
 80117d8:	08011529 	.word	0x08011529
 80117dc:	08012782 	.word	0x08012782

080117e0 <__sfputc_r>:
 80117e0:	6893      	ldr	r3, [r2, #8]
 80117e2:	3b01      	subs	r3, #1
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	b410      	push	{r4}
 80117e8:	6093      	str	r3, [r2, #8]
 80117ea:	da08      	bge.n	80117fe <__sfputc_r+0x1e>
 80117ec:	6994      	ldr	r4, [r2, #24]
 80117ee:	42a3      	cmp	r3, r4
 80117f0:	db01      	blt.n	80117f6 <__sfputc_r+0x16>
 80117f2:	290a      	cmp	r1, #10
 80117f4:	d103      	bne.n	80117fe <__sfputc_r+0x1e>
 80117f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117fa:	f7ff bbfb 	b.w	8010ff4 <__swbuf_r>
 80117fe:	6813      	ldr	r3, [r2, #0]
 8011800:	1c58      	adds	r0, r3, #1
 8011802:	6010      	str	r0, [r2, #0]
 8011804:	7019      	strb	r1, [r3, #0]
 8011806:	4608      	mov	r0, r1
 8011808:	f85d 4b04 	ldr.w	r4, [sp], #4
 801180c:	4770      	bx	lr

0801180e <__sfputs_r>:
 801180e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011810:	4606      	mov	r6, r0
 8011812:	460f      	mov	r7, r1
 8011814:	4614      	mov	r4, r2
 8011816:	18d5      	adds	r5, r2, r3
 8011818:	42ac      	cmp	r4, r5
 801181a:	d101      	bne.n	8011820 <__sfputs_r+0x12>
 801181c:	2000      	movs	r0, #0
 801181e:	e007      	b.n	8011830 <__sfputs_r+0x22>
 8011820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011824:	463a      	mov	r2, r7
 8011826:	4630      	mov	r0, r6
 8011828:	f7ff ffda 	bl	80117e0 <__sfputc_r>
 801182c:	1c43      	adds	r3, r0, #1
 801182e:	d1f3      	bne.n	8011818 <__sfputs_r+0xa>
 8011830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011834 <_vfiprintf_r>:
 8011834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011838:	460d      	mov	r5, r1
 801183a:	b09d      	sub	sp, #116	; 0x74
 801183c:	4614      	mov	r4, r2
 801183e:	4698      	mov	r8, r3
 8011840:	4606      	mov	r6, r0
 8011842:	b118      	cbz	r0, 801184c <_vfiprintf_r+0x18>
 8011844:	6983      	ldr	r3, [r0, #24]
 8011846:	b90b      	cbnz	r3, 801184c <_vfiprintf_r+0x18>
 8011848:	f7ff f864 	bl	8010914 <__sinit>
 801184c:	4b89      	ldr	r3, [pc, #548]	; (8011a74 <_vfiprintf_r+0x240>)
 801184e:	429d      	cmp	r5, r3
 8011850:	d11b      	bne.n	801188a <_vfiprintf_r+0x56>
 8011852:	6875      	ldr	r5, [r6, #4]
 8011854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011856:	07d9      	lsls	r1, r3, #31
 8011858:	d405      	bmi.n	8011866 <_vfiprintf_r+0x32>
 801185a:	89ab      	ldrh	r3, [r5, #12]
 801185c:	059a      	lsls	r2, r3, #22
 801185e:	d402      	bmi.n	8011866 <_vfiprintf_r+0x32>
 8011860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011862:	f7ff f91a 	bl	8010a9a <__retarget_lock_acquire_recursive>
 8011866:	89ab      	ldrh	r3, [r5, #12]
 8011868:	071b      	lsls	r3, r3, #28
 801186a:	d501      	bpl.n	8011870 <_vfiprintf_r+0x3c>
 801186c:	692b      	ldr	r3, [r5, #16]
 801186e:	b9eb      	cbnz	r3, 80118ac <_vfiprintf_r+0x78>
 8011870:	4629      	mov	r1, r5
 8011872:	4630      	mov	r0, r6
 8011874:	f7ff fc10 	bl	8011098 <__swsetup_r>
 8011878:	b1c0      	cbz	r0, 80118ac <_vfiprintf_r+0x78>
 801187a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801187c:	07dc      	lsls	r4, r3, #31
 801187e:	d50e      	bpl.n	801189e <_vfiprintf_r+0x6a>
 8011880:	f04f 30ff 	mov.w	r0, #4294967295
 8011884:	b01d      	add	sp, #116	; 0x74
 8011886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801188a:	4b7b      	ldr	r3, [pc, #492]	; (8011a78 <_vfiprintf_r+0x244>)
 801188c:	429d      	cmp	r5, r3
 801188e:	d101      	bne.n	8011894 <_vfiprintf_r+0x60>
 8011890:	68b5      	ldr	r5, [r6, #8]
 8011892:	e7df      	b.n	8011854 <_vfiprintf_r+0x20>
 8011894:	4b79      	ldr	r3, [pc, #484]	; (8011a7c <_vfiprintf_r+0x248>)
 8011896:	429d      	cmp	r5, r3
 8011898:	bf08      	it	eq
 801189a:	68f5      	ldreq	r5, [r6, #12]
 801189c:	e7da      	b.n	8011854 <_vfiprintf_r+0x20>
 801189e:	89ab      	ldrh	r3, [r5, #12]
 80118a0:	0598      	lsls	r0, r3, #22
 80118a2:	d4ed      	bmi.n	8011880 <_vfiprintf_r+0x4c>
 80118a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118a6:	f7ff f8f9 	bl	8010a9c <__retarget_lock_release_recursive>
 80118aa:	e7e9      	b.n	8011880 <_vfiprintf_r+0x4c>
 80118ac:	2300      	movs	r3, #0
 80118ae:	9309      	str	r3, [sp, #36]	; 0x24
 80118b0:	2320      	movs	r3, #32
 80118b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80118ba:	2330      	movs	r3, #48	; 0x30
 80118bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011a80 <_vfiprintf_r+0x24c>
 80118c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118c4:	f04f 0901 	mov.w	r9, #1
 80118c8:	4623      	mov	r3, r4
 80118ca:	469a      	mov	sl, r3
 80118cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118d0:	b10a      	cbz	r2, 80118d6 <_vfiprintf_r+0xa2>
 80118d2:	2a25      	cmp	r2, #37	; 0x25
 80118d4:	d1f9      	bne.n	80118ca <_vfiprintf_r+0x96>
 80118d6:	ebba 0b04 	subs.w	fp, sl, r4
 80118da:	d00b      	beq.n	80118f4 <_vfiprintf_r+0xc0>
 80118dc:	465b      	mov	r3, fp
 80118de:	4622      	mov	r2, r4
 80118e0:	4629      	mov	r1, r5
 80118e2:	4630      	mov	r0, r6
 80118e4:	f7ff ff93 	bl	801180e <__sfputs_r>
 80118e8:	3001      	adds	r0, #1
 80118ea:	f000 80aa 	beq.w	8011a42 <_vfiprintf_r+0x20e>
 80118ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118f0:	445a      	add	r2, fp
 80118f2:	9209      	str	r2, [sp, #36]	; 0x24
 80118f4:	f89a 3000 	ldrb.w	r3, [sl]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	f000 80a2 	beq.w	8011a42 <_vfiprintf_r+0x20e>
 80118fe:	2300      	movs	r3, #0
 8011900:	f04f 32ff 	mov.w	r2, #4294967295
 8011904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011908:	f10a 0a01 	add.w	sl, sl, #1
 801190c:	9304      	str	r3, [sp, #16]
 801190e:	9307      	str	r3, [sp, #28]
 8011910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011914:	931a      	str	r3, [sp, #104]	; 0x68
 8011916:	4654      	mov	r4, sl
 8011918:	2205      	movs	r2, #5
 801191a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801191e:	4858      	ldr	r0, [pc, #352]	; (8011a80 <_vfiprintf_r+0x24c>)
 8011920:	f7ee fca6 	bl	8000270 <memchr>
 8011924:	9a04      	ldr	r2, [sp, #16]
 8011926:	b9d8      	cbnz	r0, 8011960 <_vfiprintf_r+0x12c>
 8011928:	06d1      	lsls	r1, r2, #27
 801192a:	bf44      	itt	mi
 801192c:	2320      	movmi	r3, #32
 801192e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011932:	0713      	lsls	r3, r2, #28
 8011934:	bf44      	itt	mi
 8011936:	232b      	movmi	r3, #43	; 0x2b
 8011938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801193c:	f89a 3000 	ldrb.w	r3, [sl]
 8011940:	2b2a      	cmp	r3, #42	; 0x2a
 8011942:	d015      	beq.n	8011970 <_vfiprintf_r+0x13c>
 8011944:	9a07      	ldr	r2, [sp, #28]
 8011946:	4654      	mov	r4, sl
 8011948:	2000      	movs	r0, #0
 801194a:	f04f 0c0a 	mov.w	ip, #10
 801194e:	4621      	mov	r1, r4
 8011950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011954:	3b30      	subs	r3, #48	; 0x30
 8011956:	2b09      	cmp	r3, #9
 8011958:	d94e      	bls.n	80119f8 <_vfiprintf_r+0x1c4>
 801195a:	b1b0      	cbz	r0, 801198a <_vfiprintf_r+0x156>
 801195c:	9207      	str	r2, [sp, #28]
 801195e:	e014      	b.n	801198a <_vfiprintf_r+0x156>
 8011960:	eba0 0308 	sub.w	r3, r0, r8
 8011964:	fa09 f303 	lsl.w	r3, r9, r3
 8011968:	4313      	orrs	r3, r2
 801196a:	9304      	str	r3, [sp, #16]
 801196c:	46a2      	mov	sl, r4
 801196e:	e7d2      	b.n	8011916 <_vfiprintf_r+0xe2>
 8011970:	9b03      	ldr	r3, [sp, #12]
 8011972:	1d19      	adds	r1, r3, #4
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	9103      	str	r1, [sp, #12]
 8011978:	2b00      	cmp	r3, #0
 801197a:	bfbb      	ittet	lt
 801197c:	425b      	neglt	r3, r3
 801197e:	f042 0202 	orrlt.w	r2, r2, #2
 8011982:	9307      	strge	r3, [sp, #28]
 8011984:	9307      	strlt	r3, [sp, #28]
 8011986:	bfb8      	it	lt
 8011988:	9204      	strlt	r2, [sp, #16]
 801198a:	7823      	ldrb	r3, [r4, #0]
 801198c:	2b2e      	cmp	r3, #46	; 0x2e
 801198e:	d10c      	bne.n	80119aa <_vfiprintf_r+0x176>
 8011990:	7863      	ldrb	r3, [r4, #1]
 8011992:	2b2a      	cmp	r3, #42	; 0x2a
 8011994:	d135      	bne.n	8011a02 <_vfiprintf_r+0x1ce>
 8011996:	9b03      	ldr	r3, [sp, #12]
 8011998:	1d1a      	adds	r2, r3, #4
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	9203      	str	r2, [sp, #12]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	bfb8      	it	lt
 80119a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80119a6:	3402      	adds	r4, #2
 80119a8:	9305      	str	r3, [sp, #20]
 80119aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011a90 <_vfiprintf_r+0x25c>
 80119ae:	7821      	ldrb	r1, [r4, #0]
 80119b0:	2203      	movs	r2, #3
 80119b2:	4650      	mov	r0, sl
 80119b4:	f7ee fc5c 	bl	8000270 <memchr>
 80119b8:	b140      	cbz	r0, 80119cc <_vfiprintf_r+0x198>
 80119ba:	2340      	movs	r3, #64	; 0x40
 80119bc:	eba0 000a 	sub.w	r0, r0, sl
 80119c0:	fa03 f000 	lsl.w	r0, r3, r0
 80119c4:	9b04      	ldr	r3, [sp, #16]
 80119c6:	4303      	orrs	r3, r0
 80119c8:	3401      	adds	r4, #1
 80119ca:	9304      	str	r3, [sp, #16]
 80119cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119d0:	482c      	ldr	r0, [pc, #176]	; (8011a84 <_vfiprintf_r+0x250>)
 80119d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119d6:	2206      	movs	r2, #6
 80119d8:	f7ee fc4a 	bl	8000270 <memchr>
 80119dc:	2800      	cmp	r0, #0
 80119de:	d03f      	beq.n	8011a60 <_vfiprintf_r+0x22c>
 80119e0:	4b29      	ldr	r3, [pc, #164]	; (8011a88 <_vfiprintf_r+0x254>)
 80119e2:	bb1b      	cbnz	r3, 8011a2c <_vfiprintf_r+0x1f8>
 80119e4:	9b03      	ldr	r3, [sp, #12]
 80119e6:	3307      	adds	r3, #7
 80119e8:	f023 0307 	bic.w	r3, r3, #7
 80119ec:	3308      	adds	r3, #8
 80119ee:	9303      	str	r3, [sp, #12]
 80119f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119f2:	443b      	add	r3, r7
 80119f4:	9309      	str	r3, [sp, #36]	; 0x24
 80119f6:	e767      	b.n	80118c8 <_vfiprintf_r+0x94>
 80119f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80119fc:	460c      	mov	r4, r1
 80119fe:	2001      	movs	r0, #1
 8011a00:	e7a5      	b.n	801194e <_vfiprintf_r+0x11a>
 8011a02:	2300      	movs	r3, #0
 8011a04:	3401      	adds	r4, #1
 8011a06:	9305      	str	r3, [sp, #20]
 8011a08:	4619      	mov	r1, r3
 8011a0a:	f04f 0c0a 	mov.w	ip, #10
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a14:	3a30      	subs	r2, #48	; 0x30
 8011a16:	2a09      	cmp	r2, #9
 8011a18:	d903      	bls.n	8011a22 <_vfiprintf_r+0x1ee>
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d0c5      	beq.n	80119aa <_vfiprintf_r+0x176>
 8011a1e:	9105      	str	r1, [sp, #20]
 8011a20:	e7c3      	b.n	80119aa <_vfiprintf_r+0x176>
 8011a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a26:	4604      	mov	r4, r0
 8011a28:	2301      	movs	r3, #1
 8011a2a:	e7f0      	b.n	8011a0e <_vfiprintf_r+0x1da>
 8011a2c:	ab03      	add	r3, sp, #12
 8011a2e:	9300      	str	r3, [sp, #0]
 8011a30:	462a      	mov	r2, r5
 8011a32:	4b16      	ldr	r3, [pc, #88]	; (8011a8c <_vfiprintf_r+0x258>)
 8011a34:	a904      	add	r1, sp, #16
 8011a36:	4630      	mov	r0, r6
 8011a38:	f3af 8000 	nop.w
 8011a3c:	4607      	mov	r7, r0
 8011a3e:	1c78      	adds	r0, r7, #1
 8011a40:	d1d6      	bne.n	80119f0 <_vfiprintf_r+0x1bc>
 8011a42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a44:	07d9      	lsls	r1, r3, #31
 8011a46:	d405      	bmi.n	8011a54 <_vfiprintf_r+0x220>
 8011a48:	89ab      	ldrh	r3, [r5, #12]
 8011a4a:	059a      	lsls	r2, r3, #22
 8011a4c:	d402      	bmi.n	8011a54 <_vfiprintf_r+0x220>
 8011a4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a50:	f7ff f824 	bl	8010a9c <__retarget_lock_release_recursive>
 8011a54:	89ab      	ldrh	r3, [r5, #12]
 8011a56:	065b      	lsls	r3, r3, #25
 8011a58:	f53f af12 	bmi.w	8011880 <_vfiprintf_r+0x4c>
 8011a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a5e:	e711      	b.n	8011884 <_vfiprintf_r+0x50>
 8011a60:	ab03      	add	r3, sp, #12
 8011a62:	9300      	str	r3, [sp, #0]
 8011a64:	462a      	mov	r2, r5
 8011a66:	4b09      	ldr	r3, [pc, #36]	; (8011a8c <_vfiprintf_r+0x258>)
 8011a68:	a904      	add	r1, sp, #16
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	f000 f880 	bl	8011b70 <_printf_i>
 8011a70:	e7e4      	b.n	8011a3c <_vfiprintf_r+0x208>
 8011a72:	bf00      	nop
 8011a74:	08012688 	.word	0x08012688
 8011a78:	080126a8 	.word	0x080126a8
 8011a7c:	08012668 	.word	0x08012668
 8011a80:	0801277c 	.word	0x0801277c
 8011a84:	08012786 	.word	0x08012786
 8011a88:	00000000 	.word	0x00000000
 8011a8c:	0801180f 	.word	0x0801180f
 8011a90:	08012782 	.word	0x08012782

08011a94 <_printf_common>:
 8011a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a98:	4616      	mov	r6, r2
 8011a9a:	4699      	mov	r9, r3
 8011a9c:	688a      	ldr	r2, [r1, #8]
 8011a9e:	690b      	ldr	r3, [r1, #16]
 8011aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	bfb8      	it	lt
 8011aa8:	4613      	movlt	r3, r2
 8011aaa:	6033      	str	r3, [r6, #0]
 8011aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ab0:	4607      	mov	r7, r0
 8011ab2:	460c      	mov	r4, r1
 8011ab4:	b10a      	cbz	r2, 8011aba <_printf_common+0x26>
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	6033      	str	r3, [r6, #0]
 8011aba:	6823      	ldr	r3, [r4, #0]
 8011abc:	0699      	lsls	r1, r3, #26
 8011abe:	bf42      	ittt	mi
 8011ac0:	6833      	ldrmi	r3, [r6, #0]
 8011ac2:	3302      	addmi	r3, #2
 8011ac4:	6033      	strmi	r3, [r6, #0]
 8011ac6:	6825      	ldr	r5, [r4, #0]
 8011ac8:	f015 0506 	ands.w	r5, r5, #6
 8011acc:	d106      	bne.n	8011adc <_printf_common+0x48>
 8011ace:	f104 0a19 	add.w	sl, r4, #25
 8011ad2:	68e3      	ldr	r3, [r4, #12]
 8011ad4:	6832      	ldr	r2, [r6, #0]
 8011ad6:	1a9b      	subs	r3, r3, r2
 8011ad8:	42ab      	cmp	r3, r5
 8011ada:	dc26      	bgt.n	8011b2a <_printf_common+0x96>
 8011adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011ae0:	1e13      	subs	r3, r2, #0
 8011ae2:	6822      	ldr	r2, [r4, #0]
 8011ae4:	bf18      	it	ne
 8011ae6:	2301      	movne	r3, #1
 8011ae8:	0692      	lsls	r2, r2, #26
 8011aea:	d42b      	bmi.n	8011b44 <_printf_common+0xb0>
 8011aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011af0:	4649      	mov	r1, r9
 8011af2:	4638      	mov	r0, r7
 8011af4:	47c0      	blx	r8
 8011af6:	3001      	adds	r0, #1
 8011af8:	d01e      	beq.n	8011b38 <_printf_common+0xa4>
 8011afa:	6823      	ldr	r3, [r4, #0]
 8011afc:	68e5      	ldr	r5, [r4, #12]
 8011afe:	6832      	ldr	r2, [r6, #0]
 8011b00:	f003 0306 	and.w	r3, r3, #6
 8011b04:	2b04      	cmp	r3, #4
 8011b06:	bf08      	it	eq
 8011b08:	1aad      	subeq	r5, r5, r2
 8011b0a:	68a3      	ldr	r3, [r4, #8]
 8011b0c:	6922      	ldr	r2, [r4, #16]
 8011b0e:	bf0c      	ite	eq
 8011b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b14:	2500      	movne	r5, #0
 8011b16:	4293      	cmp	r3, r2
 8011b18:	bfc4      	itt	gt
 8011b1a:	1a9b      	subgt	r3, r3, r2
 8011b1c:	18ed      	addgt	r5, r5, r3
 8011b1e:	2600      	movs	r6, #0
 8011b20:	341a      	adds	r4, #26
 8011b22:	42b5      	cmp	r5, r6
 8011b24:	d11a      	bne.n	8011b5c <_printf_common+0xc8>
 8011b26:	2000      	movs	r0, #0
 8011b28:	e008      	b.n	8011b3c <_printf_common+0xa8>
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	4652      	mov	r2, sl
 8011b2e:	4649      	mov	r1, r9
 8011b30:	4638      	mov	r0, r7
 8011b32:	47c0      	blx	r8
 8011b34:	3001      	adds	r0, #1
 8011b36:	d103      	bne.n	8011b40 <_printf_common+0xac>
 8011b38:	f04f 30ff 	mov.w	r0, #4294967295
 8011b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b40:	3501      	adds	r5, #1
 8011b42:	e7c6      	b.n	8011ad2 <_printf_common+0x3e>
 8011b44:	18e1      	adds	r1, r4, r3
 8011b46:	1c5a      	adds	r2, r3, #1
 8011b48:	2030      	movs	r0, #48	; 0x30
 8011b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b4e:	4422      	add	r2, r4
 8011b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b58:	3302      	adds	r3, #2
 8011b5a:	e7c7      	b.n	8011aec <_printf_common+0x58>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	4622      	mov	r2, r4
 8011b60:	4649      	mov	r1, r9
 8011b62:	4638      	mov	r0, r7
 8011b64:	47c0      	blx	r8
 8011b66:	3001      	adds	r0, #1
 8011b68:	d0e6      	beq.n	8011b38 <_printf_common+0xa4>
 8011b6a:	3601      	adds	r6, #1
 8011b6c:	e7d9      	b.n	8011b22 <_printf_common+0x8e>
	...

08011b70 <_printf_i>:
 8011b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b74:	7e0f      	ldrb	r7, [r1, #24]
 8011b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011b78:	2f78      	cmp	r7, #120	; 0x78
 8011b7a:	4691      	mov	r9, r2
 8011b7c:	4680      	mov	r8, r0
 8011b7e:	460c      	mov	r4, r1
 8011b80:	469a      	mov	sl, r3
 8011b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011b86:	d807      	bhi.n	8011b98 <_printf_i+0x28>
 8011b88:	2f62      	cmp	r7, #98	; 0x62
 8011b8a:	d80a      	bhi.n	8011ba2 <_printf_i+0x32>
 8011b8c:	2f00      	cmp	r7, #0
 8011b8e:	f000 80d8 	beq.w	8011d42 <_printf_i+0x1d2>
 8011b92:	2f58      	cmp	r7, #88	; 0x58
 8011b94:	f000 80a3 	beq.w	8011cde <_printf_i+0x16e>
 8011b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ba0:	e03a      	b.n	8011c18 <_printf_i+0xa8>
 8011ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ba6:	2b15      	cmp	r3, #21
 8011ba8:	d8f6      	bhi.n	8011b98 <_printf_i+0x28>
 8011baa:	a101      	add	r1, pc, #4	; (adr r1, 8011bb0 <_printf_i+0x40>)
 8011bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011bb0:	08011c09 	.word	0x08011c09
 8011bb4:	08011c1d 	.word	0x08011c1d
 8011bb8:	08011b99 	.word	0x08011b99
 8011bbc:	08011b99 	.word	0x08011b99
 8011bc0:	08011b99 	.word	0x08011b99
 8011bc4:	08011b99 	.word	0x08011b99
 8011bc8:	08011c1d 	.word	0x08011c1d
 8011bcc:	08011b99 	.word	0x08011b99
 8011bd0:	08011b99 	.word	0x08011b99
 8011bd4:	08011b99 	.word	0x08011b99
 8011bd8:	08011b99 	.word	0x08011b99
 8011bdc:	08011d29 	.word	0x08011d29
 8011be0:	08011c4d 	.word	0x08011c4d
 8011be4:	08011d0b 	.word	0x08011d0b
 8011be8:	08011b99 	.word	0x08011b99
 8011bec:	08011b99 	.word	0x08011b99
 8011bf0:	08011d4b 	.word	0x08011d4b
 8011bf4:	08011b99 	.word	0x08011b99
 8011bf8:	08011c4d 	.word	0x08011c4d
 8011bfc:	08011b99 	.word	0x08011b99
 8011c00:	08011b99 	.word	0x08011b99
 8011c04:	08011d13 	.word	0x08011d13
 8011c08:	682b      	ldr	r3, [r5, #0]
 8011c0a:	1d1a      	adds	r2, r3, #4
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	602a      	str	r2, [r5, #0]
 8011c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c18:	2301      	movs	r3, #1
 8011c1a:	e0a3      	b.n	8011d64 <_printf_i+0x1f4>
 8011c1c:	6820      	ldr	r0, [r4, #0]
 8011c1e:	6829      	ldr	r1, [r5, #0]
 8011c20:	0606      	lsls	r6, r0, #24
 8011c22:	f101 0304 	add.w	r3, r1, #4
 8011c26:	d50a      	bpl.n	8011c3e <_printf_i+0xce>
 8011c28:	680e      	ldr	r6, [r1, #0]
 8011c2a:	602b      	str	r3, [r5, #0]
 8011c2c:	2e00      	cmp	r6, #0
 8011c2e:	da03      	bge.n	8011c38 <_printf_i+0xc8>
 8011c30:	232d      	movs	r3, #45	; 0x2d
 8011c32:	4276      	negs	r6, r6
 8011c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c38:	485e      	ldr	r0, [pc, #376]	; (8011db4 <_printf_i+0x244>)
 8011c3a:	230a      	movs	r3, #10
 8011c3c:	e019      	b.n	8011c72 <_printf_i+0x102>
 8011c3e:	680e      	ldr	r6, [r1, #0]
 8011c40:	602b      	str	r3, [r5, #0]
 8011c42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c46:	bf18      	it	ne
 8011c48:	b236      	sxthne	r6, r6
 8011c4a:	e7ef      	b.n	8011c2c <_printf_i+0xbc>
 8011c4c:	682b      	ldr	r3, [r5, #0]
 8011c4e:	6820      	ldr	r0, [r4, #0]
 8011c50:	1d19      	adds	r1, r3, #4
 8011c52:	6029      	str	r1, [r5, #0]
 8011c54:	0601      	lsls	r1, r0, #24
 8011c56:	d501      	bpl.n	8011c5c <_printf_i+0xec>
 8011c58:	681e      	ldr	r6, [r3, #0]
 8011c5a:	e002      	b.n	8011c62 <_printf_i+0xf2>
 8011c5c:	0646      	lsls	r6, r0, #25
 8011c5e:	d5fb      	bpl.n	8011c58 <_printf_i+0xe8>
 8011c60:	881e      	ldrh	r6, [r3, #0]
 8011c62:	4854      	ldr	r0, [pc, #336]	; (8011db4 <_printf_i+0x244>)
 8011c64:	2f6f      	cmp	r7, #111	; 0x6f
 8011c66:	bf0c      	ite	eq
 8011c68:	2308      	moveq	r3, #8
 8011c6a:	230a      	movne	r3, #10
 8011c6c:	2100      	movs	r1, #0
 8011c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c72:	6865      	ldr	r5, [r4, #4]
 8011c74:	60a5      	str	r5, [r4, #8]
 8011c76:	2d00      	cmp	r5, #0
 8011c78:	bfa2      	ittt	ge
 8011c7a:	6821      	ldrge	r1, [r4, #0]
 8011c7c:	f021 0104 	bicge.w	r1, r1, #4
 8011c80:	6021      	strge	r1, [r4, #0]
 8011c82:	b90e      	cbnz	r6, 8011c88 <_printf_i+0x118>
 8011c84:	2d00      	cmp	r5, #0
 8011c86:	d04d      	beq.n	8011d24 <_printf_i+0x1b4>
 8011c88:	4615      	mov	r5, r2
 8011c8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011c8e:	fb03 6711 	mls	r7, r3, r1, r6
 8011c92:	5dc7      	ldrb	r7, [r0, r7]
 8011c94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011c98:	4637      	mov	r7, r6
 8011c9a:	42bb      	cmp	r3, r7
 8011c9c:	460e      	mov	r6, r1
 8011c9e:	d9f4      	bls.n	8011c8a <_printf_i+0x11a>
 8011ca0:	2b08      	cmp	r3, #8
 8011ca2:	d10b      	bne.n	8011cbc <_printf_i+0x14c>
 8011ca4:	6823      	ldr	r3, [r4, #0]
 8011ca6:	07de      	lsls	r6, r3, #31
 8011ca8:	d508      	bpl.n	8011cbc <_printf_i+0x14c>
 8011caa:	6923      	ldr	r3, [r4, #16]
 8011cac:	6861      	ldr	r1, [r4, #4]
 8011cae:	4299      	cmp	r1, r3
 8011cb0:	bfde      	ittt	le
 8011cb2:	2330      	movle	r3, #48	; 0x30
 8011cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011cb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011cbc:	1b52      	subs	r2, r2, r5
 8011cbe:	6122      	str	r2, [r4, #16]
 8011cc0:	f8cd a000 	str.w	sl, [sp]
 8011cc4:	464b      	mov	r3, r9
 8011cc6:	aa03      	add	r2, sp, #12
 8011cc8:	4621      	mov	r1, r4
 8011cca:	4640      	mov	r0, r8
 8011ccc:	f7ff fee2 	bl	8011a94 <_printf_common>
 8011cd0:	3001      	adds	r0, #1
 8011cd2:	d14c      	bne.n	8011d6e <_printf_i+0x1fe>
 8011cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd8:	b004      	add	sp, #16
 8011cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cde:	4835      	ldr	r0, [pc, #212]	; (8011db4 <_printf_i+0x244>)
 8011ce0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011ce4:	6829      	ldr	r1, [r5, #0]
 8011ce6:	6823      	ldr	r3, [r4, #0]
 8011ce8:	f851 6b04 	ldr.w	r6, [r1], #4
 8011cec:	6029      	str	r1, [r5, #0]
 8011cee:	061d      	lsls	r5, r3, #24
 8011cf0:	d514      	bpl.n	8011d1c <_printf_i+0x1ac>
 8011cf2:	07df      	lsls	r7, r3, #31
 8011cf4:	bf44      	itt	mi
 8011cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8011cfa:	6023      	strmi	r3, [r4, #0]
 8011cfc:	b91e      	cbnz	r6, 8011d06 <_printf_i+0x196>
 8011cfe:	6823      	ldr	r3, [r4, #0]
 8011d00:	f023 0320 	bic.w	r3, r3, #32
 8011d04:	6023      	str	r3, [r4, #0]
 8011d06:	2310      	movs	r3, #16
 8011d08:	e7b0      	b.n	8011c6c <_printf_i+0xfc>
 8011d0a:	6823      	ldr	r3, [r4, #0]
 8011d0c:	f043 0320 	orr.w	r3, r3, #32
 8011d10:	6023      	str	r3, [r4, #0]
 8011d12:	2378      	movs	r3, #120	; 0x78
 8011d14:	4828      	ldr	r0, [pc, #160]	; (8011db8 <_printf_i+0x248>)
 8011d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011d1a:	e7e3      	b.n	8011ce4 <_printf_i+0x174>
 8011d1c:	0659      	lsls	r1, r3, #25
 8011d1e:	bf48      	it	mi
 8011d20:	b2b6      	uxthmi	r6, r6
 8011d22:	e7e6      	b.n	8011cf2 <_printf_i+0x182>
 8011d24:	4615      	mov	r5, r2
 8011d26:	e7bb      	b.n	8011ca0 <_printf_i+0x130>
 8011d28:	682b      	ldr	r3, [r5, #0]
 8011d2a:	6826      	ldr	r6, [r4, #0]
 8011d2c:	6961      	ldr	r1, [r4, #20]
 8011d2e:	1d18      	adds	r0, r3, #4
 8011d30:	6028      	str	r0, [r5, #0]
 8011d32:	0635      	lsls	r5, r6, #24
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	d501      	bpl.n	8011d3c <_printf_i+0x1cc>
 8011d38:	6019      	str	r1, [r3, #0]
 8011d3a:	e002      	b.n	8011d42 <_printf_i+0x1d2>
 8011d3c:	0670      	lsls	r0, r6, #25
 8011d3e:	d5fb      	bpl.n	8011d38 <_printf_i+0x1c8>
 8011d40:	8019      	strh	r1, [r3, #0]
 8011d42:	2300      	movs	r3, #0
 8011d44:	6123      	str	r3, [r4, #16]
 8011d46:	4615      	mov	r5, r2
 8011d48:	e7ba      	b.n	8011cc0 <_printf_i+0x150>
 8011d4a:	682b      	ldr	r3, [r5, #0]
 8011d4c:	1d1a      	adds	r2, r3, #4
 8011d4e:	602a      	str	r2, [r5, #0]
 8011d50:	681d      	ldr	r5, [r3, #0]
 8011d52:	6862      	ldr	r2, [r4, #4]
 8011d54:	2100      	movs	r1, #0
 8011d56:	4628      	mov	r0, r5
 8011d58:	f7ee fa8a 	bl	8000270 <memchr>
 8011d5c:	b108      	cbz	r0, 8011d62 <_printf_i+0x1f2>
 8011d5e:	1b40      	subs	r0, r0, r5
 8011d60:	6060      	str	r0, [r4, #4]
 8011d62:	6863      	ldr	r3, [r4, #4]
 8011d64:	6123      	str	r3, [r4, #16]
 8011d66:	2300      	movs	r3, #0
 8011d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d6c:	e7a8      	b.n	8011cc0 <_printf_i+0x150>
 8011d6e:	6923      	ldr	r3, [r4, #16]
 8011d70:	462a      	mov	r2, r5
 8011d72:	4649      	mov	r1, r9
 8011d74:	4640      	mov	r0, r8
 8011d76:	47d0      	blx	sl
 8011d78:	3001      	adds	r0, #1
 8011d7a:	d0ab      	beq.n	8011cd4 <_printf_i+0x164>
 8011d7c:	6823      	ldr	r3, [r4, #0]
 8011d7e:	079b      	lsls	r3, r3, #30
 8011d80:	d413      	bmi.n	8011daa <_printf_i+0x23a>
 8011d82:	68e0      	ldr	r0, [r4, #12]
 8011d84:	9b03      	ldr	r3, [sp, #12]
 8011d86:	4298      	cmp	r0, r3
 8011d88:	bfb8      	it	lt
 8011d8a:	4618      	movlt	r0, r3
 8011d8c:	e7a4      	b.n	8011cd8 <_printf_i+0x168>
 8011d8e:	2301      	movs	r3, #1
 8011d90:	4632      	mov	r2, r6
 8011d92:	4649      	mov	r1, r9
 8011d94:	4640      	mov	r0, r8
 8011d96:	47d0      	blx	sl
 8011d98:	3001      	adds	r0, #1
 8011d9a:	d09b      	beq.n	8011cd4 <_printf_i+0x164>
 8011d9c:	3501      	adds	r5, #1
 8011d9e:	68e3      	ldr	r3, [r4, #12]
 8011da0:	9903      	ldr	r1, [sp, #12]
 8011da2:	1a5b      	subs	r3, r3, r1
 8011da4:	42ab      	cmp	r3, r5
 8011da6:	dcf2      	bgt.n	8011d8e <_printf_i+0x21e>
 8011da8:	e7eb      	b.n	8011d82 <_printf_i+0x212>
 8011daa:	2500      	movs	r5, #0
 8011dac:	f104 0619 	add.w	r6, r4, #25
 8011db0:	e7f5      	b.n	8011d9e <_printf_i+0x22e>
 8011db2:	bf00      	nop
 8011db4:	0801278d 	.word	0x0801278d
 8011db8:	0801279e 	.word	0x0801279e

08011dbc <_read_r>:
 8011dbc:	b538      	push	{r3, r4, r5, lr}
 8011dbe:	4d07      	ldr	r5, [pc, #28]	; (8011ddc <_read_r+0x20>)
 8011dc0:	4604      	mov	r4, r0
 8011dc2:	4608      	mov	r0, r1
 8011dc4:	4611      	mov	r1, r2
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	602a      	str	r2, [r5, #0]
 8011dca:	461a      	mov	r2, r3
 8011dcc:	f7ef ffa8 	bl	8001d20 <_read>
 8011dd0:	1c43      	adds	r3, r0, #1
 8011dd2:	d102      	bne.n	8011dda <_read_r+0x1e>
 8011dd4:	682b      	ldr	r3, [r5, #0]
 8011dd6:	b103      	cbz	r3, 8011dda <_read_r+0x1e>
 8011dd8:	6023      	str	r3, [r4, #0]
 8011dda:	bd38      	pop	{r3, r4, r5, pc}
 8011ddc:	20002bb8 	.word	0x20002bb8

08011de0 <abort>:
 8011de0:	b508      	push	{r3, lr}
 8011de2:	2006      	movs	r0, #6
 8011de4:	f000 f898 	bl	8011f18 <raise>
 8011de8:	2001      	movs	r0, #1
 8011dea:	f7ef ff8f 	bl	8001d0c <_exit>
	...

08011df0 <_fstat_r>:
 8011df0:	b538      	push	{r3, r4, r5, lr}
 8011df2:	4d07      	ldr	r5, [pc, #28]	; (8011e10 <_fstat_r+0x20>)
 8011df4:	2300      	movs	r3, #0
 8011df6:	4604      	mov	r4, r0
 8011df8:	4608      	mov	r0, r1
 8011dfa:	4611      	mov	r1, r2
 8011dfc:	602b      	str	r3, [r5, #0]
 8011dfe:	f7ef ffb8 	bl	8001d72 <_fstat>
 8011e02:	1c43      	adds	r3, r0, #1
 8011e04:	d102      	bne.n	8011e0c <_fstat_r+0x1c>
 8011e06:	682b      	ldr	r3, [r5, #0]
 8011e08:	b103      	cbz	r3, 8011e0c <_fstat_r+0x1c>
 8011e0a:	6023      	str	r3, [r4, #0]
 8011e0c:	bd38      	pop	{r3, r4, r5, pc}
 8011e0e:	bf00      	nop
 8011e10:	20002bb8 	.word	0x20002bb8

08011e14 <_isatty_r>:
 8011e14:	b538      	push	{r3, r4, r5, lr}
 8011e16:	4d06      	ldr	r5, [pc, #24]	; (8011e30 <_isatty_r+0x1c>)
 8011e18:	2300      	movs	r3, #0
 8011e1a:	4604      	mov	r4, r0
 8011e1c:	4608      	mov	r0, r1
 8011e1e:	602b      	str	r3, [r5, #0]
 8011e20:	f7ef ffb7 	bl	8001d92 <_isatty>
 8011e24:	1c43      	adds	r3, r0, #1
 8011e26:	d102      	bne.n	8011e2e <_isatty_r+0x1a>
 8011e28:	682b      	ldr	r3, [r5, #0]
 8011e2a:	b103      	cbz	r3, 8011e2e <_isatty_r+0x1a>
 8011e2c:	6023      	str	r3, [r4, #0]
 8011e2e:	bd38      	pop	{r3, r4, r5, pc}
 8011e30:	20002bb8 	.word	0x20002bb8

08011e34 <memmove>:
 8011e34:	4288      	cmp	r0, r1
 8011e36:	b510      	push	{r4, lr}
 8011e38:	eb01 0402 	add.w	r4, r1, r2
 8011e3c:	d902      	bls.n	8011e44 <memmove+0x10>
 8011e3e:	4284      	cmp	r4, r0
 8011e40:	4623      	mov	r3, r4
 8011e42:	d807      	bhi.n	8011e54 <memmove+0x20>
 8011e44:	1e43      	subs	r3, r0, #1
 8011e46:	42a1      	cmp	r1, r4
 8011e48:	d008      	beq.n	8011e5c <memmove+0x28>
 8011e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e52:	e7f8      	b.n	8011e46 <memmove+0x12>
 8011e54:	4402      	add	r2, r0
 8011e56:	4601      	mov	r1, r0
 8011e58:	428a      	cmp	r2, r1
 8011e5a:	d100      	bne.n	8011e5e <memmove+0x2a>
 8011e5c:	bd10      	pop	{r4, pc}
 8011e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e66:	e7f7      	b.n	8011e58 <memmove+0x24>

08011e68 <_realloc_r>:
 8011e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e6c:	4680      	mov	r8, r0
 8011e6e:	4614      	mov	r4, r2
 8011e70:	460e      	mov	r6, r1
 8011e72:	b921      	cbnz	r1, 8011e7e <_realloc_r+0x16>
 8011e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e78:	4611      	mov	r1, r2
 8011e7a:	f7fe be57 	b.w	8010b2c <_malloc_r>
 8011e7e:	b92a      	cbnz	r2, 8011e8c <_realloc_r+0x24>
 8011e80:	f7ff fb06 	bl	8011490 <_free_r>
 8011e84:	4625      	mov	r5, r4
 8011e86:	4628      	mov	r0, r5
 8011e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e8c:	f000 f860 	bl	8011f50 <_malloc_usable_size_r>
 8011e90:	4284      	cmp	r4, r0
 8011e92:	4607      	mov	r7, r0
 8011e94:	d802      	bhi.n	8011e9c <_realloc_r+0x34>
 8011e96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e9a:	d812      	bhi.n	8011ec2 <_realloc_r+0x5a>
 8011e9c:	4621      	mov	r1, r4
 8011e9e:	4640      	mov	r0, r8
 8011ea0:	f7fe fe44 	bl	8010b2c <_malloc_r>
 8011ea4:	4605      	mov	r5, r0
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d0ed      	beq.n	8011e86 <_realloc_r+0x1e>
 8011eaa:	42bc      	cmp	r4, r7
 8011eac:	4622      	mov	r2, r4
 8011eae:	4631      	mov	r1, r6
 8011eb0:	bf28      	it	cs
 8011eb2:	463a      	movcs	r2, r7
 8011eb4:	f7fe fe03 	bl	8010abe <memcpy>
 8011eb8:	4631      	mov	r1, r6
 8011eba:	4640      	mov	r0, r8
 8011ebc:	f7ff fae8 	bl	8011490 <_free_r>
 8011ec0:	e7e1      	b.n	8011e86 <_realloc_r+0x1e>
 8011ec2:	4635      	mov	r5, r6
 8011ec4:	e7df      	b.n	8011e86 <_realloc_r+0x1e>

08011ec6 <_raise_r>:
 8011ec6:	291f      	cmp	r1, #31
 8011ec8:	b538      	push	{r3, r4, r5, lr}
 8011eca:	4604      	mov	r4, r0
 8011ecc:	460d      	mov	r5, r1
 8011ece:	d904      	bls.n	8011eda <_raise_r+0x14>
 8011ed0:	2316      	movs	r3, #22
 8011ed2:	6003      	str	r3, [r0, #0]
 8011ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed8:	bd38      	pop	{r3, r4, r5, pc}
 8011eda:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011edc:	b112      	cbz	r2, 8011ee4 <_raise_r+0x1e>
 8011ede:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ee2:	b94b      	cbnz	r3, 8011ef8 <_raise_r+0x32>
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	f000 f831 	bl	8011f4c <_getpid_r>
 8011eea:	462a      	mov	r2, r5
 8011eec:	4601      	mov	r1, r0
 8011eee:	4620      	mov	r0, r4
 8011ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ef4:	f000 b818 	b.w	8011f28 <_kill_r>
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	d00a      	beq.n	8011f12 <_raise_r+0x4c>
 8011efc:	1c59      	adds	r1, r3, #1
 8011efe:	d103      	bne.n	8011f08 <_raise_r+0x42>
 8011f00:	2316      	movs	r3, #22
 8011f02:	6003      	str	r3, [r0, #0]
 8011f04:	2001      	movs	r0, #1
 8011f06:	e7e7      	b.n	8011ed8 <_raise_r+0x12>
 8011f08:	2400      	movs	r4, #0
 8011f0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f0e:	4628      	mov	r0, r5
 8011f10:	4798      	blx	r3
 8011f12:	2000      	movs	r0, #0
 8011f14:	e7e0      	b.n	8011ed8 <_raise_r+0x12>
	...

08011f18 <raise>:
 8011f18:	4b02      	ldr	r3, [pc, #8]	; (8011f24 <raise+0xc>)
 8011f1a:	4601      	mov	r1, r0
 8011f1c:	6818      	ldr	r0, [r3, #0]
 8011f1e:	f7ff bfd2 	b.w	8011ec6 <_raise_r>
 8011f22:	bf00      	nop
 8011f24:	20000018 	.word	0x20000018

08011f28 <_kill_r>:
 8011f28:	b538      	push	{r3, r4, r5, lr}
 8011f2a:	4d07      	ldr	r5, [pc, #28]	; (8011f48 <_kill_r+0x20>)
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	4604      	mov	r4, r0
 8011f30:	4608      	mov	r0, r1
 8011f32:	4611      	mov	r1, r2
 8011f34:	602b      	str	r3, [r5, #0]
 8011f36:	f7ef fed9 	bl	8001cec <_kill>
 8011f3a:	1c43      	adds	r3, r0, #1
 8011f3c:	d102      	bne.n	8011f44 <_kill_r+0x1c>
 8011f3e:	682b      	ldr	r3, [r5, #0]
 8011f40:	b103      	cbz	r3, 8011f44 <_kill_r+0x1c>
 8011f42:	6023      	str	r3, [r4, #0]
 8011f44:	bd38      	pop	{r3, r4, r5, pc}
 8011f46:	bf00      	nop
 8011f48:	20002bb8 	.word	0x20002bb8

08011f4c <_getpid_r>:
 8011f4c:	f7ef bec6 	b.w	8001cdc <_getpid>

08011f50 <_malloc_usable_size_r>:
 8011f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f54:	1f18      	subs	r0, r3, #4
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	bfbc      	itt	lt
 8011f5a:	580b      	ldrlt	r3, [r1, r0]
 8011f5c:	18c0      	addlt	r0, r0, r3
 8011f5e:	4770      	bx	lr

08011f60 <_init>:
 8011f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f62:	bf00      	nop
 8011f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f66:	bc08      	pop	{r3}
 8011f68:	469e      	mov	lr, r3
 8011f6a:	4770      	bx	lr

08011f6c <_fini>:
 8011f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f6e:	bf00      	nop
 8011f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f72:	bc08      	pop	{r3}
 8011f74:	469e      	mov	lr, r3
 8011f76:	4770      	bx	lr
